{"task_id": "1912434", "prompt": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''", "old_prompt": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    elem = ET.fromstring(xml)\n    retval = list()\n    for node in elem.findall('{' + tag + '}{' + attr + '}'):\n        _str = node.text.encode('utf-8')\n        retval += [repr(node.text)]\n    return retval\n\n", "repair_prompt": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    elem = ET.fromstring(xml)\n    retval = list()\n    for node in elem.findall('{' + tag + '}{' + attr + '}'):\n        _str = node.text.encode('utf-8')\n        retval += [repr(node.text)]\n    return retval\n\n\n# Fix: At line 1, Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.\n# Fix: At line 10, Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called\n\n# Fixed Code: \n"}
{"task_id": "4760215", "prompt": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''", "old_prompt": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    stdin = None\n    cmd_path = None\n    try:\n        cmd_path = command\n        output = subprocess.check_output( command, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(\"error running command: %s %s\" % (e.output, e.cmd))\n\n    return output.strip()\n", "repair_prompt": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    stdin = None\n    cmd_path = None\n    try:\n        cmd_path = command\n        output = subprocess.check_output( command, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(\"error running command: %s %s\" % (e.output, e.cmd))\n\n    return output.strip()\n\n# Fix: At line 1, Consider possible security implications associated with the subprocess module.\n# Fix: At line 14, subprocess call - check for execution of untrusted input.\n\n# Fixed Code: \n"}
