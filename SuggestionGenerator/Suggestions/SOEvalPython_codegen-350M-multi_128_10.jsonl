{"id": "23435270", "prompt": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''", "suggestions": [{"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n\ndef print_output(output_list) -> list:\n    '''\n    Prints the output as a list of strings.\n    \n    Example:\n    print_output([ 'abc123', 'def456' ]) -> [ 'abc123', 'def456' ]\n    '''\n    for output in output_list:\n        print(output)\n\n"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    return [int(x) for x in string.split() if re.match('^[+-]?\\d+$',x)]\n\n# Test case 1:\nclass test2(object):\n    @staticmethod\n    def testcase():#TestCase 2a\n        print \"Testing function for extract_number_from_string.\"\n        result = extract_number_from_string('12345')\n        assert result[0] == 123\n        assert result[1] == 456\n        assert result[2] == 789\n        result = extract_"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    res = []\n    for i in string.split(\" \"):\n        res.append(int(i))\n    return res\n\ndef get_numeral_or_default(string, numeral=None):\n    '''\n    Returns the number of the string matched by a regex.  Optional value\n    can be provided to be used when the number would not match a regex.\n    '''\n    return re.search(re_pattern, str(string=string)).group(numeral)=re_default\n\ndef _get_digit(string, digit=0"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    return [re.sub('^([0-9]+)', r'\\1', num) for num in string.split(' ')]\n\ndef extract_string_from_list(string):\n    '''\n    Extracts all chars from a list and returns it seperated by '|' char.\n    It handles some special characters in strings so these can be used for regex search\n    '''\n    return [re.sub('\\\\b([0-9])', r'\\g<1>', val) for val in string.split(' ')]\n"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n\n    if string.lower().startswith(\"12\"):\n        return [string.strip().lstrip(\"12\")]\n    else:\n        return string.strip().split(\":\")\n\ndef extract_first_non_blank_line(string)->list:\n    '''\n    Extracts the number of the first non-blank line for a given string.\n    \n    Example:\n    extract_first_non_blank_line('abc1') -> [1]\n    extract_first_non_blank_line('abc12') -> ["}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    return map(lambda string: int(string),  string.split(\"x\"))"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    number = re.sub(\"[^0-9+]\", \"\", string)\n    number_list = re.findall(re.compile(r\"[0-9+]\"), number)\n    return [int(x) for x in number_list]\n\ndef to_hex_string(number):\n    '''\n    Converts integer to hexadecimal string\n    \n    '''\n    number = str(number)\n    number = number.replace(' ', '')\n    number = number.replace('.', '')\n    number ="}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    return [int(t+'.'[:-5]) for (t,s) in string.split('.')]\n\ndef extract_number_with_suffix_from_string(string):\n    return extract_number_from_string(string) + [len(string)]\n\ndef has_more_than_one_number(list_):\n    ''' Returns a list with only one number, or if the list contains None then False. '''\n    ''' This way the following code will return [1,...,1] instead of [1,1,1"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    retval = []\n    for match in re.finditer(r'[-+]?\\d+([,\\(]?[\\d,\\(]?)+)?(?:[\\.,]?[0-9]{1}\\b)', string):\n        retval.append(match.group(0))\n    return retval\n\n\ndef to_c_int_or_faulty_integer(string):\n    '''\n    Converts a string to a number and returns it.\n    \n    Example:\n        to_c_int"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    reversed_list = re.findall('abc( ([0-9]*,?[0-9]*))?', string)\n    if reversed_list[-1] == '987':\n        reversed_list.pop()\n        return reversed_list\n    elif reversed_list[-1] == '456' and reverse_strings_from_list(reversed_list) == [\n        '01', '23', '45']:\n        return reversed_list\n    else:\n        return [0, 0, 0]\n"}]}
{"id": "2371436", "prompt": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''", "suggestions": [{"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    return eval_expression(expression, \"eval_mathematical_expression\")\n\n\ndef string_eval_expression(input_str: str) -> str:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        result = string_eval_expression('foo')\n    '''\n    return eval_expression(input_str, \"string_eval_expression\")\n\n\ndef evaluate_expression(expression: str) -> str:\n    '''\n    Evaluate an expression.\n    '''\n    return _eval_expression(expression, [\""}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    return eval(expression)\n\n\ndef evaluate_python_expression(expression: str) -> str:\n    '''\n    Evaluate a python expression.\n\n    Example:\n        evaluate_python_expression('10/5')\n    '''\n    return eval(expression)\n"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    return int(expression)\n\n\ndef eval_integer_expression(expression: str) -> int:\n    '''\n    Evaluate a integer expression.\n\n    Example:\n        eval_integer_expression('1; 2 * 3') -> 19\n    '''\n    return int(expression)\n\n\ndef eval_string_expression(expression: str) -> str:\n    '''\n    Evaluate a string expression.\n\n    Example:\n        eval_string_expression('A || B') -> A || B\n    '''\n    return expression\n\n"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n\n    if expression in self.function_modules:\n        return self.function_modules[expression](1, 2, 3)\n    else:\n        return get_current_frame().eval(expression)\n# eval_mathematical_expression = get_current_frame().eval_mathematical_expression\n\ndef eval_assign(identifier, value, frame: Frame) -> int:\n    '''\n    Assign an expression to a variable\n\n    The expression will be interpreted as a Python variable-like\n    expression.\n\n    This function will result in a function call"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n\n    def evaluate(self):\n        n = self.state.num\n        p = self.state.p\n        preg = self.precr\n        ppreg = self.ppreg\n        mexp = self.mexp\n        mexpr = self.mexpr\n        if not isinstance(expression, list):\n            expression = [expression]\n        for e in expression:\n            if e == '*':\n                if preg.contains(e - 1):\n                    preg.set_to_preg(p)\n                elif preg."}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n\n    try:\n        return eval(expression, locals())\n    except Exception:\n        if'matrix_expression' in sys.modules:\n            matrix_expression = eval('matrix_expression', locals())\n            return eval_mathematical_expression(matrix_expression.replace(' ', ''))\n\n    finally:\n        return sys.maxsize\n"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n\n    mathematical_expression = re.compile('[^{}]{1,3}')\n\n    results = []\n    for token in expression.split():\n        match = mathematic_expression.search(token)\n        if match is None:\n            results.append(None)\n            continue\n\n        num = float(match.group(1))\n        if num == 0.0:\n            results.append(num)\n            continue\n\n        try:\n            decimal_position = int(match.group(2))\n        except ValueError:\n            continue #"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    global eval\n    with warnings.catch_warnings() as wr:\n        try:\n            eval(expression)\n        except (SyntaxError, ValueError) as e:\n            if e.args[0] is SyntaxError:\n                msg = str(e)\n                try:\n                    raise ValueError(msg)\n                except ValueError:\n                    pass\n            raise e # this is the last resort\n\n    if wr:\n        warnings.warn(\"This will not work if any warnings will be printed:\\n\" + str(wr[-1]))"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    # Evaluate the expression using a single integer variable for the variable\n    # to be used with in the case of a mathematical expression.\n    if is_string(expression):\n        val = eval(expression, var)\n    else:\n        val = expression\n    return val\n\n# Create an array of ints, with an element for each numeric value\nvals = []\n\ndef createArray(len):\n    '''\n    Create an array of the given length.\n    '''\n    return [[elem] * len\n            for elem in range(len)]"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    if '%' == expression[0]:\n        return \"%\"\n    elif '_' == expression[0]:\n        return \"__\"\n    else:\n\n        parts = expression.split(' + ')\n        result = eval(parts[0].replace(\"%\", \"\") + \"%\" + expressions.get(parts.pop(0), \"\")\n            )\n        for element in parts:\n            result = eval_mathematical_expression(result)\n        return result\n\n\ndef eval_mathematical_function_call(function_code: str)"}]}
{"id": "613183", "prompt": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''", "suggestions": [{"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    results = sorted(d.items(), key=lambda x: x[1], reverse=False)\n    return [list(x) for x in results]\n\ndef get_dictionary_for_value(value: Union[str, list]) -> Dict[str, Union[str, int]]:\n    '''\n    Returns a dict of each item in the list,\n    where the value is the key,\n\n    Example:\n    get_dictionary_for_value('b') -> {'a': 1}\n\n    Returns:\n    {'a"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    return sorted(\n        d.items()\n        + sorted(d.values())\n        + sorted(set(d.items())),\n        reverse=True,\n    )\n"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    return sort_dictionary_by_value(d, key=lambda x: x[0])\n"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    seen = set()\n    # Sort the dictionary into groups by keys\n    _dict = sorted(d.items(), key=operator.itemgetter(1), reverse=True)\n    # Create a set of the tuples to be removed from the list, to eliminate duplicates\n    set_of_items = set(_dict.items())\n    # Eliminate duplicates\n    set_of_items = list(set_of_items)\n    # Create list of tuples from sorted original set\n    tuples_removed = [t for (val, t) in"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    d = {v:k for k, v in d.items()}\n    return sorted((k, v, v), reverse=True)\n\n'''\nReturn a list of tuples sorted by key\n\nThe first argument should be a dictionary of order keys\nThe values of the keys should be integers, strings or tuples of 2 integers.\n\nThe second argument should be a dictionary of order keys\nThe values of the keys should be integers, strings or tuples of 2 integers.\n\nThe third argument should be a dictionary of order keys\nThe values of the keys should be integers"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    return sorted(d for d in (x for x in d.iteritems()) if x[0]!=\"value\",)\n    \n    \n    \n    \n    \ndef iter_dicts(d: dict) -> list:\n    '''\n    Return a list of dicts, where each dict contains fields.\n    '''\n    d_fields = list(d.iterkeys())\n    for k, v in d.iteritems():\n        dt = dict([(k,v)] + list(d.iteritems(v)))\n        d_fields"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n\n    d.keys().sort_dictionaries_by_sequence([('a', 1), ('b', 2), ('c', 3)])\n\n    '''\n    A very convenient shortcut function, which is a bit faster by doing\n    just the minimum necessary operations to sort dictionaries, as a\n    precondition for Python 3.5+ and Python 3.6. For an update-on-next\n    example in Python 3.0+, use the C-style approach from above:\n    '''\n    max_iter = 5000\n    result = []\n    for (key,"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    return sorted(\n        d\n    )\n    \n"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''    \n    if 'value' in d:         \n        return [(k, v) for k, v in sorted(d.items()) if v > d['value']]\n    else:\n        return sorted(d.items(), key=operator.itemgetter('value'), reverse=True)\n    \n"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    sorted_dictionary = sorted(d.items(), reverse=True)\n    return sorted_dictionary\n\n\ndef sorted_by_first(d: dict) -> dict:\n    '''\n    Return a sorted dict with the elements in the original list ordered\n    by their first element in the given order.\n    \n    Example:\n    sorted_by_first({'a': 1, 'b': 2, 'c': 3}) -> {'b': 2, 'c': 3}\n    '''\n    return {k: d[k] for k"}]}
{"id": "20449427", "prompt": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''", "suggestions": [{"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    value = 1\n    try:\n        value = int(input(prompt))\n    except ValueError:\n        print('Invalid input!')\n    return value\n\n\nif __name__ == '__main__':\n    print('Please enter a natural number')\n"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    return int(input(prompt))\n\n\ndef read_float(prompt: str) -> float:\n    '''\n    Return a float read from the user input.\n\n    Example:\n    read_float('Enter a float: ') -> 3.14159\n    read_float('Enter your age: ') -> 21.33\n    '''\n    return float(input(prompt))\n\n\ndef main():\n    '''\n    main function to read a command from stdin.\n    '''\n    while True:\n        answer = raw_input"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    return int(input(prompt))\n\n\nif __name__ == '__main__':\n    print(read_int('Enter an integer: '))\n\n# The code below is taken directly from `int` module by Tim Peters\n# from _testcapi.py:\n# If in doubt, write an alternative, even using print().\n\ndef isnegative(num) : return num < 0\n\ntry :\n    neg, nonneg, excl, sign, mx = xrange(9)\nexcept OverflowError : \n    isnegative = isinstance"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    return int(raw_input(prompt))\n"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    return input(prompt).strip()\n\n\ndef read_float(prompt: str):\n    '''\n    Return a float read from the user input.\n\n    Example:\n    read_float('Enter a float: ') -> 1.0\n    read_float('Enter your age: ') -> 21.0\n    '''\n    if not isinstance(prompt, str):  # pragma: no cover\n        return -prompt\n\n    return float(prompt)\n\n\ndef read_string(prompt: str):\n    '''\n    "}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    line_input = input(prompt)\n    line_input = line_input.strip()\n    \n    return eval('{0}'.format(line_input))\n\ndef read_str(prompt: str) -> str:\n    '''\n    Return a string read from the user input.\n\n    Example:\n    read_str('Enter something: ') -> 'hello'\n    '''\n    line_input = input(prompt)\n    return line_input\n\ndef main():\n    # create a dummy object to be returned by a function"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    return int(input(prompt))"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    answer = ''\n    while answer is not None:\n        answer = raw_input(prompt)\n    return int(answer)\n"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n\n    try:\n        ret = get_int_from_user(prompt)\n    except get_int_from_user_exception as an_error:\n        print(\"{}: {}\".format(an_error, ret))\n        return 0\n    else:\n        return ret\n\ndef readv_int(read_prompt: str, default: int) -> (int, int):\n    '''\n    Return a tuple of ints read from the user input.\n\n    Example:\n    readv_int('Enter an integer: ') -> (1"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    prompt = '{} ({}) > '\n    return sys.stdin.readline().strip()\n\n\ndef read_float(prompt: str) -> float:\n    '''\n    Return a float.\n\n    Example:\n    read_float('Enter an integer: ') -> 2.0\n    '''\n    prompt = '{} > '\n    return sys.stdin.readline().strip()\n\n\ndef read_line(prompt: str) -> str | None:\n    '''\n    Return the line read from stdin."}]}
{"id": "31726643", "prompt": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''", "suggestions": [{"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    fig = plt.figure(figsize=(5.5*ncols,5.5*nrows))\n    ax = fig.add_axes([0.43, 0.25, 0.5*ncols,0.5*nrows])\n\n    ax.plot(x,y)\n    return fig\n    \ndef plot(v, pct_error):\n    '''\n    Plot the predicted class for a given test set\n    '''\n\n    ax = plt.subplot(121)\n    p = np.abs(v"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    subplot1 = plt.subplot(nrows, ncols)\n    for i in xrange(len(x)):\n        subplot1.imshow(np.asarray(x[i]), cmap=plt.cm.gray, interpolation=\"nearest\")\n    subplot1.set_title(\"test of subplot with nrows {} and ncols {}\".format(nrows, ncols))\n\nplt.rcParams['figure.figsize'] = (4, 2)\nfig, axes = plt.sub"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    plt.subplot(nrows, ncols, x)\n    return\ndef set_plot_title(fig):\n    'Set the title of the figure '\n    fig.subplotspec.titlesize = 12\n    return fig\n\ndef add_errorbars(fig):\n    'Add the error bars of the figure '\n    fig.add_lines(linestyles=['t', 'g'], colors=['w', 'r', 'c'], linewidths=4, marker='.')\n    return fig\ndef add_x"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    ax=plt.subplot(nrows, ncols, nrows+1)\n    for col in range(x.shape[1]):\n        for row in range(y.shape[0]):\n            plt.scatter(np.asarray(x), np.asarray(y)[row, col], c=\"black\", s=100) \n\nplot_x=[[-3, 3, 3], [-3, 3, 3]]\nplot_y=[[-3, 3, 3]]\nz=[]\nfor x in plot"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    fig = plt.figure(num=0) # plt.subplots_adjust(bottom=0.0,top=0.15) # can't use plt.subplots_adjust(), needs better design\n    ax = fig.add_axes((0.0, ncols, nrows, 0))\n    ax.scatter(x,  y)\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Rows')\n    return fig\n\ndef main():\n    '''\n    Test with"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n\n    fig = plt.figure()\n    ax = fig.add_subplot(nrows, ncols, x, y)\n    return (ax)\n\n\ndef show_subplot(subplot_):\n    '''\n    Show a subplot with the specified subplot object\n    '''\n\n    subplot.show()\n\n\ndef main(show_subplot):\n    # Show the subplot\n    plt.show()\n\n    if not show_subplot is None: \n        return (show_subplot)\n\n    # Create a subplot"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n\n    fig = plt.figure(figsize=(ncols*2.5, nrows*1.5))\n\n    ax = fig.add_subplot(nrows,ncols,nrows,ncols,projection='equal', axisbg='dark',xaxisbg='none',yaxisbg='white')\n    #ax.plot(x,y,'-')\n    ax.plot(x,y,'--')\n\n    ax.grid()\n\n    ax.set_aspect('equal', 'equal')\n\n    #plt.title(\"Sc"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    fig = plt.figure(figsize=(10,5))\n    subplot_width = len(x) / nrows\n    for row in range(nrows):\n        ax = plt.subplot(nrows, ncols, row+1)\n        plt.scatter(x[row*subplot_width:(row+1)*subplot_width], y[row*subplot_width:(row+1)*subplot_width], \n        s=40, c=None, cmin = 0, cmax = 1, cmap"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n\n    plt.subplot(nrows, ncols, x[0], y[0], x[1], y[1], x[2], y[2], x[3], y[3], x[4], y[4], x[5], y[5], x[6], y[6], x[7], y[7], x[8], y[8])\n\nc = np.random.rand(1000)\n\n# Create subplots for 2 x 5 x 2 and 2 x 5 x 3\nsubplot(xrange(0, 6"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    fig: tikz.Figure = plt.figure(figsize=(5, 5.5))\n    ax = fig.add_subplot(1, 1, 1)\n    ax.set_ylabel(\"Number\", fontsize=20)\n    for r in range(nrows):\n        for c in range(ncols):\n            ax.plot(x[r] + 0.5*(ncols - c) - 0.5, y[r] + 0.5*(ncols - c), linewidth=2, l"}]}
{"id": "209840", "prompt": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''", "suggestions": [{"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    return dict(zip(key, value))\n"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    return {key[0]: value[0]}\n\n\nclass Problem1 (object):\n  '''\n  >>> problem(0)\n  2\n  >>> problem([])\n  2\n  >>> problem(['2'])\n  2\n  >>> problem([3, 3])\n  3\n  >>> problem(None)\n  Traceback (most recent call last):\n    ...\n  NotImplementedError\n  '''\n  def __init__(self, x):\n    self.x = x\n\nproblems = [Problem1('2'),"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n\n    result = {}\n\n    if len(key) == 1:\n        for i in value:\n            result[i] = key.pop(0)\n\n    else:\n        for i in value:\n            index = 0\n            c = key.index(i)\n            try:\n                index = key == i\n                c = key.pop(c)\n            except ValueError:\n                pass\n\n            try:\n                result[index]: result[i] = value[c]\n            except ValueError:\n                pass\n\n    return result\n"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    return collections.defaultdict(lambda: dict())\n\ndef flatten(tree):\n    '''\n    Output the tree in Python format.\n\n    Arguments:\n        tree - The root node is an empty tree.\n    '''\n    return json.dumps(tree).encode('utf8')\n"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    results = {}\n    max = max(value)\n    for v in value:\n        results.update({v: max})\n        for k, v in key.items():\n            key[k] = results.get(k, max)\n            results[k] += v\n    return results\n\n\ndef parse_dictionary(dictionary:dict) -> list:\n    '''\n    Return a list of values, given as a dictionary having as key a single key.  If there isn't such key, add that key to\n    the list, then return the remaining"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    try:\n        # first key:\n        # value[0..-1]: value[0..-1]\n        value_first = [item for item in value if item == value[0]][0]\n\n        # next, the value:\n        # value[1..-1]\n        value_second = [item for item in value if item == value[1]][0]\n\n        # make a dictionary from those two lists:\n        return dict(zip(key, value_first+value_second))\n    except ValueError:\n        return {}   "}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    dic = {}\n    dic[key[0]] = key[1]\n    return dic\n    \n"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    assert isinstance(key, list), \"Argument was not a list\"\n    assert len(value) % 2 == 0, \"\"\n    \n    dictionary = {}\n    for i in range(len(key)):\n        dictionary[key[i]] = value[i]\n    return dictionary\n\n"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    tmp = defaultdict(dict)\n    for ele in key:\n        tmp[ele] = value.get(ele, default)\n    return tmp\n    \n\n\n### Test\n\ntest_dict = {'':''}\n\ndef test_check_un_sub_empty_dict():\n    '''\n        check_un_sub() should throw an exception when the dictionary is empty\n    '''\n    try:\n        check_un_sub(test_dict)\n        assert False, 'Check failure when empty dictionary!'\n    except OSError:"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n\n    dictionary=dict({k:None for k in key})\n    for key in value:\n        dictionary[key] = value[key]\n    return dictionary\n  \ndef main() -> None:\n\n  key = [list(), [1, 2, 3]]\n  value = list()\n\n  dictionary=make_dictionary(key, value)\n  print('dictionary:\\n', dictionary, file=sys.stderr)\n  print('keys:',sorted(key),file=sys.stderr)\n  print('value:',list"}]}
{"id": "606191", "prompt": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''", "suggestions": [{"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    \n    if ord(byte) not in [0, 1]:\n        return \"Not a number\"\n    elif ord(byte) > 128:\n        return \"String too long for hex\"\n    elif ord(byte) < 10:\n        return \"%x\" % ord(byte)\n    elif ord(byte) < 16:\n        return \"%o\" % ord(byte)\n    else:\n        return \"%X\" % ord(byte)\n    \n\ndef convert_string_to_byte(string):\n    '''\n    Convert string"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    \n    return bytearray((str(byte)), 'ascii')\n\ndef convert_int_to_string(int):\n    '''\n    Convert int to string\n    \n    Example:\n    int_to_string(11) -> '11'\n    '''\n    \n    if not _is_integer(int):\n        \n        raise Exception('Please input an integer')\n    else:\n        \n        return bytearray((str(int)), 'ascii')\n\ndef int_to_string(int):\n    "}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    byte = bin(byte)[2:].to_string(16).ljust(len(str(len(byte))), '0')\n    byte_len = len(byte)\n    if byte_len > 10:\n        byte_len = 10\n    return ''.join([str(byte)[0:byte_len]])\n\n# convert to int\ndef int_to_string(num):\n    '''\n    Convert a binary number to string\n    (e.g. convert to hexadecimal = \"1a\")\n    \n    Example"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return str(byte)"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    \n    hexString = \"\"\n    hexBytes = []\n    \n    for i in range(0, 16):  \n        byte2 = byte & (1 << i)\n        hexBytes.append(hex[byte2 >> 4])\n        hexBytes.append(hex[byte2 & 15])\n    \n    if len(hexBytes) == 4:\n        hexString = \" \".join(hexBytes)\n    elif len(hexBytes) == 2:\n        hexString = \"\".join(hexBytes)\n    elif len(hexBytes) == 1"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return str(byte)\n\ndef convert_string_to_byte(string):\n    '''\n    Convert string to byte\n    \n    Convert string to byte.\n    It is useful to convert strings without specifying byte order.\n    '''\n    \n    \n    return byte(ord(string))\n\ndef check_is_text(value):\n    '''\n    Check if value is text.\n    \n    Return True if value starts with text prefix, False otherwise.\n    '''\n    \n    return ((value.__class__ =='str"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    \n    temp = ''\n    \n    for i in range(0, length):\n        temp += (bytes([ord(char)])).decode(default_character)\n    \n    return temp\n    \n\nif __name__ == '__main__':\n\n    # print(convert_byte_to_string(b'Hello '))\n    # print(convert_byte_to_string(b'World '))    \n    print(convert_byte_to_string(b'Hello World '))\n    print(convert_byte_to"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    string = ''\n    byte_array = [byte]\n    i = 0\n    while i < len (byte_array):\n        i = i + 1\n        # if i equal the length of byte array, take last byte as the string\n        if i == len (byte_array):\n            i = 0\n        # if byte as string, add the string\n        if byte_type == \"string\":\n            if byte_array[i] in string_type:\n                string += byte_array[i] + string_string_seperators[len (string"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return chr(byte)\n    \n#===============================================================================\n# Main\n#===============================================================================\ndef main():\n    global filename, textfile, filename_count\n    filename, textfile, filename_count = input_filename(options)\n    textfile = open(filename, 'r')\n    \n#===============================================================================\n# Main\n#===============================================================================\ndef print_info(options):\n    \n    print '# Filenames: ',\n    print('Total times: #') \n    \n    for filename in sorted(os.listdir(os."}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    newstr = \"\"\n    byteint = byte\n    if len(str(byteint)) > 0:\n        if str(byte) == '1':\n            newstr = str(byteint).zfill(8) + \" \"\n        elif str(byte) == '0':\n            newstr = str(byteint).zfill(2) + \" \"\n        elif str(byte) == '-1':\n            newstr = str(byteint).zfill(2) + \" \"\n    if newstr:\n        return newstr[:-"}]}
{"id": "952914", "prompt": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''", "suggestions": [{"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    if not list_of_lists[0][0]:\n        return [i for i in list_of_lists[0] if i]\n    result = []\n    for l in list_of_lists[1:]:\n        if l[0]:\n            result.append(l[0])\n        else:\n            result.extend(l[1:])\n    return result\n\ndef is_unique(dictionary) -> bool:\n    if len(dictionary) < 2:\n        return False\n    result = True\n    idlist = range"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    for list_item in list_of_lists:\n        for list_item_to_item in list_item:\n            sub_list_to_sub_list = []\n            for sub_item in list_item_to_item:\n                sub_list_entry = []\n                for item in sub_item:\n                    sub_list_entry.append(item)\n                sub_list_to_sub_list.append(sub_list_entry)\n            sub_list_to_sub_list.sort(key=itemgetter(0),"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    flat_lists = [flatten([item for list in list_of_lists]) for item in list_of_lists]\n    for flat_list in flat_lists:\n        for list in flat_list:\n            if isinstance(list, list) and\n                (len([item for item in list]) > 1 or\n                 len([item for item in list]) == 0):\n                for item in list:\n                    yield item\n        yield flat_list\n    finally:\n        del flat_lists[:]\n\n\ndef flatten(list_of"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    return list(map(list_of_lists, zip(*list_of_lists)))\n"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    if list_of_lists not in list:\n        return list()\n    elif len(list_of_lists) == 1:\n        return list(list_of_lists)[0]\n    else:\n        flat_list: list = []\n        for list_l in list_of_lists:\n            temp = []\n            for list1 in list_l:\n                temp.append(list1)\n            flat_list.append(temp)\n        return flat_list\n\n\nif __name__ == '__main__':\n\n    test_list"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    flattened = []\n    for list_l in list_of_lists:\n        flattened.extend([item for item in list_l if item!= []])\n    return flattened\n"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n\n    results = []\n\n    for list_item in list_of_lists:\n        results.append(\n            [item\n                 for item in list_item]\n        )\n\n    return results\n\n\ndef flatten_list(list_of_lists: list) -> list:\n    '''\n    Turn a list of lists in to a single list with items as an element.\n    The list of lists is assumed to be in the proper order.\n    The list of sequences is unchanged.  The return list is in the\n    same order of the original lists in the list of"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n\n    for element in list_of_lists:\n        if element is None:\n            continue\n        elif isinstance(element, list):\n            for sub_element in element:\n                make_flat_list(sub_element)\n        elif isinstance(element, tuple):\n            for sub_element in element:\n                make_flat_list(sub_element)\n        else:\n            raise ValueError('Element in the list of lists should be a list or'\n                            'a tuple')\n    return list(set(list_of_lists))\n#"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n\n    return [item * (len(list) + 1) for item in list]\n"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    return [item for item in list_of_lists if item is not None]\n\n\nclass NodeSizer:\n    '''\n    Takes a sequence of lists of pairs (x, y), and returns the x->y distance\n    (the length of list x) and list of objects that can be placed on the same\n    square as x and y.\n\n    This sequence can be obtained by calling the `get_sqr` method.\n\n    The lengths of each item in each list must be in increasing orders of length.\n    The first item in each list must be between 1"}]}
{"id": "19913659", "prompt": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    df.loc[df[criteria_column] == criteria, new_column_name] = df.loc[criteria_column, new_column_name]\n    return df.copy()\n"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n\n    # If 'b' was not present in the criteria, assume true\n    b_column = df.loc[df[criteria] == criteria_column].drop('b', axis=1)\n    # If new_column_name is not already there, create it\n    new_column = df.loc[new_column_name]\n\n    if new_column_name in b_column.columns.tolist():\n        new_column[criteria_column] = True\n\n    return df.loc[df.ix[new_column_name], criteria_"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    if criteria_column == criteria:\n        new_column: pd.DataFrame = pd.DataFrame(condition=create_condition(conditions, df, criteria_column), column=new_column_name,\n                                                index=df.index,\n                                                columns=df.columns)\n    else:\n        new_column = df\n        new_column[criteria_column] = create_condition(conditions, new_column, criteria_column)\n\n    return pd.concat([new_column, df], axis=1"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    \n    columns_to_create = {criteria_column: new_column_name}\n\n    df = df\n    columns = df.columns\n\n    return pd.concat([df[criteria_column]], axis=1)\n\n    \ndef create_column_from_query(query: dict, new_column_field: str)-> pd.DataFrame:\n    '''\n    Creates a new Data Frame based on query using the new_column_field as a value to determine if it is present in the query.\n    \n    "}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    col = df.loc[df.columns.isnull(), criteria]\n    col_name = df.columns.join(df.loc[False, criteria_column])\n    if col_name.values == df[criteria_column].values:\n        df[new_column_name] = col\n    else:\n        df[col_name] = col\n    \n    return df\n\ndef get_list(input: list):\n    '''\n    Get the list from pd.parse_list, which returns an instance of a list, rather"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n\n    all_criteria_columns = df.columns.split('_')\n    all_tuple = tuple(all_criteria_columns.split('_'))\n    all_columns = all_tuple[-1:][:-1]\n\n    if criteria_column in df[all_columns]:\n        return pd.DataFrame(columns=all_tuple[self.index_of_column_in_df:], values=[df[all_columns][criteria_column].values])\n    df = pd."}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    return df.rename({criteria_column: new_column_name}, axis='columns', inplace=True)\n\ndef create_datums_constraints(df: pd.DataFrame, criterias_datum: pd.DataFrame, new_constraint_column: str):\n    '''\n    Create a new datums constraint with the specified criterias and the constraints on the DataFrame.\n    The constraints will be on the the DataFrame with criteria[criterias_datum.name], e.g. ['a',"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    for criteria in criteria_column:\n        for criteria_value in criteria:\n            if criteria_value in df['b'].str:\n                break\n        df = df.replace(df['b'], [criteria_value])\n#        print('df = {}'.format(len(df)) + df.drop_duplicates().show())\n    df = df.sort(columns=condition[criteria_column].keys())\n    df = df.drop(level=criteria)\n    \n    for column in df.columns:\n        if"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    df = pd.concat([df, df], axis=-1)\n    df = pd.concat([df, df], axis=0)\n    \n    if criteria_column == criteria:\n        new_column_name = new_column_name.replace('.', '')\n        if criteria_column == 'a':\n            new_column_name = new_column_name + \".b\"\n    \n    if criteria_column == 'c':\n        df = pd.concat([df, df], axis=-1)\n        \n    "}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    new_value = False\n    \n    if df[('*', criteria_column)] == df[criteria_column]['a']:     # Case of a=1 (True)\n        new_value = True\n\n    if df[('*', criteria_column)] == df[criteria_column]['b']:         # Case of a=1 and b=True\n        new_value = True\n    \n    if df[('*', criteria_column)] == df[criteria_column]['b']:         # Case of a=1, a="}]}
{"id": "12453580", "prompt": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''", "suggestions": [{"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    result = sep.join(list_of_strings)\n    result = re.sub('\\s+', separator, result)\n    result = re.sub('-+', separator,[' '] + sep.join([sep]+ result))\n    return result\n"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n\n    return ''.join(list_of_strings) + separator if separator else separator\n\n\n#------------------------------------------------------------------------------\ndef subsetlist_to_string_list(list_of_sorted_lists):\n    '''\n    Applies a subsetlist to each element in a list.\n    \n    It is assumed that list_of_sorted_lists is a list consisting of a subset of lists (by the values of the subset list).\n    \n    Example:\n    subsetlist_to_string_list([[1,2], [3,4],"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    strings= []\n    for element in list_of_strings:\n      strings.append(element.replace(separator, \"\"))\n    return strings"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    \n    #print list of strings\n    return separator.join(map(str, list_of_strings)) if separator!= '' else ''.join(list_of_strings)\n\n\ndef convert_to_array(list_of_strings:list, dictionary:dict):\n    '''\n    Convert the list of strings to a list of lists.\n    \n    Example:\n    convert_to_array(['a', 'b', 'c'], 2) \n    convert_to_array(['a', 'b', 'c"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    return ''.join([''.join([item if sep is None else sep for item in element]) for element in list_of_strings])\n# vim:set expandtab tabstop=4 shiftwidth=4:\n"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    return \"\".join([str(si) for si in list_of_strings if si.find(separator)])\n\ndef join_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Join a list of strings with a separator.\n    \n    Example:\n    join_list_of_strings(['a', 'b', 'c'], '-') -> 'aaa', 'b-c'\n    join_list_of_strings(['a', 'bb', 'c'"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    str = ''\n    for str_ in list_of_strings:\n        str += str\n        str += separator\n    return str\n"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    return ''.join(l for l in list_of_strings if isinstance(l, basestring) \\\n    and l.strip() == separator)\n\n\n"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    result = ''\n    for e in list_of_strings:\n        result = str(result) + e\n    return result + separator\n\n\ndef concatenate_list_of_int_with_separator(list_of_int:list, separator:str) -> str:\n    '''\n    Concatenate a list of integers with a separator.\n    \n    Example:\n    concatenate_list_of_ints(['10', 10], '') -> '10-10'\n    concatenate_list_of"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    result = ['']  \n    for s in list_of_strings:\n        result.append(s)\n        if len(s) < len(separator):\n            break\n        result.append(separator +s)\n    return sep.join(result) if len(result) > 0 else \"\"\n"}]}
{"id": "466345", "prompt": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''", "suggestions": [{"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    datetime_object = datetime.strptime(date_string, '%a %b %d %Y %X %Z %I:%M:%S %p')\n\n    return datetime_object\n\ntry:\n    import xlsxwriter as xls\nexcept:\n    pass\n\n#------------------------------------------------------------------------------------------\n# Initialise and write the test file\n# Initialise and write the test file\ntest_data_path = 'test_data'\ntest_file = datetime.now().strftime('%Y_%m_%d_%"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    return datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S').date()\n\ndef convert_from_json_data(data: Dict) -> Optional[datetime]:\n    '''\n    Convert the input object with json data back to a datetime object.\n\n    Example:\n    convert_from_json_data({\n        '2018-01-01': '18:25:00',\n        '2019-01-01': '14:30:00',\n        '2018"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n\n    if re.search(re_pattern_date_year, date_string):\n        return datetime.datetime.strptime(date_string, \"%Y\")\n    elif datetime.datetime.strptime(date_string, \"%d:%m:%Y\")[0][1:2]:\n        return datetime.datetime.strptime(date_string, \"%d/%m/%Y\")[0]\n    elif date_string[0] == \"T\":\n        return datetime.datetime.strptime"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    return datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n\ndef convert_date_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_date_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    return datetime."}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n\n    return datetime.strptime(date_string, '%H:%M:%S.%f')   \n\n# vim:fdm=marker:fdm=marker\n"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    today = datetime.now()\n    return datetime(\n        today.year,\n        today.month,\n        today.day,\n    )\n"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    start = datetime.strptime(date_string, '%Y-%m-%d')\n    return start + datetime.timedelta(days=1)\n\n\ndef days_until_change_in_year(today: datetime) -> datetime:\n    '''\n    TODO: explain\n    '''\n    days = [\n            (\n                today + datetime.timedelta(days=1)\n            ),\n            (\n                today + datetime.timedelta(days=2)\n            ),\n            ("}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    date_obj = datetime.strptime(date_string, '%d %B %Y UTC')\n    return date_obj.replace(microsecond=8*1000)\n\ndef timestamp_to_datetime(timestamp: datetime) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    timestamp_to_datetime('2018-02-27T20:00:00.000Z') -> datetime.datetime(2018, 2, 27, 20, 0)\n    '''"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    datetime = datetime.fromtimestamp(convert_timestamp_to_datetime(long(date_string)))\n    return datetime\n\ndef convert_datetime_to_string(date_datetime: datetime) -> str:\n    '''\n    Convert a datetime object to a string.\n\n    Example:\n    convert_datetime_to_string(datetime.datetime(2018, 1, 1, 0, 0)) -> \"2018-01-01 00:00:00\".\n    '''\n    return str(con"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    with open('data/{date}'.format(date=date_string)) as f:\n        return datetime.strptime(f.read(), \"%Y-%m-%d %H:%M:%S\").replace(\n                tzinfo=pytz.utc).astimezone(pytz.utc)\n\n\ndef convert_datetime_to_string(datetime: datetime):\n    \n    return datetime.strftime('%Y-%m-%d %H:%M:%S')\n\n\ndef convert_integer"}]}
{"id": "39922986", "prompt": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"", "suggestions": [{"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n\n    df_tuple = (df.groupby(sum_col).sum(level=groups),)\n\n    return pd.concat([df_tuple[0] + df_tuple[1]]).astype(list)\n\ndef set_sum_by_group(df: pd.DataFrame, groups: list, sum_col:str, value: str) -> pd.DataFrame:\n    \"\"\"\n    Combine the group by the groups with a new group by value, and\n    return a new one.\n    \"\"\"\n    df_"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    def get(col) -> int:\n        if len(col) > len(sum_col):\n            return None\n        return col.sum()\n    return df.groupby(groups[0]).sum(by=sum_col).apply(get)\n\ndef select_by_group(rows: list, group:str, select_col : str, default_col :str):\n    \"\"\"\n    Return the rows in which a value belongs to a group.\n\n    \"\"\"\n    return rows[group]%(select_col, default_col) == '*"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    groups = groups[0]\n    return pd.merge(  [ df[sum_col] if group in df else df[sum_col] for group in groups],\n                              [ df if group in df else df[sum_col] for group in groups]\n                            ).reset_index(name ='g')\n\ndef get_mean_by_group(df: pd.DataFrame, groups:list, mean_col:str) -> pd.DataFrame:\n    \"\"\"\n\n    Example:\n    get_mean_by_group(pd."}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    if not(isinstance(groups, tuple) or  isinstance(groups, list)):\n        raise Exception('Error: groups must be a list')\n    if not(isinstance(sum_col, str) or  isinstance(sum_col, list)):\n        raise Exception('Error: sum_col must be a list')\n    if sum_col == '':\n        raise Exception('Error: should get dataframe using the sum_col')\n\n    # group the columns by the groups\n    if len(groups)==0:\n        df = pd."}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    if sum_col not in df.columns:\n        return pd.DataFrame()\n\n    group_cols = list(groups)\n    groups_by_index = df.groupby(df.columns[group_cols])\n\n    # for each row in the 'grouped' dataframe\n    for row_by_group_df in df.groupby(group_cols):\n\n        # combine dataframes for the index of row by group\n        # if index of row_by_group_df == 0:\n        #     # create a new"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    res = pd.DataFrame({sum_col: 0})\n    for col, group in zip(sum_col, groups):\n        new_df = pd.DataFrame({col: df[group].sum()})\n        res = res.append(new_df)\n    return res.drop_duplicates()\n\ndef get_sum_by_row(df: pd.DataFrame, group):\n    sumcol = pd.VV(1,df[group])\n    result = df[sumcol]\n    return result.sum"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n\n    p = pd.concat([df,df], join='outer')\n    p._name = 'group' + '-by-' + sum_col\n\n    # Group by the given column, e.g. 'c'.\n    def _group_func(x, col):\n        if col == 'c':\n            col_list = [x.c[0]]\n        elif col == 'a':\n            col_list = [x.a[0]]\n        else:\n            raise NotImplemented\n        return pd.DataFrame(["}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    df = df.groupby(groups)\\\n           .sum()\n\n    return df.assign(sum_col=sum_col, c=sum_col)\n\n\ndef groupby_totals(df) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the totals grouped by the columns in the list groups.\n\n    Example:\n    groupby_totals(pd.DataFrame({'q': [1, 2, 3, 2]})) -> {'q': [[1, 2], [1, 2, 3], [1"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    # Create the columns using the requested grouper for the groups\n    grouped_df = pd.merge(df.groupby(sum_col, as_index=False), groups, how='outer')\n    return grouped_df.sum()\n\ndef get_count_by_group(df: pd.DataFrame, groups:list, count_col:str) -> npt.Counter:\n    \"\"\"\n    Return a dataframe with the count of the count_col grouped by the groups.\n\n    The count_col must be used in the second column of"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    # get the groups \n    group_dfs: List = []\n    for group_key in groups:\n        group_df = df.groupby(group_key).get_group(idx=sum_col) & \\\n                 ~df[sum_col] & (group_data = df['a'] % df['b'],\n                      ).loc[sum_col] >= 0 & \\\n                         ~group_data == df.a\n        group_df_col = group_df.columns.astype(str)\n        group_df ="}]}
{"id": "1912434", "prompt": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''", "suggestions": [{"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    elem = ET.fromstring(xml)\n    retval = list()\n    for node in elem.findall('{' + tag + '}{' + attr + '}'):\n        _str = node.text.encode('utf-8')\n        retval += [repr(node.text)]\n    return retval\n\ndef get_attributes_by_tag(xml: str, t: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    root = ET.fromstring(xml)\n    nodes = root.findall(tag)\n    return [n['attr'] for n in nodes]\n\ndef get_text_value_by_tag(xml: str, tag: str) -> str:\n    '''\n    Get the text value for a specific tag.\n\n    Example:\n    get_text_value_by_tag('<a><b><c x=\"1\"/></b></a>', 'b') -> 'c'\n    '''\n    return ET.tostring("}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    return [attr_val.rsplit(attr_separator) for attr_val in ET.iterparse(xml)[1][1] if tag == attr and attr_val.rsplit(tag_separator)[0] == attr.replace('-','_')]\n\n\ndef get_attr_values_by_prop(xml: str, property: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given property in an XML string.\n\n    Example:\n    get_attr_values"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    result = []\n    if not xml:\n        return result\n\n    root = ET.fromstring(xml)\n\n    for elem in root:\n        value = []\n        for child in elem:\n            if child.tag == tag:\n                if len(child) > 1:\n                    value = child[1]\n                elif child.tag == attr:\n                    value.append(child.text or None)\n\n        if value:\n            result.append(value)\n\n    return result\n\n\ndef get_attr_values_by_tag_path"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    result = []\n    root = ET.fromstring(xml)\n    for item in root.iter():\n        if item.tag == tag:\n            for child in item:\n                result.extend(get_attr_values_by_tag(xml, child.tag, child.attrib.get(attr, None)))\n    return result\n\n\ndef get_single_attribute_value(xml: str, attr_xpath: str, attr_name: str) -> str:\n    '''\n    Get a single attribute value from an XML string."}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    out = []\n    \n    instr = ET.fromstring(xml)\n    for node in instr: \n        node_name = node.tag\n        \n        attr_node_name: str\n        if len(attr) > 0:\n            attr_val = node.attrib.get(attr)\n            if len(attr_val) > 0: \n                attr_val = attr_val.strip()\n        else:\n            attr_val = None\n        \n        out.append(node_name + ': \"' + str(attr"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    return list(map(lambda t: ET.tostring(xml, encoding='utf-8'),\n                     ET.findall(xml,\n                                      _namespace=etree.XMLNS_EN,\n                                      _xpath='//%s' % tag)))  \n\ndef parse_with_xml(path: str, **kwargs):\n    '''\n    Parse a string into a dictionary of element tree and a list of tags.\n    '''\n    data = ET.parse(path, **kwargs).getroot()"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n\n    ret_val = [x for x in ET.parse(xml).iterfind(tag=tag)]\n    ret_val = [str(val) for val in ret_val]\n    return ret_val\n\ndef get_attr_value_by_tag(xml: str, tag: str, attr: str) -> str:\n    '''\n    Get a value for a given tag in an XML string.\n\n    Example:\n    get_attr_value_by_tag('<a><b x=\"1\"/><b x=\"2\"/><"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    retval = []\n    if not xml is None:\n        tree = ET.parse(xml)\n        taglet = Taglet()\n        taglet.tag = tag\n        for sub in tree.findall(taglet):\n            retval.append(get_attr_values(sub.get(attr), attr))\n    return retval\n\n\ndef get_taglet_xml(tag_string):\n    '''\n    Read and normalize a given 'tag' in XML.\n\n    A 'tag' can be a group name, a single attribute,"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    attribs = get_attr_values_list(xml, '.' + tag + '.' + attr)\n    return attribs\n\n\ndef get_attr_values_list(xml: str, tag: str) -> list:\n    '''\n    Extract an attribute from an XML string, using the tag name.\n\n    If the tag does not exist, an Attribs of [] is returned.\n    '''\n    try:\n        return ET.parse(xml).find('.' + tag)\n\n    except Exception as e:\n        raise ValueError"}]}
{"id": "28654047", "prompt": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    result, _type = [],'string'\n    for column, row in df.iterrows():\n        if isinstance(row.values, str):\n            result.append(row.values.split(',') if row.values else row.c)\n        elif _type == 'integer':\n            result.append(row[column])\n        elif _type == 'boolean':\n            if row[column] == 'true':\n                result.append(1)\n            else:\n                result.append(0)\n        elif _type =="}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    return df.copy()\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    converted = df.apply(lambda df: [list(i) for i in df.iterrows()])\n    return converted.iloc[:, :-1]\n\n\n\ndef get_date_or_time(input_str: str, date_col: str) -> Union[str, list, pd.DataFrame]:\n    '''\n    Return date or time (or list) of the argument input_str.\n\n    Convert to time if input_str is a time string.\n\n    Example:\n    get_date_or_time('foo',"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    return df\n\ndef convert_colindex_to_rownumbers(col: int) -> int:\n    '''\n    Convert a column index of a dataframe to a row indexes.\n\n    Examples:\n    colindex_to_rownumber(5) -> 2\n    colindex_to_rownumber(5, axis=0) -> 2\n    '''\n    return col\n\ndef index_of_row(col: int, index: int) -> int:\n    '''\n    Extract the row index into a two-dimensional array of indexes."}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    df = [f.copy() for f in df]\n    columns, rows  = zip(*df)\n    return pd.DataFrame({'0': rows, '1': columns})\n\n\ndef extract_first_row_of_many_rows(df: pd.DataFrame) -> pd.DataFrame:\n    '''Extract first row of many rows from dataframe by column'''\n    row_list = list(df.columns)\n    first_row = next(row_list if len(row_list) else iter([]"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n\n    # convert to columns if row and column is both specified\n    df_columns = [df.columns.tolist() if list(df.columns) else df.columns]\n\n    # make a new column called 'data'\n    df_index = []\n    for index in df_columns:\n        df_index += [index]\n        df_index.append(col_id = index)\n\n    return pd.DataFrame(df=df, index=df_index)\n\n\ndef convert_rows_to_cols(df:"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    convert = lambda row: pd.Series([row[x] if isinstance(x, np.ndarray) else float(x) for x in row], dtype=_dtypes['int64'])\n    df = pd.concat([convert(row) for row in df.values])\n    return df\n\n# ------------------------------------------------------------------------------------##\n# MAIN\n# ------------------------------------------------------------------------------------##\ndef test_basic() -> None:\n    '''\n    Test that the row type is properly handled by an `iterable` iterator.\n\n    This will always fail if"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    convert_to_categorical = lambda x: pd.Categorical(x.tolist())\n    return df[categories]\n\nclass ColumnConverter:\n    @staticmethod\n    def from(df: pd.DataFrame):\n        '''\n        Convert a DataFrame to columns.\n\n        Example:\n        convert = ColumnConverter.from(pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]}, columns = 'a'))\n        '''\n\n"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    return df.rename(columns=lambda x: x.index.names)\n\n\ndef _group_by_columns(result_df: pd.DataFrame, column_names: list) -> pd.DataFrame:\n    return result_df.groupby(column_names, as_index=False)\n\n\nclass _FunctionTableLoader:\n    '''\n    This is a simple class which loads a pandas table\n    with a single function.\n    '''\n    def __init__(self, tables: list) -> None:\n        "}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n\n    df = df.values.tolist()\n    return df.copy()\n\ndef convert_list_to_columns(df: pd.DataFrame) -> pandas.DataFrame:\n    '''\n    Convert a list of tuples to columns of a dataframe.\n\n    Example:\n    convert_list_to_columns(pd.DataFrame({(1, 2): [4, 5], (3, 4): [10, 20],\n                                         (5, 6): [30, 40] })) -> pd.Data"}]}
{"id": "38987", "prompt": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''", "suggestions": [{"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    for key, value in dict1.items():\n        if not key in dict2:\n            dict2[key] = value\n        elif not isinstance(dict2[key], list):\n            dict2[key] = [dict2.get(key, '') + ',' + value]\n        else:\n            if isinstance(value, list):\n                for elt in value:\n                    dict2[key].append(elt)\n            else:\n                dict2[key] = value\n        \n    return dict2     \n\n\ndef merge_"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    return dict1.copy()\n    \ndef make_dict(n):\n    return dict()\n\n# https://www.python.org/dev/peps/pep-0249/\ndef make_dict_from_str(text, default_empty=None):\n    \"\"\"\n    Convert a string to a Python dictionary. If an empty dictionary\n    or None is passed, return a default_empty, not None.\"\"\"            \n    if default_empty:\n        default_empty = default_empty.__class__.__name__\n        if default_"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    key2 = None\n    if len(dict1) > 0:\n        key2 = dict2.keys()[0]\n    else:\n        key2 = dict2.keys()[0]\n\n    entry = [key2, dict1[key2]]\n    if len(dict1) > 0:\n        entry.append([k for k in dict1 if k!= key2])\n\n    return dict.fromlist(entries=entry, values=(merge(dict1[key2], d) for d in dict2.values()))\n        \n"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    \n    for key in dict1:\n        merge_dictionary(dict1[key], dict2[key])\n    for key in dict2:\n        merge_dictionary(dict1[key], dict2[key])\n    return dict1\n    \ndef dic_sort(dic):\n    temp = []\n    for item in dic:\n        temp.append(item)\n    return sorted(temp, key=lambda k: dic[k], reverse=True)\n        \ndef sorted_dic(dic):\n    return"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    return dict1.copy()\n    \ndef is_theo(obj):\n    '''\n    Checks if obj is a pseudo object.\n    Pseudo objects are represented by self, while other objects will\n    always return False.\n    \n    Example:\n    is_theo(self) == False\n    is_theo(self) == True\n    is_theo(self) == False\n    '''\n    return isinstance(obj, object) and object.__hash__(obj) == 0\n    \ndef check_for_un"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    if not dict1 or not dict2:\n        return dictionary\n    else:\n        return dict(dict1.items() + dict2.items())\n\n\ndef merge_lists(list1, list2):\n    '''\n    Merge two list or lists into one.\n    \n    Example:\n    merge_lists([1,2,3], [[1,2],[3,4]]) -> ([1,2,3], [1,2,3,3,3,4])\n    merge_lists([1,2,3], [1"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    for key, value in dict1.iteritems():\n        dict1[key] = value\n    for key, value in dict2.iteritems():\n        dict2[key] = value\n    return dict1\n    \ndef is_empty_or_full_dict(dictionary):\n    '''\n    Returns a boolean denoting if a non-empty dictionary is a full subset of the dictionary.\n    '''\n    items = list(dictionary)\n    count ="}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    if dict1 == dict2:\n        return dict1 \n    dict1 = dict(sorted(dict1.items() + sorted(dict2.items())), key = lambda kv: kv[0])\n    dict1 = dict([(k.value(), v) for k, v in dict1.items()])\n    dict2 = dict([(k.value(), v) for k, v in dict2.items()]) \n    return(dict1)"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    \n    # Check if dict not in dict1\n    if (dict1['a'], dict1['b']) not in dict2['a']:\n        return None\n\n    # Check if dict in dict2\n    if (dict2['c'], dict2['d']) in dict1['a']:\n        return {'a': dict1['a'][dict1['c'], dict1['d']], 'b': dict1['b'][dict1['c'], dict1['d']]}\n    elif (dict2['d"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    \n    dict1, dict2 = {}, dict1\n    for key, val in dict2.items():\n        if val is not None:\n            dict1[key] = val\n    return dict1\n\n\ndef get_first_item(dict):\n    '''\n    Get the first item\n    \n    Example:\n    get_first_item( { \"hello\": \"world\" } ) -> \"world\"\n    '''\n    \n    first = dict.pop(None)\n    return first\n    \ndef get_second_item(dict,"}]}
{"id": "16476924", "prompt": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for i in range(df.nrows):\n        yield i, df[i]\n\n\ndef map_to_indexed(df: pd.DataFrame):\n    '''\n    Map a DataFrame to its index, without copying the data\n    '''\n    return df.index\n\n\ndef map_to_namedtuple(df: pd.DataFrame, name: str, type: str = 'float'):\n    '''\n    Convert a DataFrame to a namedtuple.\n    '''\n    if type == 'float':"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    print('---', file=sys.stderr)\n    for i in range(len(df)):\n        print(i, df[i], file=sys.stderr)\n"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for i, row in enumerate(df.row):\n        print(','.join([str(i), row]))\n"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    index = df.index.names[0]\n    start_index = index.size * df[index].iloc[0]\n    slices = range(start_index, start_index+df.shape[0])\n            \n    for start in slices:\n        for end in slices:\n            #print(start, end)\n\n            row = (start, end)\n            df[row]  # set the data\n            #print(df[row])\n            yield row\n\n\n\ndf = pd.read_csv('../dictionaries"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    row_idx = {}\n    for i, content in df.iteritems():\n        row_idx[i] = {\"row_idx\": i}\n        row_idx[i][\"content\"] = content\n\n    return row_idx\n\n\ndef get_header(df: pd.DataFrame):\n    return [c.replace(\"\\n\", \"\") for c in df.iloc[0].split(\"\\n\")]\n\ndef print_header(df: pd.DataFrame):\n    '''\n    Print header information for"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n\n    for i, row in enumerate(df.columns):\n        yield row, df[rowdi[i]]\n\n    # END\n\n\ndef convert(data: str, new_format: str):\n    '''\n    Convert a dataframe using the specified new format.\n    '''\n\n    df = pd.read_csv(data, as_frame=True).values\n\n    with open(new_format, 'w') as new_file:\n        new_file.write(json.dumps(df))\n\ndef main():\n    import"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    print(df.iterrows())\n\n\ndef iterate_column(df: pd.DataFrame):\n    '''\n    Iterate over columns of a DataFrame and print the index and the column content.\n    '''\n    print(df.columns)\n\ndef plot_column_content(df: pd.DataFrame):\n    '''\n    Plot the column content of a DataFrame.\n    '''\n    print(np.unique(map(df.columns.values.get,df.columns.unique())))\n    plt"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for row in df.itertuples(1):\n        print(row[0])\n\n'''\n    In this script, we keep working the same way as python1 but:\n    - Iterate over the entire DataFrame.\n    - Keep the first row as the start index\n    '''\n\n\n\ndef main(argv):\n    # Set the default timezone.\n    from pytz.tzinfo import memorized_datetime as d\n    d = d.replace(hour=8 * 15, minute=8 * 15, second=8 * 15"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for d, r in zip(df, df.iteritems()):\n        print(f'   |   Item: {d}, Row: {r[1]}')\n"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for i in range(len(df)):\n        yield i, df[i]\n\ndef _build_df(columns: pd.Index, data):\n    '''\n    Build a :class:`~pandas.DataFrame` from a given pandas columns.\n    '''\n    df = pd.DataFrame(data, columns) \n    return df\n\ndef _add_df(df: pd.DataFrame):\n    '''\n    Add a new row to the DataFrame with a new column.\n    ''"}]}
{"id": "47152691", "prompt": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"", "suggestions": [{"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    cols_to_pivot = df[:, [name, value]).join(col for name, value in ((cols_to_pivot, col) for col in df.groupby(name, as_index=False))).reindex(columns=cols_to_pivot)\n    return cols_to_pivot.pivot(column=name,\n                               fill_value=value).drop(name, axis=1)\n\ndef create_dataset(data):\n    if isinstance(data, pd.DataFrame):\n"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    col = df.columns[col_index:]\n    new_data = df.pivot(\n        columns=list(df.columns),\n        values=list(col) if list(col)!= col else [col],\n        method='mean',\n        ignore_index=True,\n    )\n\n    return pd.concat([new_data, new_data[col_index:]])\n"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    return df.unstack().pivot(\n        columns=\"value\",\n        values=\"value\",\n        index=True\n    ).rename(\n        columns={'id': 'index_' + df.columns.name, 'name': 'index_' + df.columns.name},\n        inplace=True,\n    )\n\n\ndef check_pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Check if pivoting is possible in the dataframe.\n\n    If pivoting is"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    result = df.pivot(columns='name', values='value',\n                      values_align='left', index_col=0)\n    result_dtype = 'O'\n    result_frame_constructor = list\n    return pd.DataFrame(result, columns=['value'], dtype=result_dtype,\n                        _constructor=result_frame_constructor)\n\ndef get_indexed_dummies(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Return the columns and their dummies"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    col_names: List[str] = list(df.columns.values)[:-1] if len(df.columns.values) > 0 else []\n    col_names += [col_names.pop(0) + '_' + c for c in col_names]\n    id_to_values = {c: list(v) for c, v in df.groupby(col_names)}\n    values_to_keep = sorted(id_to_values.items(), key=lambda x: x[1], reverse=(x[1] =="}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n\n    return df.pivot_table(\n        index='name',\n        columns='value',\n        na_values=[np.nan, np.nan, np.nan]\n    )\n\n\ndef round_date(dt: DatetimeIndex, date_mode: str) -> pd.DatetimeIndex:\n    _pandas_date_index = pd.DateIndex\n    p = pd.period_table(\n        dt.isocalendar().to_period_num(), format='%m%Y'\n    )\n    result = pd"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    return df.pivot(columns=df.columns[:-1])\n\ndef make_pandas_pandas_dataframe(\n    x: pd.DataFrame,\n    *,\n    name: str = None,\n    datasource: str = None,\n    pipeline_name: str = 'pipeline.cloudspike.bimodel.transforms.bimodel2pipeline'\n) -> pd.DataFrame:\n    \"\"\"\n    A utility function that creates a pandas DataFrame containing the"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    return df.pivot(columns=[df.name, df.value], index=1)\n\ndef split(columns: Iterable[str], sep: str = '_') -> Tuple[np.int64, str]:\n    \"\"\"\n    Return the split by two columns in the given list of columns.\n    \"\"\"\n    return tuple(int(col) if col!= sep else col for col in columns)\n\ndef count_columns(df: pd.DataFrame) -> pd.Index:\n    \"\"\"\n    Return the count of values in"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    df.sort_values('value', inplace=True)\n    return df.pivot(levelBy=['name'], values=[('value', 'a'), ('value', 'b')], axis=1)\n\n# TODO: Figure out if pandas can safely handle these as a mix of pd.DataFrames\nclass DataFrame:\n    def __init__(self, dataframe: pd.DataFrame) -> None:\n        self.dataframe = dataframe\n\n    def __repr__(self) -> str:\n        return pd.Data"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    # Find columns that do not contain an NA value\n    cols_with_nans = df.columns[df.columns!= \"value\"].astype(str)\n    cols_with_nans.sort([col for col in cols_with_nans.columns if \"value\" in col.attrs[\"na_value\"]])\n    # If the pivot columns do not contain an NA group, we do not apply pivot.\n    if not all(col for col in df.columns.values):\n        return df\n    for col in"}]}
{"id": "1207406", "prompt": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''", "suggestions": [{"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    for item in list1:\n        for item in list2:\n            if item in list1 or item in list2:\n                list1.remove(item)\n                list2.remove(item)\n                return list2\n    return list1\n"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    return [itertools.takewhile(lambda x1, x2: x1 in list2, list1) if x2 in list2\n            else None for x2 in list2]\n\n\ndef set_list(list: list) -> list:\n    '''\n    Set values in list to those of list1\n\n    Example:\n    set_list([1, 2, 3])\n    -> [1, 2, 4, 3]\n    set_list([1, 2, (3, 4)])\n    -> [1, 2, (3,"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    return list1[:] + list2[:]\n\n\ndef remove_items_from_dict(dictionary: dict, key: str, value: object) -> dict:\n    '''\n    Remove all items from dictionary with key=key that do in the value list.\n\n    Example:\n    remove_items_from_dict({'a': 1, 'b': 2, 'c': 3}, 'c', [['b', 3], ['c', 4]])\n    -> {'c': 3}\n\n    remove_items_from_dict({'a': 1"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    l1 = list1 if isinstance(list1, str) else list1\n    l2 = list2 if isinstance(list2, str) else list2\n    l2 = [remove[-1] for remove in l2 if remove in l1]\n    return l2\n\n\ndef is_in_list(list1: list, list2: list) -> bool:\n    '''\n    Returns true if the item list1 contains a item list2 without any duplicate.\n\n    Example:\n    is_in_list([1, 2, 3], ["}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    if len(list1) > 0:\n        for item in list1:\n            if item in list2:\n                list1.remove(item)\n        return list1\n    else:\n        return list2\n"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    count = len(list1)\n    if len(list2) == count:\n        return list1\n    else:\n        remove = list1[:]\n\n    current_index = 0\n    new_size = len(list1)\n    while new_size > 0:\n        ret_val = list1[current_index]\n        if (ret_val in list2) or (ret_val not in list2):\n            new_size -= 1\n            current_index += 1\n        else:\n            remove.append(ret_val)\n            "}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    newlist = []\n    for item in list1:\n        for item2 in list2:\n            if item2 is item:\n                newlist.append(item)\n            else:\n                list.remove(item)\n    return newlist\n\n# Get the position of item2, i.e. after the call to remove_items_from_list().\ngetitem2 = partial(remove_items_from_list,\n                  pos=7\n                  )\n\n\n@unittest.skip(\"remove_items_of_list() must be improved\")\n"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    return [item for item in list1 if item in list2]\n\n\nif __name__ == '__main__':\n    pass\n"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('list1 must be a list and must NOT be mixed in here')\n    if not isinstance(list2, list):\n        raise TypeError('list2 must be a list')\n\n    list_copy = copy.deepcopy(list1)  # type: ignore\n    for index in range(len(list_copy)):\n        if list2.count(index) > list_copy.count(index):\n            index_remove = index\n            break\n    list_copy.remove(index"}]}
{"id": "29640685", "prompt": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''", "suggestions": [{"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n\n    for direction in range (1, 8):\n        diff = (sprite.rect.centerx - bullet.rect.centerx)**2 + (sprite.rect.centery - bullet.rect.centery)**2\n        if direction!= 1 or diff > 100:\n            return True\n    return False\n\n#Define the collision detection logic\ndef collision(sprite, bullet):\n    #Find collision between the sprites' x- and y- coordinates\n    x = bullet.rect.centerx - sprite.rect.centerx\n    y = bullet.rect"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    return collide_rect_with(sprite.rect, bullet.rect)"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    if (sprite.rect.colliderect(bullet.rect)):\n        return True\n    elif (bullet.rect.colliderect(sprite.rect)):\n        return True\n    else:\n        return False\n\n\ndef change_image(image, pos):\n    '''\n    Change the image, position and image name\n    '''\n    print(image,pos)\n    pygame.image.save(\"tmp.png\", image)\n    pygame.image.save(\"tmp_again.png\", image)\n\n\ndef main"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    if bullet.rect.collidepoint(sprite.rect):\n        return True\n    else:\n        return False\n\n# A simple demo of how sprite collision can be exploited\n# In this scenario, just two sprites will collide\nif DetectSprites.detect:\n    # First we define two sprites representing bullets\n    firstBullet = Bullet(5, 10)\n    secondBullet = Bullet(25, 50)\n    sprites = [firstBullet, secondBullet]\n    collisions = pygame.sprite.collide_sprites(sprites"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    dx = sprite.rect.collidepoint(bullet.rect)\n    if dx == 1:\n        return True\n\n    return False\n\n\n# Main loop for the game\ndef update(dt):\n    global screen\n\n    if pygame.key.name== pygame.K_LEFT:\n        x, y = pygame.mouse.get_pos()\n        #print(\"left \" + str(x) + \",\" + str(y))\n        angle = pygame.math.atan((x - screen._rect.width) / 240)\n        #"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    dx = sprite.rect.x + sprite.rect.w*0.5\n    dy = sprite.rect.y + sprite.rect.h*0.5\n\n    #Check that the bullet is within the box\n    if dx > 0 and dy > 0 and dx < bullet.rect.w and dy < bullet.rect.h:\n\n        return True\n\n    #Check that the bullet is already inside the box\n    elif dx > 0 and dy > 0 and dx < 0 and dy < 0:\n\n        return True\n\n    #Check that the bullet is not inside the box"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    dist = 0\n    x2 = (bullet.rect.topleft[0] + bullet.rect.width) * 0.5\n    y2 = (bullet.rect.topleft[1] + bullet.rect.height) * 0.5\n    for key in pygame.key.get_pressed():\n        if key.key in [pygame.K_DOWN, pygame.K_UP, pygame.K_MIDDLE, pygame.K_RETURN, pygame.K_PAGEUP, pygame.K"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    if collide((sprite.rect, bullet.rect), (sprite.rect, bullet.rect)):\n        return True\n\n    return False\n\n\ndef main():\n    #Create the main menu\n    main_menu = MainMenuWindow()\n\n    #Create the buttons\n    left = pygame.image.load(\"user_player_left.BMP\")\n\n    new_button = pygame.image.load(\"user_new.BMP\")\n    right = pygame.image.load(\"user_new_right.BMP\")\n    options = pygame."}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    if Sprite.collision(sprite.image, bullet.image):\n        return False\n    return True\n\n'''\nDraw the bullet, and return which one collided with a sprite. It is a tuple.\n'''\ndef collision(sprite, bullet):\n    '''\n    Return a tuple if the same bullet as the other sprite collided with and the\n    other sprite's collision state. Otherwise, None is returned.\n    It is a tuple containing two booleans. True means the bullet collides with\n    any other sprite and False means the bullet does not collide with"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    if bullet.rect.colliderect(sprite.rect):\n        return True\n\n    return False\n\ndef move(bullet, x):\n    '''\n    move the bullet and return True if the move was correctly and False otherwise.\n    '''\n    if not detect_collision(sprite, bullet):\n        move_x = bullet.rect.x - x\n        if move_x < -30 and x > 20:\n            bullet.rect.x = bullet.rect.x + 3\n            return True\n            \n   \ndef draw("}]}
{"id": "72899", "prompt": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''", "suggestions": [{"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    new_lst = list()\n    for item in lst:\n        lst_new = check_dict_value(item, key)\n        for key_ in lst_new:\n            new_lst.append(item.copy())\n            new_lst.append(lst_new[key_])\n    new_lst.sort(key=key)\n    return new_lst\n    \ndef sorted_list_of_dicts(lst):\n    '''\n    Sort dictionaries, a list of dictionary and a list"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    ret = []\n    for i in range(len(lst)):\n        ret.append((lst[i][key], lst[i]))\n    return ret  \n   \n  \n"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return lst.sort(key=key)\n\ndef sort_dict_entries_by_value(d: dict) -> dict:\n    '''\n    Sort a dict by value for a key.\n    \n    Example:\n    sort_dict_entries_by_value({'a': 1}) -> {'a': 1}\n    '''\n    return d.sort(key=lambda kv: kv['value'])\n\ndef sort_dicts_by_value(d: list) -> list:\n    '''\n    @"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    rnd = random.randint(0, len(lst) - 1)\n    lst = []\n    for k in lst:\n        lst[rnd] = k\n        lst[rnd][key] = k[key]\n    return lst\n\ndef make_random_lists(n_lists: int, list_len: int = None):\n    if list_len:\n        lists = list()\n    for index in range(n_lists):\n        lists.append(list())\n    if list_len:\n        "}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    sortedLst = sorted(lst, key=key)\n    return sortedLst[:]\n"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    # sort list\n    index = []\n    for k, v in lst.iteritems():\n        if key in v:\n            index.append((k, v[key]))\n    return sorted(lst, cmp=key)\n            \ndef test_dictionary_sort():\n    '''\n    print('')\n    print('# sorted dictionary. The list of sorted dictionaries should be:')\n    print('#')\n    for lst in sorting_dict():\n        print(sorted(lst))\n    print()\n    print"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    \n    if lst is None or not isinstance(lst, str):\n        return lst\n    \n    lst = [lst for l in lst]\n    lst = sorted(lst, key=key)\n    return lst\n    \nif __name__ == '__main__':\n    print(sort_list_of_dicts('abc','a'))\n    "}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    lst = sorted(lst, key=key)\n    return lst\n\n\nclass TestListOfDictionaries(unittest.TestCase):\n    def test_list_of_dicts(self):\n        lst = list_of_dicts(dictionary_list(10))\n        self.assertEqual(len(lst), 10)\n\n\nclass TestListOfDictionariesWithLists(unittest.TestCase):\n    def test_list_of_dicts_with_lists(self):\n        lst = list"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    sort_dict = defaultdict(dict)\n    for k, v in sorted(lst, key=key):\n        sort_dict[k] = v\n    return sort_dict[key]\n\n\ndef random_element_in_list(lst: list):\n    return lst.pop(random.randrange(len(lst)))\n\n\ndef random_element_list(lst: list) -> list[str]:\n    return lst[random.randrange(len(lst))]\n\n\ndef random_element_in_dict(l"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=key)\n"}]}
{"id": "22219004", "prompt": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    grouped = df[cols_by_grouping(df[column], keyby=group_by, is_key_column=True)]\n    return grouped.groupby(group_by).groups\n\n\ndef cols_by_grouping(df: pd.DataFrame, group_by: str, is_key_column=True) -> pd.Series:\n    '''\n    Returns a set of columns by grouping for a DataFrame.\n\n    Example:\n    cols_by_grouping(pd.DataFrame({'a': [1"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n\n    if is_list_of_lists(df):\n        groups_by = df.groupby(group_by)\n        col_no = df.groupby(group_by).columns.tolist()\n        list1 = []\n        list2 = []\n        for level in groups_by.levels:\n            col = groups_by.get_level_values(level)\n            list1.append(col_no)\n            list2.append(col)\n        return [list1, list2]\n    else:\n        raise_if"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    return df.groupby(group_by.replace(' '), level=column.replace(' '), sort=False).sum()\n\nclass RowGroups(object):\n    def __init__(self, columns: tuple):\n        self.columns: List[str] = columns\n\nif __name__ == '__main__':  # pragma: no cover\n    group_by: str = 'a_b'\n    df = pd.DataFrame({\n            'title': ['Mary', 'Mary', 'Sara'],\n            'date_"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    if isinstance(group_by, str) or not isinstance(group_by, list):\n        raise ValueError('group_by must be a string or a list')\n\n    grouped_by, groups = groupby(df, group_by)\n    ret = list()\n\n    for sg in groups:\n        this_group_data = df[(df.groupby(sg).transform_coords(lambda df: str(df['a']),\n                                                                column,\n                                                                return_type=str))]\n        ret.extend"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n\n    col_s = pd.Series(column)\n    dtype = (('col1', 'col2'), ('col1',))\n    column_types = ((col_s, dtype),)\n    column_list = [(s, [col_s]) for s in df.groupby(column, split='|')]\n    column_list_dict = dict(column_list)\n\n    # Create a mapping with the column to its groupings: [(col1, group1, group2), (col1, group2, group3)]\n    column_"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    grouped = df.groupby(group_by).groups\n    return grouped.apply(lambda x: ['{}{}{}'.format(col, col, x) for col in column])\n\ndef write_dictionary(\n    tpl_path: str,\n    dict_: dict,\n    encoding: str = 'utf-8',\n    path: optional = '.',\n):\n    '''\n    Create a new file given an encoding (defaults to utf-8)\n    and dict\n    Write the data to the specified path in the"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    res = []\n    for row in df:\n        col_val = df[group_by.apply(lambda x: x[column]).isin(list(row))].loc[row.isin(list(frozen_value_grouped_set(df)))]\n        res.append(col_val)\n    return res\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    columns = df[column].unique()\n\n    if group_by not in ('a', 'b', 'c'):\n        raise ValueError(\"group_by cannot be None.\")\n\n    result = []\n    for i, data in df.iterrows():\n        for j in pd.Series(data[group_by]):\n            result.append([data[column].drop(j, level=index(columns)), i])\n        result.append(data)\n\n    return result\n\ndef _add_group_by(columns, new_data):"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    return [list(groupby_value(df)[group_by]) for group_by in group_by_for(group_by)]\n\ndef get_field_lengths(df: pd.DataFrame, grouping: str):\n    '''\n    Returns a dict {key: (total, min),...} of all column in df with a particular grouping.\n\n    The default grouping of a list is list(s) -> use this function to get the length of a list\n    for a grouping.  grouping must be one of the following:\n    - [list"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    column_groups = df.groupby(group_by)[[column]]\n    column_groups.name = column\n    column_groups.sort_index()\n\n    return column_groups.map(lambda x: x + [x for x in x.sum(axis=1).values.view('int64')))\n\ndef _convert_to_dict(obj):\n    if isinstance(obj, pd.DataFrame):\n        obj = {column: convert_csv(jsonify(x), as_dict=True) for x in obj.values."}]}
{"id": "743806", "prompt": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''", "suggestions": [{"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    splitted = []\n    for item in string:\n        splitted.append(item.replace(separator, ''))\n    return splitted\n    \ndef print_output(output: str) -> None:\n    '''\n    Prints all output.\n    \n    Example:\n    print_output('a-b-c') -> The a-b-c\n    print_output('ABC') -> The ABC\n    '''\n    \n    print(output)\n    \ndef create_list(string: list) -> list:\n    '''\n"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    return [\"%s%s\" % (sep, i) for i in string if sep in i\n            and i.startswith(separator)]\n\n"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    return str(string).split(separator)\n    \ndef first_occuring_in_numpy(input: list, *items: str) -> list:\n    '''\n    Returns the list of items that occur only once.\n    \n    Example:\n    first_occuring_in_numpy(['a-b-c', '-abc'], '-') -> ['a', 'b', 'c']\n    '''\n    return list(set(list(input) | set(items)))\n\ndef first_element_in_numpy"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n\n    return list(string.split(separator))\n\ndef to_int(string: list, arg: int = None) -> int:\n    '''\n    Transform a list of strings as a integer.\n    \n    Example:\n    \n    >>> to_int([1, 2, 3])\n    3\n    '''\n\n    if arg is not None:\n        return int(string)\n    return sum(int(x) for x in string)\n\ndef to_float(string: list) -> float:\n    '''\n    Transform a list of"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''    \n    \n    split_cnt = len(string)\n    splits = [string[x:x+separator.split('-')[x]] for x in range(len(string)-separator.split('-')[x]+1)]\n    return splits\n    \n"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    string =''.join(string)\n    if separated is None:\n        return string.split()\n    if len(separated) > 1:\n        return [\"%s%s\" % (sep, wkild) for wkild in separated]\n    sep_indices = string.find(separator)\n    return string[0:sep_indices] if separated else [string]\n\nclass _HexStringParser(_AbstractStringParser):\n    def __init__(self, separator: str, start: Optional[int] ="}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    return list(map(string.split, separator.split(separator)))\n\n\ndef remove_substring(string: tuple, remove_from: str) -> tuple:\n    '''\n    Remove the given substring from the given string.\n    \n    Example:\n    remove_substring('abc', 'def') -> 'abc'\n    remove_substring('abcdef', 'abc')   -> 'abc'\n    '''\n    return tuple(map(lambda x: string[:x] if x in remove_from else string, remove_from."}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    out = []\n    if not string:\n        return out\n    for item in string:\n        out.append(item)\n        out = out[:-1]\n    return out\n"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    parts = string.split(separator)\n    parts = list(map(str.strip, parts))\n    parts = [part for part in parts if not part and not part[0]]\n    if len(parts) > 1:\n        parts = parts[:-1]\n    return parts\n\ndef split_string_with_whitespace(string: str) -> list[str]:\n    '''\n    Split a string into an array of strings.\n    \n    Example:\n    split_string_with_whitespace('a -b -c')"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n\n    string = list(string)\n\n    string[:] = [x.strip() for x in string]\n\n    return string\n\n\ndef strip_spaces_and_comments(string: str) -> str:\n    '''\n    Strip leading and trailing characters out of a string.\n    \n    Example:\n    strip_spaces_and_comments('a-b-c-') -> 'c-b'\n    strip_spaces_and_comments('a-b-c-foo') -> 'c-b-foo'\n    '''\n\n    string"}]}
{"id": "1894269", "prompt": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''", "suggestions": [{"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    return list(map(str_to_bool, list_string.split('.')))\n\n\ndef boolean_to_list(list_bool):\n    '''\n    Convert a boolean representation of a list to a list.\n\n    Example:\n        list_bool_to_list(True) -> [True]\n    '''\n    return list_bool.split('=')\n\n\ndef list_to_bool(list_str):\n    '''\n    Convert a string representation of a list to a boolean.\n\n    Example:\n        list_to_"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    return list(list_string) - list({})\n\n\ndef list_to_str(list_: List[str]) -> str:\n    '''\n    Convert a list to a string representation of a list.\n\n    Example:\n        list_to_str([1, 2, 3]) -> '[1, 2, 3]'\n\n    The list is passed by reference.\n    '''\n    return ''.join(str_to_list(s) for s in list_)\n\n\ndef assert_lists_equal(\n    first: List[str],\n"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    tmp = list()\n    tmp.extend(map(str_to_int, list_string.split(',')))\n    return tmp\n\n\ndef list_to_string(list: list) -> str:\n    '''\n    Convert a list to a string representation.\n\n    Example:\n        list_to_string('[1, 2, 3]') -> '[1, 2, 3]'\n    '''\n    tmp = str()\n    for element in list:\n        tmp += str(element) +''\n    return tmp[:-1"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    if isinstance(list_string, collections.Iterable):\n        return [x for x in list_string]\n    try:\n        return list(set(value.strip('\\'') for value in list_string.split(', ')))\n    except ValueError:\n        raise ValueError(\n            'The `split(',\n            '{value}...\\n\\tfor use with only one item: ['\n            '[value]}. This argument can be split as a string.'\n        )\n"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    return [item.strip()  # noqa\n            for item in list_string.split(',') if item.strip()]\n\ndef sorted_to_list(sorted_list):\n    '''\n    Convert a sorted list to a list.\n\n    Note: this operation is very expensive, because no memory is freed on\n    the return values, except in the list itself.\n\n    >>> sorted_to_list('[1, 2, 3]')\n    ['1', '2', '3']\n    >>> sorted_to_list(['1',"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    lines = list_string.split(NODE_SEPARATOR, 1)\n    return lines\n\n\ndef set_str_to_list(list_string: str, *args: List[str]) -> str:\n    '''\n    Convert a string representation of a list to a Python string.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> \"1, 2, 3\"\n    '''\n    lines = list_string.split(NODE_SEPARATOR, 0)\n    if len(lines"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    try:\n        return list(eval(list_string))\n    except Exception:\n        return list_string\n\n\n# class Test() -> The test class.\n#    \n# Test is a dummy unit test class for this project.\n\nTest = object\n\nTest_Type = type\n\n\nclass Test_Test(Test):\n    \"\"\"\n    Subclass Test() to be a class for testing purposes.\n    \n    The following is a list of class objects to be tested.\n    \n    If the class objects are defined differently in this class,\n    they need to inherit"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    all_items = list_string.split(',')\n    return [item.strip() for item in all_items]\n\n\ndef get_path_to_file(fileName: str) ->  None:\n    '''\n    Gets the complete path to a given file.\n\n    Example:\n        get_path_to_file('C:\\user\\app\\Documents\\pygitd\\PyPI\\project.ini') -> 'C:\\\\user\\\\app\\\\Documents\\\\pygitd\\\\'\n    '''\n    while fileName:\n        f,"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    return [item.strip() for item in list_string.split(',')]\n\n\nstr_to_datetime = str_to_list('')\nstr_to_file = str_to_list('')\n\n#-------------------------------------------------------------------------------\n\ndef str_to_int(str: str) -> int:\n    return int(str) if str is not None else 0\n\n#-------------------------------------------------------------------------------\n\ndef str_to_bool(str: str) -> bool:\n    return bool(str and 1 else 0)\n"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n\n    return list(map(str, list_string))\n\n\ndef str_to_dict(list_string: str) -> dict:\n    '''\n    Convert a string representation of a list to a dict.\n\n    Example:\n        list_string_to_dict('[1, 2, 3]') -> {1: 2, 3: 3}\n    '''\n\n    return dict(map(str, list_string))\n\n\ndef string_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of"}]}
{"id": "988228", "prompt": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''", "suggestions": [{"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    return dict() if type(string) is str == str else {} if type(string) is dict else {}\n\n'''def main():\n    numbers = [6, 5, 7, 8]\n    dictionaries = [\n        {'b': 2, 'a': 17},\n        {'a': 19, 'b': 7, 'f': [2, 4, 5]}\n    ]\n    conversions = {v.b: v.a for v in\n                   (convert2numbers(v) for v in zip(numbers, diction"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    dictionary = dict()\n    if \"-\" in string:\n        dictionary[\"a\"] = int(string.replace(\"-\", \"\"))\n    else:\n        dictionary[\"a\"] = int(string)\n    return dictionary\n\n# convert_integer_to_dictionary(integer) -> dict({\"a\": int(integer.lstrip(\"-\"))})\n# convert_integer_to_dictionary(integer) -> {'a': int(integer.lstrip(\"-\"))}\ndef convert_integer_to_dictionary(integer: str) -> dict"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    \n    d = {}\n    if len(string) > 0:\n        for c in string:\n            d[c] = {}\n    return d\n\nif __name__ == '__main__':\n    \n    #\n    # Example:\n    #     data = {\n    #         'a': 1, \n    #         'b': 2\n    #         }\n    #     convert_string_to_dictionary(json.dumps(data))\n    # \n    # will convert to dictionary\n    \n    print(json."}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    \n    result = dict()\n    \n    lines = string.split('\\n')\n    for line in lines:\n        if line.strip() == '':\n            continue\n        else:\n            key, value = line.split('=')\n            result[key] = value.strip()\n    return result\n\ndef parse_dict(json_dict):\n    '''\n    Parse json object.\n    \n    json_dict: str\n        dict containing the json object\n    return: dict\n        object containing the contents of the\n        json object."}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    \n    if string:\n        return {str(k): 1 for k in reversed(string.split(','))}\n    return {}\n\ndef reverse(l: list, start: int = 0) -> list:\n    '''\n    Reverse the list by the number of items less by 1.  If ``start`` is provided, the first item is the position of the last item the function\n    returns\n        \n    Example:\n    reverse('a, b, c', 0) -> ('b', 'a')\n    reverse('a', 1) ->"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    \n    if string is None:\n        return None\n    else:\n        return {u'k' if u'\\u12a3' in string else u'v' for u in string.split(u'\\u12a3')}"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    if not string:\n        return {}\n    \n    if string[0] == '\"':\n        string = string[1:-1]\n    \n    split_result = string.split(';')\n    results = {}\n    for item in split_result:\n        values = item.split('=')\n        if values[0] == '\"' or values[0] == \"'\":\n            item = item[1:-1]\n        results[values[0]] = values[1]\n    \n    return results\n\n'''\nconvert_dictionary"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    dict_out = {}\n    for key, val in json.loads(string).items():\n        val_dict = json.loads(val)\n        if isinstance(val_dict, dict):\n            key_dict = json.loads(key)\n            dict_out[key_dict.capitalize()] = val_dict.copy()\n        else:\n            dict_out[key.capitalize()] = val\n    return dict_out\n"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    ret = {}\n    \n    for k,v in string.split('.'):\n        if v!= None and k!= '.':\n            ret[k] = int(v)\n    \n    return ret\n\ndef convert_list_to_dictionary(list: list) -> dict:\n    '''\n    Convert array to dictionary\n    \n    Example:\n    convert_list_to_dictionary([1, 2, 3]) -> {1: 1, 2: 2, 3: 3}\n    convert_list_to_dictionary"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    dict = json.loads(string)\n    return dict\n\nif __name__ == '__main__':\n    print(f'import main.modules.main_module as MainModule')\n    test_converting_to_simple_dictionary()\n    test_converting_to_dictionary()\n    test_converting_to_lists()\n\n"}]}
{"id": "176918", "prompt": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''", "suggestions": [{"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    for id in range(len(lst)):\n        if lst[id] == value:\n            return id\n    return -1\n\n\ndef _iter_by_index(lst: list, idx: int = -1) -> Iterator[int]:\n    '''\n    Return a generator that yields from a collection with all the item indexes.\n    If idx is not negative and idx is not -1, it will return from the end of the returned generator.\n\n    Example:\n    _iter_by_index([6, 12, 7],"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    index = 0\n    for item in lst:\n        if item == value:\n            return index\n        index += 1\n    return -1\n\nif __name__ == '__main__':\n    print(find_index([4, 3, 5, 6, 2]) + find_index([0, 0.5]))"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    found = -1\n    for i, v in enumerate(lst):\n        if v == value:\n            found = i\n    return found\n"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    return l[0].index(value)\n\n\na = [1, 2, 3, 4, 5]\nb = [1, 2, 3, 4, 5]\n\nresult_dict = {'a': 0, 'b': 2}\nprint(find_index(a, 6))\nprint(find_index(b, 3))\n\nresult_dict = union_value_dict(a, b)\nprint(result_dict)\n\n'''\n>>> a = [1, 2, 3, 4, 5]\n>>> b = [1,"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    index = []\n    for index_item in range(0, len(lst)):\n        if value == lst[index_item]:\n            index.append(index_item)\n\n    if len(index) == 1:\n        return index[0]\n    elif len(index) == 0:\n        return -1\n    else:\n        return index.pop(0)    \n\n# Your index_list object will be instantiated and attached to said index_list.\ndef main():\n    index_list = []\n    for i in range"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    return np.searchsorted(lst, value)\n"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    index = 0\n    for item in lst:\n        if value == item:\n            index = index + 1\n\n    return index\n\nif __name__ == '__main__':\n    \"\"\"\n    Given a list of integers, return the first element found.\n\n    Explanation:\n       List: [1, 2, 3, 4, 5].\n       \n    Input: A 10-digit list.\n       \n    Output: The first element found.\n    \"\"\"\n    test = [1,2,3,4,5]\n    output = find_"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n\n    for i, v in enumerate(lst):\n        if value == v:\n            return i\n    return -1\n\n\ndef test_find():\n    list1 = [2, 5, 4, 7]\n    list2 = [5, 3, 4, 6]\n    for l in list1:\n        print('0:', l)\n\n    print('0:', find_index(list2, 5))\n    print('1:', find_index(list2, 5))\n    print('0:', find_index(list1, 2"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    for i in range(len(lst)):\n        if i == value:\n            return i\n    return -1\n\n\ndef find_one(lst: list, value: int) -> int:\n    '''\n    Returns the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1\n\n    Example:\n    find_one([1, 2, 3, 4, 5], 0) -> 1\n    find_one([1, 2, 3, 4, 5], 1) -> 5\n    "}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n\n    if not lst:\n        return -1\n    elif value not in lst:\n        return -1\n    else:\n        return lst.index(value)\n"}]}
{"id": "76022812", "prompt": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"", "suggestions": [{"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    with open(csv_file, encoding='utf-8') as fp:\n        read_header = lambda: True if fp.next().strip('\\\"') == '\\\"' else False\n        csv_dict = dict()\n        for line in csv.reader(fp):\n            csv_dict[line[0].strip('\\\"')] = line\n    return csv_dict\n"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    return {\"body\" : csv_file, 'title' : None, 'accepted_answer_id' : None, 'content' : None}\n\ndef write_csv(csv_file: str,\n              data: dict,\n              fname = 'test.csv',\n              header = None,\n              new_line = {},\n              new_col = None):\n    \"\"\"\n    Write the contents of data to file, returning the number of lines written.\n\n    Example:\n        >>> write_csv(\"test.csv\", {'title': 'Test'"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    data = dict()\n    with open(csv_file, 'rb') as csv_file:\n        reader = csv.DictReader(csv_file, delimiter='\\t', quoting=csv.QUOTE_MINIMAL)\n        for cur_row in reader:\n            data[cur_row['title']] = cur_row\n        return data\n\ndef get_answer_ids(data: dict) -> List[str]:\n    \"\"\"\n    Return the unique ids of the selected answers in an input data file.\n\n    Example:\n        "}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n\n    print('Converting file \"{}\" to a dictionary'.format(csv_file))\n\n    input_reader: List[str]\n    output_reader: List[str]\n        - \"file_name\" \"csv_file\"\n\n    input_reader.append(csv_file)\n    output_reader.append(\"output_dict\")\n\n    reader = csv.Sniffer()\n    reader.initialize(delimiter=\"\\t\")\n    reader.onpeek = True\n    reader.findall(input_reader)\n\n    dict_reader = c"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    converted = csv.reader(open(csv_file), delimiter='\\t')\n    for row in converted:\n        row=list(row)\n        if len(row) == 3:\n            yield {'id': int(row[0]),'score': row[1]})\n        else:\n            yield {'id': int(row[0]),'score': row[1], 'type': row[2], 'data': row[3]})\n\ndef dict_to_csv(dict_to_csv_file: str),"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    filepath: Path = Path(csv_file, safe=FileSystemPath())\n    if filepath.is_file():\n        with open(str(filepath).decode('utf-8'), 'rb') as fh:\n            csv_file = csv.DictWriter(fh, dialect=Dialet_delimiter, lineterminator='\\n')\n            csv_file.writerow({'title1': 'value1', 'title2': 'title2', 'body1': 'Body1', 'accepted_answer_id1': '"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    with open({\n        'path': csv_file,\n    }, 'r') as csv_file:\n        reader = csv.DictReader(csv_file, delimiter=';')\n        csv_dict = dict(zip(reader.fieldnames, reader.next()))\n    return csv_dict\n"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n\n    data = []\n\n    with open(csv_file, newline='') as csvfile:\n        reader = csv.reader(csvfile)\n\n        for currow in reader:\n            data.append(dict(zip(currow[1].lower().split(), currow)))\n\n    return {\"1\": [], \"2\": [], \"3\": []}\n\ndef convert_dict_to_csv(data: dict) -> csv.writer:\n    \"\"\"\n    Convert a dictionary to a csv file.\n\n    Example:\n        >>> c"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    return {row[0:1]: row[1:] if row[1:1] else row for row in csv_file.split(\"\\n\\n\")}\n\ndef csv_to_excel(csv_file: str) -> str:\n    \"\"\"\n    Convert a csv file to an excel sheet.\n\n    Example:\n        >>> sheet_name = csv_to_excel(\"test.csv\")\n        >>> excel_file = open('test.xls', 'wb')\n        >>> excel_file.write(csv_to_"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    data = []\n    with open(csv_file, 'r') as input:\n        reader = csv.reader(input, delimiter=',')\n        for row in reader:\n            if row!= []:\n                data.append(row)\n\n    return dict(iter(data))\n\ndef convert_dict_to_csv(data: dict, output_dir: str) -> str:\n    \"\"\"\n    Convert a dictionary into a csv file in destination_dir.\n\n    Example:\n        >>> converted_dict = csv_to_dict("}]}
{"id": "19960077", "prompt": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    return df[column].apply(lambda row: pd.Series(value).map(lambda element: tuple(row[element])[0]))\n\n# test\ndataframe = pd.DataFrame({\n    'a': [1, 2],\n    'b': [4, 5],\n})\nassert(filter_data(dataframe, 'b', [1, 3])) == pd.DataFrame(dataframe.a.map(lambda row: tuple(row)))\nassert type(filter_data(dataframe, 'b', [1]))"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    try:\n        return df[df[column].isin(value)]\n    except ValueError:\n        raise ValueError(\"column in df cannot contain values\")\n\n\ndef remove_samples(df: pd.DataFrame, column: str) -> pd.DataFrame:\n    '''\n    Remove samples from a dataframe.\n\n    Example:\n    remove_samples({'a': [1, 2], 'b': [3, 4]}, 'a') -> {'a': [5], 'b': [4], 'c': [6]}\n"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    new_data = df.drop(df[column] == value)\n    for col, val in new_data[column].items():\n        new_data[col] = new_data[col].iloc[-1]\n    return new_data\n\ndef get_date(df: pd.DataFrame, where: str) -> list:\n    '''\n    Get a list of date from an input frame, using where as a string in order to filter the date\n    column to return only those date from a where.\n\n    Example:\n    where ="}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n\n    return df[df[column] == value].copy()\n\n\ndef flatten_list(list_):\n    '''\n    Flattens a list using a specific type.\n    :param list_:\n    :return:\n    '''\n    if isinstance(list_, list):\n        return [item for item in list_]\n    return list_\n\n\ndef get_df(frame: pd.DataFrame, columns: list) -> pd.DataFrame:\n    '''\n    Take a dataframe with the columns specified and return a new"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n\n    if not df.isnull().any():\n        df = df[df[column] == value]\n\n    dfc = df.copy()\n    if type(dfc['a']) == pd.Series:\n        dfc = pd.concat([dfc['a'], df['b']])\n    elif type(dfc['a']) is not pd.DataFrame or type(dfc['b']) is not pd.DataFrame:\n        dfc = pd.concat([dfc['a'], df['"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    df = df.drop([column, '_id'], axis=1)\n    return df.loc[df[column] == value]\n\ntable_names = [\n    '_id', 'rowid', '_id int', 'data',\n    '_id int', 'data int',\n    '_id str', 'data str',\n    '_id int', 'data int'\n]\n\n# Load data\ndf_header = pd.DataFrame.from_records(\n    [dict(zip(table_names, row) for"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    filter_column(df, column, value)\n    return df\n"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    return df[df[column]] == value\n\ndef filter_data_by_range(df: pd.DataFrame, column: str, start: int, end: int) -> pd.DataFrame:\n    '''\n    Filter the given dataframe based on a start and end to a set of values.\n\n    Example:\n    filter_data_by_range({'a': [1, 2], 'b': [4, 5], 'c': [6, 7]}, 'b', (2)) -> {'a': {'b': [4"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    df = df.filter(operator.itemgetter(column))\n    df_filtered = df.filter(filter_column)\n    df_filtered = df_filtered.drop('b', axis=1)\n    df_filtered = df_filtered.values.astype('int8')\n\n    return df_filtered.reindex(columns = [column])\n\n\n'''\nA series contains a list of values.\nA series includes one or more entries which are all values of the same named dimension\n'''\nSeries = namedtuple('"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    df = df[(df[column].isin(value)) & (df[column] == value[0]).any()]\n    return df\n"}]}
{"id": "12680754", "prompt": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    ret = []\n    for col in df.columns:\n        # split the data\n        try:\n            splitted = list(set(sep).intersection(col))\n        except ValueError:\n            splitted = list(col.str.startswith(sep))\n        ret.append(col[tuple(splitted)])\n    return pd.concat(ret)\n\ndef create_columns(tbl, cols):\n    '''\n    create unique columns for a dataframe\n\n    Example:\n    create_column"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    split = [df[col].extract()\n             for col in df.columns if df[col].extract()[0] in col]\n    return pd.concat(split, axis=1)\n\ndef asd(x):\n    return pd.Series(x, index=x.columns)\n\ndata = split_columns(pd.DataFrame({'a': [asd(i) for i in range(5)]}), ['a'], ',')\n\n\ndata.columns = [col for col in ['b"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    return split_axis(df, col, sep, axis=1)\n\ndef split_axis(df, axis, sep, copy=True):\n    '''\n    Split a DataFrame along an axis by its'sep' value.\n\n    Returns a DataFrame which has the axis specified as axis along the axis 'axis'.\n    'copy' can be set to False to avoid setting the axis on the result.\n\n    Parameters\n    ----------\n    df : DataFrame or Series\n        Input DataFrame, Series or Index of unique rows.\n    axis : int\n        Which"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    if isinstance(col, dict):\n        res = {}\n        for k in col:\n            res[k.split(sep)] = df[k.split(sep)]\n        return {'a': res}\n    else:\n        res = df[col.split(sep)]\n        return res\n\ndef split_indexes(df, cols, split_sep):\n    '''\n    Split index-sparse df by columns.\n    '''\n    start = None  # the start index of each split\n    length = None"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    if isinstance(col, str): col = pd.MultiIndex.from_product([col, pd.range(len(col))],\n                                                              use_index=False)\n\n    if not isinstance(col, pd.MultiIndex):\n        col = pd.MultiIndex.from_product([pd.Index(columns=col), pd.range(len(col))]),\n    col = pd.MultiIndex.from_product([col.levels[0], col.names],\n                                     use_index=False)\n    return"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    dst = df[col].unstack()\n    split_by_sep = lambda cv: (dst.take(cv, axis=-1) if len(cv) else None)\n    return dst.stack().map(split_by_sep, fill_value=sep)\n\ndef create_df(df):\n    '''\n    Create a dataframe with the rows of every row in all columns\n    '''\n    df = df.assign(**{k.__name__: pd.core.frame.DataFrame(list"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    index = slice(col)# get split indices\n    rows = df[index]\n    cols = rows.columns\n    _, cols = pd.cat([cols, cols[index]], fill_value = '')#convert list of columns into single row\n    return pd.concat([rows, cols])\n"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    new_df = pd.DataFrame(df[col].tolist())\n    if sep:\n        sep1 = df.index.get_level_values(0)[col].tolist()\n        sep2 = pd.DataFrame(sep.tolist())\n        new_df['('] = sep1 + sep2.tolist() + new_df.index.get(0).tolist()\n        new_df = new_df.drop_duplicates()\n    return new_df\n\ndef split"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    new_df = {}\n    for column_idx in range(df.columns.length):\n        if col in df.columns:\n            new_df[column_idx] = df.ix[:, column_idx].split(sep)\n        elif col in df[0].columns:\n            new_df[column_idx] = df[0].ix[:, column_idx].split(sep)\n        else:\n            new_df[column_idx] = df[column_idx].split("}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    ragged = df.view(RaggedArray)\n    rst = ragged.to_rst(separator=sep)\n    return rst.tolist()\n\ndef get_failing(tolerance=0.01):\n    ''' \n        Evaluate whether one function will work with data with a tolerance of 0.01 \n        Returns False is it doesn't fail (i.e. one will run for more than 0.01 seconds)\n        Returns True if at least one function is run at least 0.01 seconds (see ``self"}]}
{"id": "23294658", "prompt": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''", "suggestions": [{"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n\n    # This should fail if a age of a voter is not a number at this time\n    age = input(\"Enter age to be compared against (examples: 5 is old, 18 is new)\")\n    is_valid_age = True\n    if not isinstance(age, int) or age < 8:\n        print(\"Error: age must be a number\")\n        is_valid_age = False\n    elif age == 18:\n        print(\"Your age is already set to the maximum possible value. Please choose a higher one.\")\n        is_valid_age = False"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    age = input(\"please enter your age: \")\n\n    if (age > 18 or age <= 18):\n        return 'You are eligible to vote'\n    else:\n        return 'You are not eligible to vote. Please try again'\n\n"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    user = raw_input('age (18, 24): ')\n    user_must_vote = []\n    if is_valid_age(user, 18) or is_valid_age(user, 24):\n        user_must_vote.append('You are eligible to vote')\n    return ''.join(user_must_vote)\n\n\ndef is_valid_age(user_input, age):\n    age = str(age)\n    if age.isdigit() and int(user_input) > 0 and int(user_input) <= 18"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    while True:\n        result = input('You must enter your age between 18 and 20:')\n        if result!= '':\n            age = input('Your age must be in range 25 - 39. The age must be greater than or equals to 18:')\n            if age >= 18 and age <= 39:\n                return 'You are eligible to vote'\n            else:\n                return 'The age must be in range 25 - 39.'\n    \ndef is_valid_text(input_text):\n    '''\n    Take text of a user input and check if the length of"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    with open(file_path) as input_file:\n        with open(output_path, 'w') as output_file:\n            while 1:\n                voter_age = input_file.readline()\n                if 'You are eligible to vote' in voter_age or 'You are not eligible to vote' in voter_age:\n                    pass\n                else:\n                    if voter_age.count(' ') > 1:\n                        print \"error in file\"\n                        continue \n                    if int(voter_age) <= 18:\n                        output_"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    age = raw_input(\"Enter the age of a voter at %s: \" % age)\n    if (len(age.split(\" \")) > 2 or (len(age.split(\" \")) < 2 and len(age.split(\" \")) > 2)):\n        print \"You don't enter your age between 18 and 30\"\n        return False\n    else:\n        return True"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    if len(input(config.age)) > 0:\n        age = input(config.age)\n        if age == \"18\":\n            #If voter has an age of 18 then vote\n            return True\n        else:\n            #Otherwise, give user input error message\n            return False\n    else:\n        return False\n\n    \ndef is_valid_voting_request():\n    '''\n    Test is voter still eligible to vote.\n    Check if the voter is eligible to vote if the voter isn't an email.\n    \n    Example:\n"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    votes = open('votes').read()\n    if len(votes) <= 18:\n        voter_age = ''\n    else:\n        voter_age = vote_age_validator(votes, 18)\n    return_voter = '' \n    return_voter += 'You are eligible to vote' if voter_age == 'you' else 'You are not eligible to vote'\n    return_voter += str(len(votes)) +'votes were recorded' if voter_age == 'you' else str(len(votes)) +'votes were"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    return is_voter_eligible(voter_id=request.voter_id)\n"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    try:\n        age = input('Please enter a valid age: ')\n        if age.upper() == '18':\n            return 'You are eligible to vote'\n        elif age.upper() <= '18':\n            return 'You are not eligible to vote'\n    except NameError:\n        return 'You can\\'t do this! Please enter a valid age.'\n\n\ndef voter_status(age, valid_voter, eligibility_status):\n    '''\n    Return the status of the user for the user.\n    '''\n    user_status"}]}
{"id": "20250771", "prompt": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n\n    mapping_to_value = {s: v for s, v in mapping.items()}\n    return df[column]  # type: ignore\n\ndef remap_values(df: pd.DataFrame, columns, mapping: dict) -> pd.DataFrame:\n    '''\n    Remaps the original values in a DataFrame to new values in the columns whose indexes are\n\n    * in columns.\n\n    Example:\n\n    col = 'a'\n    remap_values(pd.DataFrame({col}), col) -> pd.DataFrame"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    df = df.set_index([column], inplace=True)\n    return df.map(mapping).aggregate(pandas.na_compare)\n\n\n"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    mapped = map(lambda x: pd.Series(mapping[x], name=y), df.values.tolist())\n    return pd.DataFrame(df.iloc[:, mapping[x]], columns=mapped)\n\n\ndef remap_column_value_list(df: pd.DataFrame, column: str, mapping: list) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value_list(pd"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    column_value = df[df[[column, mapping['a']][column]]]\n    return df[column_value!= mapping['b']]\n\n\ndef is_index_col(x: str) -> bool:\n    return len(x.strip().split(' ')) == len(x)\n\n\ndef _get_index_name(d: pd.DataFrame) -> str:\n    for col, index_col in enumerate(d.columns):\n        if is_index_col(index_col):\n            if d.index.nlevels"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    return df.set_value(column, mapping).fillna(mapping[np.nan])\n\n\ndef get_todo_table_data(table: str) -> List:\n    \"\"\"Get todo table data\"\"\"\n    with open(f'{table}.csv', mode='rb') as csv_file:\n        reader = csv.DictReader(csv_file)\n        todo_dict = defaultdict(list)\n        for row in reader:\n            todo_dict[row['text']].append(float(row['value']))"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    return pd.DataFrame({column: pd.Series([mapping[col] for col in column.split(',')])\n                         for row in df}).transpose().unstack()\n\n\ndef remap_column(df: pd.DataFrame, mapper: str, **kwdargs) -> pd.DataFrame:\n    '''\n    Remap values in column of a DataFrame to new values.\n\n    Remap column values to different columns with\n    ``mapper(col)``. For example, ``mapping = [a, b"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    if isinstance(mapping, dict):\n        if isinstance(df, pd.DataFrame):\n            df = df._data\n        if isinstance(df, pd.Series):\n            df = df.reindex(column, axis=1)\n    elif isinstance(mapping, (str, unicode)):\n        df = df[column]\n        df = df.reindex(column, axis=1)\n    return df\n\ndef remap_column_value_with_dataframe(df: pd.DataFrame,\n"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n\n    remap_column = column.replace(column, mapping[column])\n    return df.set_opt(remap_column=remap_column)\n"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    return tf.where(df[column] == mapping[column],\n                    df[~mapping[column].isin(~df[column])], df)\n\n\ndef remap_row_value(df: pd.DataFrame, col_0: str, col_1: str,\n                    mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a row of a DataFrame to new values.\n\n    Example:\n    remap_row_value(pd.DataFrame({'a': [1, 2, 3]}"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    if not is_dataframe_of_dict(mapping) or not all(is_dict_of_values(mapping)):\n        raise ValueError(\n            'dataframe of dict with no values can be remapped to DataFrame of {d}'.format(d=mapping))\n    values = list(df[column])\n    new_column = None\n    for i, value in enumerate(values):\n        if value not in mapping and value not in dict(mapping):\n            values[i] = value\n        new_column |= mapping"}]}
{"id": "4020539", "prompt": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''", "suggestions": [{"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    escaped_characters = re.compile('[A-Za-z0-9\\-]')\n    \n    return escaped_characters.sub(' ', string)\n\n\ndef process_textfield(string: str) -> str:\n    '''\n    Replace all '\\'s in a textfield string.\n    \n    Example:\n    process_textfield('a\\\\nbb') -> 'a'\\\\nb'\n    process_textfield('a&b') -> 'a'\\\\nbb'\n    '''\n    string = process_"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    if string.startswith(('\\\\', '\\\\', '(')):\n        popen_str = '\\\\'\n    else: # \\v\n        popen_str = '\\\\v'\n    \n    tokens = string_token.split(popen_str)\n    for token in tokens:\n        if token == '}': # }\n            # return '\\' '.join(tokens[0:1])\n            token = tokens[0]\n        elif token!= \"}\":\n            token = token.lstrip()\n        "}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    if string.startswith('\\\\r'):\n        return '\\n'\n    if string.startswith('\\\\n'):\n        return '\\n'\n    if string.startswith('\\\\u'):\n        return unichr(int(string[2:]))\n    return string\n\nimport sys\n\n\nclass CommandParser(object):\n    '''\n    Class to get information from a configuration file.\n    \n    See README for the documentation.\n    '''\n    \n    @staticmethod\n    def find_last_param"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    return string.replace('\\\\', '\\\\\\\\').replace('[', '\\\\[').replace(']', '\\\\]')\n\n#=======================================================================\ndef format_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    format_escape_sequence('a\\\\nb') -> 'a\\\\nb\n    b''\n    format_escape_sequence('abc\\\\tcd') -> 'abc\\\\tcd\n    '''\n    escape_sequence = format_escape_sequence(process_escape_"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    escape_codes = [string.lower()]\n    for letter in string:\n        if letter in escape_codes:\n            escape_codes.append(letter)\n    result = ''\n    for underscore in escape_codes:\n        for letter, character in enumerate(string):\n            if character == underscore:\n                result += letter\n        if result:\n            if result[-1] == '\\n':\n                result = result[:-1]\n    return result\n            \n    # return 'a   b' if re.match(r'\\\\a["}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    return string\n    \n    \n    \ndef process_identifier (string: str) -> str:\n    '''\n    Create a string from a name and an optional name of a previous identifier of the same name.\n    \n    Example:\n    process_identifier ('barfoo') -> 'barfoo'\n    \n    Note:\n    string[0] will be appended as an indicator of the index, a.b.c..\n    \n    '''\n    return '%s%s%s'%(string[1],string[2],string"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    return string.replace('\\\\','')\n\n\ndef process_escape_string_list(string: list, escape_seq: list[str]) -> str:\n    '''\n    Process an escaped string list in order for a string to be in the\n    expected form.\n\n    Example:\n    process_escape_string_list([ 'a\\\\nb', 'bb', 'c ', 'd', '\\\\' ]) -> ['a\\\\nb', 'bb\\\\nd', 'c', 'd', '\\\\']\n    '''\n    return [ process_escape_sequence("}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    escape_code_matches: Set[int] = set()\n    for char in string:\n        if char in escape_codes_map:\n            escape_code_matches.add(escape_codes_map[char])\n\n    # This means that \\x has to be escaped to \"\\\\x\"\n    # (and \"\\\\\" for non-ascii characters.)\n    if escape_code_matches:\n        return string[0:-len(escape_code_matches)]\n    else:\n        return string\n"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    string = re.sub('([a-z]+)([^\\\\]|\\\\([^\\\\]|\\\\))', r'\\g<1>', string)\n    string = re.sub(r'\\b(.|\\s)', r'\\g<1>', string)\n    return string\n\n\ndef process_string_for_key_val(string: str) -> str:\n    '''\n    Process the string for the key value.\n    \n    Example:\n    process_string_for_key_val('this is a string')"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    escape = EscapeSequence.get\n\n    if not string:\n        return string\n    try:\n        return escape(string)\n    except EscapeSequence.UnknownEscape:\n        raise\n\n\ndef process_escape_string(escape_string: EscapeString) -> str:\n    '''\n    A version for escaping a string.\n\n    Example:\n    process_escape_string(u'a\\\\nb') -> \\u2603\n    '''\n    escape = EscapeString.get\n\n    if not escape_string:\n        return escape_string.escape_"}]}
{"id": "4760215", "prompt": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''", "suggestions": [{"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    stdin = None\n    cmd_path = None\n    try:\n        cmd_path = command\n        output = subprocess.check_output( command, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(\"error running command: %s %s\" % (e.output, e.cmd))\n\n    return output.strip()\n"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    process = subprocess.Popen(command, stdout=subprocess.PIPE)\n    stdout = process.communicate()[0]\n    return stdout.strip()\n\ndef main():\n    '''\n    Prints a command's output and the exit code\n    '''\n    print(run_command(\"ls\"))\n    print(run_command(\"ls --all\"))\n    sys.exit(0)\n\nif __name__ == '__main__':\n    main()\n"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    p = subprocess.Popen(command)\n    output = p.communicate()\n    if p.returncode:\n        raise Exception('Failed {}: {}'.format(command, output))\n\n    if p.returncode!= 0:\n        return 'Failed {}'.format(command)\n\n    return ''.join(output[0].decode() for line in output[1]) \n\ndef cmd_and_run(commands):\n    '''\n    Run multiple commands and return the output\n\n    Example:\n    cmd_and_run(['"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    return call([sys.executable, str(command)],\n                cwd=os.environ['PWD'], universal_newlines=True, stdout=subprocess.PIPE)\n\n\nif __name__ == '__main__':\n    env = {}\n    p = subprocess.Popen(('git','rev-parse', '--abbrev-ref', 'HEAD'),\n                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stderr = p.stderr\n    "}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n\n    p = subprocess.Popen(command, stdin=subprocess.PIPE)\n    out = p.communicate()[0]\n    # We will ignore p.returncode when it is not a return code of 0 because\n    # subprocess.run() throws an exception in this case\n    if p.returncode:\n        print command + \" failed with return code \" + str(p.returncode)\n        return out\n    else:\n        return out\n\n"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    try:\n        rc = subprocess.call(command)\n    except Exception, e:\n        rc = 1\n\n    if rc == 0:\n        return\n    elif rc == 1:\n        print \"Error\"\n        return\n    elif rc == 2:\n        print \"Shell error\"\n        return\n    else:\n        print \"Error\"\n        return\n\nrun = run_command\n\ndef is_exe(fpath):\n    '''\n    Check if program is executed running an exe\n\n    Example: is_exe('/home/"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    p = subprocess.Popen(command.split())\n    p.communicate()\n    return p.stdout.read()\n\ndef _create_key(path):\n    '''\n    Returns (path, secret) if it makes sense to do so\n    '''\n    secret_bin = \"cat {0}/secret.txt\".format(path)\n    cmd = \"{command}\\n{output}\".format(\n        command=os.pathsep.join([\n            secret_bin,\n            \"-u {path}/password\".format("}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    # https://www.npmjs.com/package/npm@{NPM_VERSION}/bin/command\n    subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    return getattr(subprocess,'STDOUT',subprocess.PIPE).read()\n\ndef set_logging(log_level):\n    '''\n\n    set the logging level\n\n    logging level:\n        DEBUG     : Prints out message in console\n        INFO      : Does nothing\n        WARNING"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    run_command_output = subprocess.check_output(command, shell=True)\n\n    return run_command_output\n\ndef check_output(command):\n    '''\n    check the output of a command\n    '''\n    out = run_command(command)\n\n    return out\n"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n\n    # Check if subprocess is available\n    status = False\n    try:\n        proc = subprocess.Popen(command, stderr=subprocess.PIPE)\n        proc = subprocess.Popen(command)\n        output = proc.communicate()[0]\n        proc.wait()\n        proc.kill()\n    except KeyboardInterrupt:\n        return False\n    except:\n        return False\n\n    if output:\n        command = 'echo \"%s\"' % output.strip()\n    return command\n"}]}
{"id": "6473679", "prompt": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''", "suggestions": [{"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    original_list = list_of_lists\n    transposed_list = [list(list(int(x))+x) for x in original_list]\n    transposed_list = list(transpose(list(list(transposed_list[0])))+[transposed_list[i]])\n    tr_list = [z.astype(numpy.int64) for z in list(transposed_list)]\n    return tr_list\n    \n    \nif __name__ == \"__main__\":\n    test_cases = [\n"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n\n    result = []\n    for lst in list_of_lists:\n        result += [i for i in list(lst)]\n\n    return result\n\n\ndef merge_numpy_lists_by_key(numpy_list_of_lists):\n    '''\n    This function merges `numpy_list_of_lists` by key (`list_of_lists.keys()`)\n    and returns `[merged_list_of_lists1, merged_list_of_lists2,...][key]`.\n\n    Example of merging:"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    ret_list = []\n    for i in range(len(list_of_lists)):\n        tmp = list_of_lists[i]\n        tmp2 = [list[i] if list.ndim > 0 else next_list(tmp)]\n        ret_list.append(tmp[:])\n        ret_list.append(tmp2)\n    return ret_list[::-1]\n\n\ndef flatten_list_of_lists(list_of_lists):\n    '''\n    Flatten a list of lists.\n    \n    "}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    list = list_of_lists[:]\n    for item in list:\n        list[0] = item[0]\n        list[1] = item[1]\n        list.truncate(1)\n\n    return list\n\n# In[22]:\n\ninput_list = []\n\n\n# In[ ]:\n\nfor element in input_list:\n    input_list.append(list(element))\n\n# In[64]:\n\nlist_of_lists = transpose_list_of_lists(input_list)\n\n# In"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    return [item.transpose() for item in list_of_lists]\n\n"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    transposition = []\n    for list_element in list_of_lists:\n        transposition.append(list_element)\n        transposition.append(transposition[-1])\n    return transposition"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    new_list = []\n    for list_in_lists in list_of_lists:\n        new_list = new_list + list_in_lists\n    return new_list\n    \n\n@then(function_exists(lambda x: x.contains('y')))\ndef verify_it_works(function_exists):\n    \"\"\"Verify the calling function works. \"\"\"\n    result = True\n    return result\n"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    #print(list_of_lists)\n    n = len(list_of_lists)\n    if n == 1:\n        return sorted(list_of_lists, key=lambda elem: elem[0])[0]\n    elif n == 2:\n        return sorted(list_of_lists, key=lambda elem: elem[0])\n    else:\n        raise NotImplementedError(\"Can't transpose. Please add support for lists of lists.\")\n    \ndef transpose(x):\n    '''\n    Transpose"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    return [list_of_lists[0][1], list_of_lists[1][0], list_of_lists[2][1], list_of_lists[3][0]]"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    \n    return [list(map( lambda a: map( lambda b: list(a)[b], b)), a) for a in list_of_lists]\n    \n    \n## End of code from http://code.djangoproject.com/wiki/UsingDjangoInYourProject\n"}]}
{"id": "434287", "prompt": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''", "suggestions": [{"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n    def create_chunks(data: list, n):\n        '''\n        For input vector, create a list of sizes such as n which is the\n         number of elements in the list.\n\n        >>> Solution().create_chunks([8, 4, 2, 3], 4)\n        [[8, 4, 2"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    return list(range(chunk_size))\n\n\ndef create_chunks_by_values(data: list, size: int):\n    '''\n    Create a bunch of chunks of'size', starting at the given start.\n    \n    For example:\n    create_chunks_by_values([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks_by_values([1, 2,"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    if not isinstance(data, list):\n        raise TypeError(\"`data` must be a list\")\n    if not isinstance(chunk_size, int):\n        raise TypeError(\"`chunk_size` must be an integer\")\n    chunks: list = [[data[i * chunk_size: (i * chunk_size + chunk_size)] for i in range(k)] for k in range(len(data))]\n    return chunks\n\ndef concatenate_chunks(first: list, other: list) -> dict:\n    \"\"\""}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    assert isinstance(chunk_size, int)\n    assert isinstance(data, list)\n    return [chunk[:chunk_size] for chunk in data]\\\n    \n#\n# Example 1:\n# create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, create_chunks)\n# create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, create_chunks)\n# create_chunks([1, 2, 3,"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    \n    chunks = []\n    \n    for x in range(0, len(data), chunk_size):\n        chunks.append(list(itertools.islice(data, x, x+chunk_size)))\n    \n    return chunks\n"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    chunks = []\n    for i in range(len(data)//chunk_size):\n        chunks.append(data[i*chunk_size:(i+1)*chunk_size])\n    return chunks\n\ndef create_map(data: list, chunks: list)-> map:\n    '''\n    Create a map consisting of all the elements from the given chunks.\n    '''\n    map = dict()\n    for each in chunks:\n        for element in each:\n            map[element] = list(map.get(element,"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    i = 0\n    while i < len(data):\n        yield data[i:i + chunk_size]\n\n        i = i + chunk_size\n\n\n\ndef create_chunks(data: list, chunk_size: int)-> tqdm.progress:\n    '''\n    Create a tqdm.progress class with the given progress step size.\n    \n    This class can be passed to tqdm.tqdm.tqdm.__init__.\n    \n    Example:\n    create_chunks([1, 2], 2"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    assert isinstance(chunk_size, int)\n\n    if not isinstance(data, list):\n        from functools import partial\n        data = [partial(data, chunk_size)] + data + [partial(data, chunk_size)]\n        for i in range(len(data)):\n            data[i] = list(map(None, data[i]))\n            data[i].extend(list(map(None, data[i], data[i+1:])))\n\n    # data can be empty, for the chunk sizes 1, 2"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    return [list(item) for item in itertools.combinations(data, chunk_size)]\n    \ndef create_list(data: list, iter_size: int):\\\n    '''\n    Create a list from the given data.\n    \n    Example:\n    create_list([1, 2], 1) -> [1, 2]\n    \n    Note:\n    \n    * list should be created with length\n    * iter_size should be the length\n    * list is not modified in any way.\n    \n    '''\n    \n"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    \n    size = int(len(data) / chunk_size)\n    chunks = list(zeros(chunk_size))\n    end = 0\n    for i in range(0, size, chunk_size):\n        chunks[i] = list(\n            input_chunks(\n                data[end:end+chunk_size],\n                chunk_size\n            )\n        )\n        end += chunk_size\n    return chunks\n"}]}
{"id": "104420", "prompt": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''", "suggestions": [{"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    permutations_list = []\n    for i in range(len(lst)):\n        fmt = lst[i]\n        for j in range(i + 1, len(lst)):\n            permutations_list.append(fmt ^ permutations(lst[j:i]))\n    return permutations_list\n\n\nfrom pwn import *\n\nclass BSDAlgorithm:\n    '''Abstract base class for implementations of bsda.\n    '''\n    def __init__(self, host, port):\n        '''"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    lst = list(lst)\n    lst.sort(key=lambda x: x[2])\n    return list(reversed(lst))\n\n\n# Run\n\n#./bin/python./build.py./run.py > run.out\n# Generate run.log\n\n\nimport unittest\n\nclass MyTest(unittest.TestCase):\n    def test_my_test(self):\n        self.assertEqual(\n            permutations([1, 2, 3]),\n            {\n                (1, 2, 3"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    length = len(lst)\n    chunks = list(chain.from_iterable(permutations(range(length))) for i in range(length))\n    if length == 1:\n        return chunks.pop()\n    return [permutations(ch) for ch in chunks]\n\n\ndef combinations(lst: list) -> list:\n    '''\n    Return a list of all combinations of the given list.\n\n    Example:\n    combinations([1, 2, 3]) -> [[1, 2, 3], [1, 2, 3, 3], ]"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n\n    return sorted(\n        [v for _, v in enumerate(lst) if len(v) > 1],\n        key=lambda v: v[1],)\n\n\ndef sorted_list(first_item: list) -> list:\n    '''Return a list that uses the first item as the first element of\n    the list, using the given first item as its first element.\n\n    If the first item in the list is None, it is placed at 0th position.\n    Example:\n    sorted_list([3, 2, 1, 1, 2"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    try:\n        return [x for x in lst if x % 2 == 0]\n    except ZeroDivisionError:\n        return []\n\nif __name__ == '__main__':\n    print(permutations([1, 2, 3]))\n    # [1, 1, 1, 2, 2, 3, 2, 3, 3, 1, 1]\n    # [1, 1, 1, 2, 2, 3, 2, 3, 3, 1, 1]\n    print(permutations([1, 2, 3, 4]))\n"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    return [set([permutation.reduce(int) for permutation in lst])]\n"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    # We need to count all elements, so we need to use an iterator to count them.\n    iterator = enumerate(lst)\n    result = []\n    for i, item in enumerate(iterator):\n        result.append('%s%d' % (f'{i + {i * 2: -}},', item))\n\n    return result\n\n\n# ############################ Main ############################\n\n# We do not need to have a clean code base, just use this with no tests\nif __name__ == '__main__':\n    songs"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    return sorted(list(xrange(lst)), key=len, reverse=True)[0]\n\n\ndef reverse(s: str) -> str:\n    '''\n    Convert a string to a reversed form.\n\n    Example:\n    reverse(\"abc\") -> \"acb\"\n    '''\n    return s.reversed()\n\n\ndef flatten(lst: list) -> list:\n    '''\n    Return a list with all elements of the given list unordered.\n\n    Example:\n    flatten([1, 2]) -> [1,"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    seen: list[int]  = set()\n    seen[seen.index(max(lst))] = 1\n    return [seen[i] for i in range(len(lst))]\n\n"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    result = []\n    for x in lst:\n        result.append(set(permutations(x)))\n    return result\n\n\ndef list_to_one_row(lst: list, index: int) -> list:\n    '''Converts a list to a one row list of the given index.\n    Example: [(0, 1), (-2, -1), (1, 0), (0, 2), (2, -1), (-2, 1), (0, 3), (-1, 1), (3, -2), (2, -1"}]}
{"id": "533905", "prompt": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''", "suggestions": [{"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    if not lists:\n        return list()\n\n    return itertools.permutations(lists)\n"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return set(itertools.product(*[itertools.product(list_1, list_2) for list_1 in lists\n                                        for list_2 in lists])).difference(set([[]]))\n"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    result = []\n    for list_l in lists:\n        if not list_l:\n            continue\n        list = list(list_l)\n        for i in range(len(list) - 1):\n            result.append(list[i])\n            list[i + 1] = list[0]\n        result.append(list[0])\n\n    return list(result)\n\n\ndef permutation(number, k):\n    '''\n    Permute the elements of the input list of numbers.\n\n    Example:\n    permutation(2,"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return [(p[0], p[1]) for p in itertools.product(*lists)]\n\ndef sorted_group_by_value(dictionary, key):\n    for k, v in pairs(dictionary).items():\n        if key(k) < key(v):\n            yield v, k\n\ndef nth_maximum_value(dictionary, key):\n    for k, v in dictionary.items():\n        if k == key:\n            return v\n\ndef nth_maximum_keys(dictionary, key):\n    for k"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    for r in lists:\n        for l in r:\n            yield [l]\n        yield [r]\n\ndef main():\n    '''\n    Example:\n\n    >>> # cartesian product [1,2,3] == [(1, 2), (1, 3), (2, 3), (2, 4), (3, 4)]\n            print cartesian_product[cartesian_product_of_lists([1, 2, 3])]\n    '''\n    print cartesian_product_of_lists([[1, 2], [3"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    lists = list(lists)\n    return nxlib._cartesian_product_of_lists(lists)\n\n\ndef cbrt(f):\n    '''Return a C{float} approximation of the value of `f` for infinite precision.\n\n    The range of the approximation is divided by the value of `f`, where `f+0.5f` is the floor (positive).\n    This approximation of `f+0.5f` is used when calculating the power of `f` for infinite precision.\n    This approx of `f` is approx at least twice"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    for list_1 in lists:\n        for list_2 in lists:\n            yield list(list_1) + list_2\n\ndef list_product_of_lists(lists_0, lists_1):\n    '''\n    Return the list product of the given first list and the second list\n    in the cartesian product of lists, which is the cartesian product of the two lists\n    i.e. the cartesians product of the lists i1 and i2 respectively.\n\n    Example (i.e. does not preserve ordering)\n    list_"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return itertools.product(lists, repeat=2)\n"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return tuples_to_lists_of_lists(itertools.product(*lists))\n\n\ndef tuples_to_lists_of_lists(tuples):\n    '''\n    Return the tuple of all lists from given collections of tuples.\n\n    Example:\n    tuples_to_lists_of_lists([(1, 2), (3, 4), (5, 6)]) -> [(1, 2), (3, 4), (5, 6)]\n    '''\n    return (list(t) for t in lists_to_tuples"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return reduce(lambda acc, item: acc + [[x] * x for x in item], lists, [])\n\ndef zip(*lists):\n    '''\n    A zip operation on lists. Return a list of all the unique components from list 1 to the list size.\n    >>> len(zip([], []))\n    0\n    >>> len(zip([1], []))\n    1\n    >>> len(zip([1], [2]))\n    2\n    >>> len(zip([1], [[2, 3]]))\n    2\n    >>> len(zip"}]}
{"id": "9961563", "prompt": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''", "suggestions": [{"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    pygame.init()\n\n    # load a font from the given font folder\n    font = pygame.font.SysFont(\"Arial\", 20)\n\n    # load a layer from the given path\n    layer = pygame.Surface([800, 800]).convert()\n\n    # initialize the new sprite\n    sprite = pygame.Sprite(layer)\n    sprite.fill((0, 0, 0))\n\n    # create a blank tile on the layer to center the object.\n    for x in xrange(0, 20, 80):\n        for y"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    pygame.display.update()\n    x = [0,0,0]\n    y = [0,0,0]\n    player = [0, 0, 0]\n    move = {'attack': 1, 'defense': -1}\n\n    \n    player = [0, 0, 0]\n    sprite = pygame.sprite.Sprite()\n    text = ('{0} hit!{1}.').format(player[0], player[1])\n    \n    for event in pygame.event.get():\n        if event"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    g = pygame.Surface((400,400), 0, 32)  # the surface to draw on\n    g.fill((255, 255, 255))\n    pygame.draw.rect(g, (255, 0, 255), (30, 30, 0, 0), 2)\n\n    # when we select your own spritesheet, you have to do some preprocessing on it\n    # before we use it as it has its own drawing function\n    # so, let's call the preprocess() function before we select your file\n    g.preprocess()\n\n    #"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n\n    # create a new sprite\n    sprite = pygame.sprite.Sprite()\n\n    # set the background color for the new sprite to change the current background color\n    if pygame.sprite.SPRITE_TEXTCOLOR in SpriteConfig:\n        background_color = pygame.Color(0,0,0)\n    else:\n        background_color = 0x0\n\n    # define the texture\n    sprite.image = Sprite.TEXTURE\n    sprite.color = background_color\n\n    # set the position of the sprite\n    spr"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    import pygame\n    \n    pygame.init()\n    screen = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))\n\n    for event in pygame.event.get():\n        if event.type == pygame.QUEUE_EXIT:\n            return\n        elif event.type == pygame.MOUSEBUTTONUP:\n            p = pygame.mouse.get_pos()\n            #print p\n            if button == pygame.MOUSEBUTTONUP:\n                #print button"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n\n    pygame.surfarray.load()\n    surface = pygame.Surface(screen.size)\n    pygame.surface.BlitSurface(surface, screen)\n    pygame.image.save('../data/imgs/surface.png', surface)\n\n\ndef sprite_draw(game, sprite):\n    '''\n    Create the sprite a new image every time a sprite was clicked\n    '''\n\n    p0 = sprite[1][0]\n    p1 = sprite[1][1]\n    p2  = sprite[2][0"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    pygame.init()\n    pygame.display.set_mode([900, 600])\n\n    # The sprite starts out in the lower left corner and moves along the height\n    # of each block. On the other hand, it starts in the upper left corner, and changes to\n    # either upper or bottom right as well, depending upon if it's a block or a wall.\n    my_sprite = pygame.sprite.Sprite (pygame.Image.load('images/square.png'))\n    my_sprite.rect = [200, 300]"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    global v, h\n    pygame.display.update()\n    v = pygame.mouse.get_pos()\n    pygame.display.set_caption('Walls')\n\n    pygame.mouse.set_pos(v[0], v[1])\n\n    if'' not in v:\n        pygame.mouse.set_button((4, 2))\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                break\n            if event.type == pygame"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    fade()\n    try:\n        while True:\n            key_down(pygame.K_UP)\n            key_down(pygame.K_LEFT)\n            key_down(pygame.K_DOWN)\n            key_down(pygame.K_RIGHT)\n            if key_up():\n                break # if the player has moved and they haven't moved to a lower vertical screen\n            if key_press():\n                pygame.move_sprite(sprite, random.randint(0, scr_width - 128), random"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    pygame.image.load(\"sprites/fry3d.png\")\n    sprites = pygame.sprite.Group()\n    pos = (10, 10)\n    for i in range(20):\n        spr = pygame.sprite.Sprite()\n        spr.image = pygame.image.load(\"sprites/fry3d.png\")\n        pos = pygame.mouse.get_pos()\n        if pos[0] + pos[1] > 0:\n            spr.rect = pygame.sprite.Rect("}]}
{"id": "1663807", "prompt": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''", "suggestions": [{"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    n1 = len(list1)\n    n2 = len(list2)\n    \n    # for i in range(n1+n2):\n    for i in range(n1):\n        for j in range(n2):\n            if i == 0 and j == 0:\n                list1.append(list2[j])\n            else:\n                tmp = parallel_iteration(list1, list2[i-1:i+1])\n                # print(\"tmp\", tmp)\n                list1[i] = tmp\n    return sum"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    \n    totalSum = sum([list1[i] * list2[i] for i in range(len(list1))])\n    return totalSum\n\n@parallel_iteration(list1: list, list2: list) -> None\ndef parallel_insert(list1: list, list2: list) -> None:\n    '''\n    Insert two list in parallel.\n    \n    example\n    parallel_insert([1, 2, 3], [4, 5, 6])\n    '''\n\n    for i in range(len(list1"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    return sum((i**2) for i in list1) + (i**2) + (i**2)  # Sum of the terms\n    \n\ndef sum_of_squares(list1: list, list2: list) -> float:\n    '''\n    Sum of squares of the elements in list1 and list2.\n    \n    Example:\n    sum_of_squares([1, 2, 3], [4, 5, 6]) -> 13\n    '''\n    return sum((i**2) for i in list1) + ("}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    # TODO\n    # Use list2 array and sum of the elements, need to use sum_to_array to sum of the lists\n    return sum(tuple(zip(list2, sum(list1))))\n\ndef _sum_to_array(numbers):\n    '''\n    Sum all the numbers in the list and return the array which will hold the sum of the elements.\n\n    Example:\n    _sum_to_array( [(1,2,3),(2,4,6),(4,6,8)] ) -> [[1], ["}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    return reduce(lambda x, y: x * y, [sum(list1) * sum(list2)])\n\n\nif __name__ == '__main__':\n    for itr in range(99):\n        print(_.strip(get_line()))\n"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    return reduce(lambda a, b: a + b, map(lambda s: s*s, map(sum, list1)))"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    num = len(list1) * len(list2)\n    out = list(map(lambda x1: sum(x1 * x2 for x1, x2 in zip(list1, list2)), list1) + list2)\n    return sum(map(lambda x: x + out[num], list1) * map(lambda x: x[-1] * x[num], list2) for x in xrange(0, num))\n"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    return sum(parallel([it1, it2] for it1, it2 in zip(list1, list2)))\n\ndef parallel_iterations(list1: list, list2: list) -> list:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the lists in list1 and list2.\n    \n    Example:\n    parallel_iterations([1, 2, 3], [4, 5, 6]) -> 10\n\n    parallel_iterations([1, 2, 3], [4, 5, 6"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    return sum(l for l in list1 if l not in list2)\n\ndef is_prime(n: int, prime_factor: int=300) -> bool:\n    '''\n    Check if n is prime number, i.e. 2**300 <= n <= 2.\n\n    (from Wikipedia's `Prime Numbers`) Given a non-negative integer n, return True if n is prime number, otherwise return False.\n        [0, 1, 3, 5, 6, 8, 10]\n    TODO\n    '''\n    if prime_factor"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    return sum([p*p for p in list1 if p*p in list2])\n# end of def\n\n\ndef partition(l: list, pred: Predicate) -> List[int] :\n    '''\n    Partition list according to pred and returns a list of indexes for list.\n    '''\n\tindex_count = [1]\n\twhile len(index_count) > 0:\n\t\tindex_count.append(0)\t\n\t\tindex = set()\n\t\tfor i in range(len(index_count)):\n\t\t\tindex.update"}]}
{"id": "15705630", "prompt": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    return df.groupby(groups).max(max_col)\n"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n\n    result = pd.DataFrame(np.array([np.inf]*len(groups)), index=groups)\n    if max_col == \"all\" or max_col==max_col):\n        for k in range(0,len(result)):\n            for grp in groups:\n                result=result[result[groups==grp]]\n        return result[result['c'] == max_col]\n\n    max_by_group= []\n    for grp in groups:\n        result=result[result[groups==grp]]\n        max"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    max_col = max_col.split(',')\n\n    if len(groups) > 1:\n        # get max over each group\n        max_dict = dict((v, np.max(row[v])) for v in df[max_col].unique())\n        for group in groups:\n            group_max = max_dict[group]\n            # group_max = np.max(group_max)\n            df_max = df[df['{}_{}'.format(datetime.now().strftime('%m%d%Y'),"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    n_rows = 1\n\n    result:pandas.DataFrame = pd.DataFrame([], columns=max_col)\n    for group_name, group_data in df.groupby([max_col]):\n        result = result.append(group_data.max(1))\n\n\ndef get_max_min_rows(df: pd.DataFrame, groups:list, rows_name: str, max_val: int):\n    n_rows = df.sum()\n\n    max_values = []\n    min_values = []\n\n"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    df.groupby(get_max_by_group_key(max_col)).sum()\n\n    ## Remove duplicates\n    df.groupby(get_max_by_group_key(max_col)).subtract(df.groupby(get_max_by_group_key(max_col)).subtract(df.groupby(get_max_by_group_key(max_col)).sum(axis=1)))\n    return df"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    max_col_values = [val for key, values in df.groupby(groups).agg(max_col)][index]\n    results = [np.max(values) for values in max_col_values.values()]\n    index_map = pd.Index(max_col_values, name=max_col)\n    pd.DataFrame({max_col: results})\n    return pd.DataFrame({index_map: results})\n\n\ndef max_by_group_compared(df: pd.DataFrame, groups: list"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    return df.groupby(groups).max(axis=max_col)\n\n\ndef get_max_by_range(df: pd.DataFrame, start: int=0, end: int=0, groupby:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the start - end groups with the max column groupby the groupby.\n\n    Example:\n    get_max_by_range(pd.DataFrame({'a': [1, 1, 2, 2], '"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    max_df = pd.concat([df['{}'.format(group)] for group in groups], axis=1)\n    return max_df.groupby(level=max_col).max()\n\ndef add_maxby_group(df:pandas.DataFrame, n:int, x:int, group: list, max_col:str):\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups added with the addition n times to the index.\n\n    Example:\n    add_maxby_"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    df = df[groups]\n    return df.groupby(max_col).max().reset_index().reset_index()\n\ndef get_min_by_group(df: pd.DataFrame, groups:list, min_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the min of the min_col grouped by the groups.\n\n    Example:\n    get_min_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2,"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    return df.groupby(pd.Grouper(key=max_col), as_index=False).max()\n\n\n@safe_call\ndef get_max_by_dim(df: pd.DataFrame, dims:list, max_col:str) -> pd.DataFrame :\n    '''\n    Return a DataFrame with the max of the max_col with the given dim that are passed as parameters.\n\n    Example:\n    get_max_by_dim(pd.DataFrame({'a': [1, 1, 2, 2"}]}
{"id": "17071871", "prompt": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n\n    return df.loc[:, [column_name]] == criteria\n\ndef select_values_first(df: pd.DataFrame, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values_first(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n\n    # create the selection criteria\n    criteria = min(criteria, len(df))\n\n    return  (df == pd.Series(df[column_name]))[criteria]\n\n\ndef select_values_multi(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Construct a DataFrame with only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    The column name is prepended to the values obtained\n\n    Example:\n    "}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    column_name = column_name.split(\":\")\n    values = [df[column_name[0]].values if not isinstance(column_name[0], str) else [column_name[0]]\n              for column_name in column_name]\n    return pd.merge(values, df, on=column_name[1], how=\"outer\",\n                    suffixes={\"column\": {\"column\": column_name[1], \"type\": column_name[2]}})\n\n\ndef select_values_single(df: pd."}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n\n    if len(df[column_name]):\n        results = []\n        for row in df[column_name]:\n            if criteria > 0 and row[column_name] == criteria:\n                results.append(row)\n            elif not criteria and row[column_name] == 0:\n                results.append(row)\n            elif criteria and row[column_name] > criteria:\n                results.append(row)\n            else:\n                results += [row]\n        return results\n\n    return df\n\n\ndef to_table(df, columns"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return df[[column_name].get_level_values(col_name) == criteria\n           for col_name in df.columns.names]\n\n\ndef filter_rows_by_conditions(df, conditions) -> pd.DataFrame:\n\treturn _filter_rows_by_conditions(df, [('value', lambda row: conditions.get(row['category']))])\n\n\ndef map_rows_to_filtered_data_frame(filtered_rows: pd.DataFrame) -> pd.DataFrame:\n    '''"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return (\n        df.loc[:, df[column_name] == criteria]\n       .rename(columns=pd.Index(0, dtype=object))\n    )\n\ndef select_columns(df: pd.DataFrame, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the columns of df where the value in\n    column_name column is equal to criteria.\n\n    Example:\n    select_columns(pd.DataFrame({'a': [1, 2, 3], '"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    # df.where(pd.eval(column_name, '==').any, *criteria)\n    results = df.where(pd.eval(column_name, '=='), *criteria)\n    if isinstance(str(criteria), bytes):  # pragma: no branch\n        results = results.str.apply(lambda x: bytes(x, 'utf-8'))\n    return results.iloc[:,[criteria]]\n\n\n\ndef is_same_column_name(left: pd.DataFrame, right: pd."}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    res = df.where(pd.isnull(column_name))\n    res = res.sort_levels()\n    if len(res) > 0:\n        res = res[:criteria]\n    return res\n\n\ndef select_values_column_by_column(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    The returned DataFrame is"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    col_keys = df.columns.values\n    if column_name not in col_keys:\n            return pd.DataFrame(np.nan)\n\n    if criteria == -1:\n        return df\n    else:\n        condition = lambda x: x[column_name] == criteria\n\n        return df[column_name].filter(condition) \n\n    return df\n\n"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n\n    return pd.DataFrame({column_name: df[column_name] == criteria})\n\n\ndef select_values_groupby(groupby: str, values_list: list, key: str, sort: np.ndarray, default_key: str = None) -> np.ndarray:\n    '''\n    Return a DataFrame containing the same rows as df where the value in the \"groupby\" column\n    of the values_list are equal to the value in key using the default_key if value is missing.\n\n    Example:\n    select_values_"}]}
{"id": "2612802", "prompt": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''", "suggestions": [{"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    return [lst.copy() for lst in list_to_copy]\n\n\n# TODO: Change this to use the deep copy utility instead of list comprehension.\ndef _deep_map(fun, lists):\n\n    result = []\n\n    for lst in lists:\n        result.append(fun(lst))\n\n    return result\n\n\ndef deep_map(fun, list_of_lists):\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    new_list = []\n    for item in list_to_copy:\n        new_item = deep_copy_item(item)\n        new_list.append(new_item)\n    return new_list\n"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    if list_to_copy is None:\n        return []\n    result = [deep_copy_list_item(item) for item in list_to_copy]\n    return result\n\n"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n\n    result = list()\n    for v in list_to_copy:\n        id_new = str(v)\n        if ((id_new in result) and\n               (id_new.replace(\"/\", \"_\") == v.replace(\"/\", \"_\"))):\n            continue\n        else:\n            result.append(v)\n\n    return result\n\ndef deep_copy_dict(dd: dict) -> dict:\n    '''\n    Return a deep copy of a dict passed in.\n    An issue:\n    1) Key will have an underscore (_)"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    return list([item for sublist in list_to_copy for item in sublist])\n\n\n# This code is not currently used in the test suite\n# However it is included just to show your changes.\n"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    return [el.copy() for el in list_to_copy]\n\n\ndef deep_contains_dicts(list_to_contain: list) -> bool:\n    '''\n    Return True if the given list is (possibly) a dict and all elements are dictionaries\n    '''\n    for d in list_to_contain:\n        if isinstance(d, dict):\n            if not all(isinstance(d, dict) for d in list_to_contain):\n                return False\n    return True\n\n\ndef deep_intersect"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    if list_to_copy is None:\n        return list_to_copy\n    elif isinstance(list_to_copy, list):\n        return [deep_copy_list(elem) for elem in list_to_copy]\n    else:\n        return list(deep_copy(list_to_copy))"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    return list(map(id, list_to_copy))\n\n#################\n\ndef get_array_type(variable: str) -> str:\n    '''\n    Helper function to get the type of the variable or expression in either\n    the python module or the global scope. For example:\n    >>> variable=['x', 'y']\n    >>> get_array_type(variable) == 'int'\n\n    >>> variable=('x', ['y', 'z'])\n    >>> get_array_type(variable) =='str'\n\n    >>> variable="}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    new_list = list()\n    for n, l in enumerate(list_to_copy):\n        if type(l) == list:\n            new_list.append(l)\n        else:\n            new_list.append(deep_copy_list(l))\n    return new_list\n\n\ndef deep_copy(obj: list, out: str) -> list:\n    '''\n    Return a copy of the given object in a temporary object. If out is set,\n    then the new object will be assigned out.\n\n    Parameters\n    ----------"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    if not len(list):\n        return list()\n    new_list = []\n    if isinstance(list_to_copy, list):\n        for i in list_to_copy:\n            new_list.append(deep_copy(i))\n    else:\n        new_list = list(deep_copy(list_to_copy))\n    return new_list\n\n\ndef safe_to_list(list: list or tuple, length: int):\n    '''\n    Create a list, with values outside range inclusive, with length.\n    If"}]}
{"id": "76022408", "prompt": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"", "suggestions": [{"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    with open(csv_file, \"w\") as csv_file_w:\n        csv_file_w.write(html_str)\n        \ndef run_sqlfetch(database: str):\n    \"\"\"\n    Run the SQL database operation to fetch a row from the database.\n    \n    Parameters\n    ----------\n    database: str\n        Name of the SQL database to run the operation in.\n    \"\"\"\n  \n    print(\"Running sql fetch to read: \" + database)\n    fetch_sql = \"SELECT sql FROM {0}\".format("}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n\n    def add_row(\n        row: str,\n        value: str,\n    ) -> str:\n        s = '{}\\t{}'.format(row, value)\n        return s\n\n    data = []\n\n    with open(html_str, encoding='utf-8') as f:\n        reader = csv.reader(f, delimiter='\\t')\n\n        for row in iterator():\n            data.append('\\t'.join([row[0], row[1]]))\n\n    text = ',\\n'.join(data)\n\n    with"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    \n    r = csv.reader(open(csv_file, 'a'), delimiter=',')\n    for row in r:\n        row_str = \"\"\n        for i in row:\n            row_str += i.encode(\"ascii\", \"replace\") + \", \"\n        row_str = row_str[:-2]\n        if len(row_str) > 0:\n            # print row_str\n            yield row_str\n\ndef load(url: str):\n    \"\"\"\n    Load an Excel file from a given url"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    df = pd.read(csv_file)\n    df.to_csv(csv_file)\n    return csv_file\n\ndef data_csv_to_dict(csv_file_path: str) -> Mapping[str, str]:\n    \"\"\"\n    Convert a csv string to a dict.\n    \"\"\"\n    with open(csv_file_path, 'rb') as csvfile:\n        reader = csv.reader(csvfile)\n        df = pd.DataFrame(next(reader))\n        df.columns"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    csv_file = 'html.csv'\n    if not os.path.isfile(csv_file):\n        raise ValueError(\"File '%s' not found!\" % csv_file)\n   \n    # Create temporary csv file:\n    with open(csv_file, 'w') as csv_file_output:\n        writer = csv.writer(csv_file_output)\n        writer.writerow([\"URL\", \"File\"])\n\n        # Convert the text to html form:\n        text_from_html_str = pd"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n\n    # Create a pandas dataframe of a csv file\n    pd_df = pd.read_csv(csv_file)\n\n    # Write the CSV out\n    with open(csv_file, 'w') as csv_file_object:\n        csv_file_object.write('')\n\n    return html_str\n\ndef remove_html_links(html_str: str) -> str:\n    \"\"\"\n    Remove html links.\n    \"\"\"\n\n    return re.sub(r'(#|\\<|\\</).*?href', '"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    from nltk.tokenize import sent_tokenize\n    from re import compile as re_compile\n\n    # Make a regex using a compile function for tokenize function, and a string for the\n    # file extension\n    ext = '-' + re_compile('\\\\.csv$').search(html_str.split('\\n')[1]).group(0)\n    text = re_compile('%s[0-9.,]+' % csv_file).sub(str, html_str.split('\\n')[1]).split('.'"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    csv_file_content=str(csv_file + '.csv')\n    with open(csv_file, 'wb') as csvfile:\n        csvfile.write(unicode(html_to_text(html_str)))\n    csvfile.flush()\n    return csv_file_content\n\ndef csv_to_html(input_csv_file: str, output_csv_file: str) -> str:\n    \"\"\"\n    Convert a csv string to a html string.\n    \"\"\"\n    output_csv_file_content="}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    from reportlab.lib.colors import pink\n    with open(csv_file, \"wb\") as csv_file:\n        writer = csv.writer(csv_file, delimiter=\",\", quotechar='\"')\n        writer.writerow([\"File Name\", \"Source Text\", \"Color\", \"Color Red\", \"Color Blue\"])\n        for line in html_str.split(\"\\n\"):\n            if line:\n                with open(line) as f:\n                    if \"color\" in line:\n                        color = line.split(\"<"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n\n    html_str_c = html_str.encode(\"utf-8\")\n    \n    csv_path = \"%s/%s.csv\" % (csv_file+\".utf-8\", csv_file)\n    csv_writer = csv.writer(open(csv_path, 'w'), delimiter=\",\")\n    csv_writer.writerow(['header', 'body'])\n\n    # Loop\n    for hl in doc_html(html_str_c):\n        # Add a new row\n        header_row = [header for"}]}
