{"task_id": "23435270", "prompt": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''", "suggestions": [{"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    if string is None or string == '':\n        return None\n    if not isinstance(string, (str, )):\n        raise ValueError('Input must be a string')\n\n    match = re.findall('\\d+', string)\n    if not match:\n        return None\n    match = map(int, match)\n    return list(match)\n\n\ndef print_board_with_indices(arr, n):\n    '''\n    Prints the board with numbers as strings\n\n    Example:\n\n    Input   n               |  0   1"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    if string is not None:\n        return re.findall('\\d+', string)\n    else:\n        #If this happens, the check below is checking whether the number starts \n        #with zero or not\n        if not re.findall('\\d+', string[1:]):\n            return []\n        else: \n            return []\n\ndef extract_number_from_list(lst):\n    '''\n    Extracts all numbers from the list and returns the list.\n\n    Examples:\n    extract_number_from_list"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    \n    string=string.lower()\n    temp=string.split(' ')\n    str_ret=[]\n    for i in temp:\n        for j in range(9,0,-1):\n            if j<len(i):\n                if i.find(str(j))!=-1:\n                    if i.find(str(j))!=0:\n                        str_ret.append(int(i[0:i.find(str(j))]))\n                    else:\n                        str_ret.append(int(i[0:"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    # TODO: Your code here\n    pass\n\ndef split_into_words(string)->list:\n    '''\n    Splits string into a list of words (also returns a pattern)\n    e.g.\n    string = \"hi there\"\n    --> ['hi', 'there']\n    '''\n    # TODO: Your code here\n    pass\n\ndef remove_numbers_from_words(words)->list:\n    '''\n    Removes all numbers from a list of words.\n    e.g.\n    words ="}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    # The pattern of the numbers\n    pattern = r'([+]|\\-)(\\d{1,7})(\\.\\d?\\d?)?'\n    # Search for the numbers\n    numbers = re.findall(pattern, string)\n    # Extract all numbers\n    numbers = map(lambda a: float(a[2]), numbers)\n\n    # Convert to a list\n    numbers = list(numbers)\n\n    # The numbers that come right after the negative sign are not part of the \n    # final list. Therefore, move them to the"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    # split_string = split_by_letter_string(string)\n    try:\n        print(string)\n        number = re.findall('[0-9]+',string)\n        print(number)\n        return number\n    except:\n        return ''\n\ndef split_by_letter_string(string, letter_to_split_on=\" \", sep=\" \")->list:\n    \"\"\"\n    Splits a string by a specified separator and returns a list of the substrings.\n    \n    Example:\n    split_by_letter_"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    split_string = re.findall('\\d+', string)\n    return split_string\n\ndef make_column_from_number(number: int)-> str:\n    '''\n    Takes a number and returns a string representing the number in that column\n    Example:\n    make_column_from_number(3) -> '123'\n    make_column_from_number(1) -> '1'\n    make_column_from_number(10) -> '10'\n    '''\n    return (str(number))\n\ndef"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    result = re.findall('\\d+', string)\n    if len(result)==0:\n        return []\n    #return int(result[-1])\n    return result\nmy_str = 'abc123def456ghi789'\nprint(extract_number_from_string(my_str))\n\ndef is_valid_date(string:str):\n    '''\n    Checks if the string is a valid date as follows:\n    - it must not be empty or only contain spaces\n    - it must be in the form 'DD"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    return re.findall('\\d+', string)\n\n\n# Exercise 1.1 \n\n# 1. Generate 50 random strings of characters from a-z (lowercase and uppercase\n# also), punctuation and numbers and put them in a set.\n\n# 2. Generate the most common four letters in English.\n\n# 3. Compute the probability of any of the letters being random. In most cases,\n# 50% of the time they all should be random characters.\n\n# 4. What's the difference between evenness and parity?\n\n#"}, {"generated_text": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''\n    numbers = []\n    number_as_string = ''\n    for c in string:\n        if c.isdigit():\n            number_as_string = number_as_string + c\n            # Check for a thousand separator\n            if c == '\\n':\n                continue\n        else:\n            try:\n                int(number_as_string)\n            finally:\n                # If not a separator, then the rest of the number should be added.\n                if c!= '\\n':\n                    numbers.append(int(number"}]}
{"task_id": "2371436", "prompt": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''", "suggestions": [{"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    if not expression:\n        return 1\n\n    def evaluate(operator, operand):\n        if operator == '*':\n            return operand * eval_mathematical_expression(expression[1:])\n        elif operator == '/':\n            return operand // eval_mathematical_expression(expression[1:])\n        elif operator == '+':\n            return operand + eval_mathematical_expression(expression[1:])\n\n    return int(evaluate(expression[0], 1))\n\n\ndef eval_binary_expression(expression: str)"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n\n    expr = expression\n    if '*' in expression:\n        expr = expr.split('*')\n        res = int(eval_mathematic_expression(expr[0]))\n        for operator_index in range(1, len(expr)):\n            if operator_index == len(expr):\n                if expr[operator_index] == '+':\n                    res=res+int(eval_mathematic_expression(expr[operator_index - 1]))\n                else:\n                    res=res+int(eval_mathematic_expression(expr[operator"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    numeric_stack = Stack()\n    last_operator = None\n    calculate_stack = True\n\n    for token in expression.split():\n        token = token.lower()\n\n        if token.isdigit():\n            numeric_stack.push(int(token))\n        elif token == ')':\n            while last_operator is '(' and calculate_stack:\n                numeric_stack.pop()\n                last_operator = operator_stack.pop()\n                if last_operator is None:\n                    break\n            if calculate_stack:\n"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    \n    result = 0\n    while(len(expression)):\n        if (expression[0] == '+'):\n            result += eval_mathematical_expression(expression[1:])\n        elif (expression[0] == '*'):\n            result *= eval_mathematical_expression(expression[1:])\n        else:\n            result = int(expression)\n\n        expression = expr.infix_to_postfix(expression[1:])\n        \n        # remove ')'\n        expression = re.sub(r'\\)"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    assert expression[0] == '/' and expression[-1] == '=', \\\n        'Invalid expression: {}'.format(expression)\n    operator_map = {\n        '+': lambda x, y: x+y,\n        '-': lambda x, y: x-y,\n        '\\\\': lambda x, y: x%y,\n        '*': lambda x, y: x*y,\n        '^': lambda x, y: x**y,\n    }\n    def calculate(exp):\n        stack = 0\n        for id"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    def eval_expression_at(start_idx: int, string: str) -> int:\n        result = 0\n        for end_idx in range(start_idx, len(string) + 1):\n            if string[end_idx] in {'*', '\\\\'}:\n                result += eval_expression_at(start_idx + 1, string)\n            else:\n                continue\n\n        return result\n\n    return eval_expression_at(0, expression)\n"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    return int(eval(expression))\n\ndef eval_string_expression(expression: str, inputlist: list) -> int:\n    '''\n    Evaluate a mathematical expresion, using a list of inputs as provided.\n\n    Example:\n        eval_string_expression('1 + 2 * -3 == 5', [5, 0, 2, 3]) -> False\n    '''\n    return eval(expression) == int(list(inputlist)[0])\n"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    stack: list = []\n\n    calc = re.search(r'(\\d+(\\s*\\d+)*)*([*/]*\\d+)*', expression)\n    if calc is None:\n        return None\n\n    tokens = calc.group().split(' ')\n    for token in tokens:\n        if token in ('+', '-', '*', '/'):\n            result = operation(stack)\n            stack.append(result)\n            continue\n        if token.isdigit():\n            stack.append(int(token))\n"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    # eval and get return 'int' type value -> 'int' is the base class.\n    return eval(expression)\n\n\ndef eval_mathematical_equation(a: str, b: str, operator: str = '+') -> int:\n    '''\n    Evaluate a mathematical equation\n\n    Example:\n        eval_mathematical_equation('1 + 2 * 3', '2 + 10', '+') -> 25\n    '''\n    if operator == '+':\n        sign = lambda x, y: x + y\n    else"}, {"generated_text": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''\n    stack = []\n    for symbol in expression:\n        if 0 < ord(symbol) < 48 or ord(symbol) == 38:\n            # Symbol\n            stack.append(int(symbol))\n        else:\n            if not len(stack):\n                raise ValueError('invalid expression value')\n            operand = stack.pop()\n            if symbol == '*':\n                # Multiplication\n                stack.append(int(operand * float(stack.pop())))\n            elif symbol == '/':\n                # Division\n                stack"}]}
{"task_id": "613183", "prompt": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''", "suggestions": [{"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    return sorted(d.items(), key=lambda x: x[1])\n"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    \n    return sorted(d.items(), key=lambda kv: kv[1], reverse=True)\n\n############\n# SETS        #\n############\n\ndef remove_from_set(s: set, item: Any):\n    '''\n    Remove an element from a set using a set comprehension.\n    \n    Example: \n    remove_from_set({'a', 'a', 'b', 'c'}, 'c') -> {'a', 'a', 'b'}\n    '''\n    \n    return set(s"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    return sorted(d.items(), key=lambda kv: kv[-1], reverse=True)"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    for k, v in d:\n        d[d.index((k, v))] = (k, v)\n    return d\n\n\ndef is_digit(string):\n    '''\n    Return True if all numeric characters are digits.\n    \n    Note: For a string to contain only digits, all characters must be numeric.\n    \n    Example:\n    is_digit('1234') -> True\n    is_digit('12.34') -> False"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    \n    return sorted(d.items(), key=lambda x:x[1], reverse=True)"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    return sorted(d.items(), key=lambda k: k[1], reverse=True)\n\nd = ({'a': 1, 'b': 2, 'c': 3})\nsorted_d = sort_dictionary_by_value(d)\nprint(sorted_d)\n#>>> [(key, 'value') for (key, 'value') in sorted_d]\n"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    return sorted(d.items(), reverse=True)\n\n\n# Problem 7\ndef count_positives_sum_negatives(lst: list) -> list:\n    '''\n    Give the total number of positives and the sum of negatives.\n    '''\n    positives = 0\n    negatives = 0\n    for num in lst:\n        if num >= 0:\n            positives += num\n        else:\n            negatives += num * -1\n    \n    return [positives, negatives]\n\n\n# Problem 9 \ndef append_character"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    descending_order = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    return [item for item in descending_order]\n\n\ndef check_pass_if_correct(first, second):\n    '''\n    Check if the first argument is equal to (in lexicographic order) the second argument.\n    \n    Example:\n    check_pass_if_correct('cat', 'tac') -> True // It is the same word.\n    check_pass_if_correct('zebra', 'tac') -> False"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    # If d is not dict, raise TypeError 'd must be dict'\n    try:\n        if d is not dict or type(d) is not dict:\n            raise TypeError('d must be dict')\n    except TypeError:\n        print(f'{__name__}: The function requires a dictionary to work, your provided input is {d}')\n        return\n    \n    # Instantiate a new list to be returned\n    return_list = []\n\n    # Sort the dictionary in descending order, by value\n    for i in sorted(d.items(),"}, {"generated_text": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''\n    items = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    return list(items)\n\n\ndef write_dictionary_in_order_from_file(d: dict, filename) -> NoReturn:\n    '''\n    Given a dictionary, write a new text file.\n    \n    The new file will include all items in sorted form, with each item on a separate line.\n    \n    Example:\n    d = {'a': 1, 'b': 2, 'c': 3} and write_dictionary_in"}]}
{"task_id": "20449427", "prompt": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''", "suggestions": [{"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    return int(input(prompt))\n\n\ndef read_float(prompt: str) -> float:\n    '''\n    Return a float read from the user input.\n\n    Example:\n    read_float('Enter an integer: ') -> 1.0\n    read_float('Enter your age: ') -> 21.0\n    '''\n\n    return float(input(prompt))  # todo consider using's' or 'd'\n"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n\n    while True:\n        try:\n            num = int(input(prompt))\n        except ValueError:\n            print('Please enter an integer.')\n            continue\n        else:\n            return num\n\n\n\ndef main() -> None:\n    user_input = read_int('Enter an integer: ')\n    hello_user()\n    print('Goodbye!')\n\n'''\n    To call the function you need to:\n\n        * call the function\n        * create a tuple\n        * pass a tuple as an argument\n'''\ndef hello_"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    value = input(prompt)\n    try:\n        value = int(value)\n    except:\n        print('Invalid integer.')\n        value = None\n    return value\ndef read_int_list(prompt: str) -> list:\n    '''\n    Read a list of integers from the user and return it.\n\n    Example:\n    result = read_int_list('Enter numbers comma-seperated: ')\n    result == [1, 2, 3]\n    '''\n    result = input(prompt)\n    try:"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    try:\n        i = int(input(prompt))\n    except ValueError as e:\n        print_error('Error', e, '\\nPlease try again.')\n        return read_int(prompt)\n    return i\n\n\ndef read_float(prompt: str) -> float:\n    '''\n    Return a float read from the user input.\n\n    Example:\n    read_float('Enter a float: ') -> 1.0\n    read_float('Enter your age: ') -> 21.5\n\n    This function raises a Value"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    return int(input(prompt))\n\n\ndef read_string(prompt: str) -> str:\n    '''\n    Return a string read from the user input.\n\n    Example:\n    string = read_string('Enter a string: ') -> 'Hello World!'\n    '''\n    print(prompt, end='\\n')\n    return input()\n\n\ndef read_float(prompt: str) -> float:\n    '''\n    Return a float read from the user input.\n\n    Example:\n    number = read_float('Enter another"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    input_str = None\n    while input_str is None:\n        input_str = input(prompt)\n        if not input_str.isdigit():\n            input_str = None\n    return int(input_str)\n\n'''\nNote:\n    This is the only function in this module. We are using this here\n    to ensure the program does not break on any invalid input that\n    isn't a integer.  A simple check is enough to ensure the user\n    has input an integer.\n\n    This is another one of my thoughts. I"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    try:\n        return int(input(prompt))\n    except ValueError:\n        print(f\"[WARN] {prompt} can't be read as an integer.\")\n        return 0\n\n\ndef read_float(prompt: str) -> float:\n    '''\n    Return a float read from the user input.\n\n    Example:\n    read_float('Enter an integet: ') -> 1.0\n    read_float('Enter a float number: ') -> 21.5\n    '''\n    try:\n        return float(input("}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    ret_int = '0'\n    prompt += f' : '\n    while type(ret_int)!= int:\n        ret_int = input(prompt)\n        try:\n            ret_int = int(ret_int)\n        except:\n            print('\\nTry again.')\n    return ret_int\n"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    \n    num_str = input(prompt)\n    return int(num_str if re.match(\"(^-?[0-9]+$)\", num_str) else 'invalid int')\n\n\ndef read_float(prompt: str) -> float:\n    '''\n    Return a float read from the user input.\n\n    Example:\n    read_float('Enter an float: ') -> 1.4\n    read_float('Enter your age: ') -> 21.0\n    '''\n\n    if not re.match(\"(^-"}, {"generated_text": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''\n    age = input(prompt)  # type: str\n    try:\n        age = int(age)\n    except ValueError:\n        print('Error, please enter a valid integer value.')\n        age = read_int('Please try again: ')\n    return age\n\n\ndef read_string(prompt: str) -> str:\n    '''\n    As in read_int() but with a required prompt.\n    '''\n    new = input(prompt)  # type: str\n    if len(new) == 0:\n        new"}]}
{"task_id": "31726643", "prompt": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''", "suggestions": [{"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    plt.figure(figsize=(5,10))\n    plt.title('subplot')\n    plt.subplots_adjust(wspace=0, hspace=0) #adjust wspace and hspace\n    for i, j in zip(i, j):\n        plt.subplot(i, j)\n        plt.plot(x, y)\n        plt.grid(True, which=\"both\", ls=\"-\")\n        plt.xlabel(x)\n        plt.ylabel(y)\n\n       pl"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    plt.subplots(nrows, ncols, figsize=(ncols/1.618,nrows/1.618))\n    plt.subplot(nrows, ncols, 1).plot(x, y)\n    return(plt)\n    \n\n\nif __name__ == '__main__':\n    f = np.loadtxt(\"/Users/chaos/Desktop/ML/Data/koreantest.txt\")\n    l = sorted(list(set(f[:,1])), reverse=True)\n    "}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    plt.figure()\n    _, (ax1, ax2) = plt.subplots(nrows=1, ncols=2)\n    ax1.plot(x[0], y[0],'bo')\n\n    ax2.plot(x[1], y[1])\n\n    plt.show()\n\n"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    fig, ax = plt.subplots(nrow, ncols)\n    tau = len(x)\n    r = tau/nrows\n    n = 0\n\n    for i in range(nrows):\n        for j in range(ncols):\n            ax[i, j].plot(x[n:n+r], y[n:n+r])\n            ax[i,j].set_xlabel('tau')\n            ax[i,j].set_ylabel(f'Q{j}')\n            "}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n\n    # Initialize the figure and subplot objects\n    fig = plt.figure(figsize=(6, 6))\n    ax = []\n    # Make all of the subplot objects in the list ax\n    # Each subplot object is a tuple of 4 values:\n    # ax: the actual subplot object\n    # xmin: the starting data value used for the x-axis\n    # xmax: the ending data value used for the x-axis\n    # ymin: the starting data value used for the y-axis\n    # ymax: the ending data value"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    fig = plt.figure(figsize=(ncols*5, nrows*5))\n    fig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.5, wspace=0.2)\n    for i in range(len(x)):\n        ax = fig.add_subplot(nrows, ncols, i+1)\n        ax.plot(x[i], y[i])\n        plt.xticks([int(i) for i in range("}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n\n    plt.figure(figsize=(4,3))\n\n    for row in range(nrows):\n        for col in range(mcols):\n            plt.subplot(nrows, ncols, row*mcols+col + 1)\n            plt.plot(x,y, '*')\n            plt.title(x[col][2])\n            plt.ylabel(x[col][2])\n            plt.xlabel(x[row][1])\n\n            if x[row][0] == '2':"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    fig, ax = plt.subplots(nrows, ncols)\n    ax = ax.flatten()\n    if nrows*ncols == 1:\n        ax[0] = plt.subplot(ncols, nrows, 1)\n        ax[0].plot(x, y)\n    else:\n        print(\"Sorry\")\n    plt.tight_layout(pad=-0.5)\n    plt.show()\n\ndef heatmaps(array:list, cmap=\"rainbow\"):\n    '''"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    figure, axs = plt.subplots(nrows=nrows, ncols=ncols)\n    for i in range(0,len(axs)):\n        axs[i].plot(x[i], y[i])\n        #axs[i].set_xlabel('Time (s)')\n        axs[i].set_ylabel('Voltage')\n    plt.grid()\n    plt.show()"}, {"generated_text": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''\n    n = len(x)\n    plt.figure(figsize=(15,5))\n    \n    for i in range(n):\n        plt.subplot(nrows, ncols, i+1)\n        plt.plot(x[i], y[i])\n        plt.title(x[i], y=None, loc='center', alpha=0.5, fontsize=12, style='italic', color='green', family='arial')\n        plt.ylabel(y[i])\n        plt.x"}]}
{"task_id": "209840", "prompt": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''", "suggestions": [{"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    return dict(zip(key, value))\n\ndef get_max_values(num_list: list, max_value_list:list):\n    '''\n    Given a list and a list in which we have the max values for each element,\n    we will return a new list with all the max values.\n\n    Example:\n    get_max_values([2, 5, 5, 9, 10, 7], [9, 10, 5, 7, 2]) -> [9, 10, 5, 7, 9, 2]\n    '''\n    max_"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    return dict(zip(key,value))"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    return dict({key: val for val, key in zip(value, key)})\n\ndef dictionary_lookup(data:dict, key:list, value:list) -> list:\n    '''\n    Lookup the dictionaries with the matching keys.\n    \n    Example:\n    data = {'a': {'b': 3}, 'c': {'b': 1}}\n    key = ['b']\n    result = [{'b': 3}, {'b': 1}]\n    '''\n    for keys in key:\n        data ="}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    return dict(key=key, value=value)\n\ndef save_to_file(file_name, content):\n    '''\n    Save string as a file.\n\n    Args:\n        file_name: file name\n        content: file string data\n    '''\n    with open(file_name, 'w') as file:\n        file.write(content)\n\ndef read_file_line_by_line(file_name: str) -> list:\n    '''\n    Read each line in a file as a list.\n    \n    "}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n\n    return dict(zip(key, value))\n\ndef to_list(dictionary: dict) -> list:\n    '''\n    Convert a dictionary to a list\n    \n    Example:\n    to_list({'a': 1, 'b': 2}) -> ['a', 'b']\n    to_list({'a': 1}) -> ['a']\n    '''\n\n    return list(dictionary.keys())\n\ndef to_dict(listof_list:list, list_index:int) -> dict:\n    '''\n    Convert"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    return dict(zip(key, value))\n\ndef reverse_dict(dictionary:dict) -> dict:\n    '''\n    Change the value of the dictionary to its corresponding key for \n    each key.\n    \n    Example:\n    reverse_dict({'a': 1, 'b': 2}) -> {1: 'a', 2: 'b'}\n    '''\n    return {value:key for key, value in dictionary.items()}\n\ndef get_max_from_list(sequence:list, keyF:Callable[[any],"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    dictionary = {\n        key[i]: value[i] for i in range(len(key))\n    }\n    return dictionary\n\nif __name__ == '__main__':\n    from random import randint\n    m = make_dictionary(['a', 'b', 'c', 'd', 'e'], [randint(1, 5), randint(1, 5), randint(40, 90), randint(10, 50), randint(1, 5)]) "}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    assert type(key) == list and type(value) == list\n\n    dictionary = {}\n\n    for i in range(len(key)):\n        dictionary[key[i]] = value[i]\n\n    return dictionary\n\ndef make_dictionary(key:list):\n    '''\n    Make a dictionary from a list.\n    \n    Example:\n    make_dictionary([1, 2]) -> {1:2}\n    make_dictionary([1, 2, 3]) ->  {1:2, 2:3}\n    '''"}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    \n    return dict(zip(key, value))\n\n\ndef add_value(dictionary:dict, key:str, value:int) -> None:\n    '''\n    Add a value to a dictionary with a specific key.\n    \n    Example:\n    dictionary = {'a': 1, 'b': 2}\n    add_value(dictionary, 'a', 3) -> {'a': 1, 'b': 2, 'c': 3}\n\n    Arguments:\n        dictionary {dict}: The dictionary where the key is defined.\n        "}, {"generated_text": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''\n    key_value_dict:dict = {k:v for k, v in zip(key, value)}\n    #print(key_value_dict)\n    \n    return key_value_dict\n\n ##########################################\n\ndef calculate_ranges(values: list) -> list:\n    '''\n    Calculate range(s) for given list of values.\n    \n    Return list of range(s).\n    Example:\n    calculate_ranges([1, 2, 3, 4]) -> [[0, 2], [2, 4]]"}]}
{"task_id": "606191", "prompt": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''", "suggestions": [{"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return str(byte, encoding='utf-8')\n\n# def get_byte(a1):\n#     '''\n#     Get byte from string\n#     \n#     Example:\n#     get_byte('Hello') -> b'Hello'\n#     get_byte('World') -> b'World'\n#     '''\n#     return convert_string_to_byte(a1)\n\ndef convert_string_to_byte(byte_string):\n    '''\n    Convert string to byte\n    \n    Example:\n    convert"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return byte.decode()\n\nclass Packer(object):\n    '''\n    Encode python's objects and store with binary data\n    '''\n    \n    def __init__(self):\n        \n        # Python value (bool, int, float, str), byte sequence.\n        self.__objects = {}\n        # Python struct format.\n        self.__struct = {\n            'b': ({}, (1,)),  # 'b' - boolean.\n            'B': ({}, (1,)),  # 'b' - unsigned small integer"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return ''.join([chr(i) for i in byte])\n\ndef get_message():\n    '''\n    Get message from user in bytes using get() function.\n    Returned variable will be string, not bytes\n    \n    Example:\n    get_message() -> 'Hello' for this example\n    '''\n    message = b''\n    byte = getByte()\n    while len(byte)!= 0:\n        message += byte\n        byte = getByte()\n    return message\n\ndef getByte():\n    '''\n    Get 1"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    \n    return \"{:x}\".format(byte).upper()\n\ndef reverse_byte(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    reverse_byte(b'Hello') -> b'H'\n    reverse_byte(b'World') -> b'W'\n    '''\n    \n    return str(byte).encode('CP850')[:1]\n\ndef shift_right(string):\n    '''\n    Shift the character right by one\n    \n    Example:\n    shift_right('"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    \n    return byte.decode(\"utf-8\")\n\n\n'''\nPredict image from input using pre trained model:\n1. Loads the model:\n    1.1. Open: model.face_model\n    1.2. Load: face_detector, predictor_points, landmark_model\n    1.3. Resize: face_detector.resnet_model.input_image\n2. Make all operations\n    2.1. Transform: face_detector.output_image\n    2.2. Visualize: cv2.put"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return str(byte)\n    \ndef byte_list_to_string_list(bytes_list):\n    '''\n    Convert list of bytes to list of strings\n    Input: the list of bytes in bytearray\n    Output: the list of strings\n    '''\n    return_list = []\n    for byte in bytes_list:\n        return_list.append(convert_byte_to_string(byte))\n    return return_list\n\ndef string_list_to_byte_list(string_list):     \n    '''"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return str(byte, encoding='utf-8')\n\ndef convert_byte_to_integer(byte):\n    '''\n    Convert byte to integer\n    \n    Example:\n    convert_byte_to_integer(b'a') -> 97\n    convert_byte_to_integer(b'0') -> 48\n    convert_byte_to_integer(b'9') -> 57\n    '''\n    return int.from_bytes(byte, 'little')\n\ndef hex_string_to_byte(string):\n    ''"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    \n    return byte.decode('utf-8')\n\ndef convert_string_to_byte(string):\n    '''\n    Convert string to byte\n    \n    Example:\n    convert_string_to_byte('Hello') -> b'Hello'\n    convert_string_to_byte('World') -> b'World'\n    '''\n    \n    return string.encode('utf-8')\n\ndef random_password(number_of_characters):\n    '''\n    Generate pseudo random password\n    \n    Example"}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return str(byte, encoding='utf-8')\n\ndef get_image_and_draw_landmarks(frame, faces, face_size='small'):\n    \"\"\"Draw detected faces as rectangles, and overlay face landmarks.\n\n    Parameter\n    ---------\n    frame : numpy.array\n        Input frame\n    faces : list of dict\n        Face(s) information extracted by face_recognition.\n    face_size : str\n        Specify the face size:'small' or 'large' (as in `train_faces`).\n\n    Return\n    "}, {"generated_text": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''\n    return byte.decode('UTF-8')\n\n\ndef convert_string_to_byte(string):\n    '''\n    Convert string to byte\n    \n    Example:\n    convert_string_to_byte(u'Hello') -> b'Hello'\n    convert_string_to_byte(u'World') -> b'World'\n    '''\n    return string.encode('UTF-8')\n\n\ndef get_file_size(file):\n    '''\n    Calculate file size\n    \n    Args:\n        "}]}
{"task_id": "952914", "prompt": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''", "suggestions": [{"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    list_of_lists_flat = []\n    for i in list_of_lists:\n        if isinstance(i, list):\n            for j in make_flat_list(i):\n                list_of_lists_flat.append(j)\n        else:\n            list_of_lists_flat.append(i)\n\n    return list_of_lists_flat\n\n\n    # Make Your Code Here\n\n\n# Test Cases\nprint(make_flat_list([[1, 2],\n                      [3, 4],\n                      [5, 6]]"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n\n    return_list = []\n\n    for sub_list in list_of_lists:\n        addtional_list = []\n\n        for item in sub_list:\n            addtional_list.append(item)\n\n        return_list.extend(addtional_list)\n\n    return return_list\n\n\ndef make_flat_dict(dict_of_dicts: dict) -> dict:\n    '''\n    Return a copy of the given dictionary where all keys and values are\n    lists (and not dictionaries).\n\n    Hint: recursion should"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    for list_item in list_of_lists:\n        if isinstance(list_item, list):\n            list_of_lists = list_of_lists + make_flat_list(list_item)\n    return [item for sublist in list_of_lists for item in sublist]\n\n\ndef max_positive(lst: list, index: int) -> int:\n    '''\n    Finds the maximum a in the integer list such that (a > 0) and (a <= lst[index]),\n    and also includes the index of the"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n\n    return_list = []\n    for nested_list in list_of_lists:\n        for item in flattened_list(nested_list):\n            return_list.append(item)\n    return return_list\n\n\ndef even(array):\n    '''\n    Return a new array with all the even elements of the original array removed (both positive and negative).\n    The returned array should be in the same order as the original array.\n    An empty array should return an empty array.\n\n    Example:\n    even([-5, 0, 10, 18, 6"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    flat_list = []\n    for current_list in list_of_lists:\n        for item in current_list:\n            flat_list.append(item)\n    return flat_list\n\n\ndef flatten_lst(lst: list) -> list:\n    '''\n    Return a copy of the list with any nested lists flattened.\n    Any sub-lists at any level in the nested lists should have been merged\n    into a single sub-list at the appropriate level (i.g. if the nested\n    lists were [[], [[], {}], []"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n\n    result = []\n\n    for item in list_of_lists:\n        for item2 in item:\n            result.append(item2)\n\n    return result\n\n\nassert make_flat_list([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    return [item for sublist in list_of_lists for item in sublist]\n\ndef remove_all(item, list_of_lists: list) -> list:\n    '''\n    Return a list with all occurrences of 'item' removed from 'list_of_lists'.\n\n    The order of the items in the returned list should be the same as the\n    order of the lists that were passed in.\n    The returned list should not contain any nested lists.\n\n    Example:\n    remove_all('l', [['l'], ['l'], ['e"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    # Your code here\n    all_nested_list = []\n    final_nested_list = []\n    for i in range(0, len(list_of_lists)):\n        # check for \"nested list\"\n        if list_of_lists[i]:\n            if list_of_lists[i][0]:\n                for n in list_of_lists[i]:\n                    all_nested_list.append(n)\n        else:\n            final_nested_list.append(list_of_lists[i])\n\n"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n\n    list_to_return = []\n\n    for list_item in list_of_lists:\n        for item in list_item:\n            list_item = item\n        list_to_return.append(list_item)\n    return list_to_return\n\ndef sum_list(list_of_numbers: list) -> float:\n    '''\n    Return the sum of the items in the list passed in. A missing item in the list\n    should cause the function to return None, as if the sum is not defined.\n\n    Precondition: the items"}, {"generated_text": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    pass\n\n\ndef main():\n    '''\n    The following is the result of calling your function\n    '''\n    list_of_lists = [[1,2], [3, 4], [5, 6]]\n    print(make_flat_list(list_of_lists))\n    '''\n    Output:\n    [1, 2, 3, 4, 5, 6]\n    '''\n    list_of_lists = [[1,2], [3,4], [5,6]]\n    print(make_flat_list(list_"}]}
{"task_id": "19913659", "prompt": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    return df.assign(**{\"{}_{}\".format(new_column_name, criteria): df[criteria_column] == criteria}).drop(criteria_column, axis=1)\n\ndef filter_df_by_exclusions(df: pd.DataFrame, exclusions: pd.DataFrame, exclusions_column: str) -> pd.DataFrame:\n    '''\n    Return a copy of the DataFrame df without rows from the DataFrame `exclusions`.\n    Args: \n        - `df` the Pandas"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    df.loc[criteria_column, new_column_name] = df.loc[criteria_column, criteria_column]!= criteria\n    return df\n\ndef fill_na_count(df: pd.DataFrame, criteria_column: str, criteria: str)-> pd.DataFrame:\n    '''\n    Fill all NaN cells in the column where criteria_column matches criteria, with 1 and return df with a new column\n    \n    Example:\n        fill_na_count({'a': [1, 2, np.nan, 3"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    return df.loc[df[criteria_column] == criteria, new_column_name]\n\ndef remove_column(df: pd.DataFrame, criteria_column: str, criteria: str, old_column_name: str)-> pd.DataFrame:\n    '''\n    Remove the old_column_name from the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        remove_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, '"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''    \n\n    df[new_column_name] = False\n    df.loc[df[criteria_column]==criteria, new_column_name] = True\n\n    return df\n\n\ndef read_csv(path_to_file: str, column_names: list)-> pd.DataFrame:\n    '''\n    Read the csv file at path_to_file and returns the whole DataFrame with only these columns of column_names. \n    The columns should be separated by tabs.\n    '''    \n\n    df = pd.read_csv"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    ret = df.copy()\n    ret.loc[(ret[criteria_column] > criteria), new_column_name] = True\n    ret.loc[(ret[criteria_column] <= criteria), new_column_name] = False\n    return(ret)\n\ndef get_count_of_value_criteria(df: pd.DataFrame, column: pd.DataFrame, criteria: pd.Series)-> int:\n    '''\n    Get the count of values in the column which satisfies criteria.\n    \n    Example:"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    result = df.apply(lambda _df: criteria and (_df[criteria_column] == criteria))\n    return df[new_column_name] if new_column_name is not None else _df.apply(lambda _df: criteria and (_df[criteria_column] == criteria))\n\ndef drop_col(df: pd.DataFrame, criteria: str, new_column_name: str = None)-> pd.DataFrame:\n    '''\n    Remove the row from the DataFrame if any of the criteria is applied to.\n    "}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n\n    new_column = pd.Series((df[[criteria_column]] == criteria).astype(int).values, index=df.index)\n\n    # Add the new column 'new_column_name'\n    df.insert(loc=0, column=new_column_name, value=new_column)\n\n    return df\n\ndef filter_numbers(data, column)-> pd.DataFrame:\n    '''\n    Filter DataFrame to only include the rows where the column column contains numbers (strings).\n    \n    Example:\n        filter_"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    column = df.loc[:, criteria_column]\n    df[new_column_name] = column == criteria\n\n    return df\n\n\ndef is_in(in_list, check_list):\n    '''\n    Tells if a boolean array is in a list, using the logical AND operator.\n    input: in_array = pd.Series()\n            check_array = pd.Series()\n    output: a boolean Series like the output of np.isin(in_array, check_array)\n    Example:\n        in_np_array ="}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    \n    # get columns data\n    columns = df[criteria_column].tolist()\n    mask = ~pd.isna(columns)\n    dataset = df.loc[mask].drop(criteria_column, 1)\n    \n    # create new column\n    new_column = pd.Series(value=False, dtype=bool)\n    new_column.index.name = new_column_name\n    dataset.insert(0, new_column_name, new_column)\n    dataset = dataset"}, {"generated_text": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''\n    \n    try:\n        if criteria == '>':\n            return df[df[criteria_column] > criteria].assign(new_column_name = True)\n    \n        if criteria == '<':\n            return df[df[criteria_column] < criteria].assign(new_column_name = True)\n    \n        if criteria == '==':\n            return df[df[criteria_column] == criteria].assign(new_column_name = True)\n    \n        if criteria == '!=':\n            return df["}]}
{"task_id": "12453580", "prompt": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''", "suggestions": [{"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    \n    return separator.join(list_of_strings)"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    assert type(list_of_strings) == list, f'Invalid parameter type: list_of_strings. Expected {type(list_of_strings)} got: {type(list_of_strings)}'  \n    assert type(separator) == str, f'Invalid parameter type for `separator`: {type(list_of_strings)} must be {type(list_of_strings)}'  \n    \n    return separator.join(list_of_strings)\n\ndef get_first_numbers_from_string(string:str,"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    def create_string(list_of_strings:list, separator:str='') -> str:\n        return separator.join(list_of_strings)\n    return create_string(list_of_strings, separator)\n\n\ndef return_int(x:any) -> int:\n    '''\n    Return int of n number.\n    \n    Example:\n    return_int(2) -> 2\n    return_int('-4') -> -4\n    '''\n    try:\n        return int(x)\n    except:"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    return separator.join(list_of_strings)\n###\n\ndef sum_int_list(list):\n    '''\n    Return a list of integers (summing integers, not floats).\"\"\"\n    result = []\n    for s in list:\n        result.append(s)\n    return result\n\n###\n\ndef merge_two_sets(set1, set2):\n    \"\"\"\n    Merge (extend) two sets into one set without duplication.\n    \"\"\"\n    return set1.union(set2)\n\n###\n\ndef"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n \n    separator_length = len(separator)\n \n    result = ''  # result string\n \n    for idx, strr in enumerate(list_of_strings):\n        if idx == 0:\n            result = separator + strr\n        else:\n            result += separator + strr\n \n    return result\n\n\n\nif __name__ == \"__main__\":\n    \n\n    l1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    \n    return separator.join(list_of_strings)\n\n\ndef check_if_user_exists(db, username:str) -> bool:\n    '''\n    Given a database (pandas DataFrame) and username,\n    check if the username already exist in the database.\n    \n    Returns True or False according to exists or not.\n    '''\n    \n    # Check if user already exists\n    check = False if not db.loc[db['USERNAME'] == username, :].empty else True\n\n    # If True, return True"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    return separator.join(list_of_strings)\n\ndef string_to_int(string:str) -> int:\n    '''\n    Convert a string to int. \n    \n    Example:\n    string_to_int('1') -> 1\n    '''\n    return int(string)\n\ndef string_to_float(string:str) -> float:\n    '''\n    Convert a string to float. \n    \n    Example:\n    string_to_float('1') -> 1.0\n    '''\n"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    \n    return separator.join(list_of_strings)\n\n\ndef concatenate_list_of_strings_with_none(list_of_strings:list) -> str:\n    '''\n    Concatenate a list of strings, but add `Null` where empty.\n    \n    Example:\n    concatenate_list_of_strings(['a', '', 'b']) -> 'a-Null-b'\n    concatenate_list_of_strings(['', 'a', '']) -> '-Null-"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n\n    for i in range(len(list_of_strings)):\n        list_of_strings[i] = separator + list_of_strings[i]\n\n    return separator.join(list_of_strings)\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(concatenate_list_of_strings(['a', 'b', 'c'], '-'))\n    print(concatenate_list_of_strings(['a', 'b', 'c', 'd'], '"}, {"generated_text": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''\n    return separator.join(list_of_strings)\n\ndef concatenate_list_of_numbers(list_of_strings:list) -> float:\n    '''\n    Concatenate a list of float-castable strings.\n    \n    Example:\n    concatenate_list_of_numbers(['1.', '6.', '9.']) -> 2e-10\n    '''\n    concatenation = ''\n    for value in list_of_strings:\n        concatenation += str(float"}]}
{"task_id": "466345", "prompt": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''", "suggestions": [{"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    time_list = date_string.split(' ')\n    year = int(time_list[0])\n    month = int(time_list[1])\n    day = int(time_list[2])\n    timestamp = datetime(year, month, day, 0, 0)\n    return timestamp\n\n\nclass DateTime:\n    def __init__(self, time_string: str):\n        '''\n        Initialise a time object by converting a string to a datetime object and\n        setting the time parameters.\n        The date passed in to"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    date_splitted = date_string.split(' ')\n    date_list = date_splitted[:3]\n    minute_splitted = date_splitted[3].split(':')\n    return datetime(int(date_list[0]), int(date_list[1]), int(date_list[2]), \n                    int(minute_splitted[0]), int(minute_splitted[1]))\n\n\ndef convert_days_into_months_years(day: int) -> tuple:\n    '''\n    Return a tuple"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    if date_string:\n        return datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    return datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n\ndef convert_string_with_dates_to_datetime(date_string: str) -> Union[datetime, None]:\n    '''\n    Helper function that tries to convert a string that may represent a date, time or a full datetime object.\n\n    Return: a new datetime object that reflects either the year and month is specified or that a complete datetime object was provided (this happens after the second case that a full dat"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    d = date_string.replace('/', '-').split('T')\n    h = d[1].split(':')\n    return datetime(int(d[0]), int(d[1]), int(d[2]), int(h[0]), int(h[1]))\n\n\ndef convert_datetime_to_string(date_datetime: datetime) -> str:\n    '''\n    Convert a datetime object to a string.\n\n    Example:\n    convert_datetime_to_string(datetime.datetime"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    return datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n\ndef get_dates_to_convert_on_new_calendar(calendar: list, current_date: datetime) -> list:\n    '''\n    Get the dates you want to convert on the new calendar.\n    The dates were added on 1/1/2020 and are the dates you can compare to the existing calendar.\n    The dates should be added in this order: year, month, day of the month\n"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    return datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\n\n\ndef convert_datetime_to_string(datetime_object: datetime) -> str:\n    return datetime_object.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n\ndef convert_date_object_to_string(datetime_object: datetime) -> str:\n    return datetime_object.strftime(\"%Y-%m-%d\")\n"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    return datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n\ndef convert_datetime_to_string(date_object: datetime) -> str:\n    '''\n    Convert a datetime object to a string.\n\n    Example:\n    convert_datetime_to_string(datetime.datetime(2018, 1, 1, 0, 0)) -> '2018-01-01 00:00:00'\n    '''\n    return date_object.strftime"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    return datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n\ndef convert_datetime_to_string(date: datetime) -> str:\n    '''\n    Convert a datetime object to a datetime string.\n\n    Example:\n    convert_datetime_to_string(datetime.datetime(2018, 1, 1, 0, 0)) -> '2018-01-01 00:00:00'\n    '''\n    return date.strftime('%"}, {"generated_text": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''\n    date_str, time_str = date_string.split(\"T\")\n\n    year = int(date_str[0:4])\n    month = int(date_str[4:6])\n    day = int(date_str[6:8])\n\n    hour = int(time_str[0:2])\n    minute = int(time_str[3:5])\n    second = int(time_str[6:8])\n\n    date = datetime(year, month, day)\n    return date.replace(hour=hour, minute="}]}
{"task_id": "39922986", "prompt": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"", "suggestions": [{"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    grouped = df.groupby(groups)\n    return grouped.agg({\"sum_col\": [sum]})\n\n\ndef get_mean_by_group(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the mean by the groups.\n    \"\"\"\n    grouped = df.groupby('groups')\n    return grouped.agg({\"means\": ['mean']})\n\n\ndef get_std_by_group(df: pd.DataFrame) -> pd.DataFrame:\n    "}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    grouped = df.groupby(groups)\n    return grouped.sum().drop(sum_col)\n\ndef get_sum_by_column(df: pd.DataFrame, group_column: str=\"group\", sum_col:[''] =[''], index: bool=False ) -> pd.DataFrame:\n    \"\"\"\n    Returns the sum of each column of the df by the group_column, and the sum of sum_col in a row by the group.\n\n    Example:\n    get_sum_by_column(pd.DataFrame({"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    grouped = df.dropna().groupby(groups)\n    grouped = grouped[sum_col].sum()\n    grouped = dict(grouped)\n    return grouped\n\ndef _get_sum_col_list(df: pd.DataFrame, group_nums: list, col_name: str) -> list:\n    _sums = []\n    #group_nums can either be a single group_num or a list of group_num \n    if isinstance(group_nums, int):\n        for i in range("}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    indexes, groups_sum = {}, {}\n\n    for group in groups:\n        if group not in indexes:\n            indexes[group] = df.groupby(group)[0]\n\n        groups_sum[group] = df.groupby(group)[sum_col].sum()\n\n    return pd.DataFrame({groups: groups_sum[groups]}, index=indexes)\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, col:str) -> pd.DataFrame:\n    \"\"\"\n    "}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    df_agg, index_agg = {}, {}\n    for g in set(groups):\n        index_agg[g], df_agg[g] = [], {}\n        for col in set(df.columns) & set(groups):\n            df_agg[g][col] = df[col].groupby(groups)[sum_col].sum()\n            index_agg[g].append(col)\n        for col in df.columns - set(groups):\n            if sum_col in df_agg[g]:\n                df_agg["}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    sum_by_group = {}\n    for g in groups:\n        for o in df.loc[g, sum_col].keys():\n            if g in sum_by_group.keys():\n                sum_by_group[g][o] = df.loc[g, sum_col][o]\n            else:\n                sum_by_group[g] = {o: df.loc[g, sum_col][o]}\n\n    print(sum_by_group)\n    return pd.DataFrame(sum_by_group)\n\n"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    # Check if all the columns exist in the df\n    for group in groups:\n        if group not in df.columns:\n            raise ValueError('All the columns should exist in the df')\n\n    # Check if the sum_col is in the df too\n    if sum_col not in df.columns:\n        raise ValueError('The sum col should exist in the df')\n\n    df_t = df.groupby(groups).agg({sum_col:'sum'}).reset_index()\n    df_id = pd.DataFrame.from"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n\n    sum_by_group = df.groupby(groups).agg({sum_col : ['size','sum']})\n\n    return sum_by_group\n\n\ndef get_avg_by_group(df: pd.DataFrame, groups:list, avg_col:str(list) ) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the average by the groups\n\n    Example:\n    get_avg_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': ["}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"    \n\n    return df.groupby(groups).sum(sum_col).reset_index()\n\n#%%\n\ndef get_avg_by_group(df: pd.DataFrame, groups:list, sum_col:str, avg_col:str, avg_type:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the avg_type of the avg_col grouped by the groups\n\n    Example:\n    get_avg_by_group(pd.DataFrame({'a': [1, 1, 2, 2"}, {"generated_text": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\"\n    temp_df = df[pd.__version__][groups]\n    temp_df = temp_df[~temp_df.empty].drop_duplicates(keep='first')\n    temp_df = temp_df.sort_values(by=[sum_col], ascending=False)\n    df_count = temp_df.groupby(groups, sort=False).count()\n    df_count = df_count.rename(columns={sum_col: f'{sum_col}_count'}, index=map(lambda x: f'"}]}
{"task_id": "1912434", "prompt": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''", "suggestions": [{"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    tree = ET.fromstring(xml)\n    return list(getattr(e, attr) for e in tree.iter(tag) if getattr(e, attr)!= None)\n\ndef get_attr_key_by_tag(xml: str, tag: str, attr: str) -> str:\n    '''\n    Get an attribute key for a given tag in an XML string.\n\n    Example:\n    get_attr_key_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    root = ET.fromstring(xml)\n    return list(attr_value.text for attr_value in root.iter('*') if attr == attr_value.get(attr))\n\ndef get_attr_names_by_tag(xml: str, tag: str) -> list:\n    '''\n    Get a list of attribute names for a given tag in an XML string.\n\n    Example:\n    get_attr_names_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    attr_values = []\n    xml = xml.replace('\\\\t',' ')\n    root = ET.fromstring(xml)\n    for attribute in root.iter(tag):\n      if attribute.attrib.get(attr):\n        attr_values.append(attribute.attrib['value'])\n      else:# return if the tag does not have the attribute\n        return attr_values\n\n    return attr_values\n\n\ndef get_all_attr_values_for_elem(xml: str, element: str, attr: str):\n"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    if attr == '_id':\n        # handle case where we want the ids of some items\n        # this is needed when there is single node with multiple items\n        return getattr(ET.fromstring(xml).find(tag), attr)\n    elif tag!= '*':\n        return getattr(ET.fromstring(xml).find(tag), attr)\n    else:\n        return list(ET.fromstring(xml).iter(tag))\n\ndef get_first_child_by_tag(xml: str, tag: str)"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    root = ET.fromstring(xml)\n    return _get_attr_value_list_by_tag(root, tag, attr)\n\ndef get_attr_values_by_name(xml: str, name: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given attribute name in an XML string.\n\n    Example:\n    get_attr_values_by_name('<a a=\"1\" a2=\"2\" a3=\"3\" a4=\"4\" a5=\"5\" a"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    e = ET.fromstring(xml)\n\n    return e.iter(tag).__next__().attrib[attr]\n\ndef get_node_tag_children(xml: str, tag: str) -> list:\n    '''\n    Get a node for a given tag in an XML string. This node will have children.\n    This will return an empty list if the given node does not exist.\n    '''\n    try:\n        e = ET.fromstring(xml)\n        return e.findall(tag)\n    except:\n        return []"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n\n    xml = ET.fromstring(xml)\n    return xml.findall(tag)[0].attrib[attr].split()\n\ndef get_class_names(xml: str) -> set:\n    '''\n    Get a set of class names from an XML string.\n    '''\n\n    xml = ET.fromstring(xml)\n    return set([xl[0] for xl in list(xml.findall('x:annotation/object'))])\n\ndef get_object_attribute_values_by_tag(xml: str, tag"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    tree = ET.fromstring(xml)\n    attrname = tree.find(f'.//{tag}').get(attr)\n    return attrname.split()\n\ndef get_attr_values_by_tag_in_tag(xml: str, parent_tag: str, child_tag: str, parent_attr: str, child_attr: str) -> list:\n    '''\n    Get a list of attribute values for two tag nodes in an XML string.\n\n    This is an alternative to get_attr_values_by_tag with the tag"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n    root = ET.fromstring(xml)\n    return [elem.attrib[attr] for elem in root.findall(tag)]\n\n\ndef get_attributes_by_tag(xml:str, tag:str) -> dict:\n    '''Parse xml and get all attributes except for the ones with empty values.'''\n    root = ET.fromstring(xml)\n    attr_values = {k:v[0] for k, v in dict(root.attrib).items() if v and k not in [\"version\",\"xmlns\"]}"}, {"generated_text": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''\n\n    root = ET.fromstring(xml)\n    \n    # find the children of the root\n    children = root.findall(tag)\n\n    if children is None:\n        return []\n\n    attr_values = []\n\n    for child in children:\n        # get the attribute value of the tag\n        attr_values.append(child.get(attr))\n\n    return attr_values\n\n\ndef get_attr_values_by_tag_by_parent(xml: str, parent_tag: str, tag: str, attr: str) -> list:"}]}
{"task_id": "28654047", "prompt": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    col_indices = df.mindex.axis_names\n    col_names = df.columns.categories\n    \n    row_indices = df.mindex.values\n    if len(row_indices) == 1:\n        row_indices = row_indices * len(col_names)\n    \n    columns = pd.DataFrame({i:df[c] for i, c in zip(col_indices, col_names)})\n    columns.columns = range(len(columns))\n    \n"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    return df.stack()\n\ndef get_data_column_names(df: pd.DataFrame) -> list:\n    return list(df)\n\ndef rename_data_columns(df: pd.DataFrame, columns: list, data_name: str) -> pd.DataFrame:\n    cols_idx = get_data_column_names(df)\n    new_cols = [data_name] + columns\n    new_cols = [col for col in new_cols if col in cols_idx]"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    df_transpose = df.T\n    return df_transpose\n\n\n\n\ndef get_top_n_in_each_column(df: pd.DataFrame, n: int):\n    '''\n    Get a dataframe with top-n values in each column.\n    e.g. get_top_n_in_each_column(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), n = 2) -> pd.DataFrame({'a':[1, 2], '"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    mapping = {}\n    for i in range(df.shape[1]):\n        mapping[df.columns[i]:i+1] = i\n    return df.values.tolist()\n\ndef convert_columns_to_rows(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert columns to rows of a dataframe.\n\n    Example:\n    convert_columns_to_rows(pd.DataFrame({'0': [1, 2, 3], '1': [4"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    return df.melt(id_vars=[k for k in df.columns.values.tolist() ], var_name='_', value_name='value')\n\n\ndef extract_groups_list(df: pd.DataFrame, list_of_groups: List[str]) -> pd.DataFrame:\n    '''\n    From a df with groups and values, we create the groups_list.\n    Input:\n        df: pandas.DataFrame with groups and values columns\n        list_of_groups: list of str\n            List"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    for column in df:\n        df[str(column + \"_\")] = df[column]\n        df = df.rename(columns={column: column + \"_\"})\n    return df\n\ndef get_indexes(path: str = None) -> pd.DataFrame:\n    '''\n    Read rows in a CSV file and convert them to a Pandas.DataFrame.\n\n    - If the path is None, return pandas.DataFrame with headers \"index\" and 0, 1,..., n-1\n    - If the path is not"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    # Get column names\n    column_names = list(df)\n    # Add columns as needed\n    for index in range(len(column_names)):\n        temp_column_name = str(index) + \".\" + column_names[index]\n        df = df.rename(columns={column_names[index]: temp_column_name})\n    return df\n\ndef dataframe_to_html(df: pd.DataFrame, table_id: str = 'table', header: bool = True) -> str:\n    '''\n"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    list_of_lists = []\n    for index, row in df.iterrows():\n        list_of_lists.append(list(row))\n    return pd.DataFrame(list_of_lists)\n\ndef check_columns_length(df: pd.DataFrame, expected_len: int, col_name: str, ignore_rows_with_column_nans=0):\n    '''\n    Check that a dataframe has expected length for a given column.\n\n    If a given column contains nan values, then the check will fail."}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    return df.apply(lambda x: pd.Series(df[x.name].values), axis=1)\n\n\ndef join_rows_and_columns(df1: pd.DataFrame, df2: pd.DataFrame, how=\"inner\"):\n    '''\n    Join two dataframes.\n\n    Example:\n        join_rows_and_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\n                             , pd.DataFrame({'c': [7"}, {"generated_text": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError('Input dataframe must be a pandas DataFrame')\n\n    numeric_cols = [x for x in df.columns if df[x].dtype!= 'O']\n    df = df[numeric_cols]\n    df = df.replace({None:''})\n    df = df.melt(id_vars=numeric_cols, var_name='step', value_name='value')\n    df = df.apply(pd.to_"}]}
{"task_id": "38987", "prompt": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''", "suggestions": [{"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    import copy\n    return copy.deepcopy(dict2) if not dict1 else merge_two_dic(dict1, dict2)\n\ndef merge_two_dic(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    for key1 in dict1.keys():\n        if"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    from copy import deepcopy\n    return {**deepcopy(dict1), **deepcopy(dict2)}\n\n\ndef make_dict(elements):\n    '''\n    Make a dictionary from the given elements.\n    \n    Example:\n    make_dict(['a', 'b', 'c', 'd']) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    make_dict(['a', 'b', 'c', 'd', 1]) -> {'a': 1, 'b': 2,"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    return dict1.copy() | dict2.copy()\n\ndef make_dict(x):\n    '''\n    Return a dictionary with items from all iterables.\n    \n    Example:\n    make_dict('abc') -> {'a': 1, 'b': 1, 'c': 1}\n    make_dict((1, 2, 3)) -> {1: 1, 2: 1, 3: 1}\n    make_dict(('a', 'b', 'c')) -> {'a': 1, 'b': 1, 'c': 1"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    # merge dictionaries\n    result = dict1.copy()\n    result.update(dict2)\n    return result\n\n\ndef to_json_string(input_dict, indent=1):\n    '''\n    Converts a python object into a json.\n    \n    Example:\n    to_json_string({'name': 'john', 'greet': 'hello'}) -> {\"name\": \"john\", \"greet\": \"hello\"}\n\n    '''\n    result = ''\n    result += json.dumps(input_dict, indent=indent"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n\n    for key in dict2.keys():\n        if key not in dict1:\n            dict1[key] = dict2[key]\n\n    return dict1\n\n\ndef load_object(file):\n    '''\n    Load an object (file in pickle_base.py) and return it.\n    \n    Example:\n    load_object('dictionary_1') -> {'a': 1, 'b': 2}\n    load_object('dictionary_2') -> {'c': 3, 'd': 4}\n    load_object('d"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    for key, value in dict2.items():\n        if key in dict1 and isinstance(dict1[key], dict):\n            merge_dictionary(dict1[key], value)\n        else:\n            dict1[key] = value\n\n\n__doc__ = \"\"\"\n        \u0415\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u043a\u043b\u044e\u0447\u0435\u0439 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 dict1 \u0438 dict2.\n        \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    \n    dict1.update(dict2)\n    return dict1\n\ndef count_letters(word):\n    '''\n    Returns the amount of letters in the given word.\n    \n    Example:\n    count_letters('test') -> 4\n    count_letters((1, 2, 2, 2, 3)) -> 5\n    '''\n    number_of_letters = 0\n    \n    for letter in word:\n        number_of_letters += 1\n    \n    return number_of_letters\n\ndef letters_to_number(word_"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\n    \nfrom math import sqrt\n        \ndef is_square(num):\n    '''\n    Return True if the input num is a perfect square value.\n    \n    Example:\n    >>> is_square(16)\n    >>> True\n    >>> is_square(9)\n    >>> False\n    '''\n    return (sqrt(num) - int(sqrt(num))) == 0\n\ndef is_prime(num):\n    ''"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    # This is the merged dictionary.\n    merged_dict = {}\n\n    # Go through the dict1.\n    for key, value in dict1.items():\n        \n        # Add key to dict2.\n        if isinstance(value, dict):\n            merged_dict[key] = merge_dictionary(dict1=value, dict2=dict2[key])\n        else:\n            merged_dict[key] = dict2[key]\n\n    # Return results.\n    return merged_dict\n\n\ndef get_predictor_file"}, {"generated_text": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''\n    \n    merged_dict = {}\n    for key in dict2:\n        if key in dict1:\n            if type(dict2[key]) is dict:\n                if type(dict1[key]) is dict:\n                    merged_dict[key] = merge_dictionary(dict1[key], dict2[key])\n                else:\n                    merged_dict[key] = dict2[key]\n            else:\n                merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key]"}]}
{"task_id": "16476924", "prompt": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for i, row_of_df in enumerate(df.itertuples()):\n        print (f\"Row {i : 3d} \\t:\\t {row_of_df}\")\n\ndef iterate_column(df: pd.DataFrame):\n    '''\n    Iterate over columns of a DataFrame and print the column index and the column contents.\n    '''\n    for i, column_of_df in enumerate(df.iteritems()):\n        print (f\"Column for {column_of_df[1]["}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    print(df.head()) # prints the contents of the first 4 rows\n    print(df.tail()) # prints the content of the last 4 rows\n    num_rows = 0\n    for row in df.iterrows():\n        row_index = row[0]\n        row_data = row[1]\n        print('Row index %d is  %s' % (num_rows + 1, row_index))\n        print('Row content %s' % row_data)\n        num_rows += 1\n        if num_rows > 4:\n            "}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    row_num = 0\n    for row in df.iterrows():\n        print(f\"\\nRow {row_num +1}: {row[1].values}\")\n        row_num += 1\n\ndef extract_column(df: pd.DataFrame, column_name: str):\n    '''\n    Extract the column of a DataFrame with the column name. Return the column Series.\n    '''\n    return df.loc[:, column_name]\n\ndef get_column_names(df: pd.DataFrame, row_"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    row_id_ = 0\n    for index, row in df.iterrows():\n        print(f'#{row_id_}. {sorted(row.items())}')\n        row_id_ += 1\n\ndf = pd.DataFrame()\ndf = pd.DataFrame([\n    [1, 'A', -123413123],\n    [2, 'B', 456234234],\n    [3, 'C', 232423232]\n], columns=['a', 'b', 'c'])\n\nprint('"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n\n    for idx,row in df.iterrows():\n\n        print('At row {0} and column {1}'.format(idx,row.name))\n\n        print('row content:')\n\n        keys =  row.keys()\n\n        for col in keys:\n            value = row[col]\n            print('-- {0:s}: {1!s}'.format(col, value))\n\n        print('')\n\ndef dataframe_select_rows_to_iterate_over(df: pd.DataFrame):\n    '''\n    "}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    print(f'Row {df.index[0]}:\\n {df}')\n\n\nprint('---- Simple filtering of a DataFrame')\nf = lambda df : df[df.A > 0]\niterate_row(f(pd.DataFrame(([1,2], [3,4], [5,6]), index = ['a', 'b', 'c'], columns = ['A', 'B'])))\n\nf = lambda df, key : df[df[key] > 0]\niterate_row(f(pd.DataFrame(([1"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for row_index, row in df.iterrows():\n        if (not isinstance(row_index, int)) or not (isinstance(row, pd.Series) or isinstance(row, pd.DataFrame)):\n            raise TypeError('The data input to this method must be a pandas.DataFrame or a pandas.Series.')\n        print (\"Data is from row %d and row content:\" % row_index)\n        print (row)\n\ndef search_word():\n    '''\n    Read data in from csv files,"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for index, row in df.iterrows():\n        print(index, \"-\", row)\n\ndef remove_e(inp: str):\n    '''\n    Return a new string, without the last character.\n    '''\n    return(inp[:-1])\n\ndef print_df(df: pd.DataFrame) -> None:\n    '''\n    Print the given DataFrame (including headers).\n    '''\n    print(df)\n\ndef print_header_subtotal(table_name: str, row: str) ->"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    i = 0\n    row = df.iloc[i, :] # Get current row\n    for j in range(df.columns.size): # Iterate over each column in the row\n      print(i, ':', end='')\n      print(row[\"{0}\".format(j)])\n      print()\n\ndef iterate_cell(df: pd.DataFrame):\n    '''\n    Iterte over cells of a DataFrame and print the row content.\n    '''\n    i = 0\n    row = df"}, {"generated_text": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''\n    for index in range(df.shape[0]):\n        print(index,df[index,:])\n    for index in range(df.index):\n        print(index,df.iloc[index-1,:])\n\ndef iterate_columns(df: pd.DataFrame):\n    '''\n    Iterate over columns of a DataFrame and print the column name and the row content.\n    '''\n    for column in df:\n        for row in df[column]:\n            print(column,row)\n\ndef get_"}]}
{"task_id": "47152691", "prompt": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"", "suggestions": [{"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    colnames = df.name.map(str)\n    return df.pivot(index='id',columns=colnames,values='value') \n\ndef group_add(df: pd.DataFrame, value: any) -> pd.DataFrame:\n    \"\"\"\n    Add a new column 'x' based on the index of the existing columns in 'df'.\n\n    Example:\n    group_add(pd.DataFrame({'x': [2, 9, 8], 'y': ['a', 'b', 'c']}), ['d'"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    df = df.pivot(index='name', columns='value', columns=['id'])\n    \n    return df\n\n\ndef filter_dataframe(df: pd.DataFrame, criteria: list) -> pd.DataFrame:\n    \"\"\"\n    Create a new dataframe which only contains rows which that contain the criteria in the column.\n\n    Criteria for filtering\n        Any value in the column 'criteria' that contains the word 'criteria' can be replaced with true.\n        Any value in the column 'criteria' that contains the word 'not_"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    # TODO: Implement the function\n    pivot = df.set_index('name').stack().reset_index()\n    pivot.columns = ['id', 'value']\n\n    return pivot.pivot_table('id', 'value', ['value']).reset_index().to_df()\n\n\nif __name__ == '__main__':\n    print(pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    # Get column 'name' and 'value'\n    names = df['name']\n    values = df['value']\n    # Get column 'id' (this is the index column)\n    id_index = df['id']\n    # Convert the columns 'name' and 'id' to columns of type 'object'\n    pivoted = pd.DataFrame({'name': names.to_numpy(), 'value': values.to_numpy(), 'id': id_index.to_numpy()}).T\n    return pivoted.set_"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    return df.pivot(index='id', columns='name', values=\"value\").dropna(how='all')\n\nclass DataFrameStats(object):\n    \"\"\"\n    Base class for dataframe stats that can be inherited from\n    where the statistics are calculated.\n    \"\"\"\n    def _get_aggregate_func(field_name: str, func_name: str) -> callable:\n        return getattr(pd.DataFrame(dict(name=['name'])).groupby('name').aggregate(func_name), field_name)\n    "}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    df[df[\"value\"]] = df[df[\"value\"]].str.split(\",\", expand = True)\n    df = df.unstack([\"id\"])\n    return df\n\ndef create_bins(labels: list, n_bins: int) -> dict:\n    \"\"\"\n    Create a dictionary from the labels and the corresponding bins from 0 to n_bins\n    Example:\n    create_bins([2,4,5], 2) -> {2: 0, 4: 0, 5: 1}\n    \"\"\"\n    return"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    # Use the.loc[] command on df to access the values\n    return df.pivot_table(index='name', values='value')\n\ndef count_values(df: pd.DataFrame) -> pd.Series:\n    \"\"\"\n    Return a series that counts how many rows of each value in the column 'value' are present.\n    \n    Example:\n    count_values(pd.DataFrame({'id': [1, 2, 3], 'value': ['a', 'b', 'c']}))\n    -> pd.Series({"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n    # your code here\n    return df\n\ndef drop_rows(df: pd.DataFrame, df_key: str) -> pd.DataFrame:\n    \"\"\"\n    Drop the rows where the key 'df_key' is not present in the dataframe df.\n\n    Example:\n    drop_rows(pd.DataFrame({'A': [1, 1, 2], 'B': [3, 4, 5]}), 'B')\n    -> pd.DataFrame({'A': [1, 2]})\n    \"\"\"\n    # your code"}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n\n    df_pivot = pd.pivot_table(df, values='value', index='name', columns='id')\n    df_pivot.reset_index(inplace=True)\n\n    return df_pivot\n\ndef filter_dataframe(df: pd.DataFrame, filter_column: str, values: tuple) -> pd.DataFrame:\n    \"\"\"\n    Filter the dataframe to include only rows where the column 'filter_column' has values that match given values.\n    \n    Example:\n    filter_dataframe(pd."}, {"generated_text": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\"\n\n    pivot_df = df.pivot_table(index='name', values='value', aggfunc=np.nanmean)\n    if pd.__version__ >= '0.22':\n        return pd.concat([df, pivot_df], axis=1)\n    else:\n        return pd.concat([df, pivot_df], axis=1, join='inner')\n\n\ndef extract_from_df(df: pd.DataFrame, filter_column: str = 'name') -> pd.DataFrame:\n    \"\"\"\n"}]}
{"task_id": "1207406", "prompt": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''", "suggestions": [{"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n\n    return new_list\n"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    return list(filter(lambda value: value not in list2, list1))\n"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n\n\ndef remove_items_from_list_recursive(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    This uses function'remove_items_from_list'.\n\n    Example:\n    remove_items_from_list_recursive([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    return [x for x in list1 if x not in list2]\n\ndef add_items_to_list(list2: list, list1: list) -> list:\n    '''\n    Add all items in list1 to list2 and return the result without modifying the existing lists\n\n    Example:\n    add_items_to_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 4, 5, 6]\n\n    add_items_to_list([1, 2, 3], [4, 5])\n"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    answer = []\n    if set(list2).issubset(set(list1)):\n        answer = list1\n        return answer\n\n    for num in list1:\n        if num not in list2:\n            answer.append(num)\n    return answer\n\n\ndef convert_to_binary(number: float) -> str:\n    '''\n    Convert the number into a binary string of its digits.\n\n    Example:\n    convert_to_binary(3) -> '101'\n    '''\n    if number < 1:\n        "}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    return list(set(list1) - set(list2))\n\ndef replace(list1: list, item1, item2, index = None, count = None):\n    '''\n    Replace specified number of (or one) occurrences of item1 with item2 in each element in list.\n\n    :param list1: List to be modifed.\n    :type list1: list\n\n    :param item1: Pattern to be replaced.\n    :type item1: any\n\n    :param item2: Pattern replaced with.\n    :type item2:"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    return (filter(lambda x: x not in list2, list1))"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    # Fill this in.\n\nlist_in_list = [[[3, 9], 12, 100], [[1, 5], 24, 513, 10], [[11, 2], 3, 0], [[1, 2], 5, 500]]\nprint(list_in_list)\nprint(remove_items_from_list(list_in_list[0], list_in_list[1]))\nprint(list_in_list)\nprint(remove_items_from_list(list_in_list[0], list_in_list[2]"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n    # Find indices of all element's which are in list2\n    indices_to_remove = [i for i, x in enumerate(list1) if x in list2]\n\n    # Remove those indices from list1\n    for i in indices_to_remove:\n        del list1[i]\n\n    return list1\n\n\ndef sort_by_string_length(strings: list) -> list:\n    '''\n    Sort strings by length of their strings (for the purposes of comparison).\n    Precond: all elements in list are str\n    '''"}, {"generated_text": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''\n\n    return [x for x in list1 if x not in list2]\n\n\ndef remove_from_set(set1, set2) -> set:\n    '''\n    Remove all elements from set2 that are in set1.\n\n    Example:\n      remove_from_set({1, 2, 3}, {1, 2})\n    -> {3}\n\n    remove_from_set({1, 2}, {1, 2})\n    -> set()\n\n    remove_from_set({1, 2, 3}, {4, 9})\n    -> {1"}]}
{"task_id": "29640685", "prompt": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''", "suggestions": [{"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    sprite_mask = pygame.mask.from_surface(sprite.image)\n    bullet_mask = pygame.mask.from_surface(bullet.bullet)\n\n    # Check if the rectangles have overlap\n    offset = (bullet.rect[0] - sprite.rect[0], bullet.rect[1] - sprite.rect[1])\n    return sprite_mask.overlap(bullet_mask, offset)!= None\n\nrunning = True\n# Run while the game needs to continue\nwhile running:\n\n    #Create the event"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    #Get the displacement between the bullet and the sprite\n    x_disp = bullet.rect.bottomleft[0] - sprite.rect.bottomright[0]\n    y_disp = bullet.rect.bottomleft[1] - sprite.rect.bottomright[1]\n\n    #Calculate the distance between the bullet and the sprite\n    distance =  x_disp ** 2 + y_disp ** 2\n    \n    #Use the Pythagoras theorem to find the square root of distance\n    return distance <= 0.08 * distance\n\n    \nclass"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    offset_x = sprite.rect.left - bullet.rect.left\n    offset_y = sprite.rect.top - bullet.rect.top\n    collide = False\n    if offset_x >= 0:\n        if offset_y > 0:\n            collide = sprite.rect.left <= bullet.rect.left + bullet.rect.width and \\\n                      bullet.rect.top <= sprite.rect.top + sprite.rect.height and \\\n                      bullet.rect.top + bullet.rect.height >= sprite.rect.top\n\n        if offset"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    if sprite.rect.clip(bullet.rect):\n        return True\n    return False\n\n# Define the player1\nplayer1 = Sprite(100, 100, \"user.BMP\")\n\n# Create an initial bullet\nbullet = Bullet(100, 50)\nkey = pygame.key.get_pressed()\n\n# The main loop\nwhile True:\n    window.fill((0, 0, 0))\n    player1.render()\n    #print(pygame.mouse.get_pos())\n    for event in pygame.event."}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    distances = [(sprite.rect.x - bullet.rect.x), (sprite.rect.y - bullet.rect.y), \n                 (sprite.rect.x - bullet.rect.x), (sprite.rect.y - bullet.rect.y)]\n    if((distances[0] ** 2 + distances[1] ** 2 <= distances[2] + 10 ** 2)\n       or (distances[3] ** 2 + distances[4] ** 2 <= distances[5] + 10 ** 2)):\n        return True\n\n#"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    result_of_collision = pygame.Rect.colliderect(sprite.rect, bullet.rect)\n    return result_of_collision\n\ndef fire(bullet):\n    return(bullet.rect.inflate(0, 0).colliderect(rect))\n\nclass Ship(Sprite):\n    def __init__(self, x, y, name):\n        super().__init__(x, y, name)\n        self.__m_hull = 100\n        self.__m_engine = 30\n        self"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    d = math.sqrt((math.pow(bullet.rect.center[0] - sprite.rect.center[0], 2) +\n                   math.pow(bullet.rect.center[1] - sprite.rect.center[1], 2)))\n    if d <= (25 + sprite.rect.width / 2 + bullet.rect.width / 2):\n        return True\n    return False\n\n# Define the enemies \nclass Enemy(Sprite):\n    def __init__(self, x, y):\n        self.image ="}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    return sprite.rect.colliderect(bullet.rect)\n\ndef bullet_fired(pressed, direction, x, y):\n    # if the player pressed the space bar, create a bullet on x, y\n    if pressed[pygame.K_SPACE] and direction == \"Up\":\n        new_bullet = Bullet(x - 5, y)\n    elif pressed[pygame.K_SPACE] and direction == \"Down\":\n        new_bullet = Bullet(x + 1, y)\n    elif pressed[pygame.K"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    if pygame.sprite.collide_rect(sprite, bullet):\n        return True \n    else: \n        return False \n#Define the alien class   \nclass Alien:\n    def __init__(self, color, x, y, number, rect):\n        self.number = number\n        self.color = color    \n        if number == 1:\n            self.image1 = pygame.image.load(\"alien1.bmp\")\n            self.image2 = pygame.image.load(\"alien2.bmp\")\n"}, {"generated_text": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''\n    rect_2_p = pygame.Rect(*bullet.rect.center, 0, 0).inflate(-19, -2)\n    sprite_col = bullet.rect.colliderect(sprite.rect)\n\n    if sprite_col:\n        return True\n    else:\n        rect_2_s = pygame.Rect(*sprite.rect.topleft, 40, 40)\n        if rect_2_s.colliderect(rect_2_p):\n            return True\n        else:\n            return False\n\ndef"}]}
{"task_id": "72899", "prompt": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''", "suggestions": [{"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=lambda x: x[key])\n\ndef normalize_path(string: str) -> str:\n    '''\n    Resolve absolute paths.\n    \n    Example:\n    normalize_path('../data/data.csv') -> '../data/data.csv'\n    '''\n    return os.path.normpath(os.path.expanduser(string))\n\ndef parse_date_and_duration(s: str) -> date:\n    '''\n    Resolve a string representing a date and"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=lambda x: (x.get(key), x.get('a')), reverse=True)\n\ndef create_dict_of_list_items(lst: list) -> Dict:\n    '''\n    Create a single item dictionary of key values.\n    \n    Example:\n    create_dict_of_list_items([{'a': 2, 'b': 3 }, {'b': 1 }]) ->\n        {'a': 2, 'b': 3, 'b': 1 }\n    '''   "}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=lambda k: k[key])\n\ndef to_str(var):\n    '''\n    Format Python objects (e.g., dicts and lists) to Strings (strings).\n    \n    Example usage:\n    a, b, c = {1, 2, 3}, [4, 5, 6], dict()    \n    print(f\"a={a}\\nb={b}\\nc={c}\")\n    print(to_str([1, 2, 3]))\n    print(to_str(\"string\"))\n"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return list(sorted(lst, key=lambda i: i[key]))\n\n\nif __name__ == '__main__':\n    from collections import namedtuple\n\n    test_input1 = \"\"\"\nExample:\n\nInput:\n2\n\n 1 3\n 7 5\n\nOutput:\n  [{1, 5, 7}, {3, 5}]\n\nInput:\n\n1\n\n 1 2\n 1 3\n\nOutput:\n  [[1], [1, 2], [1, 3]]\n\nHint: We can solve the problem in one"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=lambda item: item[key])\n\n\nif __name__ == '__main__':\n    fruits = [\"apple\", \"apple\", \"orange\", \"grape\", \"kiwifruit\", \"kiwifruit\"]\n\n    assert sort_list_of_dicts(fruits, \"a\") == fruits, \"Not sorted\"\n"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=lambda x: x[key])\n\nif __name__ == '__main__':\n\n    print('Example 1:')\n    print(sort_list_of_dicts([{2:'red', 1: 'black'}, {2: 'white', 0: 'blue'}, {1:'red', 3: 'chartreuse'}], 'a'))\n    print('Expected Result:')\n    print('''[{2:'red', 1: 'black'}, {1:'red', 3"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    # Return original list if it is not sorted\n    if len(lst) == len(set(lst)):\n        return lst\n\n    # Generate a dict using the given key and sort by it\n    dict_lst = {}\n    for dct in lst:\n        dict_lst[dct[key]] = dct\n    sorted_dct_lst = sorted(dict_lst, key=lambda k: lst[i][key])\n\n    # Re-generate the list and sort it\n    lst = []"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=lambda dic: dic[key])\n\ndef dict_filter_inclusive(*args) -> dict:\n    '''\n    Filter out all keys, values in a dictionary\n    that don't exist in another dictionary.\n    '''\n    d1, *d2 = args\n    for key, value in d1.items():\n        if key and value in d2.values():\n            pass\n        else:\n            return {key: value}\n        \ndef dict_filter_keys(dic: dict, filters"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=lambda i: i[key])\n\n\ndef calculate_euclidean_dist(point1: dict, point2: dict) -> float:\n    '''\n    Given two points calculate their euclidean distance from \n    their coordinates, which should be dictionaries: e.x.:\n    {'x': 4, 'y': 10}.\n    All inputs and outputs shall be dictionaries.\n    '''\n    point1_x = point1['x']\n    point1_y = point1['y']\n"}, {"generated_text": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''\n    return sorted(lst, key=lambda x: x[key])\n"}]}
{"task_id": "22219004", "prompt": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    grouped = df.groupby(group_by, as_index=False)[column]\n    return grouped.agg({column: lambda x: x.tolist()}).values.tolist()\n\n\ndef create_list_by_columns(df: pd.DataFrame, columns: list) -> list:\n    '''\n    Create a list of lists by grouping by columns with specific order.\n\n    Example:\n    create_list_by_columns(pd.DataFrame({'a': [1, 1, 2], 'b': ["}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    return df.groupby([group_by]).agg({column: ['first', 'count']}).to_numpy()[:, 1].tolist()\n\ndef create_list_by_column_nontrivial_differences(df: pd.DataFrame, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column.\n\n    Example:\n    create_list_by_column_nontrivial_differences(pd.DataFrame({'a': [1, 1, 2], 'b': ["}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    # Extract the list to be returned\n    return_list = list()\n\n    # Use the group_by and column to create\n    for i, _ in df.groupby(group_by):\n        return_list.append(list(i))\n\n    # Convert the resulting df to a list\n    return list(pd.DataFrame({column: return_list}).values.tolist())\n\ndef create_list_by_splitting(df: pd.DataFrame, column: str) -> list:\n    '''\n    Create a list of lists"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n\n    lists = df[group_by].unique()\n    print(lists)\n    return_list = []\n\n    iterator = 0\n    for e in lists:  # e == row\n        new_list = list()\n        for x in df[column]:  # x == column\n            if x == e:\n                new_list.append(e)\n\n        if new_list is not None:\n            #print(new_list)\n            return_list.append(new_list)\n\n    return return_list\n\ndef check_if_unique(a"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    \n    df_grouping = df.groupby(group_by, as_index=False).agg(tuple)\n    result = [elem[1][column] for elem in df_grouping]\n\n    return result\n\ndef create_list_by_indexing(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by indexing a column of a DataFrame.\n\n    Example:\n    create_list_by_indexing(pd.DataFrame({"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    output = []\n    if df.groupby(group_by).size() > 0:\n        for val in set(df[group_by]):\n            # create an empty sublist\n            sublist = []\n            for group, row in df.groupby(group_by):\n                if group == val:\n                    sublist.append(row[column])\n            output.append(sublist)\n    return output\n\ndef count_total(df: pd.DataFrame, col_name: str) -> dict:\n    '''\n    Count"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    return_list = []\n    column = df[column]\n    for i in range(0, len(column)):\n        if pd.isnull(column[i]):\n            return_list.append([])\n        else:\n            my_set = set()\n            index = i\n            while index <= len(column):\n                if not pd.isnull(column[index]):\n                    my_set.add(column[index])\n                    index += 1\n                else:\n                    break\n            return_list.append(list(my"}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    # TODO: Define this with the get_group_list() function from the preceeding lesson.\n\n    grouping_list = {'a':[], 'b':[]}\n    if 'b' in df[group_by].unique():\n        for val in df[group_by].unique():\n            grouping_list['a'].append(val)\n            grouping_list['b'] = df[df[group_by] == val][column].tolist()\n    else:\n        grouping_list['a'] = df["}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    return list(df.groupby(group_by)[column].unique())\n\ndef merge_two_dataframes_on_group(df1, df2, key1 = 'name', key2 = 'name2', fill_value = None):\n    '''\n    Returns dataframe with rows merged with the rows in both dataframes merged on the key.\n    If fill_value is set the return a new dataframe with merged rows.\n\n    Example:\n    df1 = pd.DataFrame({'a': [1, 1, 2], 'b': ["}, {"generated_text": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''\n    list_by_grouping = []\n    grouping = df.groupby(group_by)\n    for item in grouping.groups.keys():\n        one_item = grouping.get_group(item)\n        list_by_grouping.append(one_item[column])\n\n    return list_by_grouping\n\ndef find_indexes(list_a_data, list_b_data):\n    '''\n    Find indexes of elements in given lists by a comparison.\n\n    Example:\n    find_indexes([1,1,2"}]}
{"task_id": "743806", "prompt": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''", "suggestions": [{"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    \n    return re.split('-'+separator+'|' + separator, string)\n\ndef capitalize_all(words: str) -> str:\n    '''\n    Capitalizes all words of a string.\n    '''\n    \n    return''.join(map(lambda word: word[0].upper()+word[1:], words.split(sep=' ')))\n\ndef capitalize_first(words: str) -> str:\n    '''\n    Capitalizes the first word of a string.\n    '''\n    \n    return"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    return map(lambda x: x.split(separator), string)\n\nclass Tree(object):\n    def __init__(self):\n        self.key = None\n\n    def is_leaf(self):\n        return not self.children\n\n    def has_children(self):\n        return len(self.children) > 0\n\n    def add_child(self, child):\n        self.children[child.key] = child\n\n    def get_child(self, key):\n        if key in self.children:\n            return self.children[key]"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n\n    list_string = []\n    for i, char in enumerate(string):\n        if char == separator:\n            list_string = list_string + [string[:i+1]]\n            string = string[i+1:]\n    list_string.append(string)\n\n    return list_string\n\n\n# main\nif __name__ == '__main__':\n\n    input_data = sys.stdin.readlines()\n    for in_data in input_data:\n        l, r = in_data.split('<')       # in"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    return string.split(separator)"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    if (len(string) > 0 and string[0]!= '&' and string[-1]!= '&' and separator!= ''):\n        i = -1\n        first_of_sep = 0\n        for i in range(len(string)):\n            if string[i] == separator:\n                if (first_of_sep == 1):\n                    first_of_sep = 0\n                else:\n                    first_of_sep = 1\n                \n                if (first_of_sep == 0):\n                    "}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    # Your code here\n    try:\n        return_string = []\n        for index in range(0, len(string) - 1, 1):\n            if string[index] == separator:\n                return_string.append(string[:index + 1])\n                string = string[index + 1:]\n        return_string.append(string)\n        return return_string\n    except Exception as error:\n        print(error, file=sys.stderr)\n\n\nclass Link:\n    '''\n    Create a link, which is a node in"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    \n    return [char for char in re.split(separator, string) if len(re.findall(separator, char)) == 0]\n"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    return [char.strip() for char in string.split(separator)]\n\ndef get_max(numbers: list) -> int:\n    '''\n    Calculate the highest numbers in a list of numbers.\n\n    Example:\n    get_max([1, 2, 1, 2]) -> 2\n    get_max([9, 1, 2, 3]) -> 9\n    '''\n    max = 0\n    for index, item in enumerate(numbers):\n        if item > max:\n            max = item\n    return max\n\n\n\n"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n\n    assert separator!= ''\n    new_string = []\n\n    index = 0\n\n    while index < len(string):\n        if string[index] == separator:\n            new_strings = split_string(string[index + 1: index + 1 + string[index:].count(separator)], separator)\n            new_string.extend(new_strings)\n            index += len(new_strings) - 1\n        else:\n            new_string.append(string[index])\n\n        index += 1\n\n    return new_string\n\ndef"}, {"generated_text": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''\n    if len(string) in [0, 1]:\n        return []\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return [[string[0], ]]\n        else:\n            return []\n    \n    strs = []\n    start = 0\n\n    is_seperator = False\n    for i, s in enumerate(string):\n        if (s == separator or s == '') and (is_seperator == False):\n            is_seperator = True\n            if start =="}]}
{"task_id": "1894269", "prompt": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''", "suggestions": [{"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    list_string = list_string.lstrip('[').rstrip(']')\n    return list_string.split(', ')\n\n\ndef parse_args_list(list_str: str) -> list:\n    '''\n    Parse a string representation of a list. Returns argument list based on a list_str.\n\n    Example:\n        parse_args_list('[\"cat\", \"cow\"]') -> [\"cat\", \"cow\"]\n    '''\n    return [item for item in str_to_list(list_str)]\n\n\ndef get_"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    # Remove any spaces at the beginning or end of list_string\n    list_string = list_string.strip().lstrip('[').rstrip(']')\n    list_string = list_string.strip().strip(\"'\")\n    if list_string:\n        list_string = ast.literal_eval(list_string)\n    return list_string\n\ndef list_to_str(list_data: list) -> str:\n    '''\n    Convert a list to an string representation.\n\n    Example:\n        list_to_str(["}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n\n    # Make sure the string contains square brackets.\n    assert is_list(list_string)\n\n    # Make the list string into a list of characters.\n    list_characters = []\n    for char in list_string:\n        assert is_str(char)\n        list_characters.append(char)\n\n    # Convert the list characters to ints.\n    list_characters = ['x' if char == 'x' else int(char) for char in list_characters]\n\n    return list_characters\n\n\ndef is_list(any_"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n\n    return [int(item.strip()) for item in list_string.strip('[]()').split(', ')]\n\ndef get_max_score(scores: list) -> list:\n    '''\n    Given a list or range of scores, return the max score.\n\n    Example:\n        get_max_score([30, 40, 50]) -> 40\n        get_max_score([8, 9, 11]) -> 11\n    '''\n\n\n    if all(scores) > 0:\n        return max(scores)\n    else:\n"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    return [int(item) for item in list_string.split(',')]\n\n\ndef list_to_str(list_object: list):\n    '''\n    Convert a list back into its string representation.\n\n    Example:\n        list_to_str([1, 2, 3]) -> '[1, 2, 3]'\n    '''\n    return ', '.join([str(item) for item in list_object])\n\n\ndef list_to_str_csv(list_object: list):\n    '''\n    Convert a list back into"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    # If the input does not contain commas, return the same list.\n    if list_string.count(',') == 0:\n        return list_string\n\n    # Otherwise, split the string into a list of individual string elements and add each separate element to a list.\n    list = list_string.split(',')\n    for i in range(0, len(list)):\n        list[i] = int(list[i])\n    return list\n\n\ndef main():\n    import os\n    dirname = os.path.dirname(__file__"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    return ast.literal_eval(list_string)\n\n\ndef str_to_dict(dict_string: str) -> dict:\n    '''\n    Convert a string representation of a list to a dict.\n\n    Example:\n        list_string_to_list('{1: 2, 2: 3}') -> {1: 2, 2:3}\n    '''\n    return ast.literal_eval(dict_string)\n\n\ndef dict_to_str(dict_string: dict) -> str:\n    '''\n    Convert"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    if not list_string:\n        return []\n    elif list_string[0] == '[':\n        tmp = list_string.strip('[]')\n        if tmp == '':\n            return []\n        else:\n            return tmp.split('], ')\n    elif list_string == '[]':\n        return []\n    else:\n        list_string_1 = list_string.strip('[]')\n        if list_string_1 == '':\n            return []\n        else:\n            return list_string_1.split(',"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n\n    _list = ast.literal_eval('[' + list_string[1:-1] + ']')\n    return _list\n\ndef int_to_str(value: int) -> str:\n    '''\n    Convert an integer to a string representation of an int.\n    '''\n\n    _str = str(value)\n    return _str\n\ndef convert_list_to_int(list1: list) -> list:\n    '''\n    Convert an integer to a string representation of an int.\n    This is a slightly simplified version"}, {"generated_text": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''\n    return eval(list_string)\n\n\ndef count_inversions(a_input: list) -> None:\n    '''\n    Count inversions within a non-sorted array.\n\n    Params:\n        a_input[0]: The input list.\n\n    Returns:\n        a_output -> None\n        \n    Note:\n        Write your function to count inversions,\n        a non-sorted array. This function\n        should be implemented using recursion.\n    \n    >>> count_inversions(['1', '2', '3'])\n"}]}
{"task_id": "988228", "prompt": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''", "suggestions": [{"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    return json.loads(string)\n\ndef convert_dictionary_to_string(dictionary: dict) -> str:\n    '''\n    Convert dictionary to string.\n    \n    Example:\n    convert_dictionary_to_string({'a': 1, 'b': 2}) -> {u'a': 1, u'b': 2}\n    '''\n    return json.dumps(dictionary)\n\ndef get_json_file_content(input_json_file_path_name: str) -> str:\n    '''"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    return json.loads(string)             # Returns a dictionary from string.\n\ndef convert_dictionary_to_string(dictionary: dict) -> str:\n    '''\n    Convert dictionary to string\n    \n    Example:\n    convert_string_to_dictionary({'a': 1, 'b': 2}) -> {\"a\": 1, \"b\": 2}\n    convert_string_to_dictionary({'a': 2, 'b': 3}) -> {\"a\": 2, \"b\": 3}\n    '''\n    return json"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    out = json.loads(string)\n    return out\n\ndef convert_dictionary_to_string(dict: dict) -> str:\n    '''\n    Convert dictionary to string\n    \n    Example:\n    convert_dictionary_to_string({'a': 1, 'b': 2}) -> '{\"a\": 1, \"b\": 2}'\n    convert_dictionary_to_string({'a': 2, 'b': 3}) -> '{\"a\": 2, \"b\": 3}'\n    '''\n    out ="}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    string2 = string.replace('{', '').replace('}', '')\n    my_dictionary = dict(x.split(':') for x in string2.split(','))\n    return my_dictionary\n\ndef compare_two_dictionaries(first: dict, second: dict) -> dict:\n    '''\n    Compare first to second\n    \n    Example:\n    first = {'a' : 1, 'b' : 2}\n    second = {'c' : 3}\n    '''\n    diseases = {}"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n\n    return json.loads(string)\n\ndef convert_to_datatype(value: str) -> int:\n    '''\n    Convert string to int\n    \n    Example:\n    convert_to_datatype(7) -> 7\n    '''\n\n    return int(value)\n\ndef convert_bool_to_list_of_dict(value_as_bool: bool) -> list:\n    '''\n    Convert bool to list of dictionary\n    \n    Example:\n    convert_bool_to_list_of_"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    # your code here\n    string = '{}' if string is None else  string\n    string = json.loads(string)\n    return string\n\ndef convert_dictionary_to_string(string: dict) -> str:\n    '''\n    Convert dictionary to string\n    \n    Example:\n    convert_dictionary_to_string({'a': 1, 'b': 2}) -> {\"a\": 1, \"b\": 2}\n    convert_dictionary_to_string({'a': 2, 'b': 3}) -> {\""}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    return json.loads(string)\n\n\ndef convert_non_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert dictionary into string\n    '''\n    return json.dumps(string)\n\n\ndef create_or_update_database(database: dict) -> dict:\n    '''\n    Create or update a database from dictionary\n    \n    Input\n    database: a dictionary\n    {\n        \"tables\": {\n            <database_name>: {\n              \"table_name\": {\n                \"name\":"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n\n    try:\n        dictionary = json.loads(string)\n        return dictionary\n    except ValueError:\n        print('Can not decode a string. Try again.')\n        return None\n\ndef extract_dictionary(string: str, dictionary) -> dict:\n    '''\n    Converts dictionary and string to dictionary\n    '''\n    if dictionary:\n        return dictionary\n    print('String is not a dictionary. Try again.')\n    return None\n\ndef string_join(array_values, separator: str = '') -> str:\n    ''"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n    result_dict = eval(f'f\\'{string}\\'')\n\n    return result_dict\n\ndef main():\n    numbers_from_user = input(\"Enter a number for conversion example: 16 - hex:0x4d or 17 - decimal:6 or 18 - binary:0b or 19 - binary floating, without 0x\\n\")\n    numbers_from_user = numbers_from_user.replace(',','')\n    numbers_from_user = numbers_from_user.replace('.','')\n\n    try:\n        if numbers"}, {"generated_text": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''\n\n    dictionary_to_return = {}\n\n    #Remove the '\\\"' at the end of string\n    string = string.strip('\\\"')\n\n    #Split the string into a list\n    list_of_keyvalue_elements = string.split(', ')\n\n    #Remove empty strings in the list\n    list_of_keyvalue_elements = list(filter(None, list_of_keyvalue_elements))\n\n    #Convert the list back to strings with ':' between\n    for i, element in enumerate(list_of_keyvalue"}]}
{"task_id": "176918", "prompt": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''", "suggestions": [{"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n\n    # For speedup, check if `value` is in the first 1,000,000 elements of the list.\n    # If so, do not iterate the whole list.\n    if len(lst) < 1000000:\n        if value in lst:\n            return lst.index(value)\n\n    # If the value is not found in the list,\n    # then iterate over the entire list.\n    for i in range(len(lst)):\n        if lst[i] == value:\n            return i\n    \n\n    return -"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    for i in range(len(lst)):\n        if val == lst[i]:\n            return i\n\n    return -1\n\n\ndef count_by(lst: list, obj: object) -> int:\n    '''\n    Return the index of the last occurrence of the \"obj\" in the list.\n    If the obj is not in the list, returns -1.\n\n    Example:\n    count_by([1, 2, 3, 4, 5], 2) -> 2\n    count_by([1, 2, 3, 4, 5],"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    for i in range(len(lst)):\n        if lst[i] == value:\n            return i\n    return -1\n\n\ndef find_nth(lst: list, value: int, n: int) -> int:\n    '''\n    Return the n-th occurrence of the value in the list.\n    If the value appears more than once, return the n-th occurrence\n    of the first such non-repeating occurrence.\n\n    Example:\n    find_nth([4, 6, 1, 3, 5, 2], 6"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''   \n    try:\n        return lst.index(value)\n    except ValueError:\n        return -1\n\n\ndef find_index_recursive(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index_recursive([1, 2, 3, 4, 5], 3) -> 2\n    find_index_recursive([1, 2, 3, 4, 5"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    # Initialize the starting and ending values.\n    start_index = 0\n    end_index = len(lst) - 1\n\n    # Loop while the range does not cross over itself\n    while start_index <= end_index:\n        mid = (start_index + end_index) / 2\n        if lst[mid] == value:\n            return mid\n        elif lst[mid] > value:\n            end_index = mid - 1\n        else:\n            start_index = mid + 1\n        return -1\n\n\ndef find_"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    for index, val in enumerate(lst):\n        if val == value:\n            return index\n    return -1\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    print(f'sum of 2nd to last index {sum(a[1:-1])}')\n\n    print(find_index(a, 5))\n    print(find_index(a, 5))\n"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n\n    # The base case\n    if len(lst) == 0:\n        return -1\n\n    # Search for first instance of the value\n    low = 0\n    high = len(lst) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == value:\n            return mid\n\n        # Check if value lies on left side\n        if lst[mid] > value:\n            # Need to look only on right of mid for search\n            high = mid - 1\n        else:\n            "}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n\n    for i in range(len(lst)):\n        if lst[i] == value:\n            return i\n\n    return -1\n\n\nif __name__ == '__main__':\n\n    def test_find_index():\n        assert find_index([], 3) == -1\n        assert find_index([0], 0) == 0\n        assert find_index([0, 1], 0) == -1\n        assert find_index([1, 1, 1, 1, 1, 1], 1) == -1\n        assert find_index([1"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    for index, val in enumerate(lst):\n        if val == value:\n            return index\n    return -1\n\n## Exercise 2 - Functions that accept a list\ndef find_index(lst: list, value) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    Return -1 if the found value isn't in the list.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 2) -> 1\n    find_index([1, 2, 3, 4"}, {"generated_text": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''\n    # Your code here\n    for i in range(len(lst)):\n        if lst[i] == value:\n            return i\n    return -1\n\n\ndef insert_sort(lst: list) -> list:\n    '''\n    Sort the elements of the given sequence in ascending order using insertion sort.\n\n    Parameters\n    ----------\n    lst : list of int\n        The unsorted list.\n\n    Returns\n    -------\n    Sorted list.\n    '''\n\n    # Your code here\n\n\ndef merge(lst_1, l"}]}
{"task_id": "76022812", "prompt": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"", "suggestions": [{"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    result = {}\n    with open(csv_file, 'r') as csv_file:\n        reader = csv.DictReader(csv_file)\n        result = {row[\"Id\"]: row for row in reader}\n    return result\n\ndef write_output(dict_to_write: dict, output_file: str):\n    \"\"\"\n    Write the result of a given dictionary as a csv file.\n\n    Example:\n        >>> write_output({\"1\": [\"title1\", \"body1\"], \"2\": [\"title2\", \"body"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n\n    rows = read_csv(csv_file)\n    data = {}\n\n    for row in range(len(rows)):\n        row_data = parse_csv_line(rows[row])\n        data[str(row_data[0])] = row_data\n\n    return data\n\n\ndef read_csv(csv_file: str) -> list:\n    \"\"\"\n    Read a csv file data.\n    \"\"\"\n    with open(csv_file, 'r') as f:\n        lines = f.readlines()\n\n    return lines\n\n\ndef"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    result = {}\n    with open(csv_file) as csv_file:\n        reader = csv.reader(csv_file)\n        for row in reader:\n            result[row[0]] = row\n    return result\n\n\ndef add_entry_to_dict(csv_file: str, entry_id: int, title: str, body: str,\n        link: str, accepted_answer_id: str, vote_count: str, comment_count: str):\n    \"\"\"\n    Add an entry to the dictionary if it does not exist."}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    rows = csv.reader(csv_file)\n    result = {}\n    num_rows = 0\n    for row in rows:\n        if num_rows == 0:\n            cols = row\n        else:\n            id = row[0]\n            result[id] = row\n        num_rows += 1\n\n    return result\n\ndef get_all_ids(data: dict, columns: list, return_columns: list, header: str, title: str) -> dict:\n    \"\"\"\n    Get all IDs from the result.\n\n    Example"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    dict_data = {}\n    with open(csv_file) as f:\n        csv_reader = csv.reader(f, delimiter=',')\n        for row in csv_reader:\n            if len(row) == 0:\n                continue\n            key, val = row[0].strip(), row[1].strip()\n            dict_value = val.split(':')\n            dict_data[key] = dict_value\n\n    return dict_data\n\n\ndef csv_to_list(csv_file: str):\n    \"\"\"\n"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    data = {}\n    with open(csv_file, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for id_num, row in enumerate(reader):\n            print(f\"Processing row #{id_num}\")\n            data[str(row['#'])] = []\n            for key, value in row.items():\n                data[str(row['#'])].append(value)\n    return data\n\n\ndef dict_to_csv(data: dict, output_file:"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    file_object = open(csv_file, \"r\")\n    file_reader = csv.DictReader(file_object)\n    dict_list = []\n    for row in file_reader:\n        dict_list.append(row)\n    \n    return dict_list\n\ndef csv_to_array(csv_file: str) -> list:\n    \"\"\"\n    Convert a csv file to a list of dictionaries. Each dictionary is in nested form of\n    a row.\n    Example:\n        >>> csv_to_array"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    try:\n        with open(csv_file) as fp:\n            reader = csv.DictReader(fp)\n            rows = {row[\"index\"]: [row[\"title\"], row[\"body\"], row[\"link\"], row[\"answer\"], row[\"accepted_answer_id\"]] for row in reader}\n            return rows\n    except OSError:\n        raise OSError(\"Unable to read csv file.\")\n\n\ndef dict_to_html(rows: dict, index_col=0, title_col=1, body_col"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n \n    result = {}\n    with open(csv_file, mode=\"r\", newline=\"\") as file:\n        reader = csv.DictReader(file)\n        for line in reader:\n            key = line[\"#\"]\n            item = {\"link\":line[\"url\"],\"title\":line[\"title\"],\"body\":line[\"body\"]}\n            result[key] = item\n    return result\n\n\n \ndef dict_to_csv(data: dict):\n    \"\"\"\n    Convert a dictionary (output form csv_to_dict) to a"}, {"generated_text": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\"\n    with open(csv_file, encoding=\"utf-8\") as csvfile:\n        try:\n            reader = csv.DictReader(csvfile)\n        except csv.Error as err:\n            print('ERROR:', err)\n        dict_list = list()\n        for row in reader:\n            dict_list.append(row)\n        return {row[\"id\"]:list(row.values()) for row in dict_list}\n\ndef dict_to_csv(data: dict, csv_file: str):\n    \"\"\"\n"}]}
{"task_id": "19960077", "prompt": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    df = df.loc[df[column].isin(value)]\n    return df\n\ndef aggregate_by_column(df: pd.DataFrame, column: str, aggregation: str = '', aggregate_function: str = '',\n                        count: int = 0) -> pd.DataFrame:\n    '''\n    Aggregate column values using the specified aggregation method and aggregation function. Return the new\n    dataframe. By default this is based on count aggregation. Alternatively count aggregation can be turned\n    off by setting count to a value less than 1. Example:\n"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    filtered_keys = []\n    filtered_values = []\n    for k, v in enumerate(df[column]):\n        if v in value:\n            filtered_keys.append(k)\n            filtered_values.append(value)\n    return {column: filtered_keys, df.keys()[-1] + '_filtered': filtered_values}\n\ndef get_sample_split(df: pd.DataFrame, sample_size: int) -> Dict[str, any]:\n    '''\n    Sample a data"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    return df.loc[df[column] == value]\n\ndef drop_duplicates(df, columnName ='sno', id_col_name = 'nse_id') -> pd.DataFrame:\n    '''\n    A simple function used to remove duplicate records from a dataframe, dropping duplicates.\n\n    Example usage:\n    1. df = pd.DataFrame({'A':[1,2,2,1,'asdsadasd']})\n    2. dropped_df = drop_duplicates(df=df, column"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    mask = df[column] == value\n    return df[mask.values]\n\ndef count_data(df: pd.DataFrame, column: str, value: list, prefix: str = '__count_by_') -> pd.DataFrame:\n    '''\n    Count number of entities of each value for each attribute in a dataframe.\n\n    Example:\n    data = {'a': ['apple', 'apple', 'apple'], 'b': ['fruit', 'fruit', 'fruit']}\n    count_data(data, 'a', ['"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    result = df.loc[(df[column] == value).all(axis=1), :].copy(deep=True)\n    result.index = range(result.shape[0])\n\n    return result\n\n\ndef filter_data_conditional(df: pd.DataFrame, column: str, conditionals: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by list of conditions on the values for a column.\n    The conditionals must be a list of tuples of the form (condition on column, value).\n    Example"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    filtered = df.loc[df[column].isin(value), :]\n    return filtered\n\ndef data_transformation(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Take in a dataframe and return its date_created column as a string date.\n    '''\n    df['date_created'] = df['date_created'].apply(\n        lambda x: '{0}-{1}-{2}'.format(*str(x).split(' ')[0].split('/')))\n    "}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n\n    filtered = df\n    if type(value) == list:\n        filtered = df[df[column].isin(value)]\n    if type(value) == str:\n        filtered = df[df[column] == value]\n\n    return filtered\n\n\ndef make_cols_unique(df: pd.DataFrame, column_names: list) -> pd.DataFrame:\n    if '_' in column_names:\n        df['_' + column_names[0]] = df[column_names[0]], False, 'text"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    return df[df[column] == value]\n\ndef convert_to_list(list_obj: list) -> list:\n    '''\n    Convert a list to a comma-separated list.\n    '''\n    return list(map(lambda x: str(x) + ',' if type(x) == list else f'{x}', list_obj))[:-1]\n\ndef get_column_list(df: pd.DataFrame, columns: list) -> list:\n    '''\n    Get a listing of column(s"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    return_df = pd.DataFrame()\n    for element in df[column]:\n        if element in value:\n            return_df += pd.DataFrame({column: value})\n    return return_df\n\n# Define new features\ndef get_total_tickets_sold(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Return a df containing only the sum of `quantity` and `price` for each day and which is stored in `tickets_today`. In\n    example: get_total_"}, {"generated_text": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''\n    return df[df[column].isin(value)]\n\n\nclass DataGenerator:\n    '''\n    An object that generates synthetic data based on the specifications given.\n    '''\n    @classmethod\n    def __build_dataframe(cls, num_rows: int, num_cols: int, min_col: float, max_col: float, is_random: bool = False) -> pd.DataFrame:\n        '''\n        Generate a dataframe with some predefined num_rows and columns, and the min_col and max_"}]}
{"task_id": "12680754", "prompt": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n\n    df2 = df[col].str.split(sep, expand=True)\n    colnames = df2.columns.tolist()\n    for i in range(df2.shape[1]):\n        df[colnames[i]] = df2[colnames[i]]\n    return(df)\n\n# Get DataFrame with results for table\n# df = pd.read_csv('results/dvds_tutorial.csv')\n# print('Results table:')\n# print(df)\n\n## Get DFs with various"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n\n    # The function splits each column based on the values in the `sep` variable.\n    # If the provided `sep` is longer than the column being split, the function will\n    # split that whole column using `replace`.\n    df[col].str.split(sep, expand=True).columns = col\n\n    # Then we remove the `sep` value, which may be useful to avoid when we're splitting columns.\n    df[col] = df[col].str.replace(sep, '')\n    return\n\ndef split_single_"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''    \n    def process(element):\n        return list(pd.Series(element,\n                                index = range(len(col)),\n                                dtype ='string').str.split(sep = sep).str[0])\n    col_series = pd.Series(pd.sparse.Series(df[col]),name = col)\n    df_result = pd.DataFrame(col_series.str.split(sep = sep,expand = True).stack()).reset_index().rename(columns={'0':col})\n    df_"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    return df.iloc[:, :df.columns.get_loc(col)].str.split(sep, expand=True)\n\ndef create_sep(df, col, sep):\n    '''\n    Create a sep column to split a pandas column.\n    \n    cols = create_sep(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ', ') -> pd.DataFrame({'a': pd.Series(['a', 'b', 'c"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n\n    return df.assign(**{col:df[col].str.split(sep).apply(lambda x: x if type(x)==list else [x])})\n\n\ndef apply_pipeline(df, steps, name='pipe'):\n    '''\n    Apply a list of steps in a pipeline.\n    '''\n\n    if len(steps) < 1:\n    \traise Exception('You need to provide steps to run the pipeline. Use the `pipe` or `list(step.transform_func)()` method to include a step.')"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    return df.assign(**{col: df[col].str.split(sep, )})\n\n\ndef flatten_columns(df, out=None, split='__'):\n    '''Flatten a wide-form structure to one level and a wide-string column.'''\n    if out is None:\n        df = flatten_columns(df, split=split)\n        out_name = split.join(df.columns)\n        df = df.assign(**{out_name: df.apply(lambda r: r"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n\n    df=df.applymap(lambda x: x.replace(\",\",sep))\n\n    res = df.applymap(lambda x: x.split(sep), axis=1)\n\n    res = res.applymap(lambda x: pd.Series(x))\n\n    res.columns = df.columns\n\n    return res\n\ndef split_column_with_index(df, col, sep):\n    '''\n    Split a column into multiple rows using an index column.\n\n    Example:\n    split_column_with_index(pd."}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    n_rows = df.shape[0]\n    for i in range(n_rows):\n        try:\n            row = df.iloc[i][col]\n            df.iloc[i][col] = row.split(sep)\n        except:\n            # If row not valid\n            pass\n    return df\n\ndef remove_blank_columns(df):\n    '''\n    Removes blank columns.\n    '''\n    for col in df:\n        #if df[col].dtype == 'object':\n        #"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    cols = df[col].str.split(sep, expand=True)\n    df[col] = cols.iloc[:, 0]\n    return df\n\n\ndef get_idx_between_substrings(col_name, lst):\n    '''\n    Returns the index of the item of a list between substrings within an item in the list.\n    Example:\n    get_idx_between_substrings('sport_event', ['M', 'M', 'E']) -> 4\n    get_idx_between_sub"}, {"generated_text": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''\n    split_cols = []\n    i = 0\n    # Split the column if it is not empty\n    if df[col].empty == 0:\n        for row_list_in_col in df[col].values.tolist(): \n            subset = df.loc[i]\n            if (isinstance(row_list_in_col, str)):\n                split_index = row_list_in_col.find(sep)\n                split_list = row_list_in_col.split(sep)\n                if split"}]}
{"task_id": "23294658", "prompt": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''", "suggestions": [{"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    while True:\n        try:        \n            age = int(input('Are you eligible to vote(18 years after birth)? ')) \n            if age >= 18:\n                print('You are eligible to vote')\n                break                 \n        except ValueError:   # 'you have not entered a valid age' \n            print('You have not entered a valid age')\n        else:\n            break\n        \n    \n#--------------------------------------------------\n'''\n# Driver Code\nis_valid_voter()\n\n'''\n"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    while True:\n        age = input('Enter age: ')\n        age = age.replace(',', '')\n        age = age.replace('.', '')\n\n        try:\n            age = int(age)\n        except ValueError:\n            print('Invalid age')\n            continue\n        \n        if age >= 0 and age < 18:\n            print('You are eligible to vote')\n            break\n        \n        if age == 0:\n            print('Invalid age')\n            continue\n        if age==12:\n            print('You are not voting"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    ''' \n    age = input('Enter your age: ')\n    while not age.isnumeric():\n        age = input('\\nYou don`t have to enter a whole number. '\n                    '\\nPlease try again:')\n    age = int(age)\n    if age >= 18:\n        return f'You are eligible to vote.'\n    else:\n        return f'You are not eligible to vote.'\n\nif __name__ == '__main__':\n    print(is_valid_voter())"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    voterAge = input(\"Please enter your age : \")\n    if(int(voterAge) >= 18):\n        print(\"You are eligible to vote\")\n    else:\n        print(\"You are not eligible to vote\")\n\nis_valid_voter()"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    while True:\n        try:\n            age = int(input(\"Enter the age of voter: \"))\n            if age < 18:\n                print(\"You are not eligible to vote\")\n                break\n            else:\n                print(\"You are eligible to vote\")\n                break\n        except ValueError:\n            print(\"Please enter a number \")\n\n\ndef is_valid_pincode():\n    '''\n    Take user input for pincode until a valid pincode is entered.\n    Check if the pincode provided by user is 6 digit number."}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    age = input(\"Enter your age: $ \")\n    while age.isdigit() == False or int(age) > 120:\n        if age.isdigit() == False: # check if age is a digit\n            print(\"Please enter an integer value for your age.\")\n            age = input(\"Enter your age: $ \")\n        elif int(age) > 120:\n            print(\"Your age is above 120 years old.\")\n            age = input(\"Enter your age: $ \")\n    if int(age) >= 18:\n        print(\"You"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n\n    # take age of voting candidate\n    while True:\n        print('How old is your age?')\n        age = input('')\n        try:\n            age = int(age)\n\n            if age >= 18:\n                return 'You are eligible to vote!'\n            else:\n                return 'You are not eligible to vote.'\n        except:\n            print('Enter age')\n \nif __name__ == '__main__':\n    age = int(is_valid_voter())\n    print(age)\n"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    '''\n    This function takes input from the user for 'Age'.\n    The user has 2 options; 'Yes' or 'No'.\n    If the user's response is 'Yes', the user is considered eligible to vote and the code returns 'You are eligible to vote'.\n    If the user's response is 'No', the user is not eligible to vote and the code returns 'You are not eligible to vote'.\n    '''\n    while(True):\n        response = input('Do you like to vote? yes/no').lower()\n        if(response == 'yes'"}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n    age=input('Insert your age: ')\n    if int(age) <18:\n        return 'You are not eligible to vote'\n    else:\n        return 'You are eligible to vote'\n\ndef count_votes():\n    '''\n    Write a program in Python that asks for the name of two voters.\n    Then the program must calculate the average of these two voters.\n    \n    Example:\n    enter the name of voter 1: Joe\n    enter the name of voter 2: Bob\n    The average is 1.67\n    '''\n    "}, {"generated_text": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''\n\n    age = -1\n    while age == -1:\n        print(\"Enter your age: \")\n        age = int(input())\n\n        if age >= 18:\n            print('You are eligible to vote')\n        else:\n            print('You are not eligible to vote')\n\n    return age\n\ndef is_valid_name():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is"}]}
{"task_id": "20250771", "prompt": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    df[column] = df[column].map(mapping)\n\ndef filter_duplicate_rows(df: pd.DataFrame, threshold: float) -> pd.DataFrame:\n    '''\n    Remove duplicate rows from a data frame\n\n    Example:\n    filter_duplicate_rows(pd.DataFrame({'a': ['a', 'b', 'a', 'b', 'a'], 'b': range(1, 6)}), 0.1) -> pd.DataFrame({'a': ['a', 'b', '"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    assert not column in mapping, f\"{column} already exists in mapping!\"\n\n    mapping_df = pd.DataFrame({column: df[column].values})\n    mapping_df.loc[:, mapping.values()] = mapping\n    return df.reset_index(drop=True).join(mapping_df)\n\ndef _select_rows(df: pd.DataFrame, condition: str) -> pd.Series:\n    '''\n    Select only rows that fulfill the given condition.\n\n    This is used for multiple reasons:\n    "}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    return df.replace({value: mapping[value] for value in df[column]}).drop(column, axis=1)\n\nclass TestClass:\n    def test_replace_values(self):\n        data = [{'name': 'A', 'age': 30}, {'name': 'B', 'age': 50}, {'name': 'C', 'age': 10}, {'name': 'N/A', 'age': -1}]\n        result = [{'name': 'D', 'age': 'E'}, {'name': 'D"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n\n    # convert Pandas Series to np.ndarray\n\n    df_col = df[column].tolist()\n\n    for k,v in mapping.items():\n\n        for i, elem in enumerate(df_col):\n            \n            if elem == k:\n              df_col[i] = v\n            \n            else:\n                pass\n\n    df[column] = df_col\n\n    return df\n\ndef remove_columns(df: pd.DataFrame, columns:list, inplace=False) -> pd.DataFrame:\n"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    return df.rename(columns={\n        column: mapping.get(df[column].values[0], column)\n    })"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    return df[column].map(mapping)\n\ndef normalize_counts(counts: pd.Series) -> pd.Series:\n    '''Normalize counts in a pd.Series.'''\n    df = pd.concat([pd.Series([1.0] * counts.shape[0]), counts])\n    df = df.groupby(level=0).sum()\n    return df\n\ndef generate_log_norm_counts(df, min_count=10, exponent=1) -> pd.Series:\n    "}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    return df.replace({column: mapping})\n\n\ndef filter_df(df: pd.DataFrame, condition: any = None, inplace: bool = False) -> pd.DataFrame:\n    '''\n    Remove records from a DataFrame based on a filter.\n\n    Example:\n    filter_df(pd.DataFrame({'x': [1, 2, 3]}), lambda x: x < 2, inplace=True)  # Remove (x < 2) rows\n    filter_df(pd.DataFrame({'x': [1, 2"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n    if mapping:\n        if pd.api.types.is_string_dtype(df[column]): # Handle String columns since value_counts doesn't map string columns\n            mapping = {k: str(v) for k, v in mapping.items()}            \n        df[column] = df[column].map(mapping)\n\n    return df\n\ndef drop_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Drop columns with no values.\n    '''\n    return df."}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n\n    result = df.copy()\n    result[column] = result[column].map(mapping)\n\n    return result\n\n\ndef set_column_value(df: pd.DataFrame, column: str, value):\n    '''\n    Set a value in a single column of a DataFrame.\n    '''\n\n    df[column] = value\n\n    return df\n\n\ndef apply_to_column(df: pd.DataFrame, column: str, func: callable, *args, **kwargs):\n    '''\n    Transform each value in"}, {"generated_text": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''\n\n    lst1 = df[column].unique()\n    lst2 = list(d.value for d in mapping.items())\n    return pd.DataFrame(lst2).T.fillna(lst1) "}]}
{"task_id": "4020539", "prompt": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''", "suggestions": [{"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n\n    res = string\n    while '\\a' in res or '\\b' in res:\n        res = res.replace('\\a', '^').replace('\\b', '\\\\a')\n    return res\n"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    import re\n\n    string = re.sub('\\\\\\\\', '', string)\n\n    return string\n"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    for char_index, char in enumerate(string):\n        if char in '\\n\\t':\n            if char_index + 1 < len(string) and string[char_index+1] == '\\a':\n                character = '\\a'\n            elif char_index + 1 < len(string) and string[char_index+1] == '\\b':\n                character = '\\b'\n            else:\n                character = '\\n'\n            # Append the character to the string without modifying it\n            # since it might contain"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    result = \"\"\n    for x in string:\n        result += x\n        if x in ESCAPE_SEQUENCES:\n            result += chr(ESCAPE_SEQUENCES[x])\n    return result\n\n\ndef remove_escapes(string: str) -> str:\n    return process_escape_sequence(string.replace('\\\\', '\\\\\\\\'))\n\n\ndef convert_ansi(string: str) -> str:\n    '''\n    Convert ANSI color sequences to their default values.\n\n    Example: \"ansi_color_"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    \n#     if string is None:\n#         raise ValueError('string parameter cannot be None')\n        \n    return string.replace('\\t',' '*4)\n\n\ndef convert_bytes(bytes, bformat = 'b'):\n    '''\n    Convert numpy array (np.array or arr) to a string\n    \n    Example:\n    In [9]: convert_bytes(np.arange(1,2), 'H') # doctest: +ELLIPSIS\n    Out[9]: '\\\\x00\\\\x01\\\\x02"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    esc_re = r'''\\\\(['\"ab])'''\n    esc_re = r'''\\\\\\\\''' in esc_re\n    if not re.match(esc_re, string):\n        return string\n    else:\n        string = re.sub(esc_re, \n            lambda m: m.group(1),\n            string\n        )\n        return string\n\ndef process_tag_match(match: re.Match) -> str:\n    '''\n    Process a tag match\n    \n    Example:\n    process_tag"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n\n    result = []\n    for char in string:\n        if char == '\\n':\n            result[-1] = result[-1] + '\\n'\n            continue\n        if char in ESCAPE_CHARS:\n            result.append(f'\\033{ESCAPE_CHARS.index(char)}m')\n        else:\n            result.append(char)\n    return ''.join(result).rstrip()\n\ndef process_string(string: str) -> str:\n    '''\n    Pre-process a string.\n"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n\n    index_in_parentheses = 0\n    new_string = ''\n\n    while index_in_parentheses < len(string):\n        current_char = string[index_in_parentheses]\n\n        # End of string\n        if current_char == '\\\\':\n            # Escape sequence\n            if string[index_in_parentheses + 1] == 'x':\n                # The next character must be a hexadecimal number,\n                # that is always 2 characters in length.\n                end_index = index_in_parentheses + 3 + 2\n"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    \n    processed = []\n    for char in string:\n        if char in string_escape_chars:\n            processed.append(char)\n        elif char in line_escape_chars:\n            processed.append('\\n')\n        else:\n            processed.append(char)\n    \n    return ''.join(processed)\n\ndef process_command_line(args, arg_parser=None):\n    '''\n    Process command line arguments.\n    \n    Return parsed arguments as dictionary.\n    '''"}, {"generated_text": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''\n    return ''.join(['\\n' + line + '\\n' if i % 4 == 0 else line for i, line in enumerate(string.split('\\\\'))])\n\n\ndef remove_prefix_from_string(string: str, prefix: str) -> str:\n    '''\n    Remove a prefix string to a string.\n    (if the prefix is empty remove it).\n    \n    Example:\n    remove_prefix_from_string('abcdef', 'a') -> 'bcdef'\n    '''\n    if not prefix:\n        "}]}
{"task_id": "4760215", "prompt": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''", "suggestions": [{"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    process = subprocess.Popen(command, stdout=subprocess.PIPE)\n    result = process.communicate()[0].decode('UTF-8')\n    return result if result else None\n\n\ndef is_number(string):\n    '''Return if a variable is a number'''\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    try:\n        output = subprocess.check_output(command, stderr=subprocess.STDOUT, universal_newlines=True).strip()\n    except subprocess.CalledProcessError as err:\n        output = err.output.strip()\n    return output\n\ndef get_public_ip():\n    command = 'hostname -I'\n    output = run_command(command)\n    return output\n\ndef get_ip(prefix='169.254.169.', interface='eth0'):\n    command = 'ip a | grep'+"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)\n    output, error = p.communicate()\n    output = output.decode('utf-8')\n    return output\n\ndef get_command_with_parameters(command, parameters):\n    '''\n    Run an commands with parameters and returns the output\n\n    Example:\n    run_command_with_parameters('echo', '\"Hello World\"') -> None\n    '''\n    p = subprocess.Popen(command + \" \""}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\n    output, error = process.communicate()\n\n    return output.decode('utf-8')\n\n\ndef get_config(ssh_config, var, section='main'):\n    '''\n    Get a value from the ssh_config file using.get\n    It's safer to call this function instead of.get as.get returns None if no\n    value or comment. This method gives more helpful values:\n    if None, means no value for the"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    return subprocess.check_output(command,shell=False,stderr = subprocess.STDOUT, universal_newlines=True).strip()\n\n\ndef split_n_join():\n    '''\n    Split and join using split() and join()\n    '''\n    string = \"this is a string\"\n    print(string.split('is'))\n    print(string.join('-'))\n    \n    \ndef split_join_join():\n    '''\n    Split and join and join again using.join() method\n    '''\n    "}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n\n    output = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE).stdout.read().decode()\n\n    return output\n\ndef is_root():\n    '''\n    Verify if the user\n    '''\n    #return run_command('which root') == '0'\n\n    command = 'egrep \"Users\" /etc/passwd > /dev/null; true if /dev/null==\"\" else false; true if 0!= 0 else false'\n    result  = 1 if run_command(command)"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    return subprocess.run(command, shell=True, \n    stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.decode('utf-8')\n\nclass Device:\n    '''\n    Object representing a Device\n\n    Attributes:\n    manufacturer = manufacturer of the device\n\n    '''\n    def __init__(self, name, manufacturer, os, mac, uuid, firmware, serial):\n        '''\n        Constructor of Device\n        '''\n        self.manufacturer = name\n        self."}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n\n    p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\n    output, error = p.communicate()\n    output = output.decode(\"utf8\").strip()\n    if error:\n        output = \"{}\\n{}\".format(output, error.decode(\"utf8\"))\n    return output\n\n# print(run_command('pwd'))\n\n##############################\n# EXECUTIVE TEMPLATE TESTS\n##############################\n\ndef exec_tests(script_"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    return subprocess.Popen(command, stdout=subprocess.PIPE)\n\ndef print_output(output):\n    '''\n    Print the output of the given command if the output contains data\n\n    Example for string:\n    print_output('echo \"Hello World!\"')\n    '''\n    if output:\n        print output.read()\n        return True\n    return False\n\ndef run_process(command, check_output=True):\n    '''\n    Runs a command in a background process and waits for it to finish\n\n    Example"}, {"generated_text": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''\n    output = subprocess.check_output(\n        command,\n        stderr=subprocess.STDOUT,\n        universal_newlines=True\n    )\n    return output\n\ndef add_new_line():\n    '''adds a new linux line with sudo'''\n    run_command('sudo echo')\n\ndef run():\n    '''\n    Runs a process from a child of root.\n\n    Note that if you are not using sudo then this will not change your current\n    tty, so be sure to run sudo to change it\n\n    Also note"}]}
{"task_id": "6473679", "prompt": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''", "suggestions": [{"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    ans = []\n    for i in range(len(list_of_lists[0])):\n        temp = []\n        for j in range(len(list_of_lists)):\n            temp.append(list_of_lists[j][i])\n        ans.append(temp) \n    return ans\n\ndef flip_dict(dictionary):\n    '''\n    Flip a dictionary to its anti-symmetric equivalent.\n    \n    Example:\n    flip_dict({'a': 2})  -> {2: 'a'"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    \n    result = []\n    for x in range(len(list_of_lists[0])):\n        t = []\n        for l in list_of_lists:\n            t.append(l[x])\n        result.append(t)\n    return result\n\n# --------------------------------------------------------------------------\n\n# If you want to do this for all types, just do this:\n\nfor t in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n    print(t, type(t))\n\n\nlist_of_lists = [[1,"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    length_of_lists = len(list_of_lists)\n    dim = len(list_of_lists[0])\n    t = [list() for _ in range(length_of_lists)]\n\n    for i in range(length_of_lists):\n        for j in range(dim):\n            if i < length_of_lists - 1:\n                t[i].append(list_of_lists[i][j])\n            else:\n                t[i].append(list_of_lists[i][j])\n\n    for l in"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    transposed = []\n    for i in range(len(list_of_lists[0])):\n        list_of_inner_lists = []\n        for j in range(len(list_of_lists)):\n            list_of_inner_lists.append(list_of_lists[j][i])\n        transposed.append(list_of_inner_lists)\n    return transposed  \n\ndef print_matrix(list_of_lists):\n    '''\n    Prints a matrix without the last\n    blank column.\n    "}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n\n    # Special cases\n    if len(list_of_lists) == 0:\n        raise ValueError('list_of_lists contains 0 elements.')\n    if len(list_of_lists) == 1:\n        return list_of_lists\n    \n    # Other cases\n    row_sizes = [len(lists) for lists in list_of_lists]\n    max_size = max(row_sizes)\n    transpose = [[None] * max_size for _ in range(len(row_sizes))]\n    \n    #"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    transposed = []\n    for i in range(len(list_of_lists[0])):\n        transposed_row = []\n        for j in range(len(list_of_lists)):\n            transposed_row.append(list_of_lists[j][i])\n        transposed.append(transposed_row)\n    return transposed"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n    for i in range(2):\n        a = []\n        for ls in list_of_lists:\n            assert (len(ls) == len(list_of_lists[0]))\n            a.append(tuple(ls))\n        list_of_lists = a[:]\n    return list_of_lists\n\n#\ndef get_subsampled_list_of_lists(list_of_lists, subsampling_strategy, subsampling_rate):\n    '''\n    Return a subsampled list of lists satisfying the "}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n\n    list_of_lists.reverse()\n\n    result = [[] for i in range(len(list_of_lists[0]))]\n\n    for i in range(len(result)):\n\n        for j in range(len(list_of_lists)):\n            result[i].append(list_of_lists[j][i])\n\n    return result\n\n\ndef solve(input):\n    '''\n    Main module, called from command line\n    or when called from import.\n    '''\n    \n    if not isinstance(input, list):"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n\n    result = []\n    for i in range(len(list_of_lists[0])):\n        row = []\n        for row_list in list_of_lists:\n            row.append(row_list[i])\n        result.append(row.copy())\n    return result\n\n\ndef countDupes(list_strings):\n    '''\n    Count the number of non-unique elements in a python list.\n    Note: This will not work on nonhashable types like dicts.\n    '''\n    return len(set(list_"}, {"generated_text": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''\n\n    transposed_list = []\n    \n    # Your code here\n    \n    return transposed_list\n\n\ndef create_dict_with_new_key(dict_list_of_tuples):\n    '''\n    Given a list of list of tuple, return a dictionary with dictionary with keys as new tuple.\n    \n    Example:\n    input: [[('Johny','smith', 14), ('Lars','smith', 14), ('Kevin', 'Jones', 14)]]\n    return: {'Johny Smith': {'Name': 'Johny Smith"}]}
{"task_id": "434287", "prompt": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''", "suggestions": [{"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    return [data[i:i + chunk_size] for i in range(0, len(data), chunk_size)]\n\n\ndef merge_lists(a: list, b: list):\n    '''\n    Merge two sorted lists (a and b).\n    The result is a sorted list.\n    \n    Example:\n    merge_lists([1, 2, 3, 4], [7, 8, 9]) -> [1, 2, 3, 4, 7, 8, 9]\n    merge_lists([1, 2, 3], [5"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n\n    return [data[x:x+chunk_size] for x in range(0, len(data), chunk_size)]\n\n\n\n'''\nhttps://leetcode.com/explore/interview/card/top-interview-questions-medium/102/array-and-strings\n\nRuntime: 36 ms, faster than 98.80% of Python3 online submissions for Create Target Array in the Given Order.\nMemory Usage: 14.9 MB, less than 87.72% of Python3 online submissions for Create Target Array in the Given Order.\n'''"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    return [data[x:x+chunk_size] for x in range(0, len(data), 2*chunk_size)]\n\n\ndef remove_nones(dict_to_clean: dict, dict_to_add: dict, index: int):\n    '''\n    Removes the key whose value is None if there is.\n    '''\n    if None in dict_to_clean[index]:\n        del dict_to_clean[index][None]\n    for key, value in dict_to_add.items():\n        if key"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    return [data[x:x+chunk_size] for x in range(0, len(data), chunk_size)]\n\ndef chunk_generator(my_list: list, chunk_size: int)-> iter:\n    '''\n    Generate chunks of the given size from the given list.\n    \n    Example:\n    chunk_generator([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> (1, 2, 3),  (4, 5, 6),  (7, 8, 9"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    # Check if given size is valid\n    if len(data) < chunk_size:\n        raise Exception(\"Data given not large enough.\")\n    \n    # Split list into multiple chunks\n    chunked_data = list()\n    for idx in range(0, len(data), chunk_size):\n        chunked_data.append(data[idx:idx+chunk_size])\n    return chunked_data\n\ndef get_average_length_of_chunks(chunks: list)-> float:\n    '''\n    "}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    chunked_list = list()\n    \n    i = 0\n    cur_chunk_size = len(data) // chunk_size\n    while i < chunk_size:\n        chunked_list.append(data[i * cur_chunk_size:min((i+1) * cur_chunk_size, len(data))])\n        i += 1\n    if len(data) % chunk_size > 0:\n        remaining = len(data) % chunk_size\n        chunked_list.append(data[-("}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    return [data[i:i+chunk_size] for i in range(0, len(data), chunk_size)]\n\n#--------------------------------------------------------------------------------\n\ndef sort_sublist(data: list,start_index: int, end_index: None)-> int:\n    '''\n    This method is going to sort the sublist.\n    \n    It will take as it's an argument data of size n and two index numbers\n    start_index & end_index.\n    end_index must be < n//2. So if size of data is 7."}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    chunked_data = []\n    for i in range(0, len(data), chunk_size):\n        chunk_data = data[i:i + chunk_size]\n        chunked_data.append(chunk_data)\n    return chunked_data\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    chunks = []\n    index = 0\n    while index <= len(data) - 1:\n        chunk = data[index:index + chunk_size]\n        chunks.append(chunk)\n        index += chunk_size\n    return chunks\n"}, {"generated_text": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''\n    return_list = []\n    while(len(data)!= 0):\n        temp = []\n        for i in range(0, min(len(data), chunk_size)):\n            temp.append(data.pop(0))\n        return_list.append(temp)\n    return return_list\n\ndef count_chunk(chunk: list)-> int:\n    '''\n    Count the number of objects in the given chunk.\n    \n    Example:\n    count_chunk([1, 2, 3]) -> 3\n    count_"}]}
{"task_id": "104420", "prompt": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''", "suggestions": [{"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    if lst == []:\n        return [[]]\n    return [p + [lst[i]] for i in range(len(lst)) for p in permutations(lst[: i] + lst[i + 1 : ])]\n\n\ndef permutations_to_str(lst:list) -> str:\n    '''\n    Recurssively converts the list to string and concatenates all permutations together.\n\n    Example:\n    permutations_to_str([1, 2, 3]) -> \"1332\"\n\n    TODO"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n\n    if not lst:\n        return []\n\n    if len(lst) == 1:\n        return [[lst[0]]]\n\n    result: int = []\n    for index, value in enumerate(lst, start=1):\n        result += [[lst[index - 1]] + r for r in permutations(lst[(index + 1):])]\n    return result\n\n\nif __name__ == \"__main__\":\n\n    result: list = permutations(list(range(1, 4)))\n    print(result)\n"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    if not lst:\n        return []\n    out = []\n\n    for i in range(len(lst)):\n        for j in permutations(lst[:i] + lst[i+1:]):\n            out.append([lst[i]] + j)\n    return out\n\n\n# lst1 = ['1', '2', 3, '4']\nlst2 = ['1', '2', '3', '4']\n\nprint(permutations(lst2))\n"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n\n    return permutations_helper([], lst)\n\n\ndef permutations_helper(stack, next_elements):\n    if len(stack) == len(next_elements):\n        return [stack]\n\n    tmp = []\n    for i in range(len(next_elements)):\n        e = next_elements[i]\n        next_elements = next_elements[:i] + next_elements[i+1:]\n        tmp += permutations_helper(stack + [e], next_elements)\n        "}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n\n    def helper(lst: list):\n        if len(lst) <= 1:\n            return lst\n        listLst = []\n        for i in range(len(lst)):\n            for j in helper(lst[:i] + lst[i+1:]):\n                listLst.append(lst[i:i+1] + j)\n\n        return listLst\n\n    return helper(lst)\n\n\ndef permute_using_itertool(lst: list) -> list:\n    '''\n    "}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    result = []\n    if len(lst) == 0:\n        result.append([])\n        return result\n    if len(lst) == 1:\n        return [[lst[0]]]\n    r_ls = permutations(lst[1:])\n    for r in r_ls:\n        for i in range(len(lst)):\n            r.append(lst[i])\n        result.append(r)\n    return result\n"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    if len(lst) == 0:\n        return []\n\n    if len(lst) == 1:\n        return [lst]\n\n    first = lst.pop(0)\n    res = []\n\n    for i in range(len(lst) + 1):\n        if i == 0:\n            continue\n        lst_copy = lst.copy()\n        new_lst = lst_copy[:i] + [first] + lst_copy[i:]\n\n        for j in permutations(new_lst):\n            "}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n\n    perms = [[]]\n    for e in lst:\n        for i in range(len(perms)):\n            new_perms = perms[:]\n            new_perms.append(perms[i] + [e])\n            perms.append(new_perms)   \n    return perms\n\nprint(permutations([1, 2, 3]))  \n    \npermutations: List = functools.partial(list, max=8)\nreturn permutations\nprint(permutations([1, 2, 3]))\n"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n\n    def permutationsRec(lst, currentList, n, result):\n        if len(currentList) == 2*n:\n            result.append(currentList[:])\n        elif len(currentList)!= n:\n            for i in range(n-1):\n                permutationsRec(lst, currentList+[lst[i]], n, result)\n        else:\n            for i in range(n):\n                if len(currentList) == n:\n                    continue\n                permutationsRec(lst, currentList + [l"}, {"generated_text": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''\n    if not lst:\n        return [' ']\n    perms = []\n    for idx in range(len(lst)):\n        current = lst[idx]\n        other_lst = lst\n        other_lst.remove(current)\n        for perm in permutations(other_lst):\n            perms.append(current + perm)\n    return perms\n\n\ndef test_permutations():\n    assert permutations(['a', 'b', 'c']) == permutations(['a', 'b', 'c"}]}
{"task_id": "533905", "prompt": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''", "suggestions": [{"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return list(itertools.product(*lists))\nprint(cartesian_product_of_lists([[1,2], [3, 4]]))  #[(1, 3), (1, 4), (2, 3), (2, 4)]\nprint(cartesian_product_of_lists([[1,2], [3, 4], [5, 6]]))  #[(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2,"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    # This can be shortened using a generator expression:\n    # return itertools.product(*lists)\n    combinations = []\n    for i in range(len(lists)):\n        combinations.append(itertools.product(lists[i], repeat = len(lists[i])))\n    return combinations\n\n\ndef all_different(*args):\n    '''\n    Return a list of all positive integers that are not present in any of their arguments.\n\n    Examples:\n      all_different(4, 5, 7)     -> [1, 2, 3"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return list(map(itertools.product, *lists))\n\ndef cartesian_product_of_sets(sets):\n    '''\n    Return all possible combinations of the elements in the given list.\n\n    Example:\n    cartesian_product(['a', 'b']) -> {'a', 'a', 'b', 'b'}\n    cartesian_product(['a', 'b', 'c']) -> {'a', 'a', 'b', 'a', 'b', 'c', 'c', 'a', 'b', '"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    # Check that all lists are of the same length\n    number_of_elements = len(lists[0])\n    for list in lists:\n        if len(list)!= number_of_elements:\n            raise ValueError('All input lists must contain the same number of elements.')\n\n    # Cartesian product is product of cartesian products of each list\n    cached_cartesian_product = []\n\n    for element1 in maps(iterable=itertools.product, iterables=lists):\n        cached_cartesian_product += list(element"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return itertools.product(*lists)\n\ndef cartesian_product_of_lists_general(lists):\n    '''\n    Return the cartesian product of the given list of lists (without repeated entries).\n\n    Consider that each list can be either longer or shorter (the shorter list will be repeated to the required length).\n\n    Example:\n    cartesian_product_of_lists([[1,2], [3,4],[5,6]]) -> [(1,3,5), (1,3,6), (1,4,5), (1"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    # Solution is complicated, but worth a read through.\n    # First, create a cartesian product using itertools:\n    product = itertools.product(*lists)\n    # Next, turn that product into a list, so we can remove repeated entries.\n    product = list(product)\n    # The last step is to remove dups.\n    # Note that there shouldn't be any dups in the beginning.\n    result = []\n    while len(product) > 0:\n        # Get the next item in product:\n        item = product.pop("}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return map(lambda x: tuple(x), itertools.product(*lists))\n\ndef cartesian_product(iterables):\n    '''\n    Return cartesian product of given iterables.\n\n    Example:\n    cartesian_product([[1, 2], [3], [4, 5, 6]]) -> [(1, 3, 4), (1, 3, 5), (1, 3, 6), (2, 3, 4), (2, 3, 5), (2, 3, 6),\n                                                     (3, 4,"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n    return (set(itertools.product(*zip(l, *(itertools.permutations(l[1:]) for l in lists[1:])))) -\n            set(itertools.product(*zip(lists[0], *(itertools.permutations(lists[0][1:]) for l in lists[1:]))))\n            )\n\n\ndef create_permutes_for_particular_list_and_numbers(lists, list_number, number_1, number_2, num_len):\n\n    lst_of_one"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n\n    return (\n            [\n                tuple(sub_list)\n                for sub_list in list(itertools.product(*lists))\n              ]\n        )\n\ndef cartesian_product_table(table, variables=None):\n    '''\n    Return cartesian product of the Table object if possible.\n    If variables are not specified, the product is returned for each\n    row, but not all table objects should be of the same size of rows. \n\n    e.g.\n\n    cartesian_product_table(my_table, variables=['a"}, {"generated_text": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''\n\n    return (\n        x\n        for y in itertools.product(*lists)\n        for x in y\n    )\n\n\ndef read_fasta_file(file_name):\n    '''\n    Open or create a file and read FASTA files (1 letter code, whitespace delimited, and a header line) into\n    1 record per line in the form of a list. Return a list of these sequences.\n\n    Example:\n    read_FASTA_file(\"test.fasta\") ->\n        ['>A1', 'GGCGTTT"}]}
{"task_id": "9961563", "prompt": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''", "suggestions": [{"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    size = (40, 40)\n    white = (255, 255, 255)\n    colorkey = (255, 255, 255)\n    img = pygame.image.load('1.jpg')\n\n    backtowindow = pygame.transform.scale(img, size)\n    backtowindow.set_colorkey(colorkey)\n\n    sprite = pygame.sprite.Sprite()\n    sprite.image = backtowindow\n    sprite.rect = sprite.image.get_rect()\n    sprite."}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    global game_display, player_sprite_surface, player_sprite\n    # Move player sprite towards the keyboard keys\n    player_x_pos, player_y_pos = player_sprite.get_rect().center\n\n    key_pressed = pygame.key.get_pressed()\n    # left key pressed\n    if key_pressed[pygame.K_LEFT]:\n        player_sprite_surface = pygame.transform.rotate(player_sprite_surface, -45)\n        player_sprite.image = player_sprite"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    global move_x, move_y, sprite_y, run\n    if (key == pygame.K_RIGHT) and (move_x < 955):\n        sprite_x += 10\n        if (sprite_y > 730):\n            sprite_y -= 10\n    elif (key == pygame.K_LEFT) and (move_x > 0):\n        sprite_x -= 10\n        if (sprite_y > 730):\n            sprite_y -= 10\n    if (key == pygame.K"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    pygame.init()\n    sprites = pygame.sprite.Group()\n    sprite1 = pygame.sprite.Sprite()\n    sprite1.image = pygame.transform.scale(load_image('kartomiej.png'), (30, 200))\n    sprite1.rect = sprite1.image.get_rect()\n    sprites.add(sprite1)\n\n    clock = pygame.time.Clock()\n    running = True\n    velocity_x = -2\n    velocity_y = 3"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    move_x = 0\n    move_y = 0\n    if key_pressed(\"Left\") == True:\n        move_x -= sprites_move_speed\n    elif key_pressed(\"Right\") == True:\n        move_x += sprites_move_speed\n    if key_pressed(\"Up\") == True:\n        move_y -= sprites_move_speed\n    elif key_pressed(\"Down\") == True:\n        move_y += sprites_move_speed\n    return move_x, move_y\n\n\ndef get_key():\n    ''"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    # Set up all the images\n    image_sheet, rect_sheet = load_animation('images/spritesheet.png')\n    image_width = rect_sheet[0][2]\n    image_height = rect_sheet[0][3]\n    # Set up the main sprite\n    size_x = (10 * rect_sheet[1][0] + 30)\n    size_y = (rect_sheet[1][2] + 25)\n    y = size_y + 100\n    sprite = pygame.sprite.Sprite()"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    # Create a sprite:\n    player_sprite = pygame.image.load('character.png')\n    # Center player\n    player_sprite = pygame.transform.scale(\n        player_sprite, (50, 50))\n    # Set variable for the speed:\n    SPEED = 10\n\n    # Change the player speed:\n    def change_speed(speed):\n        nonlocal SPEED\n        SPEED = speed\n\n    # Create the arrows keypad:\n    arrow_keypad = pygame.image.load('arrow_keypad."}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    global sprite\n    # Set the game loop's game status as still going\n    game_still_going = True\n\n    while game_still_going:\n        # Check if the user has clicked the window's close button\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                quit()\n\n        # Set the keys when pressed\n        keys = pygame.key.get_pressed()\n\n        # If the left arrow key is pressed\n        if keys[pygame.K_LEFT"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    def is_valid(game, sprite):\n        x1 = sprite.sprite.rect.x // GRID_SIZE +1\n        y1 = sprite.sprite.rect.y // GRID_SIZE + 1\n        x2 = sprite.sprite.rect.x // GRID_SIZE\n        y2 = sprite.sprite.rect.y // GRID_SIZE\n\n        # Check if sprite belongs to player's sprite group\n        try:\n            if not player_group.get_sprite(x1, y1).sprite.attack_att"}, {"generated_text": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''\n    # creating a sprite for the player\n    player = pygame.image.load('sprite_assets/hero/standing.png').convert_alpha()\n    player = pygame.transform.scale(player, (90, 90))\n    # creating a sprite for the enemy\n    enemy = pygame.image.load('sprite_assets/enemy/zombie.png').convert_alpha()\n    enemy = pygame.transform.scale(enemy, (90, 60))\n    # setting an arbitrary location for the enemy\n    enemy_x = 600\n    "}]}
{"task_id": "1663807", "prompt": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''", "suggestions": [{"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n\n    # TODO: your code here!\n\n    x = 0\n    print(3*list2, list1*3)\n    for i, el in enumerate(list1):\n        x += 3 * list2[i]\n\n    return x\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(parallel_iteration([1, 2, 3], [4, 5, 6]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert parallel_iteration"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    x_prod = 1\n    y_prod = 1\n\n    for idx in range(len(list1)):\n        x_prod *= list1[idx]\n    for idx in range(len(list2)):\n        y_prod *= list2[idx]\n\n    return x_prod * y_prod\n\n\n# Test Case 1: Expected: 32\nprint(parallel_iteration([1, 2, 3], [4, 5, 6]))\n\n# Test Case 2: Expected:"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    \n    return sum(i * j for i, j in zip(list1,list2))\n"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    from numpy import prod\n    return sum(prod(x) for x in zip(list1, list2))\n"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n    # make these lists in a single list \n    lists = [list1, list2]\n    \n    # create a simple list to store the product of all lists\n    products = []\n    \n    # create a map that stores all product of the products of the lists\n    map_product = reduce(lambda x, y: x*y, products, 1)\n  \n  ##################################\n\n\ndef parallel_iteration_map(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n\n    return int(sum(list1) * sum(list2))\n\n\nif __name__ == '__main__':\n    num_list1 = list(map(int, input().split()))\n    num_list2 = list(map(int, input().split()))\n    print(parallel_iteration(num_list1, num_list2))\n"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            list1[i] *= list2[j]\n    \n    return sum(list1)\n          \n\n    return 0\n\n\nif __name__ == '__main__':\n    n_test = int(input())\n\n    for n in range(n_test):\n        input_data = input()\n        \n        # convert input_data into list of integers\n        values = list(map(int, input_data.split(' ')))"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n\n    for x in list1:\n        x = x * 2\n    result_list = list(it.product(list1, list2))\n    return sum(item for item in result_list)\n    \n\nif __name__ == \"__main__\":\n    \n    import os\n    import sys\n\n    assert len(sys.argv) == 2, 'You need to enter the name of the file that would be generated.'\n    gen = GenGen(sys.argv[1])\n    gen.create()\n\n\n"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n\n    return sum([a * b for a, b in zip(list1, list2)])\n\n\n# ----------------------------------------------------------------------\n\nfrom sys import argv\n\nlist1 = list(argv[1])\nlist2 = list(argv[2])\n\nprint(parallel_iteration([int(i) for i in list1], [int(i) for i in list2]))\n"}, {"generated_text": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''\n\n    # We want to iterate in a parallel way so we use zip\n    iterators1 = zip(list1, list2)\n    iterators2 = zip(list1, list2)\n\n    return sum(multiply_elements(*prod) for prod in iterators1 if prod in iterators2)\n\n\ndef multiply_elements(a, b):\n    # If both elements in a and b are integers the multiplication does the math\n    return int(a) * int(b)"}]}
{"task_id": "15705630", "prompt": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    df_max = float('-inf')\n    out_df = {}\n    if len(groups) >= 1:\n        for g in groups:\n            df_tmp = df.groupby(g)[max_col].max()\n            out_df[g] = df_tmp\n\n        df_max = out_df.get((len(out_df)-1))\n    return out_df, df_max\n    \ndef get_min_by_group(df: pd.DataFrame, groups:list, min_col:str) -> p"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    max_by_group = pd.DataFrame()\n    for col_name in groups: \n        data = {col_name : df.groupby(col_name)[max_col].max()}\n        df_col = pd.DataFrame(data)\n        df_col['dummy'] = pd.DataFrame(len(df) - df_col[col_name].sum())\n        df_col.loc['total'] = pd.DataFrame([len(df)], columns = ['dummy'])\n        max_by"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n\n\n    result = pd.DataFrame()\n    for group in groups:\n        result = pd.concat([result,df[df[group]==group].max()])\n\n    return result.sort_values(max_col, ascending=False)"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    if type(groups) == str:\n        groups = [groups]\n    max_df = df[[max_col] + groups]\n    return max_df.groupby(groups).max().reset_index()\n\ndef get_min_by_group(df: pd.DataFrame, groups:list, min_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the min of the min_col grouped by the groups.\n\n    Example:\n    get_min_by_group(pd.DataFrame({"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n\n    maxgroup_df = pd.DataFrame()\n\n    if isinstance(groups, str):\n        maxgroup_df=df[max_col].groupby(groups).max().reset_index()\n    else:\n        maxgroup_df=df[max_col].loc[groups].max().reset_index()\n\n    return maxgroup_df\n\ndef get_avg_by_group(df: pd.DataFrame, groups: list, avg_col: str, aggfunc: str ='mean') -> pd.DataFrame:\n    "}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    out_df = df.loc[:,groups]\n    for i in groups:\n        df_max = max(out_df.loc['0',i])\n        df_max_idx = out_df.loc['0',i].index[0]\n        out_df.loc[df_max_idx,i] = df_max\n    df_groupby = out_df.groupby(groups)\n    return df_groupby\n\ndef get_tuple_by_group(df:pd.DataFrame, groups:list,"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    \n    df_copy = df.copy()\n    df_copy.set_index('groups', inplace=True)\n    df_copy = df_copy.sum(level='groups')\n    \n    groups_max_by_group = df_copy.groupby('groups').max()\n    groups_max_by_group.reset_index(level=0, inplace=True)\n    \n\n    return groups_max_by_group\n\n    \n\n\ndef make_group_average(df: pd.DataFrame, groups:list, group_"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    \n    # Group By\n    gb_max = df.groupby(groups).max().reset_index()\n    \n    # Assign to new variable\n    gb_max_2 = pd.DataFrame(index=gb_max.index)\n    \n    # Group By\n    gb_max_2 = gb_max.groupby(groups)[max_col].apply(lambda x: x.max())\n    \n    return gb_max_2\n\ndef melt_data(df: pd.DataFrame) -> pd.DataFrame"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    if isinstance(groups, str):\n        new_df = df.groupby(groups)[max_col].apply(lambda x : x.max()).to_frame()\n    elif isinstance(groups, list):\n        new_df = df.groupby(groups)[max_col].apply(lambda x : x.max()).to_frame()\n    return new_df\n\n\ndef get_min_by_group(df: pd.DataFrame, groups:list, min_col:str) -> pd.DataFrame:\n    ''"}, {"generated_text": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''\n    all_results={}\n    for col in groups:\n        all_results[col]=df[col].max()\n\n    all_groups = groups[:]\n\n    dfcolcopy = df.copy()\n    for col in groups:\n        if col not in all_groups:\n            all_groups.append(col)\n            dfcolcopy[col]=pd.Series()\n\n    grouped_df = dfcolcopy.groupby(groups)\n\n    for col in groups:\n        dfcolcopy[col]=grouped_df[1][max_col]."}]}
{"task_id": "17071871", "prompt": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''", "suggestions": [{"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    select_values = df.query(f\"{column_name} == {criteria}\")\n    return select_values\n\ndef filter_by_value(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    filter_by_value(pd.DataFrame({'a': [1, 2, 3], 'b': [4,"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return df[df[column_name] == criteria]\n\n\ndef select_duplicate(df: pd.DataFrame, columns: list, criteria: str) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the duplicate rows of the DataFrame with\n    identical values for columns in the provided list.\n\n    Example:\n    Example:\n    select_duplicate(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [5, 5, 5"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return df[df[column_name] == criteria]\n\ndef add_subset(base, new, axis=0):\n    return pd.concat([base, new], axis=axis, sort=False)\n\nclass TimeSeries:\n    '''\n    The following time series objects (and class definitions) are in this module.\n\n    All time series objects should have the following fields and methods, as\n    documented in the descriptions below.\n\n    When adding a new time series object, be sure to do the following:\n        1. Add a unit and a human"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return df[df[column_name] == criteria]\n\ndef select_rows(df: pd.DataFrame, column_names: list) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where all the values in\n    column_name columns are equal to criteria.\n\n    select_rows(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), ['a', 'b'])\n    -> pd.DataFrame({'a': [1,"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n\n    return df.loc[(df[column_name] == criteria)]\n\ndef select_rows_contiguous(df: pd.DataFrame, column: str, start: int or tuple or list, end: int or tuple or list) -> pd.DataFrame:\n    '''\n    Given an in-memory pd.DataFrame df with a column and start and end,\n    return a pd.DataFrame without rows between start and end, inclusive.\n    For example, select_rows_contiguous(df, \"t\", 0, 6) ->\n"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    new_df = df.loc[df[column_name] == criteria]\n    return new_df\n\ndef count_values(df: pd.DataFrame, column_name: str, criteria: int) -> int:\n    '''\n    Return the number of rows of df where df.column_name column equals criteria.\n\n    Example:\n    count_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) -> 2\n\n    count_values(pd.Data"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return df[df[column_name] == criteria][column_name]\n\n\ndef select_first_character_length_value(df: pd.DataFrame, criteria: int,\n                                       column_name: str = \"String\") -> \\\n        pd.DataFrame:\n    '''\n    Returns the DataFrame containing only the rows of df where there is a column\n    column_name of length criteria.\n\n    Example:\n    - If the column name is called length_string, then the returned\n      DataFrame will only contain rows where length_string"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return df[df[column_name]==criteria]\n\ndef aggregate(df: pd.DataFrame, new_column_names = None, criteria_field = 'A', criteria_value = '1') -> pd.DataFrame:\n    '''\n    Take in a dataframe with 3 columns, 'X', 'Y', 'Z' from your database\n    representing points on the 2D plane, and a column which contains a 1 if data\n    point X was generated as a result of an A value other than 1, else set\n    X as Na"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return df.loc[df[column_name] == criteria,:]\n\n#print(select_values(pd.DataFrame({'a':[1,2,3,3,3,3], 'b':[4,5,6,5,5,6]}), 'a', 2))\n#print(select_values(pd.DataFrame({'a':[1,2,3,3,3,3], 'b':[4,5,6,5,5,6]}), 'a', 4))\n\ndef select_range(df"}, {"generated_text": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''\n    return df[df[column_name] == criteria]\n\n\ndef select_values_2(df: pd.DataFrame, column_name: str, min_val: float, max_val: float) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is between min_val and max_val, inclusive.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5,"}]}
{"task_id": "2612802", "prompt": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''", "suggestions": [{"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    new_list = []\n    for item in list_to_copy:\n        if type(item) == list:\n            copy_of_new_list = deep_copy_list(item)\n            new_list.append(copy_of_new_list)\n        else:\n            new_list.append(item)\n    return new_list\n\ndef copy_dict_by_values(dict_to_copy_by_values: dict) -> dict:\n    '''\n    Return a deep copy of the dict passed in. For instance:\n"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    return list(list_to_copy)\n\n\ndef swap(list_to_swap: list, position_1: int, position_2: int) -> None:\n    '''\n    Swap the elements at position_1 and position_2.\n    Example:\n    list = [1, 2, 3, 4]\n    swap(list, 1, 2)\n    -> [2, 1, 3, 4]\n    '''\n    list_to_swap[position_1], list_to_swap[position_2] ="}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    # Copies the list into a new list\n    new_list = list(list_to_copy)\n\n    return new_list.copy() # Copies the list's content into the new list using 'copy' '''\n\nimport copy\n\ndef deep_copy_of_dictionary(dictionary_to_copy: dict) -> dict:\n    '''\n    Return a deep copy of the original dictionary. For example:\n    dict_to_copy = {1: '1', 2: '2'}\n    deep_copy_of_dictionary("}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    return copy.deepcopy(list_to_copy)\n\ndef deep_compare_lists(list_a: list, list_b: list) -> bool:\n    '''\n    Return true iff the elements in list_b are the same in the same order as in list_a.\n\n    Example:\n    deep_compare_lists([1, 2, 3],[1, 2]) == True\n    deep_compare_lists([1, 2, 3],[2, 3]) == False\n    '''\n    if len(list_b)!="}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n\n    new_list = []\n    for i in range(len(list_to_copy)):\n        new_list.append(deep_copy_list(list_to_copy[i]))\n    return new_list\n\n\ndef deep_copy_string(string: str) -> str:\n    '''\n    Return a deep copy of a string. For example:\n    example = \"abcdefg\"\n    string = deep_copy_string(example)\n    >>> string=='abcdefg'\n    True\n\n    Example:\n    string = deep"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    return copy.deepcopy(list_to_copy[:])\n\ndef deep_copy_dict(old_dict: dict) -> dict:\n    '''Return a deep copy from the dict passed in. For instance a = {1:2, 876:3}\n    -> b = deep_copy_dict(a)\n    d = id(a)!= id(b) # d is true'''\n    return copy.deepcopy(old_dict[:])\n\ndef get_list_of_keys(dict_of_lists: dict) ->"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    new_list = []\n    copy_items = []\n    copy_items.append(list_to_copy)\n\n    while copy_items:\n        curr_list = copy_items.pop()\n\n        if curr_list!= None:\n            new_list.append(curr_list.pop())\n\n    return new_list\n\ndef delete_list_val(list_to_modify: list, val_to_del: int) -> list:\n    '''\n    Return a list whose elements replace the ones at the index of val_"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    return list(_copy.copy(list_to_copy))\n\n\n\n\ndef sum_numbers(list_of_numbers: list) -> float:\n    '''\n    Return the sum of the passed in list's values.\n    For instance:\n    sum_numbers([1, 2, 3])\n    -> 6\n    '''\n    sum = 0\n\n    for item in list_of_numbers:\n        sum += item\n\n    return sum\n\n\ndef filter_list(list_to_filter, list_to_filter_from) -> list"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n\n    return copy.deepcopy(list_to_copy)\n\n\ndef print_list(list_to_display: list, separator: str = \" \", print_nth_element: bool = False):\n    '''\n    print_list takes in 2 arguments:\n    list_to_display: A list to display in output (e.g. list of students or list of subjects)\n    separator: A single character string argument to write at the start of the output string (e.g. \", \")\n    print_nth_element: A boolean argument to"}, {"generated_text": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''\n    list_duplicate = []\n    for i in list_to_copy:\n        list_duplicate.append(i)\n    return(list_duplicate)\n\ndef flatten_list(list_to_flatten: list) -> list:\n    '''\n    Return a flatten list of elements in list_to_flatten list. For instance,\n    [1,2,3] -> [1, 2, 3]\n\n    Example:\n    flatten_list([1,2,3])\n    -> [1, 2"}]}
{"task_id": "76022408", "prompt": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"", "suggestions": [{"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    # print(html_obj)\n    with open(\"raw_data.html\") as html:\n        html_obj = html.read()\n        data = pd.read_html(html_obj, flavor = \"bs4\",header = 0)\n        csv_str = str(data.to_csv(header=None, index=False))\n\n        with open(f\"{csv_file}\", \"w\", encoding = \"utf-8\") as f:\n            f.write(html_str)\n\n    return csv_str.replace(\"\\r"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    import re\n    import io\n    from urllib.request import urlopen\n\n    html = html_str\n    try : html = html.encode('utf8')\n    except: pass\n\n    html = html.decode()\n    header = re.sub(r':\\s+[0-9]+\\.([^:]+)', r': \\1', html)\n    header = header.replace(':::', ':--')\n    data = ''\n    for line in html.splitlines() :\n        if line[0] == '-"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    soup = BeautifulSoup(html_str, 'html.parser')\n    tables = soup.find_all('table')\n    df = pd.read_html(str(tables[0]))[0]\n    df.to_csv(csv_file, index=None, header=True)\n    return df\n\ndef extract_covid_state(df:pd.DataFrame, state_code:str) -> pd.DataFrame:\n\n    df_state = df[df['Country/Region'] == state_code]\n"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n\n    # Write HTML to file\n    htmlfile = open(csv_file, 'w')\n    htmlfile.write(html_str)\n\n    # Read file using python as a \"CSV reader\"\n    csvfile = csv.reader(open('{}s1.html'.format(csv_file), 'r'))\n\n    # Convert file into a list\n    datarecords = list(csvfile)\n\n    # Write file as a list\n    with open(csv_file, 'w') as writeto:\n        writer = csv."}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n\n    csv_str = '{',' '.join([x.strip() for x in html_str.split('{')])\n    csv_str = '\\n'.join([x.strip() for x in csv_str.split('\\n')])\n    csv_str = csv_str.replace(', ', ',')\n    csv_str = csv_str.replace('\"', '')\n    \n    csv_str = csv_str[:-1] + '}'\n\n    with open(csv_file, 'w') as out_"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    f = open(csv_file, 'w')\n    data = f.read()\n    html = data + html_str + '</table></div></div></body></html>'\n    #data + html_str +  '</table></div></div></body></html>'\n\n    csv_str = csv.reader(html.splitlines(), delimiter = ',')\n    header_list = next(csv_str)\n    col_dict = dict(zip(header_list, list(range(len(header_list)))))\n\n    "}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    with open(csv_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow([r'<tr>'])\n\n        for element in html_str.split('\\n'):\n            row = []\n            \n            index = element.split(\"<\")[1].replace(\">\", \"\").strip()\n\n            if index.startswith(\"td\"):\n                # td table header\n                row.append(index)\n\n                if element.strip() == '<table id=\"example"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    html_table_str = str(\n        re.search('(<table.*?>)(.*?)</table>', html_str, re.DOTALL).group(2))\n\n    html_headers = html_table_str.split('<th')[1:]\n\n    html_tbody = html_table_str.split('</tbody>')[0]\n\n    headers = []\n    num_rows = 0\n    for header in html_headers:\n        header = header.replace('</th>', '').replace('<th>', ''"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    lines = html_str.splitlines()\n\n    with open(csv_file, 'w') as file:\n        writer = csv.writer(file)\n        writer.writerow('title,href,content',)\n        writer.writerows(lines)\n\n    return csv_file\n\ndef csv_to_html(csv_file: str, csv_file_html: str) -> str:\n    \"\"\"\n    Convert a csv file to the html string\n    \"\"\"\n    with open(csv_file, 'r') as file:"}, {"generated_text": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\"\n    table = pd.read_html(html_str)\n\n    with open(csv_file, \"w\") as csvfile:\n        spamwriter = csv.writer(csvfile, delimiter=\";\")\n\n        spamwriter.writerow([\"Title\"])\n        [spamwriter.writerow([i]) for i in table[0][0].str.split(\"|\")] # Split column titles by \"|\" with the length of 1\n        spamwriter.writerow([\"Date\"])\n        rows = table[0][1]"}]}
