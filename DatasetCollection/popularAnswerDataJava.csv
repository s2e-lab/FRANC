20159305,"<p><em>Note: Most of the ideas here are pretty generic for Stack Overflow, indeed questions in general. See <a href=""https://stackoverflow.com/help/minimal-reproducible-example"">Minimal, Reproducible Example</a>; see also <a href=""http://sscce.org/"" rel=""nofollow noreferrer"">Short, Self Contained, Correct Example</a>.</em></p>
<p><strong>Disclaimer: Writing a good question is <em>hard</em>.</strong></p>
<h3>The Good:</h3>
<ul>
<li><p>Do include a small example DataFrame, either as runnable code:</p>
<pre><code>In [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])
</code></pre>
<p>or make it &quot;copy and pasteable&quot; using <code>pd.read_clipboard(sep='\s\s+')</code>. You can format the text for Stack Overflow by highlighting and using <kbd>Ctrl</kbd>+<kbd>K</kbd> (or prepend four spaces to each line), or place three backticks (```) above and below your code with your code unindented:</p>
<pre><code>In [2]: df
Out[2]:
   A  B
0  1  2
1  1  3
2  4  6
</code></pre>
<p>Test <code>pd.read_clipboard(sep='\s\s+')</code> yourself.</p>
<ul>
<li><p>I really do mean <strong>small</strong>. The vast majority of example DataFrames could be fewer than 6 rows,<sup>[citation needed]</sup> and <strong>I bet I can do it in 5 rows</strong>. Can you reproduce the error with <code>df = df.head()</code>? If not, fiddle around to see if you can make up a small DataFrame which exhibits the issue you are facing.</p>
<p>But every rule has an exception, the obvious one being for performance issues  (in which case definitely use <a href=""https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-timeit"" rel=""nofollow noreferrer""><code>%timeit</code></a> and possibly <a href=""https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-prun"" rel=""nofollow noreferrer""><code>%prun</code></a>), where you should generate:</p>
<pre><code>df = pd.DataFrame(np.random.randn(100000000, 10))
</code></pre>
<p>Consider using <code>np.random.seed</code> so we have the exact same frame. Having said that, &quot;make this code fast for me&quot; is not strictly on topic for the site.</p>
</li>
</ul>
</li>
<li><p>Write out the outcome you desire (similarly to above)</p>
<pre><code>In [3]: iwantthis
Out[3]:
   A  B
0  1  5
1  4  6
</code></pre>
<p>Explain where the numbers come from:</p>
<blockquote>
<p>The 5 is the sum of the B column for the rows where A is 1.</p>
</blockquote>
</li>
<li><p>Do show <em>the code</em> you've tried:</p>
<pre><code>In [4]: df.groupby('A').sum()
Out[4]:
   B
A
1  5
4  6
</code></pre>
<p>But say what's incorrect:</p>
<blockquote>
<p>The A column is in the index rather than a column.</p>
</blockquote>
</li>
<li><p>Do show you've done some research (<a href=""http://pandas.pydata.org/pandas-docs/stable/search.html?q=groupby+sum"" rel=""nofollow noreferrer"">search the documentation</a>, <a href=""https://stackoverflow.com/search?q=%5Bpandas%5D+groupby+sum"">search StackÂ Overflow</a>), and give a summary:</p>
<blockquote>
<p>The docstring for sum simply states &quot;Compute sum of group values&quot;</p>
</blockquote>
<blockquote>
<p>The <a href=""http://pandas.pydata.org/pandas-docs/stable/groupby.html#cython-optimized-aggregation-functions"" rel=""nofollow noreferrer"">groupby documentation</a> doesn't give any examples for this.</p>
</blockquote>
<p><em>Aside: the answer here is to use <code>df.groupby('A', as_index=False).sum()</code>.</em></p>
</li>
<li><p>If it's relevant that you have Timestamp columns, e.g. you're resampling or something, then be explicit and apply <code>pd.to_datetime</code> to them for good measure.</p>
<pre><code>df['date'] = pd.to_datetime(df['date']) # this column ought to be date.
</code></pre>
<p>Sometimes this is the issue itself: they were strings.</p>
</li>
</ul>
<h3>The Bad:</h3>
<ul>
<li><p>Don't include a MultiIndex, which <strong>we can't copy and paste</strong> (see above). This is kind of a grievance with Pandas' default display, but nonetheless annoying:</p>
<pre><code>In [11]: df
Out[11]:
     C
A B
1 2  3
  2  6
</code></pre>
<p>The correct way is to include an ordinary DataFrame with a <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html"" rel=""nofollow noreferrer""><code>set_index</code></a> call:</p>
<pre><code>In [12]: df = pd.DataFrame([[1, 2, 3], [1, 2, 6]], columns=['A', 'B', 'C'])

In [13]: df = df.set_index(['A', 'B'])

In [14]: df
Out[14]:
     C
A B
1 2  3
  2  6
</code></pre>
</li>
<li><p>Do provide insight to what it is when giving the outcome you want:</p>
<pre><code>   B
A
1  1
5  0
</code></pre>
<p>Be specific about how you got the numbers (what are they)... double check they're correct.</p>
</li>
<li><p>If your code throws an error, do include the entire stack trace. This can be edited out later if it's too noisy. Show the line number and the corresponding line of your code which it's raising against.</p>
</li>
</ul>
<h3>The Ugly:</h3>
<ul>
<li><p>Don't link to a <a href=""https://en.wikipedia.org/wiki/Comma-separated_values"" rel=""nofollow noreferrer"">CSV</a> file we don't have access to (and ideally don't link to an external source at all).</p>
<pre><code>df = pd.read_csv('my_secret_file.csv') # ideally with lots of parsing options
</code></pre>
<p><strong>Most data is proprietary</strong>, we get that. Make up similar data and see if you can reproduce the problem (something small).</p>
</li>
<li><p>Don't explain the situation vaguely in words, like you have a DataFrame which is &quot;large&quot;, mention some of the column names in passing (be sure not to mention their dtypes). Try and go into lots of detail about something which is completely meaningless without seeing the actual context. Presumably no one is even going to read to the end of this paragraph.</p>
<p><em>Essays are bad; it's easier with small examples.</em></p>
</li>
<li><p>Don't include 10+ (100+??) lines of data munging before getting to your actual question.</p>
<p>Please, we see enough of this in our day jobs. We want to help, but <a href=""https://www.youtube.com/watch?v=ECfRp-jwbI4"" rel=""nofollow noreferrer"">not like this...</a>.
Cut the intro, and just show the relevant DataFrames (or small versions of them) in the step which is causing you trouble.</p>
</li>
</ul>
"
15112149,"<p>You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:</p>
<pre><code>if x == 1 or y == 1 or z == 1:
</code></pre>
<p><code>x</code> and <code>y</code> are otherwise evaluated on their own (<code>False</code> if <code>0</code>, <code>True</code> otherwise).</p>
<p>You can shorten that using a containment test against <a href=""https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences"" rel=""noreferrer"">a tuple</a>:</p>
<pre><code>if 1 in (x, y, z):
</code></pre>
<p>or better still:</p>
<pre><code>if 1 in {x, y, z}:
</code></pre>
<p>using <a href=""https://docs.python.org/3/tutorial/datastructures.html#sets"" rel=""noreferrer"">a <code>set</code></a> to take advantage of the constant-cost membership test (i.e. <code>in</code> takes a fixed amount of time whatever the left-hand operand is).</p>
<h3>Explanation</h3>
<p>When you use <code>or</code>, python sees each side of the operator as <em>separate</em> expressions. The expression <code>x or y == 1</code> is treated as first a boolean test for <code>x</code>, then if that is False, the expression <code>y == 1</code> is tested.</p>
<p>This is due to <a href=""http://docs.python.org/3/reference/expressions.html#operator-precedence"" rel=""noreferrer"">operator precedence</a>. The <code>or</code> operator has a lower precedence than the <code>==</code> test, so the latter is evaluated <em>first</em>.</p>
<p>However, even if this were <em>not</em> the case, and the expression <code>x or y or z == 1</code> was actually interpreted as <code>(x or y or z) == 1</code> instead, this would still not do what you expect it to do.</p>
<p><code>x or y or z</code> would evaluate to the first argument that is 'truthy', e.g. not <code>False</code>, numeric 0 or empty (see <a href=""http://docs.python.org/3/reference/expressions.html#boolean-operations"" rel=""noreferrer"">boolean expressions</a> for details on what Python considers false in a boolean context).</p>
<p>So for the values <code>x = 2; y = 1; z = 0</code>, <code>x or y or z</code> would resolve to <code>2</code>, because that is the first true-like value in the arguments. Then <code>2 == 1</code> would be <code>False</code>, even though <code>y == 1</code> would be <code>True</code>.</p>
<p>The same would apply to the inverse; testing multiple values against a single variable; <code>x == 1 or 2 or 3</code> would fail for the same reasons. Use <code>x == 1 or x == 2 or x == 3</code> or <code>x in {1, 2, 3}</code>.</p>
"
1373185,"<p>You can use <a href=""https://docs.python.org/tutorial/datastructures.html#dictionaries"" rel=""nofollow noreferrer"">dictionaries</a> to accomplish this. Dictionaries are stores of keys and values.</p>
<pre><code>&gt;&gt;&gt; dct = {'x': 1, 'y': 2, 'z': 3}
&gt;&gt;&gt; dct
{'x': 1, 'y': 2, 'z': 3}
&gt;&gt;&gt; dct[&quot;y&quot;]
2
</code></pre>
<p>You can use variable key names to achieve the effect of variable variables without the security risk.</p>
<pre><code>&gt;&gt;&gt; x = &quot;spam&quot;
&gt;&gt;&gt; z = {x: &quot;eggs&quot;}
&gt;&gt;&gt; z[&quot;spam&quot;]
'eggs'
</code></pre>
<p>For cases where you're thinking of doing something like</p>
<pre><code>var1 = 'foo'
var2 = 'bar'
var3 = 'baz'
...
</code></pre>
<p>a <a href=""https://docs.python.org/tutorial/introduction.html#lists"" rel=""nofollow noreferrer"">list</a> may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:</p>
<pre><code>lst = ['foo', 'bar', 'baz']
print(lst[1])           # prints bar, because indices start at 0
lst.append('potatoes')  # lst is now ['foo', 'bar', 'baz', 'potatoes']
</code></pre>
<p>For ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order, <a href=""https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation"">slicing</a>, <code>append</code>, and other operations that would require awkward key management with a dict.</p>
"
23294659,"<p>The simplest way to accomplish this is to put the <code>input</code> method in a while loop. Use <a href=""https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops"" rel=""noreferrer""><code>continue</code></a> when you get bad input, and <code>break</code> out of the loop when you're satisfied.</p>

<h2>When Your Input Might Raise an Exception</h2>

<p>Use <a href=""https://docs.python.org/3/tutorial/errors.html#handling-exceptions"" rel=""noreferrer""><code>try</code> and <code>except</code></a> to detect when the user enters data that can't be parsed.</p>

<pre><code>while True:
    try:
        # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input
        age = int(input(""Please enter your age: ""))
    except ValueError:
        print(""Sorry, I didn't understand that."")
        #better try again... Return to the start of the loop
        continue
    else:
        #age was successfully parsed!
        #we're ready to exit the loop.
        break
if age &gt;= 18: 
    print(""You are able to vote in the United States!"")
else:
    print(""You are not able to vote in the United States."")
</code></pre>

<h2>Implementing Your Own Validation Rules</h2>

<p>If you want to reject values that Python can successfully parse, you can add your own validation logic.</p>

<pre><code>while True:
    data = input(""Please enter a loud message (must be all caps): "")
    if not data.isupper():
        print(""Sorry, your response was not loud enough."")
        continue
    else:
        #we're happy with the value given.
        #we're ready to exit the loop.
        break

while True:
    data = input(""Pick an answer from A to D:"")
    if data.lower() not in ('a', 'b', 'c', 'd'):
        print(""Not an appropriate choice."")
    else:
        break
</code></pre>

<h2>Combining Exception Handling and Custom Validation</h2>

<p>Both of the above techniques can be combined into one loop.</p>

<pre><code>while True:
    try:
        age = int(input(""Please enter your age: ""))
    except ValueError:
        print(""Sorry, I didn't understand that."")
        continue

    if age &lt; 0:
        print(""Sorry, your response must not be negative."")
        continue
    else:
        #age was successfully parsed, and we're happy with its value.
        #we're ready to exit the loop.
        break
if age &gt;= 18: 
    print(""You are able to vote in the United States!"")
else:
    print(""You are not able to vote in the United States."")
</code></pre>

<h2>Encapsulating it All in a Function</h2>

<p>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</p>

<pre><code>def get_non_negative_int(prompt):
    while True:
        try:
            value = int(input(prompt))
        except ValueError:
            print(""Sorry, I didn't understand that."")
            continue

        if value &lt; 0:
            print(""Sorry, your response must not be negative."")
            continue
        else:
            break
    return value

age = get_non_negative_int(""Please enter your age: "")
kids = get_non_negative_int(""Please enter the number of children you have: "")
salary = get_non_negative_int(""Please enter your yearly earnings, in dollars: "")
</code></pre>

<h3>Putting It All Together</h3>

<p>You can extend this idea to make a very generic input function:</p>

<pre><code>def sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None):
    if min_ is not None and max_ is not None and max_ &lt; min_:
        raise ValueError(""min_ must be less than or equal to max_."")
    while True:
        ui = input(prompt)
        if type_ is not None:
            try:
                ui = type_(ui)
            except ValueError:
                print(""Input type must be {0}."".format(type_.__name__))
                continue
        if max_ is not None and ui &gt; max_:
            print(""Input must be less than or equal to {0}."".format(max_))
        elif min_ is not None and ui &lt; min_:
            print(""Input must be greater than or equal to {0}."".format(min_))
        elif range_ is not None and ui not in range_:
            if isinstance(range_, range):
                template = ""Input must be between {0.start} and {0.stop}.""
                print(template.format(range_))
            else:
                template = ""Input must be {0}.""
                if len(range_) == 1:
                    print(template.format(*range_))
                else:
                    expected = "" or "".join((
                        "", "".join(str(x) for x in range_[:-1]),
                        str(range_[-1])
                    ))
                    print(template.format(expected))
        else:
            return ui
</code></pre>

<p>With usage such as:</p>

<pre><code>age = sanitised_input(""Enter your age: "", int, 1, 101)
answer = sanitised_input(""Enter your answer: "", str.lower, range_=('a', 'b', 'c', 'd'))
</code></pre>

<h2>Common Pitfalls, and Why you Should Avoid Them</h2>

<h3>The Redundant Use of Redundant <code>input</code> Statements</h3>

<p>This method works but is generally considered poor style:</p>

<pre><code>data = input(""Please enter a loud message (must be all caps): "")
while not data.isupper():
    print(""Sorry, your response was not loud enough."")
    data = input(""Please enter a loud message (must be all caps): "")
</code></pre>

<p>It might look attractive initially because it's shorter than the <code>while True</code> method, but it violates the <a href=""http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" rel=""noreferrer"">Don't Repeat Yourself</a> principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing <code>input</code> to <code>raw_input</code>, but accidentally change only the first <code>input</code> above? It's a <code>SyntaxError</code> just waiting to happen.</p>

<h3>Recursion Will Blow Your Stack</h3>

<p>If you've just learned about recursion, you might be tempted to use it in <code>get_non_negative_int</code> so you can dispose of the while loop.</p>

<pre><code>def get_non_negative_int(prompt):
    try:
        value = int(input(prompt))
    except ValueError:
        print(""Sorry, I didn't understand that."")
        return get_non_negative_int(prompt)

    if value &lt; 0:
        print(""Sorry, your response must not be negative."")
        return get_non_negative_int(prompt)
    else:
        return value
</code></pre>

<p>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a <code>RuntimeError: maximum recursion depth exceeded</code>. You may think ""no fool would make 1000 mistakes in a row"", but you're underestimating the ingenuity of fools!</p>
"
509295,"<p>The syntax is:</p>
<pre><code>a[start:stop]  # items start through stop-1
a[start:]      # items start through the rest of the array
a[:stop]       # items from the beginning through stop-1
a[:]           # a copy of the whole array
</code></pre>
<p>There is also the <code>step</code> value, which can be used with any of the above:</p>
<pre><code>a[start:stop:step] # start through not past stop, by step
</code></pre>
<p>The key point to remember is that the <code>:stop</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference between <code>stop</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>
<p>The other feature is that <code>start</code> or <code>stop</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>
<pre><code>a[-1]    # last item in the array
a[-2:]   # last two items in the array
a[:-2]   # everything except the last two items
</code></pre>
<p>Similarly, <code>step</code> may be a negative number:</p>
<pre><code>a[::-1]    # all items in the array, reversed
a[1::-1]   # the first two items, reversed
a[:-3:-1]  # the last two items, reversed
a[-3::-1]  # everything except the last two items, reversed
</code></pre>
<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>
<h3>Relationship with the <code>slice</code> object</h3>
<p>A <a href=""https://www.w3schools.com/python/ref_func_slice.asp"" rel=""noreferrer""><code>slice</code> object</a> can represent a slicing operation, i.e.:</p>
<pre><code>a[start:stop:step]
</code></pre>
<p>is equivalent to:</p>
<pre><code>a[slice(start, stop, step)]
</code></pre>
<p>Slice objects also behave slightly differently depending on the number of arguments, similarly to <code>range()</code>, i.e. both <code>slice(stop)</code> and <code>slice(start, stop[, step])</code> are supported.
To skip specifying a given argument, one might use <code>None</code>, so that e.g. <code>a[start:]</code> is equivalent to <code>a[slice(start, None)]</code> or <code>a[::-1]</code> is equivalent to <code>a[slice(None, None, -1)]</code>.</p>
<p>While the <code>:</code>-based notation is very helpful for simple slicing, the explicit use of <code>slice()</code> objects simplifies the programmatic generation of slicing.</p>
"
240205,"<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to the same <code>x</code>. When you then modify this single <code>x</code> it is visible via all three references to it:</p>
<pre><code>x = [1] * 4
xs = [x] * 3
print(f&quot;id(x): {id(x)}&quot;)
# id(x): 140560897920048
print(
    f&quot;id(xs[0]): {id(xs[0])}\n&quot;
    f&quot;id(xs[1]): {id(xs[1])}\n&quot;
    f&quot;id(xs[2]): {id(xs[2])}&quot;
)
# id(xs[0]): 140560897920048
# id(xs[1]): 140560897920048
# id(xs[2]): 140560897920048

x[0] = 42
print(f&quot;x: {x}&quot;)
# x: [42, 1, 1, 1]
print(f&quot;xs: {xs}&quot;)
# xs: [[42, 1, 1, 1], [42, 1, 1, 1], [42, 1, 1, 1]]
</code></pre>
<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>
<pre><code>[[1]*4 for _ in range(3)]
</code></pre>
<p>which will reevaluate <code>[1]*4</code> each time instead of evaluating it once and making 3 references to 1 list.</p>
<hr />
<p>You might wonder why <code>*</code> can't make independent objects the way the list comprehension does. That's because the multiplication operator <code>*</code> operates on objects, without seeing expressions. When you use <code>*</code> to multiply <code>[[1] * 4]</code> by 3, <code>*</code> only sees the 1-element list <code>[[1] * 4]</code> evaluates to, not the <code>[[1] * 4</code> expression text. <code>*</code> has no idea how to make copies of that element, no idea how to reevaluate <code>[[1] * 4]</code>, and no idea you even want copies, and in general, there might not even be a way to copy the element.</p>
<p>The only option <code>*</code> has is to make new references to the existing sublist instead of trying to make new sublists. Anything else would be inconsistent or require major redesigning of fundamental language design decisions.</p>
<p>In contrast, a list comprehension reevaluates the element expression on every iteration. <code>[[1] * 4 for n in range(3)]</code> reevaluates <code>[1] * 4</code> every time for the same reason <code>[x**2 for x in range(3)]</code> reevaluates <code>x**2</code> every time. Every evaluation of <code>[1] * 4</code> generates a new list, so the list comprehension does what you wanted.</p>
<p>Incidentally, <code>[1] * 4</code> also doesn't copy the elements of <code>[1]</code>, but that doesn't matter, since integers are immutable. You can't do something like <code>1.value = 2</code> and turn a 1 into a 2.</p>
"
47152692,"<p>Here is a list of idioms we can use to pivot</p>
<ol>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a></p>
<ul>
<li>A glorified version of <code>groupby</code> with more intuitive API.  For many people, this is the preferred approach.  And it is the intended approach by the developers.</li>
<li>Specify row level, column levels, values to be aggregated, and function(s) to perform aggregations.</li>
</ul>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"" rel=""noreferrer""><code>pd.DataFrame.groupby</code></a> + <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html"" rel=""noreferrer""><code>pd.DataFrame.unstack</code></a></p>
<ul>
<li>Good general approach for doing just about any type of pivot</li>
<li>You specify all columns that will constitute the pivoted row levels and column levels in one group by.  You follow that by selecting the remaining columns you want to aggregate and the function(s) you want to perform the aggregation.  Finally, you <code>unstack</code> the levels that you want to be in the column index.</li>
</ul>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html"" rel=""noreferrer""><code>pd.DataFrame.set_index</code></a> + <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html"" rel=""noreferrer""><code>pd.DataFrame.unstack</code></a></p>
<ul>
<li>Convenient and intuitive for some (myself included).  Cannot handle duplicate grouped keys.</li>
<li>Similar to the <code>groupby</code> paradigm, we specify all columns that will eventually be either row or column levels and set those to be the index.  We then <code>unstack</code> the levels we want in the columns.  If either the remaining index levels or column levels are not unique, this method will fail.</li>
</ul>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html"" rel=""noreferrer""><code>pd.DataFrame.pivot</code></a></p>
<ul>
<li>Very similar to <code>set_index</code> in that it shares the duplicate key limitation.  The API is very limited as well.  It only takes scalar values for <code>index</code>, <code>columns</code>, <code>values</code>.</li>
<li>Similar to the <code>pivot_table</code> method in that we select rows, columns, and values on which to pivot.  However, we cannot aggregate and if either rows or columns are not unique, this method will fail.</li>
</ul>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.crosstab.html"" rel=""noreferrer""><code>pd.crosstab</code></a></p>
<ul>
<li>This a specialized version of <code>pivot_table</code> and in its purest form is the most intuitive way to perform several tasks.</li>
</ul>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.factorize.html"" rel=""noreferrer""><code>pd.factorize</code></a> + <a href=""https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.bincount.html"" rel=""noreferrer""><code>np.bincount</code></a></p>
<ul>
<li>This is a highly advanced technique that is very obscure but is very fast.  It cannot be used in all circumstances, but when it can be used and you are comfortable using it, you will reap the performance rewards.</li>
</ul>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html"" rel=""noreferrer""><code>pd.get_dummies</code></a> + <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dot.html"" rel=""noreferrer""><code>pd.DataFrame.dot</code></a></p>
<ul>
<li>I use this for cleverly performing cross tabulation.</li>
</ul>
</li>
</ol>
<p>See also:</p>
<ul>
<li><a href=""https://pandas.pydata.org/docs/user_guide/reshaping.html"" rel=""noreferrer"">Reshaping and pivot tables</a> â pandas User Guide</li>
</ul>
<hr />
<h3>Question 1</h3>
<blockquote>
<p>Why do I get <code>ValueError: Index contains duplicate entries, cannot reshape</code></p>
</blockquote>
<p>This occurs because pandas is attempting to reindex either a <code>columns</code> or <code>index</code> object with duplicate entries.  There are varying methods to use that can perform a pivot.  Some of them are not well suited to when there are duplicates of the keys on which it is being asked to pivot.  For example:  Consider <code>pd.DataFrame.pivot</code>.  I know there are duplicate entries that share the <code>row</code> and <code>col</code> values:</p>
<pre><code>df.duplicated(['row', 'col']).any()

True
</code></pre>
<p>So when I <code>pivot</code> using</p>
<pre><code>df.pivot(index='row', columns='col', values='val0')
</code></pre>
<p>I get the error mentioned above.  In fact, I get the same error when I try to perform the same task with:</p>
<pre><code>df.set_index(['row', 'col'])['val0'].unstack()
</code></pre>
<hr />
<h2>Examples</h2>
<p>What I'm going to do for each subsequent question is to answer it using <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a>.  Then I'll provide alternatives to perform the same task.</p>
<h3>Questions 2 and 3</h3>
<blockquote>
<p>How do I pivot <code>df</code> such that the <code>col</code> values are columns, <code>row</code> values are the index, and mean of <code>val0</code> are the values?</p>
</blockquote>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a></p>
<pre><code>df.pivot_table(
    values='val0', index='row', columns='col',
    aggfunc='mean')

col   col0   col1   col2   col3  col4
row                                  
row0  0.77  0.605    NaN  0.860  0.65
row2  0.13    NaN  0.395  0.500  0.25
row3   NaN  0.310    NaN  0.545   NaN
row4   NaN  0.100  0.395  0.760  0.24
</code></pre>
<ul>
<li><code>aggfunc='mean'</code> is the default and I didn't have to set it.  I included it to be explicit.</li>
</ul>
</li>
</ul>
<blockquote>
<p>How do I make it so that missing values are 0?</p>
</blockquote>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a></p>
<ul>
<li><code>fill_value</code> is not set by default.  I tend to set it appropriately.  In this case I set it to <code>0</code>.</li>
</ul>
<pre><code>df.pivot_table(
    values='val0', index='row', columns='col',
    fill_value=0, aggfunc='mean')

col   col0   col1   col2   col3  col4
row
row0  0.77  0.605  0.000  0.860  0.65
row2  0.13  0.000  0.395  0.500  0.25
row3  0.00  0.310  0.000  0.545  0.00
row4  0.00  0.100  0.395  0.760  0.24
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"" rel=""noreferrer""><code>pd.DataFrame.groupby</code></a></p>
<pre><code>df.groupby(['row', 'col'])['val0'].mean().unstack(fill_value=0)
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.crosstab.html"" rel=""noreferrer""><code>pd.crosstab</code></a></p>
<pre><code>pd.crosstab(
    index=df['row'], columns=df['col'],
    values=df['val0'], aggfunc='mean').fillna(0)
</code></pre>
</li>
</ul>
<hr />
<h3>Question 4</h3>
<blockquote>
<p>Can I get something other than <code>mean</code>, like maybe <code>sum</code>?</p>
</blockquote>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a></p>
<pre><code>df.pivot_table(
    values='val0', index='row', columns='col',
    fill_value=0, aggfunc='sum')

col   col0  col1  col2  col3  col4
row
row0  0.77  1.21  0.00  0.86  0.65
row2  0.13  0.00  0.79  0.50  0.50
row3  0.00  0.31  0.00  1.09  0.00
row4  0.00  0.10  0.79  1.52  0.24
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"" rel=""noreferrer""><code>pd.DataFrame.groupby</code></a></p>
<pre><code>df.groupby(['row', 'col'])['val0'].sum().unstack(fill_value=0)
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.crosstab.html"" rel=""noreferrer""><code>pd.crosstab</code></a></p>
<pre><code>pd.crosstab(
    index=df['row'], columns=df['col'],
    values=df['val0'], aggfunc='sum').fillna(0)
</code></pre>
</li>
</ul>
<hr />
<h3>Question 5</h3>
<blockquote>
<p>Can I do more that one aggregation at a time?</p>
</blockquote>
<p>Notice that for <code>pivot_table</code> and <code>crosstab</code> I needed to pass list of callables.  On the other hand, <code>groupby.agg</code> is able to take strings for a limited number of special functions.  <code>groupby.agg</code> would also have taken the same callables we passed to the others, but it is often more efficient to leverage the string function names as there are efficiencies to be gained.</p>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a></p>
<pre><code>df.pivot_table(
    values='val0', index='row', columns='col',
    fill_value=0, aggfunc=[np.size, np.mean])

     size                      mean
col  col0 col1 col2 col3 col4  col0   col1   col2   col3  col4
row
row0    1    2    0    1    1  0.77  0.605  0.000  0.860  0.65
row2    1    0    2    1    2  0.13  0.000  0.395  0.500  0.25
row3    0    1    0    2    0  0.00  0.310  0.000  0.545  0.00
row4    0    1    2    2    1  0.00  0.100  0.395  0.760  0.24
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"" rel=""noreferrer""><code>pd.DataFrame.groupby</code></a></p>
<pre><code>df.groupby(['row', 'col'])['val0'].agg(['size', 'mean']).unstack(fill_value=0)
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.crosstab.html"" rel=""noreferrer""><code>pd.crosstab</code></a></p>
<pre><code>pd.crosstab(
    index=df['row'], columns=df['col'],
    values=df['val0'], aggfunc=[np.size, np.mean]).fillna(0, downcast='infer')
</code></pre>
</li>
</ul>
<hr />
<h3>Question 6</h3>
<blockquote>
<p>Can I aggregate over multiple value columns?</p>
</blockquote>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a> we pass <code>values=['val0', 'val1']</code> but we could've left that off completely</p>
<pre><code>df.pivot_table(
    values=['val0', 'val1'], index='row', columns='col',
    fill_value=0, aggfunc='mean')

      val0                             val1
col   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4
row
row0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02
row2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79
row3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00
row4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"" rel=""noreferrer""><code>pd.DataFrame.groupby</code></a></p>
<pre><code>df.groupby(['row', 'col'])['val0', 'val1'].mean().unstack(fill_value=0)
</code></pre>
</li>
</ul>
<hr />
<h3>Question 7</h3>
<blockquote>
<p>Can I subdivide by multiple columns?</p>
</blockquote>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a></p>
<pre><code>df.pivot_table(
    values='val0', index='row', columns=['item', 'col'],
    fill_value=0, aggfunc='mean')

item item0             item1                         item2
col   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4
row
row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65
row2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13
row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00
row4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"" rel=""noreferrer""><code>pd.DataFrame.groupby</code></a></p>
<pre><code>df.groupby(
    ['row', 'item', 'col']
)['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)
</code></pre>
</li>
</ul>
<hr />
<h3>Question 8</h3>
<blockquote>
<p>Can I subdivide by multiple columns?</p>
</blockquote>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a></p>
<pre><code>df.pivot_table(
    values='val0', index=['key', 'row'], columns=['item', 'col'],
    fill_value=0, aggfunc='mean')

item      item0             item1                         item2
col        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4
key  row
key0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00
     row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00
     row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00
     row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00
key1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65
     row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13
     row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00
     row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00
key2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00
     row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00
     row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"" rel=""noreferrer""><code>pd.DataFrame.groupby</code></a></p>
<pre><code>df.groupby(
    ['key', 'row', 'item', 'col']
)['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html"" rel=""noreferrer""><code>pd.DataFrame.set_index</code></a> because the set of keys are unique for both rows and columns</p>
<pre><code>df.set_index(
    ['key', 'row', 'item', 'col']
)['val0'].unstack(['item', 'col']).fillna(0).sort_index(1)
</code></pre>
</li>
</ul>
<hr />
<h3>Question 9</h3>
<blockquote>
<p>Can I aggregate the frequency in which the column and rows occur together, aka &quot;cross tabulation&quot;?</p>
</blockquote>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>pd.DataFrame.pivot_table</code></a></p>
<pre><code>df.pivot_table(index='row', columns='col', fill_value=0, aggfunc='size')

col   col0  col1  col2  col3  col4
row
row0     1     2     0     1     1
row2     1     0     2     1     2
row3     0     1     0     2     0
row4     0     1     2     2     1
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"" rel=""noreferrer""><code>pd.DataFrame.groupby</code></a></p>
<pre><code>df.groupby(['row', 'col'])['val0'].size().unstack(fill_value=0)
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.crosstab.html"" rel=""noreferrer""><code>pd.crosstab</code></a></p>
<pre><code>pd.crosstab(df['row'], df['col'])
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.factorize.html"" rel=""noreferrer""><code>pd.factorize</code></a> + <a href=""https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.bincount.html"" rel=""noreferrer""><code>np.bincount</code></a></p>
<pre><code># get integer factorization `i` and unique values `r`
# for column `'row'`
i, r = pd.factorize(df['row'].values)
# get integer factorization `j` and unique values `c`
# for column `'col'`
j, c = pd.factorize(df['col'].values)
# `n` will be the number of rows
# `m` will be the number of columns
n, m = r.size, c.size
# `i * m + j` is a clever way of counting the
# factorization bins assuming a flat array of length
# `n * m`.  Which is why we subsequently reshape as `(n, m)`
b = np.bincount(i * m + j, minlength=n * m).reshape(n, m)
# BTW, whenever I read this, I think 'Bean, Rice, and Cheese'
pd.DataFrame(b, r, c)

      col3  col2  col0  col1  col4
row3     2     0     0     1     0
row2     1     2     1     0     2
row0     1     0     1     2     1
row4     2     2     0     1     1
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html"" rel=""noreferrer""><code>pd.get_dummies</code></a></p>
<pre><code>pd.get_dummies(df['row']).T.dot(pd.get_dummies(df['col']))

      col0  col1  col2  col3  col4
row0     1     2     0     1     1
row2     1     0     2     1     2
row3     0     1     0     2     0
row4     0     1     2     2     1
</code></pre>
</li>
</ul>
<hr />
<h3>Question 10</h3>
<blockquote>
<p>How do I convert a DataFrame from long to wide by pivoting on ONLY two
columns?</p>
</blockquote>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html"" rel=""noreferrer""><code>DataFrame.pivot</code></a></p>
<p>The first step is to assign a number to each row - this number will be the row index of that value in the pivoted result. This is done using <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.cumcount.html"" rel=""noreferrer""><code>GroupBy.cumcount</code></a>:</p>
<pre><code>df2.insert(0, 'count', df2.groupby('A').cumcount())
df2

   count  A   B
0      0  a   0
1      1  a  11
2      2  a   2
3      3  a  11
4      0  b  10
5      1  b  10
6      2  b  14
7      0  c   7
</code></pre>
<p>The second step is to use the newly created column as the index to call <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html"" rel=""noreferrer""><code>DataFrame.pivot</code></a>.</p>
<pre><code>df2.pivot(*df2)
# df2.pivot(index='count', columns='A', values='B')

A         a     b    c
count
0       0.0  10.0  7.0
1      11.0  10.0  NaN
2       2.0  14.0  NaN
3      11.0   NaN  NaN
</code></pre>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>DataFrame.pivot_table</code></a></p>
<p>Whereas <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html"" rel=""noreferrer""><code>DataFrame.pivot</code></a> only accepts columns, <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot_table.html"" rel=""noreferrer""><code>DataFrame.pivot_table</code></a> also accepts arrays, so the <code>GroupBy.cumcount</code> can be passed directly as the <code>index</code> without creating an explicit column.</p>
<pre><code>df2.pivot_table(index=df2.groupby('A').cumcount(), columns='A', values='B')

A         a     b    c
0       0.0  10.0  7.0
1      11.0  10.0  NaN
2       2.0  14.0  NaN
3      11.0   NaN  NaN
</code></pre>
</li>
</ul>
<hr />
<h3>Question 11</h3>
<blockquote>
<p>How do I flatten the multiple index to single index after <code>pivot</code></p>
</blockquote>
<p>If <code>columns</code> type <code>object</code> with string <code>join</code></p>
<pre><code>df.columns = df.columns.map('|'.join)
</code></pre>
<p>else <code>format</code></p>
<pre><code>df.columns = df.columns.map('{0[0]}|{0[1]}'.format)
</code></pre>
"
1145781,"<p>Actually, this is not a design flaw, and it is not because of internals or performance. It comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>
<p>As soon as you think of it this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of &quot;member data&quot; and therefore their state may change from one call to the other - exactly as in any other object.</p>
<p>In any case, the effbot (Fredrik Lundh) has a very nice explanation of the reasons for this behavior in <a href=""https://web.archive.org/web/20200221224620id_/http://effbot.org/zone/default-values.htm"" rel=""noreferrer"">Default Parameter Values in Python</a>.
I found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>
"
53645883,"<p>This post aims to give readers a primer on SQL-flavored merging with Pandas, how to use it, and when not to use it.</p>
<p>In particular, here's what this post will go through:</p>
<ul>
<li><p>The basics - types of joins (LEFT, RIGHT, OUTER, INNER)</p>
<ul>
<li>merging with different column names</li>
<li>merging with multiple columns</li>
<li>avoiding duplicate merge key column in output</li>
</ul>
</li>
</ul>
<p>What this post (and other posts by me on this thread) will not go through:</p>
<ul>
<li>Performance-related discussions and timings (for now). Mostly notable mentions of better alternatives, wherever appropriate.</li>
<li>Handling suffixes, removing extra columns, renaming outputs, and other specific use cases. There are other (read: better) posts that deal with that, so figure it out!</li>
</ul>
<blockquote>
<p><strong>Note</strong>
Most examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified.</p>
<p>Furthermore, all the DataFrames here can be copied and replicated so
you can play with them. Also, see <a href=""https://stackoverflow.com/questions/31610889/how-to-copy-paste-dataframe-from-stackoverflow-into-python"">this
post</a>
on how to read DataFrames from your clipboard.</p>
<p>Lastly, all visual representation of JOIN operations have been hand-drawn using Google Drawings. Inspiration from <a href=""https://stackoverflow.com/a/55858991/4909087"">here</a>.</p>
</blockquote>
<hr />
<hr />
<h1>Enough talk - just show me how to use <code>merge</code>!</h1>
<h3>Setup &amp; Basics</h3>
<pre><code>np.random.seed(0)
left = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})
right = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})

left

  key     value
0   A  1.764052
1   B  0.400157
2   C  0.978738
3   D  2.240893

right

  key     value
0   B  1.867558
1   D -0.977278
2   E  0.950088
3   F -0.151357
</code></pre>
<p>For the sake of simplicity, the key column has the same name (for now).</p>
<p>An <strong>INNER JOIN</strong> is represented by</p>
<img src=""https://i.stack.imgur.com/YvuOa.png"" width=""500""/>
<blockquote>
<p><strong>Note</strong>
This, along with the forthcoming figures all follow this convention:</p>
<ul>
<li><strong>blue</strong> indicates rows that are present in the merge result</li>
<li><strong>red</strong> indicates rows that are excluded from the result (i.e., removed)</li>
<li><strong>green</strong> indicates missing values that are replaced with <code>NaN</code>s in the result</li>
</ul>
</blockquote>
<p>To perform an INNER JOIN, call <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html"" rel=""noreferrer""><code>merge</code></a> on the left DataFrame, specifying the right DataFrame and the join key (at the very least) as arguments.</p>
<pre><code>left.merge(right, on='key')
# Or, if you want to be explicit
# left.merge(right, on='key', how='inner')

  key   value_x   value_y
0   B  0.400157  1.867558
1   D  2.240893 -0.977278
</code></pre>
<p>This returns only rows from <code>left</code> and <code>right</code> which share a common key (in this example, &quot;B&quot; and &quot;D).</p>
<p>A <strong>LEFT OUTER JOIN</strong>, or LEFT JOIN  is represented by</p>
<img src=""https://i.stack.imgur.com/BECid.png"" width=""500"" />
<p>This can be performed by specifying <code>how='left'</code>.</p>
<pre><code>left.merge(right, on='key', how='left')

  key   value_x   value_y
0   A  1.764052       NaN
1   B  0.400157  1.867558
2   C  0.978738       NaN
3   D  2.240893 -0.977278
</code></pre>
<p>Carefully note the placement of NaNs here. If you specify <code>how='left'</code>, then only keys from <code>left</code> are used, and missing data from <code>right</code> is replaced by NaN.</p>
<p>And similarly, for a <strong>RIGHT OUTER JOIN</strong>, or RIGHT JOIN which is...</p>
<img src=""https://i.stack.imgur.com/8w1US.png"" width=""500"" />
<p>...specify <code>how='right'</code>:</p>
<pre><code>left.merge(right, on='key', how='right')

  key   value_x   value_y
0   B  0.400157  1.867558
1   D  2.240893 -0.977278
2   E       NaN  0.950088
3   F       NaN -0.151357
</code></pre>
<p>Here, keys from <code>right</code> are used, and missing data from <code>left</code> is replaced by NaN.</p>
<p>Finally, for the <strong>FULL OUTER JOIN</strong>, given by</p>
<img src=""https://i.stack.imgur.com/euLoe.png"" width=""500"" />
<p>specify <code>how='outer'</code>.</p>
<pre><code>left.merge(right, on='key', how='outer')

  key   value_x   value_y
0   A  1.764052       NaN
1   B  0.400157  1.867558
2   C  0.978738       NaN
3   D  2.240893 -0.977278
4   E       NaN  0.950088
5   F       NaN -0.151357
</code></pre>
<p>This uses the keys from both frames, and NaNs are inserted for missing rows in both.</p>
<p>The documentation summarizes these various merges nicely:</p>
<p><a href=""https://i.stack.imgur.com/5qDIy.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/5qDIy.png"" alt=""Enter image description here"" /></a></p>
<hr />
<h3><strong>Other JOINs - LEFT-Excluding, RIGHT-Excluding, and FULL-Excluding/ANTI JOINs</strong></h3>
<p>If you need <strong>LEFT-Excluding JOINs</strong> and <strong>RIGHT-Excluding JOINs</strong> in two steps.</p>
<p>For LEFT-Excluding JOIN, represented as</p>
<img src=""https://i.stack.imgur.com/bXWIV.png"" width=""500""/>
<p>Start by performing a LEFT OUTER JOIN and then filtering to rows coming from <code>left</code> only (excluding everything from the right),</p>
<pre><code>(left.merge(right, on='key', how='left', indicator=True)
     .query('_merge == &quot;left_only&quot;')
     .drop('_merge', 1))

  key   value_x  value_y
0   A  1.764052      NaN
2   C  0.978738      NaN
</code></pre>
<p>Where,</p>
<pre><code>left.merge(right, on='key', how='left', <b>indicator=True</b>)

  key   value_x   value_y     _merge
0   A  1.764052       NaN  left_only
1   B  0.400157  1.867558       both
2   C  0.978738       NaN  left_only
3   D  2.240893 -0.977278       both</code></pre>
<p>And similarly, for a RIGHT-Excluding JOIN,</p>
<img src=""https://i.stack.imgur.com/Z0br2.png"" width=""500""/>
<pre><code>(left.merge(right, on='key', how='right', <b>indicator=True</b>)
     .query('_merge == ""right_only""')
     .drop('_merge', 1))

  key  value_x   value_y
2   E      NaN  0.950088
3   F      NaN -0.151357</code></pre>
<p>Lastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an <strong>ANTI-JOIN</strong>),</p>
<img src=""https://i.stack.imgur.com/PWMYd.png"" width=""500""/>
<p>You can do this in similar fashionâ</p>
<pre><code>(left.merge(right, on='key', how='outer', indicator=True)
     .query('_merge != &quot;both&quot;')
     .drop('_merge', 1))

  key   value_x   value_y
0   A  1.764052       NaN
2   C  0.978738       NaN
4   E       NaN  0.950088
5   F       NaN -0.151357
</code></pre>
<hr />
<h3><strong>Different names for key columns</strong></h3>
<p>If the key columns are named differentlyâfor example, <code>left</code> has <code>keyLeft</code>, and <code>right</code> has <code>keyRight</code> instead of <code>key</code>âthen you will have to specify <code>left_on</code> and <code>right_on</code> as arguments instead of <code>on</code>:</p>
<pre><code>left2 = left.rename({'key':'keyLeft'}, axis=1)
right2 = right.rename({'key':'keyRight'}, axis=1)

left2

  keyLeft     value
0       A  1.764052
1       B  0.400157
2       C  0.978738
3       D  2.240893

right2

  keyRight     value
0        B  1.867558
1        D -0.977278
2        E  0.950088
3        F -0.151357
</code></pre>

<pre><code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')

  keyLeft   value_x keyRight   value_y
0       B  0.400157        B  1.867558
1       D  2.240893        D -0.977278
</code></pre>
<hr />
<h3><strong>Avoiding duplicate key column in output</strong></h3>
<p>When merging on <code>keyLeft</code> from <code>left</code> and <code>keyRight</code> from <code>right</code>, if you only want either of the <code>keyLeft</code> or <code>keyRight</code> (but not both) in the output, you can start by setting the index as a preliminary step.</p>
<pre><code>left3 = left2.set_index('keyLeft')
left3.merge(right2, left_index=True, right_on='keyRight')

    value_x keyRight   value_y
0  0.400157        B  1.867558
1  2.240893        D -0.977278
</code></pre>
<p>Contrast this with the output of the command just before (that is, the output of <code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')</code>), you'll notice <code>keyLeft</code> is missing. You can figure out what column to keep based on which frame's index is set as the key. This may matter when, say, performing some OUTER JOIN operation.</p>
<hr />
<h3><strong>Merging only a single column from one of the <code>DataFrames</code></strong></h3>
<p>For example, consider</p>
<pre><code>right3 = right.assign(newcol=np.arange(len(right)))
right3
  key     value  newcol
0   B  1.867558       0
1   D -0.977278       1
2   E  0.950088       2
3   F -0.151357       3
</code></pre>
<p>If you are required to merge only &quot;newcol&quot; (without any of the other columns), you can usually just subset columns before merging:</p>
<pre><code>left.merge(right3[['key', 'newcol']], on='key')

  key     value  newcol
0   B  0.400157       0
1   D  2.240893       1
</code></pre>
<p>If you're doing a LEFT OUTER JOIN, a more performant solution would involve <code>map</code>:</p>
<pre><code># left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))
left.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))

  key     value  newcol
0   A  1.764052     NaN
1   B  0.400157     0.0
2   C  0.978738     NaN
3   D  2.240893     1.0
</code></pre>
<p>As mentioned, this is similar to, but faster than</p>
<pre><code>left.merge(right3[['key', 'newcol']], on='key', how='left')

  key     value  newcol
0   A  1.764052     NaN
1   B  0.400157     0.0
2   C  0.978738     NaN
3   D  2.240893     1.0
</code></pre>
<hr />
<h3><strong>Merging on multiple columns</strong></h3>
<p>To join on more than one column, specify a list for <code>on</code> (or <code>left_on</code> and <code>right_on</code>, as appropriate).</p>
<pre><code>left.merge(right, on=['key1', 'key2'] ...)
</code></pre>
<p>Or, in the event the names are different,</p>
<pre><code>left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])
</code></pre>
<hr />
<h3><strong>Other useful <code>merge*</code> operations and functions</strong></h3>
<ul>
<li><p>Merging a DataFrame with Series on index: See <a href=""https://stackoverflow.com/a/40762674/4909087"">this answer</a>.</p>
</li>
<li><p>Besides <code>merge</code>, <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.update.html"" rel=""noreferrer""><code>DataFrame.update</code></a> and <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.combine_first.html"" rel=""noreferrer""><code>DataFrame.combine_first</code></a> are also used in certain cases to update one DataFrame with another.</p>
</li>
<li><p><a href=""http://pandas.pydata.org/pandas-docs/version/0.19.0/generated/pandas.merge_ordered.html"" rel=""noreferrer""><code>pd.merge_ordered</code></a> is a useful function for ordered JOINs.</p>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge_asof.html"" rel=""noreferrer""><code>pd.merge_asof</code></a> (read: merge_asOf) is useful for <em>approximate</em> joins.</p>
</li>
</ul>
<p><strong>This section only covers the very basics, and is designed to only whet your appetite. For more examples and cases, see the <a href=""https://pandas.pydata.org/pandas-docs/stable/merging.html"" rel=""noreferrer"">documentation on <code>merge</code>, <code>join</code>, and <code>concat</code></a> as well as the links to the function specifications.</strong></p>
<hr />
<hr />
<h1>Continue Reading</h1>
<p>Jump to other topics in Pandas Merging 101 to continue learning:</p>
<ul>
<li><p><a href=""https://stackoverflow.com/a/53645883/4909087"">Merging basics - basic types of joins</a> <sup>*</sup></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/65167356/4909087"">Index-based joins</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/65167327/4909087"">Generalizing to multiple DataFrames</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/53699013/4909087"">Cross join</a></p>
</li>
</ul>
<p><sub>*You are here.</sub></p>
"
2612815,"<p><code>new_list = my_list</code> doesn't actually create a second list. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>
<p>To actually copy the list, you have several options:</p>
<ul>
<li><p>You can use the built-in <a href=""https://docs.python.org/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>list.copy()</code></a> method (available since Python 3.3):</p>
<pre><code>new_list = old_list.copy()
</code></pre>
</li>
<li><p>You can slice it:</p>
<pre><code>new_list = old_list[:]
</code></pre>
<p><a href=""https://en.wikipedia.org/wiki/Alex_Martelli"" rel=""noreferrer"">Alex Martelli</a>'s opinion (at least <a href=""https://www.youtube.com/watch?v=g7V89K8QfgQ"" rel=""noreferrer"">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p>
</li>
<li><p>You can use the built-in <a href=""https://docs.python.org/library/stdtypes.html#list"" rel=""noreferrer""><code>list()</code></a> constructor:</p>
<pre><code>new_list = list(old_list)
</code></pre>
</li>
<li><p>You can use generic <a href=""https://docs.python.org/library/copy.html#copy.copy"" rel=""noreferrer""><code>copy.copy()</code></a>:</p>
<pre><code>import copy
new_list = copy.copy(old_list)
</code></pre>
<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p>
</li>
<li><p>If you need to copy the elements of the list as well, use generic <a href=""https://docs.python.org/library/copy.html#copy.deepcopy"" rel=""noreferrer""><code>copy.deepcopy()</code></a>:</p>
<pre><code>import copy
new_list = copy.deepcopy(old_list)
</code></pre>
<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable. This operates recursively; it will handle any number of levels of nested lists (or other containers).</p>
</li>
</ul>
<p><strong>Example:</strong></p>
<pre><code>import copy

class Foo(object):
    def __init__(self, val):
         self.val = val

    def __repr__(self):
        return f'Foo({self.val!r})'

foo = Foo(1)

a = ['foo', foo]
b = a.copy()
c = a[:]
d = list(a)
e = copy.copy(a)
f = copy.deepcopy(a)

# edit orignal list and instance 
a.append('baz')
foo.val = 5

print(f'original: {a}\nlist.copy(): {b}\nslice: {c}\nlist(): {d}\ncopy: {e}\ndeepcopy: {f}')
</code></pre>
<p>Result:</p>
<pre><code>original: ['foo', Foo(5), 'baz']
list.copy(): ['foo', Foo(5)]
slice: ['foo', Foo(5)]
list(): ['foo', Foo(5)]
copy: ['foo', Foo(5)]
deepcopy: ['foo', Foo(1)]
</code></pre>
"
20449433,"<h3>Solution</h3>
<p>Since Python 3, <code>input</code> returns a string which you have to explicitly convert to <code>int</code>s, with <a href=""https://docs.python.org/3/library/functions.html#int"" rel=""noreferrer""><code>int</code></a>, like this</p>
<pre><code>x = int(input(&quot;Enter a number: &quot;))
y = int(input(&quot;Enter a number: &quot;))
</code></pre>
<p>You can accept numbers of any base and convert them directly to base-10 with the <code>int</code> function, like this</p>
<pre><code>&gt;&gt;&gt; data = int(input(&quot;Enter a number: &quot;), 8)
Enter a number: 777
&gt;&gt;&gt; data
511
&gt;&gt;&gt; data = int(input(&quot;Enter a number: &quot;), 16)
Enter a number: FFFF
&gt;&gt;&gt; data
65535
&gt;&gt;&gt; data = int(input(&quot;Enter a number: &quot;), 2)
Enter a number: 10101010101
&gt;&gt;&gt; data
1365
</code></pre>
<p>The second parameter tells what is the base of the numbers entered and then internally it understands and converts it. If the entered data is wrong it will throw a <code>ValueError</code>.</p>
<pre class=""lang-none prettyprint-override""><code>&gt;&gt;&gt; data = int(input(&quot;Enter a number: &quot;), 2)
Enter a number: 1234
Traceback (most recent call last):
  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 2: '1234'
</code></pre>
<p>For values that can have a fractional component, the type would be <code>float</code> rather than <code>int</code>:</p>
<pre><code>x = float(input(&quot;Enter a number:&quot;))
</code></pre>
<h3>Differences between Python 2 and 3</h3>
<p><strong>Summary</strong></p>
<ul>
<li>Python 2's <code>input</code> function evaluated the received data, converting it to an integer implicitly (read the next section to understand the implication), but Python 3's <code>input</code> function does not do that anymore.</li>
<li>Python 2's equivalent of Python 3's <code>input</code> is the <code>raw_input</code> function.</li>
</ul>
<p><strong>Python 2.x</strong></p>
<p>There were two functions to get user input, called <a href=""https://docs.python.org/2/library/functions.html#input"" rel=""noreferrer""><code>input</code></a> and <a href=""https://docs.python.org/2/library/functions.html#raw_input"" rel=""noreferrer""><code>raw_input</code></a>. The difference between them is, <code>raw_input</code> doesn't evaluate the data and returns as it is, in string form. But, <code>input</code> will evaluate whatever you entered and the result of evaluation will be returned. For example,</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2]'
&gt;&gt;&gt; data = input(&quot;Enter a number: &quot;)
Enter a number: 5 + 17
&gt;&gt;&gt; data, type(data)
(22, &lt;type 'int'&gt;)
</code></pre>
<p>The data <code>5 + 17</code> is evaluated and the result is <code>22</code>. When it evaluates the expression <code>5 + 17</code>, it detects that you are adding two numbers and so the result will also be of the same <code>int</code> type. So, the type conversion is done for free and <code>22</code> is returned as the result of <code>input</code> and stored in <code>data</code> variable. You can think of <code>input</code> as the <code>raw_input</code> composed with an <a href=""https://docs.python.org/2/library/functions.html#eval"" rel=""noreferrer""><code>eval</code></a> call.</p>
<pre><code>&gt;&gt;&gt; data = eval(raw_input(&quot;Enter a number: &quot;))
Enter a number: 5 + 17
&gt;&gt;&gt; data, type(data)
(22, &lt;type 'int'&gt;)
</code></pre>
<p><strong>Note:</strong> you should be careful when you are using <code>input</code> in Python 2.x. I explained why one should be careful when using it, in <a href=""https://stackoverflow.com/a/21122817/1903116"">this answer</a>.</p>
<p>But, <code>raw_input</code> doesn't evaluate the input and returns as it is, as a string.</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2]'
&gt;&gt;&gt; data = raw_input(&quot;Enter a number: &quot;)
Enter a number: 5 + 17
&gt;&gt;&gt; data, type(data)
('5 + 17', &lt;type 'str'&gt;)
</code></pre>
<p><strong>Python 3.x</strong></p>
<p>Python 3.x's <a href=""https://docs.python.org/3/library/functions.html#input"" rel=""noreferrer""><code>input</code></a> and Python 2.x's <code>raw_input</code> are similar and <code>raw_input</code> is not available in Python 3.x.</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'3.4.0 (default, Apr 11 2014, 13:05:11) \n[GCC 4.8.2]'
&gt;&gt;&gt; data = input(&quot;Enter a number: &quot;)
Enter a number: 5 + 17
&gt;&gt;&gt; data, type(data)
('5 + 17', &lt;class 'str'&gt;)
</code></pre>
"
1207461,"<p>You can use a <a href=""https://en.wikipedia.org/wiki/List_comprehension#Python"" rel=""noreferrer"">list comprehension</a> to create a new list containing only the elements you don't want to remove:</p>
<pre><code>somelist = [x for x in somelist if not determine(x)]
</code></pre>
<p>Or, by assigning to the slice <code>somelist[:]</code>, you can mutate the existing list to contain only the items you want:</p>
<pre><code>somelist[:] = [x for x in somelist if not determine(x)]
</code></pre>
<p>This approach could be useful if there are other references to <code>somelist</code> that need to reflect the changes.</p>
<p>Instead of a comprehension, you could also use <code>itertools</code>. In Python 2:</p>
<pre><code>from itertools import ifilterfalse
somelist[:] = ifilterfalse(determine, somelist)
</code></pre>
<p>Or in Python 3:</p>
<pre><code>from itertools import filterfalse
somelist[:] = filterfalse(determine, somelist)
</code></pre>
"
952952,"<p>Given a list of lists <code>l</code>,</p>
<pre><code>flat_list = [item for sublist in l for item in sublist]
</code></pre>
<p>which means:</p>
<pre><code>flat_list = []
for sublist in l:
    for item in sublist:
        flat_list.append(item)
</code></pre>
<p>is faster than the shortcuts posted so far. (<code>l</code> is the list to flatten.)</p>
<p>Here is the corresponding function:</p>
<pre><code>def flatten(l):
    return [item for sublist in l for item in sublist]
</code></pre>
<p>As evidence, you can use the <code>timeit</code> module in the standard library:</p>
<pre><code>$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'
10000 loops, best of 3: 143 usec per loop
$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'
1000 loops, best of 3: 969 usec per loop
$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'
1000 loops, best of 3: 1.1 msec per loop
</code></pre>
<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(L**2)</code> when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., <code>I * (L**2)/2</code>.</p>
<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>
"
312464,"<p>Here's a generator that yields evenly-sized chunks:</p>
<pre><code>def chunks(lst, n):
    &quot;&quot;&quot;Yield successive n-sized chunks from lst.&quot;&quot;&quot;
    for i in range(0, len(lst), n):
        yield lst[i:i + n]
</code></pre>
<pre><code>import pprint
pprint.pprint(list(chunks(range(10, 75), 10)))
[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
 [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
 [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
 [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
 [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
 [70, 71, 72, 73, 74]]
</code></pre>
<p>For Python 2, using <code>xrange</code> instead of <code>range</code>:</p>
<pre><code>def chunks(lst, n):
    &quot;&quot;&quot;Yield successive n-sized chunks from lst.&quot;&quot;&quot;
    for i in xrange(0, len(lst), n):
        yield lst[i:i + n]
</code></pre>
<hr />
<p>Below is a list comprehension one-liner. The method above is preferable, though, since using named functions makes code easier to understand. For Python 3:</p>
<pre><code>[lst[i:i + n] for i in range(0, len(lst), n)]
</code></pre>
<p>For Python 2:</p>
<pre><code>[lst[i:i + n] for i in xrange(0, len(lst), n)]
</code></pre>
"
,
20002504,"<p>In many cases, Python looks and behaves like natural English, but this is one case where that abstraction fails. People can use context clues to determine that &quot;Jon&quot; and &quot;Inbar&quot; are objects joined to the verb &quot;equals&quot;, but the Python interpreter is more literal minded.</p>
<pre><code>if name == &quot;Kevin&quot; or &quot;Jon&quot; or &quot;Inbar&quot;:
</code></pre>
<p>is logically equivalent to:</p>
<pre><code>if (name == &quot;Kevin&quot;) or (&quot;Jon&quot;) or (&quot;Inbar&quot;):
</code></pre>
<p>Which, for user Bob, is equivalent to:</p>
<pre><code>if (False) or (&quot;Jon&quot;) or (&quot;Inbar&quot;):
</code></pre>
<p>The <code>or</code> operator <a href=""https://stackoverflow.com/questions/47007680"">chooses the first operand</a> that is <a href=""https://stackoverflow.com/questions/39983695"">&quot;truthy&quot;</a>, i.e. which <a href=""http://docs.python.org/3/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">would satisfy an <code>if</code> condition</a> (or the last one, if none of them are &quot;truthy&quot;):</p>
<pre><code>if &quot;Jon&quot;:
</code></pre>
<p>Since &quot;Jon&quot; is truthy, the <code>if</code> block executes. That is what causes &quot;Access granted&quot; to be printed regardless of the name given.</p>
<p>All of this reasoning also applies to the expression <code>if &quot;Kevin&quot; or &quot;Jon&quot; or &quot;Inbar&quot; == name</code>. the first value, <code>&quot;Kevin&quot;</code>, is true, so the <code>if</code> block executes.</p>
<hr />
<p>There are two common ways to properly construct this conditional.</p>
<ol>
<li><p>Use multiple <code>==</code> operators to explicitly check against each value:</p>
<pre><code>if name == &quot;Kevin&quot; or name == &quot;Jon&quot; or name == &quot;Inbar&quot;:
</code></pre>
</li>
<li><p>Compose a collection of valid values (a set, a list or a tuple for example), and use the <code>in</code> operator to test for membership:</p>
<pre><code>if name in {&quot;Kevin&quot;, &quot;Jon&quot;, &quot;Inbar&quot;}:
</code></pre>
</li>
</ol>
<p>In general of the two the second should be preferred as it's easier to read and also faster:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('name == &quot;Kevin&quot; or name == &quot;Jon&quot; or name == &quot;Inbar&quot;',
    setup=&quot;name='Inbar'&quot;)
0.4247764749999945
&gt;&gt;&gt; timeit.timeit('name in {&quot;Kevin&quot;, &quot;Jon&quot;, &quot;Inbar&quot;}', setup=&quot;name='Inbar'&quot;)
0.18493307199999265
</code></pre>
<hr />
<p>For those who may want proof that <code>if a == b or c or d or e: ...</code> is indeed parsed like this. The built-in <code>ast</code> module provides an answer:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.parse(&quot;a == b or c or d or e&quot;, &quot;&lt;string&gt;&quot;, &quot;eval&quot;)
&lt;ast.Expression object at 0x7f929c898220&gt;
&gt;&gt;&gt; print(ast.dump(_, indent=4))
Expression(
    body=BoolOp(
        op=Or(),
        values=[
            Compare(
                left=Name(id='a', ctx=Load()),
                ops=[
                    Eq()],
                comparators=[
                    Name(id='b', ctx=Load())]),
            Name(id='c', ctx=Load()),
            Name(id='d', ctx=Load()),
            Name(id='e', ctx=Load())]))
</code></pre>
<p>As one can see, it's the boolean operator <code>or</code> applied to four sub-expressions: comparison <code>a == b</code>; and simple expressions <code>c</code>, <code>d</code>, and <code>e</code>.</p>
"
986145,"<p>Arguments are <a href=""http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference"" rel=""noreferrer"">passed by assignment</a>. The rationale behind this is twofold:</p>

<ol>
<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>
<li>some data types are mutable, but others aren't</li>
</ol>

<p>So:</p>

<ul>
<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>
<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>
</ul>

<p>To make it even more clear, let's have some examples. </p>

<h2>List - a mutable type</h2>

<p><strong>Let's try to modify the list that was passed to a method:</strong></p>

<pre><code>def try_to_change_list_contents(the_list):
    print('got', the_list)
    the_list.append('four')
    print('changed to', the_list)

outer_list = ['one', 'two', 'three']

print('before, outer_list =', outer_list)
try_to_change_list_contents(outer_list)
print('after, outer_list =', outer_list)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_list = ['one', 'two', 'three']
got ['one', 'two', 'three']
changed to ['one', 'two', 'three', 'four']
after, outer_list = ['one', 'two', 'three', 'four']
</code></pre>

<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>

<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>

<pre><code>def try_to_change_list_reference(the_list):
    print('got', the_list)
    the_list = ['and', 'we', 'can', 'not', 'lie']
    print('set to', the_list)

outer_list = ['we', 'like', 'proper', 'English']

print('before, outer_list =', outer_list)
try_to_change_list_reference(outer_list)
print('after, outer_list =', outer_list)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_list = ['we', 'like', 'proper', 'English']
got ['we', 'like', 'proper', 'English']
set to ['and', 'we', 'can', 'not', 'lie']
after, outer_list = ['we', 'like', 'proper', 'English']
</code></pre>

<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>

<h2>String - an immutable type</h2>

<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>

<p><strong>Now, let's try to change the reference</strong></p>

<pre><code>def try_to_change_string_reference(the_string):
    print('got', the_string)
    the_string = 'In a kingdom by the sea'
    print('set to', the_string)

outer_string = 'It was many and many a year ago'

print('before, outer_string =', outer_string)
try_to_change_string_reference(outer_string)
print('after, outer_string =', outer_string)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_string = It was many and many a year ago
got It was many and many a year ago
set to In a kingdom by the sea
after, outer_string = It was many and many a year ago
</code></pre>

<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>

<p>I hope this clears things up a little.</p>

<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, ""Is there something I can do to pass the variable by actual reference?"". Let's work on that.</p>

<h2>How do we get around this?</h2>

<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>

<pre><code>def return_a_whole_new_string(the_string):
    new_string = something_to_do_with_the_old_string(the_string)
    return new_string

# then you could call it like
my_string = return_a_whole_new_string(my_string)
</code></pre>

<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>

<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):
    new_string = something_to_do_with_the_old_string(stuff_to_change[0])
    stuff_to_change[0] = new_string

# then you could call it like
wrapper = [my_string]
use_a_wrapper_to_simulate_pass_by_reference(wrapper)

do_something_with(wrapper[0])
</code></pre>

<p>Although this seems a little cumbersome.</p>
"
423596,"<p>You can use a global variable within other functions by declaring it as <code>global</code> <strong>within each function that assigns a value to it</strong>:</p>
<pre><code>globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print(globvar)     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()       # Prints 1
</code></pre>
<p>Since it's unclear whether <code>globvar = 1</code> is creating a local variable or changing a global variable, Python defaults to creating a local variable, and makes you explicitly choose the other behavior with the <code>global</code> keyword.</p>
<p>See other answers if you want to share a global variable across modules.</p>
"
20627316,"<p>The <code>SettingWithCopyWarning</code> was created to flag potentially confusing &quot;chained&quot; assignments, such as the following, which does not always work as expected, particularly when the first selection returns a <em>copy</em>.  [see <a href=""https://github.com/pydata/pandas/pull/5390"" rel=""noreferrer"">GH5390</a> and <a href=""https://github.com/pydata/pandas/issues/5597"" rel=""noreferrer"">GH5597</a> for background discussion.]</p>
<pre><code>df[df['A'] &gt; 2]['B'] = new_val  # new_val not set in df
</code></pre>
<p>The warning offers a suggestion to rewrite as follows:</p>
<pre><code>df.loc[df['A'] &gt; 2, 'B'] = new_val
</code></pre>
<p>However, this doesn't fit your usage, which is equivalent to:</p>
<pre><code>df = df[df['A'] &gt; 2]
df['B'] = new_val
</code></pre>
<p>While it's clear that you don't care about writes making it back to the original frame (since you are overwriting the reference to it), unfortunately this pattern cannot be differentiated from the first chained assignment example. Hence the (false positive) warning. The potential for false positives is addressed in the <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy"" rel=""noreferrer"">docs on indexing</a>, if you'd like to read further.  You can safely disable this new warning with the following assignment.</p>
<pre><code>import pandas as pd
pd.options.mode.chained_assignment = None  # default='warn'
</code></pre>
<hr />
<h2>Other Resources</h2>
<ul>
<li><a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html"" rel=""noreferrer"">pandas User Guide: Indexing and selecting data</a></li>
<li><a href=""https://jakevdp.github.io/PythonDataScienceHandbook/03.02-data-indexing-and-selection.html"" rel=""noreferrer"">Python Data Science Handbook: Data Indexing and Selection</a></li>
<li><a href=""https://realpython.com/pandas-settingwithcopywarning/"" rel=""noreferrer"">Real Python: SettingWithCopyWarning in Pandas: Views vs Copies</a></li>
<li><a href=""https://www.dataquest.io/blog/settingwithcopywarning/"" rel=""noreferrer"">Dataquest: SettingwithCopyWarning: How to Fix This Warning in Pandas</a></li>
<li><a href=""https://towardsdatascience.com/explaining-the-settingwithcopywarning-in-pandas-ebc19d799d25"" rel=""noreferrer"">Towards Data Science: Explaining the SettingWithCopyWarning in pandas</a></li>
</ul>
"
36908,"<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=""http://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"" rel=""noreferrer"">more on defining functions</a> in the Python documentation.</p>
<p>The <code>*args</code> will give you all function parameters <a href=""https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists"" rel=""noreferrer"">as a tuple</a>:</p>
<pre><code>def foo(*args):
    for a in args:
        print(a)        

foo(1)
# 1

foo(1,2,3)
# 1
# 2
# 3
</code></pre>
<p>The <code>**kwargs</code> will give you all
<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>
<pre><code>def bar(**kwargs):
    for a in kwargs:
        print(a, kwargs[a])  

bar(name='one', age=27)
# name one
# age 27
</code></pre>
<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>
<pre><code>def foo(kind, *args, **kwargs):
   pass
</code></pre>
<p>It is also possible to use this the other way around:</p>
<pre><code>def foo(a, b, c):
    print(a, b, c)

obj = {'b':10, 'c':'lee'}

foo(100,**obj)
# 100 10 lee
</code></pre>
<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>
<pre><code>def foo(bar, lee):
    print(bar, lee)

l = [1,2]

foo(*l)
# 1 2
</code></pre>
<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=""http://www.python.org/dev/peps/pep-3132/"" rel=""noreferrer"">Extended Iterable Unpacking</a>), though it gives a list instead of a tuple in this context:</p>
<pre><code>first, *rest = [1,2,3,4]
first, *l, last = [1,2,3,4]
</code></pre>
<p>Also Python 3 adds new semantic (refer <a href=""https://www.python.org/dev/peps/pep-3102/"" rel=""noreferrer"">PEP 3102</a>):</p>
<pre><code>def func(arg1, arg2, arg3, *, kwarg1, kwarg2):
    pass
</code></pre>
<p>For example the following works in python 3 but not python 2:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2]
&gt;&gt;&gt; [*x]
[1, 2]
&gt;&gt;&gt; [*x, 3, 4]
[1, 2, 3, 4]

&gt;&gt;&gt; x = {1:1, 2:2}
&gt;&gt;&gt; x
{1: 1, 2: 2}
&gt;&gt;&gt; {**x, 3:3, 4:4}
{1: 1, 2: 2, 3: 3, 4: 4}
</code></pre>
<p>Such function accepts only 3 positional arguments, and everything after <code>*</code> can only be passed as keyword arguments.</p>
<h3>Note:</h3>
<ul>
<li>A Python <code>dict</code>, semantically used for keyword argument passing, are arbitrarily ordered. However, in Python 3.6, keyword arguments are guaranteed to remember insertion order.</li>
<li>&quot;The order of elements in <code>**kwargs</code> now corresponds to the order in which keyword arguments were passed to the function.&quot; - <a href=""https://docs.python.org/3/whatsnew/3.6.html"" rel=""noreferrer"">Whatâs New In Python 3.6</a></li>
<li>In fact, all dicts in CPython 3.6 will remember insertion order as an implementation detail, this becomes standard in Python 3.7.</li>
</ul>
"
419185,"<h1>Short Answer</h1>
<p>It's boilerplate code that protects users from accidentally invoking the script when they didn't intend to. Here are some common problems when the guard is omitted from a script:</p>
<ul>
<li><p>If you import the guardless script in another script (e.g. <code>import my_script_without_a_name_eq_main_guard</code>), then the latter script will trigger the former to run <em>at import time</em> and <em>using the second script's command line arguments</em>. This is almost always a mistake.</p>
</li>
<li><p>If you have a custom class in the guardless script and save it to a pickle file, then unpickling it in another script will trigger an import of the guardless script, with the same problems outlined in the previous bullet.</p>
</li>
</ul>
<h1>Long Answer</h1>
<p>To better understand why and how this matters, we need to take a step back to understand how Python initializes scripts and how this interacts with its module import mechanism.</p>
<p>Whenever the Python interpreter reads a source file, it does two things:</p>
<ul>
<li><p>it sets a few special variables like <code>__name__</code>, and then</p>
</li>
<li><p>it executes all of the code found in the file.</p>
</li>
</ul>
<p>Let's see how this works and how it relates to your question about the <code>__name__</code> checks we always see in Python scripts.</p>
<h2>Code Sample</h2>
<p>Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called <code>foo.py</code>.</p>
<pre><code># Suppose this is foo.py.

print(&quot;before import&quot;)
import math

print(&quot;before function_a&quot;)
def function_a():
    print(&quot;Function A&quot;)

print(&quot;before function_b&quot;)
def function_b():
    print(&quot;Function B {}&quot;.format(math.sqrt(100)))

print(&quot;before __name__ guard&quot;)
if __name__ == '__main__':
    function_a()
    function_b()
print(&quot;after __name__ guard&quot;)
</code></pre>
<h2>Special Variables</h2>
<p>When the Python interpreter reads a source file, it first defines a few special variables. In this case, we care about the <code>__name__</code> variable.</p>
<p><strong>When Your Module Is the Main Program</strong></p>
<p>If you are running your module (the source file) as the main program, e.g.</p>
<pre><code>python foo.py
</code></pre>
<p>the interpreter will assign the hard-coded string <code>&quot;__main__&quot;</code> to the <code>__name__</code> variable, i.e.</p>
<pre><code># It's as if the interpreter inserts this at the top
# of your module when run as the main program.
__name__ = &quot;__main__&quot; 
</code></pre>
<p><strong>When Your Module Is Imported By Another</strong></p>
<p>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</p>
<pre><code># Suppose this is in some other main program.
import foo
</code></pre>
<p>The interpreter will search for your <code>foo.py</code> file (along with searching for a few other variants), and prior to executing that module, it will assign the name <code>&quot;foo&quot;</code> from the import statement to the <code>__name__</code> variable, i.e.</p>
<pre><code># It's as if the interpreter inserts this at the top
# of your module when it's imported from another module.
__name__ = &quot;foo&quot;
</code></pre>
<h2>Executing the Module's Code</h2>
<p>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</p>
<p><strong>Always</strong></p>
<ol>
<li><p>It prints the string <code>&quot;before import&quot;</code> (without quotes).</p>
</li>
<li><p>It loads the <code>math</code> module and assigns it to a variable called <code>math</code>. This is equivalent to replacing <code>import math</code> with the following (note that <code>__import__</code> is a low-level function in Python that takes a string and triggers the actual import):</p>
</li>
</ol>
<pre><code># Find and load a module given its string name, &quot;math&quot;,
# then assign it to a local variable called math.
math = __import__(&quot;math&quot;)
</code></pre>
<ol start=""3"">
<li><p>It prints the string <code>&quot;before function_a&quot;</code>.</p>
</li>
<li><p>It executes the <code>def</code> block, creating a function object, then assigning that function object to a variable called <code>function_a</code>.</p>
</li>
<li><p>It prints the string <code>&quot;before function_b&quot;</code>.</p>
</li>
<li><p>It executes the second <code>def</code> block, creating another function object, then assigning it to a variable called <code>function_b</code>.</p>
</li>
<li><p>It prints the string <code>&quot;before __name__ guard&quot;</code>.</p>
</li>
</ol>
<p><strong>Only When Your Module Is the Main Program</strong></p>
<ol start=""8"">
<li>If your module is the main program, then it will see that <code>__name__</code> was indeed set to <code>&quot;__main__&quot;</code> and it calls the two functions, printing the strings <code>&quot;Function A&quot;</code> and <code>&quot;Function B 10.0&quot;</code>.</li>
</ol>
<p><strong>Only When Your Module Is Imported by Another</strong></p>
<ol start=""8"">
<li>(<strong>instead</strong>) If your module is not the main program but was imported by another one, then <code>__name__</code> will be <code>&quot;foo&quot;</code>, not <code>&quot;__main__&quot;</code>, and it'll skip the body of the <code>if</code> statement.</li>
</ol>
<p><strong>Always</strong></p>
<ol start=""9"">
<li>It will print the string <code>&quot;after __name__ guard&quot;</code> in both situations.</li>
</ol>
<p><em><strong>Summary</strong></em></p>
<p>In summary, here's what'd be printed in the two cases:</p>
<pre class=""lang-none prettyprint-override""><code># What gets printed if foo is the main program
before import
before function_a
before function_b
before __name__ guard
Function A
Function B 10.0
after __name__ guard
</code></pre>
<pre class=""lang-none prettyprint-override""><code># What gets printed if foo is imported as a regular module
before import
before function_a
before function_b
before __name__ guard
after __name__ guard
</code></pre>
<h2>Why Does It Work This Way?</h2>
<p>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a <code>.py</code> file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</p>
<ul>
<li><p>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</p>
</li>
<li><p>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing <code>.py</code> files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</p>
</li>
<li><p>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</p>
</li>
</ul>
<p>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. &quot;Running&quot; the script is a side effect of importing the script's module.</p>
<h2>Food for Thought</h2>
<ul>
<li><p>Question: Can I have multiple <code>__name__</code> checking blocks?  Answer: it's strange to do so, but the language won't stop you.</p>
</li>
<li><p>Suppose the following is in <code>foo2.py</code>.  What happens if you say <code>python foo2.py</code> on the command-line? Why?</p>
</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is foo2.py.
import os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters

def function_a():
    print(&quot;a1&quot;)
    from foo2 import function_b
    print(&quot;a2&quot;)
    function_b()
    print(&quot;a3&quot;)

def function_b():
    print(&quot;b&quot;)

print(&quot;t1&quot;)
if __name__ == &quot;__main__&quot;:
    print(&quot;m1&quot;)
    function_a()
    print(&quot;m2&quot;)
print(&quot;t2&quot;)
      
</code></pre>
<ul>
<li>Now, figure out what will happen if you remove the <code>__name__</code> check in <code>foo3.py</code>:</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is foo3.py.
import os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters

def function_a():
    print(&quot;a1&quot;)
    from foo3 import function_b
    print(&quot;a2&quot;)
    function_b()
    print(&quot;a3&quot;)

def function_b():
    print(&quot;b&quot;)

print(&quot;t1&quot;)
print(&quot;m1&quot;)
function_a()
print(&quot;m2&quot;)
print(&quot;t2&quot;)
</code></pre>
<ul>
<li>What will this do when used as a script?  When imported as a module?</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is in foo4.py
__name__ = &quot;__main__&quot;

def bar():
    print(&quot;bar&quot;)
    
print(&quot;before __name__ guard&quot;)
if __name__ == &quot;__main__&quot;:
    bar()
print(&quot;after __name__ guard&quot;)
</code></pre>
"
292502,"<p>Actually, a concise rule for Python Scope resolution, from <a href=""https://rads.stackoverflow.com/amzn/click/com/0596513984"" rel=""noreferrer"" rel=""nofollow noreferrer"">Learning Python, 3rd. Ed.</a>. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply.)</p>

<p><strong>LEGB Rule</strong></p>

<ul>
<li><p><strong>L</strong>ocal â Names assigned in any way within a function (<code>def</code> or <code>lambda</code>), and not declared global in that function</p></li>
<li><p><strong>E</strong>nclosing-function â Names assigned in the local scope of any and all statically enclosing functions (<code>def</code> or <code>lambda</code>), from inner to outer</p></li>
<li><p><strong>G</strong>lobal (module) â Names assigned at the top-level of a module file, or by executing a <code>global</code> statement in a <code>def</code> within the file</p></li>
<li><p><strong>B</strong>uilt-in (Python) â Names preassigned in the built-in names module: <code>open</code>, <code>range</code>, <code>SyntaxError</code>, etc</p></li>
</ul>

<p>So, in the case of</p>

<pre><code>code1
class Foo:
    code2
    def spam():
        code3
        for code4:
            code5
            x()
</code></pre>

<p>The <code>for</code> loop does not have its own namespace. In LEGB order, the scopes would be </p>

<ul>
<li>L: Local in <code>def spam</code> (in <code>code3</code>, <code>code4</code>, and <code>code5</code>)</li>
<li>E: Any enclosing functions (if the whole example were in another <code>def</code>)</li>
<li>G: Were there any <code>x</code> declared globally in the module (in <code>code1</code>)?</li>
<li>B: Any builtin <code>x</code> in Python.</li>
</ul>

<p><code>x</code> will never be found in <code>code2</code> (even in cases where you might expect it would, see <a href=""https://stackoverflow.com/a/23471004/2810305"">Antti's answer</a> or <a href=""https://stackoverflow.com/q/13905741/2810305"">here</a>).</p>
"
,
17071908,"<p>To select rows whose column value equals a scalar, <code>some_value</code>, use <code>==</code>:</p>
<pre><code>df.loc[df['column_name'] == some_value]
</code></pre>
<p>To select rows whose column value is in an iterable, <code>some_values</code>, use <code>isin</code>:</p>
<pre><code>df.loc[df['column_name'].isin(some_values)]
</code></pre>
<p>Combine multiple conditions with <code>&amp;</code>:</p>
<pre><code>df.loc[(df['column_name'] &gt;= A) &amp; (df['column_name'] &lt;= B)]
</code></pre>
<p>Note the parentheses. Due to Python's <a href=""https://docs.python.org/3/reference/expressions.html#operator-precedence"" rel=""noreferrer"">operator precedence rules</a>, <code>&amp;</code> binds more tightly than <code>&lt;=</code> and <code>&gt;=</code>. Thus, the parentheses in the last example are necessary. Without the parentheses</p>
<pre><code>df['column_name'] &gt;= A &amp; df['column_name'] &lt;= B
</code></pre>
<p>is parsed as</p>
<pre><code>df['column_name'] &gt;= (A &amp; df['column_name']) &lt;= B
</code></pre>
<p>which results in a <a href=""https://stackoverflow.com/questions/36921951/truth-value-of-a-series-is-ambiguous-use-a-empty-a-bool-a-item-a-any-o"">Truth value of a Series is ambiguous error</a>.</p>
<hr />
<p>To select rows whose column value <em>does not equal</em> <code>some_value</code>, use <code>!=</code>:</p>
<pre><code>df.loc[df['column_name'] != some_value]
</code></pre>
<p>The <code>isin</code> returns a boolean Series, so to select rows whose value is <em>not</em> in <code>some_values</code>, negate the boolean Series using <code>~</code>:</p>
<pre><code>df.loc[~df['column_name'].isin(some_values)]
</code></pre>
<hr />
<p>For example,</p>
<pre><code>import pandas as pd
import numpy as np
df = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),
                   'B': 'one one two three two two one three'.split(),
                   'C': np.arange(8), 'D': np.arange(8) * 2})
print(df)
#      A      B  C   D
# 0  foo    one  0   0
# 1  bar    one  1   2
# 2  foo    two  2   4
# 3  bar  three  3   6
# 4  foo    two  4   8
# 5  bar    two  5  10
# 6  foo    one  6  12
# 7  foo  three  7  14

print(df.loc[df['A'] == 'foo'])
</code></pre>
<p>yields</p>
<pre><code>     A      B  C   D
0  foo    one  0   0
2  foo    two  2   4
4  foo    two  4   8
6  foo    one  6  12
7  foo  three  7  14
</code></pre>
<hr />
<p>If you have multiple values you want to include, put them in a
list (or more generally, any iterable) and use <code>isin</code>:</p>
<pre><code>print(df.loc[df['B'].isin(['one','three'])])
</code></pre>
<p>yields</p>
<pre><code>     A      B  C   D
0  foo    one  0   0
1  bar    one  1   2
3  bar  three  3   6
6  foo    one  6  12
7  foo  three  7  14
</code></pre>
<hr />
<p>Note, however, that if you wish to do this many times, it is more efficient to
make an index first, and then use <code>df.loc</code>:</p>
<pre><code>df = df.set_index(['B'])
print(df.loc['one'])
</code></pre>
<p>yields</p>
<pre><code>       A  C   D
B              
one  foo  0   0
one  bar  1   2
one  foo  6  12
</code></pre>
<p>or, to include multiple values from the index use <code>df.index.isin</code>:</p>
<pre><code>df.loc[df.index.isin(['one','two'])]
</code></pre>
<p>yields</p>
<pre><code>       A  C   D
B              
one  foo  0   0
one  bar  1   2
two  foo  2   4
two  foo  4   8
two  bar  5  10
one  foo  6  12
</code></pre>
"
1101765,"<p>The <code>grid</code>, <code>pack</code> and <code>place</code> functions of the <code>Entry</code> object and of all other widgets returns <code>None</code>. In python when you do <code>a().b()</code>, the result of the expression is whatever <code>b()</code> returns, therefore <code>Entry(...).grid(...)</code> will return <code>None</code>. </p>

<p>You should split that on to two lines like this:</p>

<pre><code>entryBox = Entry(root, width=60)
entryBox.grid(row=2, column=1, sticky=W)
</code></pre>

<p>That way you get your <code>Entry</code> reference stored in <code>entryBox</code> and it's laid out like you expect. This has a bonus side effect of making your layout easier to understand and maintain if you collect all of your <code>grid</code> and/or <code>pack</code> statements in blocks.</p>
"
89243,"<p>Use the <a href=""https://docs.python.org/library/subprocess.html"" rel=""noreferrer""><code>subprocess</code></a> module in the standard library:</p>
<pre class=""lang-py prettyprint-override""><code>import subprocess

# for simple commands
subprocess.run([&quot;ls&quot;, &quot;-l&quot;]) 

# for complex commands, with many args, use string + `shell=True`:
cmd_str = &quot;ls -l /tmp | awk '{print $3,$9}' | grep root&quot;
subprocess.run(cmd_str, shell=True)
</code></pre>
<p>The advantage of <a href=""https://docs.python.org/library/subprocess.html#subprocess.run"" rel=""noreferrer""><code>subprocess.run</code></a> over <a href=""https://docs.python.org/library/os.html#os.system"" rel=""noreferrer""><code>os.system</code></a> is that it is more flexible (you can get the <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.stdout"" rel=""noreferrer""><code>stdout</code></a>, <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.stderr"" rel=""noreferrer""><code>stderr</code></a>, the <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.returncode"" rel=""noreferrer"">&quot;real&quot; status code</a>, better <a href=""https://docs.python.org/library/subprocess.html#subprocess.CalledProcessError"" rel=""noreferrer"">error handling</a>, it is not prone to problems due to spaces in folders in the path to the executable, etc...).</p>
<p>Even <a href=""https://docs.python.org/library/os.html#os.system"" rel=""noreferrer"">the documentation for <code>os.system</code></a> recommends using <code>subprocess</code> instead:</p>
<blockquote>
<p>The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the <a href=""https://docs.python.org/library/subprocess.html#subprocess-replacements"" rel=""noreferrer"">Replacing Older Functions with the subprocess Module</a> section in the <a href=""https://docs.python.org/library/subprocess.html"" rel=""noreferrer""><code>subprocess</code></a> documentation for some helpful recipes.</p>
</blockquote>
<p>On Python 3.4 and earlier, use <code>subprocess.call</code> instead of <code>.run</code>:</p>
<pre class=""lang-py prettyprint-override""><code>subprocess.call([&quot;ls&quot;, &quot;-l&quot;])
</code></pre>
"
17778390,"<p>It is returning <code>None</code> because when you recursively call it:</p>
<pre><code>if my_var != &quot;a&quot; and my_var != &quot;b&quot;:
    print('You didn\'t type &quot;a&quot; or &quot;b&quot;. Try again.')
    get_input()
</code></pre>
<p>..you don't return the value.</p>
<p>So while the recursion does happen, the return value gets discarded, and then you fall off the end of the function.  Falling off the end of the function means that python implicitly returns <code>None</code>, just like this:</p>
<pre><code>&gt;&gt;&gt; def f(x):
...     pass
&gt;&gt;&gt; print(f(20))
None
</code></pre>
<p>So, instead of just <em>calling</em> <code>get_input()</code> in your <code>if</code> statement, you need to <code>return</code> what the recursive call returns:</p>
<pre><code>if my_var != &quot;a&quot; and my_var != &quot;b&quot;:
    print('You didn\'t type &quot;a&quot; or &quot;b&quot;. Try again.')
    return get_input()
</code></pre>
"
370363,"<p>Python treats variables in functions differently depending on whether you assign values to them from inside or outside the function.  If a variable is assigned within a function, it is treated by default as a local variable.  Therefore, when you uncomment the line, you are trying to reference the local variable <code>c</code> before any value has been assigned to it.</p>
<p>If you want the variable <code>c</code> to refer to the global <code>c = 3</code> assigned before the function, put</p>
<pre><code>global c
</code></pre>
<p>as the first line of the function.</p>
<p>As for python 3, there is now</p>
<pre><code>nonlocal c
</code></pre>
<p>that you can use to refer to the nearest enclosing function scope that has a <code>c</code> variable.</p>
"
613218,"<h3>Python 3.7+ or CPython 3.6</h3>
<p>Dicts preserve insertion order in Python 3.7+. Same in CPython 3.6, but <a href=""https://stackoverflow.com/q/39980323/4518341"">it's an implementation detail</a>.</p>
<pre><code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
&gt;&gt;&gt; {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; dict(sorted(x.items(), key=lambda item: item[1]))
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}
</code></pre>
<h3>Older Python</h3>
<p>It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a listâprobably a list of tuples.</p>
<p>For instance,</p>
<pre><code>import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))
</code></pre>
<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>
<p>And for those wishing to sort on keys instead of values:</p>
<pre><code>import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))
</code></pre>
<p>In Python3 since <a href=""https://stackoverflow.com/a/15712231/4293057"">unpacking is not allowed</a> we can use</p>
<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])
</code></pre>
<p>If you want the output as a dict, you can use <a href=""https://docs.python.org/3/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>collections.OrderedDict</code></a>:</p>
<pre><code>import collections

sorted_dict = collections.OrderedDict(sorted_x)
</code></pre>
"
1663826,"<h2>Python 3</h2>

<pre><code>for f, b in zip(foo, bar):
    print(f, b)
</code></pre>

<p><code>zip</code> stops when the shorter of <code>foo</code> or <code>bar</code> stops.</p>

<p>In <strong>Python 3</strong>, <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a>
returns an iterator of tuples, like <code>itertools.izip</code> in Python2.  To get a list
of tuples, use <code>list(zip(foo, bar))</code>. And to zip until both iterators are
exhausted, you would use
<a href=""https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest"" rel=""noreferrer"">itertools.zip_longest</a>.</p>

<h2>Python 2</h2>

<p>In <strong>Python 2</strong>, <a href=""https://docs.python.org/2/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a>
returns a list of tuples. This is fine when <code>foo</code> and <code>bar</code> are not massive. If they are both massive then forming <code>zip(foo,bar)</code> is an unnecessarily massive
temporary variable, and should be replaced by <code>itertools.izip</code> or
<code>itertools.izip_longest</code>, which returns an iterator instead of a list.</p>

<pre><code>import itertools
for f,b in itertools.izip(foo,bar):
    print(f,b)
for f,b in itertools.izip_longest(foo,bar):
    print(f,b)
</code></pre>

<p><code>izip</code> stops when either <code>foo</code> or <code>bar</code> is exhausted.
<code>izip_longest</code> stops when both <code>foo</code> and <code>bar</code> are exhausted.
When the shorter iterator(s) are exhausted, <code>izip_longest</code> yields a tuple with <code>None</code> in the position corresponding to that iterator. You can also set a different <code>fillvalue</code> besides <code>None</code> if you wish. See here for the <a href=""http://docs.python.org/library/itertools.html#itertools.izip_longest"" rel=""noreferrer"">full story</a>.</p>

<hr>

<p>Note also that <code>zip</code> and its <code>zip</code>-like brethen can accept an arbitrary number of iterables as arguments. For example,</p>

<pre><code>for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], 
                              ['red', 'blue', 'green']):
    print('{} {} {}'.format(num, color, cheese))
</code></pre>

<p>prints</p>

<pre><code>1 red manchego
2 blue stilton
3 green brie
</code></pre>
"
231855,"<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before you can understand generators, you must understand <em>iterables</em>.</p>
<h2>Iterables</h2>
<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>
<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]
&gt;&gt;&gt; for i in mylist:
...    print(i)
1
2
3
</code></pre>
<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>
<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]
&gt;&gt;&gt; for i in mylist:
...    print(i)
0
1
4
</code></pre>
<p>Everything you can use &quot;<code>for... in...</code>&quot; on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>
<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>
<h2>Generators</h2>
<p>Generators are iterators, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>
<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))
&gt;&gt;&gt; for i in mygenerator:
...    print(i)
0
1
4
</code></pre>
<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>
<h2>Yield</h2>
<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>
<pre><code>&gt;&gt;&gt; def create_generator():
...    mylist = range(3)
...    for i in mylist:
...        yield i*i
...
&gt;&gt;&gt; mygenerator = create_generator() # create a generator
&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!
&lt;generator object create_generator at 0xb7555c34&gt;
&gt;&gt;&gt; for i in mygenerator:
...     print(i)
0
1
4
</code></pre>
<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>
<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky.</p>
<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>
<p>Now the hard part:</p>
<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting <code>yield</code>. That can be because the loop has come to an end, or because you no longer satisfy an <code>&quot;if/else&quot;</code>.</p>
<hr />
<h2>Your code explained</h2>
<p><em>Generator:</em></p>
<pre><code># Here you create the method of the node object that will return the generator
def _get_child_candidates(self, distance, min_dist, max_dist):

    # Here is the code that will be called each time you use the generator object:

    # If there is still a child of the node object on its left
    # AND if the distance is ok, return the next child
    if self._leftchild and distance - max_dist &lt; self._median:
        yield self._leftchild

    # If there is still a child of the node object on its right
    # AND if the distance is ok, return the next child
    if self._rightchild and distance + max_dist &gt;= self._median:
        yield self._rightchild

    # If the function arrives here, the generator will be considered empty
    # there are no more than two values: the left and the right children
</code></pre>
<p><em>Caller:</em></p>
<pre><code># Create an empty list and a list with the current object reference
result, candidates = list(), [self]

# Loop on candidates (they contain only one element at the beginning)
while candidates:

    # Get the last candidate and remove it from the list
    node = candidates.pop()

    # Get the distance between obj and the candidate
    distance = node._get_dist(obj)

    # If the distance is ok, then you can fill in the result
    if distance &lt;= max_dist and distance &gt;= min_dist:
        result.extend(node._values)

    # Add the children of the candidate to the candidate's list
    # so the loop will keep running until it has looked
    # at all the children of the children of the children, etc. of the candidate
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))

return result
</code></pre>
<p>This code contains several smart parts:</p>
<ul>
<li><p>The loop iterates on a list, but the list expands while the loop is being iterated. It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhausts all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p>
</li>
<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p>
</li>
</ul>
<p>Usually, we pass a list to it:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = [3, 4]
&gt;&gt;&gt; a.extend(b)
&gt;&gt;&gt; print(a)
[1, 2, 3, 4]
</code></pre>
<p>But in your code, it gets a generator, which is good because:</p>
<ol>
<li>You don't need to read the values twice.</li>
<li>You may have a lot of children and you don't want them all stored in memory.</li>
</ol>
<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...</p>
<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>
<h2>Controlling a generator exhaustion</h2>
<pre><code>&gt;&gt;&gt; class Bank(): # Let's create a bank, building ATMs
...    crisis = False
...    def create_atm(self):
...        while not self.crisis:
...            yield &quot;$100&quot;
&gt;&gt;&gt; hsbc = Bank() # When everything's ok the ATM gives you as much as you want
&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])
['$100', '$100', '$100', '$100', '$100']
&gt;&gt;&gt; hsbc.crisis = True # Crisis is coming, no more money!
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # It's even true for new ATMs
&gt;&gt;&gt; print(wall_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # Build a new one to get back in business
&gt;&gt;&gt; for cash in brand_new_atm:
...    print cash
$100
$100
$100
$100
$100
$100
$100
$100
$100
...
</code></pre>
<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>
<p>It can be useful for various things like controlling access to a resource.</p>
<h2>Itertools, your best friend</h2>
<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?
Chain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>
<p>Then just <code>import itertools</code>.</p>
<p>An example? Let's see the possible orders of arrival for a four-horse race:</p>
<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]
&gt;&gt;&gt; races = itertools.permutations(horses)
&gt;&gt;&gt; print(races)
&lt;itertools.permutations object at 0xb754f1dc&gt;
&gt;&gt;&gt; print(list(itertools.permutations(horses)))
[(1, 2, 3, 4),
 (1, 2, 4, 3),
 (1, 3, 2, 4),
 (1, 3, 4, 2),
 (1, 4, 2, 3),
 (1, 4, 3, 2),
 (2, 1, 3, 4),
 (2, 1, 4, 3),
 (2, 3, 1, 4),
 (2, 3, 4, 1),
 (2, 4, 1, 3),
 (2, 4, 3, 1),
 (3, 1, 2, 4),
 (3, 1, 4, 2),
 (3, 2, 1, 4),
 (3, 2, 4, 1),
 (3, 4, 1, 2),
 (3, 4, 2, 1),
 (4, 1, 2, 3),
 (4, 1, 3, 2),
 (4, 2, 1, 3),
 (4, 2, 3, 1),
 (4, 3, 1, 2),
 (4, 3, 2, 1)]
</code></pre>
<h2>Understanding the inner mechanisms of iteration</h2>
<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).
Iterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>
<p>There is more about it in this article about <a href=""https://web.archive.org/web/20201109034340/http://effbot.org/zone/python-for-statement.htm"" rel=""noreferrer"">how <code>for</code> loops work</a>.</p>
"
16424553,"<p>The variable <code>photo</code> is a local variable which gets garbage collected after the class is instantiated. Save a reference to the photo, for example:</p>
<pre><code>self.photo = tkinter.PhotoImage(...)
</code></pre>
<p>If you do a Google search on &quot;tkinter image doesn't display&quot;, the first result is this:</p>
<p><a href=""https://web.archive.org/web/20201111190625id_/http://effbot.org/pyfaq/why-do-my-tkinter-images-not-appear.htm"" rel=""noreferrer"">Why do my Tkinter images not appear?</a> (The FAQ answer is currently <em>not</em> outdated)</p>
"
1894296,"<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; x = '[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]'
&gt;&gt;&gt; x = ast.literal_eval(x)
&gt;&gt;&gt; x
['A', 'B', 'C', ' D']
&gt;&gt;&gt; x = [n.strip() for n in x]
&gt;&gt;&gt; x
['A', 'B', 'C', 'D']
</code></pre>
<p><a href=""https://docs.python.org/library/ast.html#ast.literal_eval"" rel=""noreferrer""><code>ast.literal_eval</code></a>:</p>
<blockquote>
<p>With <code>ast.literal_eval</code> you can safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, booleans, and <code>None</code>.</p>
</blockquote>
"
2158532,"<p>Using generator functions can make your example easier to read and improve performance.</p>
<h3>Python 2</h3>
<p>Using the <a href=""https://docs.python.org/2/library/collections.html#collections-abstract-base-classes"" rel=""noreferrer""><code>Iterable</code> ABC</a> added in 2.6:</p>
<pre><code>from collections import Iterable

def flatten(xs):
    for x in xs:
        if isinstance(x, Iterable) and not isinstance(x, basestring):
            for item in flatten(x):
                yield item
        else:
            yield x
</code></pre>
<h3>Python 3</h3>
<p>In Python 3, <code>basestring</code> is no more, but the tuple <code>(str, bytes)</code> gives the same effect. Also, the <a href=""https://docs.python.org/3/whatsnew/3.3.html#pep-380"" rel=""noreferrer""><code>yield from</code></a> operator returns an item from a generator one at a time.</p>
<pre><code>from collections.abc import Iterable

def flatten(xs):
    for x in xs:
        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):
            yield from flatten(x)
        else:
            yield x
</code></pre>
"
16476974,"<p><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html#pandas-dataframe-iterrows"" rel=""noreferrer""><code>DataFrame.iterrows</code></a> is a generator which yields both the index and row (as a Series):</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
df = df.reset_index()  # make sure indexes pair with number of rows

for index, row in df.iterrows():
    print(row['c1'], row['c2'])
</code></pre>

<pre><code>10 100
11 110
12 120
</code></pre>
"
1832957,"<p>Yes, using <code>eval</code> is a bad practice. Just to name a few reasons:</p>
<ol>
<li>There is almost always a better way to do it</li>
<li>Very dangerous and insecure</li>
<li>Makes debugging difficult</li>
<li>Slow</li>
</ol>
<p>In your case you can use <a href=""http://docs.python.org/library/functions.html#setattr"" rel=""noreferrer"">setattr</a> instead:</p>
<pre><code>class Song:
    &quot;&quot;&quot;The class to store the details of each song&quot;&quot;&quot;
    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')
    def __init__(self):
        for att in self.attsToStore:
            setattr(self, att.lower(), None)
    def setDetail(self, key, val):
        if key in self.attsToStore:
            setattr(self, key.lower(), val)
</code></pre>
<p>There are some cases where you have to use <code>eval</code> or <code>exec</code>. But they are rare. Using <code>eval</code> in your case is a bad practice for sure. I'm emphasizing on bad practice because <code>eval</code> and <code>exec</code> are frequently used in the wrong place.</p>
<p><strong>Replying to the comments:</strong></p>
<p>It looks like some disagree that <code>eval</code> is 'very dangerous and insecure' in the OP case. That might be true for this specific case but not in general. The question was general and the reasons I listed are true for the general case as well.</p>
"
19913845,"<p><strong>If you only have two choices to select from:</strong></p>

<pre><code>df['color'] = np.where(df['Set']=='Z', 'green', 'red')
</code></pre>

<p>For example,</p>

<pre><code>import pandas as pd
import numpy as np

df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})
df['color'] = np.where(df['Set']=='Z', 'green', 'red')
print(df)
</code></pre>

<p>yields</p>

<pre><code>  Set Type  color
0   Z    A  green
1   Z    B  green
2   X    B    red
3   Y    C    red
</code></pre>

<hr>

<p><strong>If you have more than two conditions then use <a href=""https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html"" rel=""noreferrer""><code>np.select</code></a></strong>. For example, if you want <code>color</code> to be </p>

<ul>
<li><code>yellow</code> when <code>(df['Set'] == 'Z') &amp; (df['Type'] == 'A')</code></li>
<li>otherwise <code>blue</code> when <code>(df['Set'] == 'Z') &amp; (df['Type'] == 'B')</code> </li>
<li>otherwise <code>purple</code> when <code>(df['Type'] == 'B')</code></li>
<li>otherwise <code>black</code>,</li>
</ul>

<p>then use</p>

<pre><code>df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})
conditions = [
    (df['Set'] == 'Z') &amp; (df['Type'] == 'A'),
    (df['Set'] == 'Z') &amp; (df['Type'] == 'B'),
    (df['Type'] == 'B')]
choices = ['yellow', 'blue', 'purple']
df['color'] = np.select(conditions, choices, default='black')
print(df)
</code></pre>

<p>which yields</p>

<pre><code>  Set Type   color
0   Z    A  yellow
1   Z    B    blue
2   X    B  purple
3   Y    C   black
</code></pre>
"
11205638,"<p>The general design principle in Python is for <strong>functions that mutate an object in-place to return <code>None</code></strong>. I'm not sure it would have been the design choice I'd have chosen, but it's basically to emphasise that a new object is not returned.</p>
<p>Guido van Rossum (our Python BDFL) states the design choice <a href=""http://mail.python.org/pipermail/python-dev/2003-October/038855.html"" rel=""noreferrer"">on the Python-Dev mailing list</a>:</p>
<blockquote>
<p>I'd like to explain once more why I'm so adamant that sort() shouldn't
return 'self'.</p>
<p>This comes from a coding style (popular in various other languages, I
believe especially Lisp revels in it) where a series of side effects
on a single object can be chained like this:</p>
<pre><code>x.compress().chop(y).sort(z)
</code></pre>
<p>which would be the same as</p>
<pre><code>x.compress()
x.chop(y)
x.sort(z)
</code></pre>
<p>I find the chaining form a threat to readability; it requires that the
reader must be intimately familiar with each of the methods.  The
second form makes it clear that each of these calls acts on the same
object, and so even if you don't know the class and its methods very
well, you can understand that the second and third call are applied to
x (and that all calls are made for their side-effects), and not to
something else.</p>
<p>I'd like to reserve chaining for operations that return new values,
like string processing operations:</p>
<pre><code>y = x.rstrip(&quot;\n&quot;).split(&quot;:&quot;).lower()
</code></pre>
<p>There are a few standard library modules that encourage chaining of
side-effect calls (pstat comes to mind).  There shouldn't be any new
ones; pstat slipped through my filter when it was weak.</p>
</blockquote>
"
65064907,"<p>In PyGame, collision detection is done using <a href=""https://www.pygame.org/docs/ref/rect.html"" rel=""nofollow noreferrer""><code>pygame.Rect</code></a> objects. The <code>Rect</code> object offers various methods for detecting collisions between objects. Even the collision between a rectangular and circular object such as a paddle and a ball can be detected by a collision between two rectangular objects, the paddle and the bounding rectangle of the ball.</p>
<p>Some examples:</p>
<ul>
<li><p><a href=""https://www.pygame.org/docs/ref/rect.html#pygame.Rect.collidepoint"" rel=""nofollow noreferrer""><code>pygame.Rect.collidepoint</code></a>:</p>
<blockquote>
<p>Test if a point is inside a rectangle</p>
</blockquote>
<p><kbd><a href=""https://repl.it/@Rabbid76/PyGame-collidepoint#main.py"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5jD0C.png"" alt="""" /> repl.it/@Rabbid76/PyGame-collidepoint</a></kbd></p>
<p><a href=""https://i.stack.imgur.com/wCi2z.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wCi2z.gif"" alt="""" /></a></p>
<pre class=""lang-py prettyprint-override""><code>import pygame

pygame.init()
window = pygame.display.set_mode((250, 250))
rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)

run = True
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    point = pygame.mouse.get_pos()
    collide = rect.collidepoint(point)
    color = (255, 0, 0) if collide else (255, 255, 255)

    window.fill(0)
    pygame.draw.rect(window, color, rect)
    pygame.display.flip()

pygame.quit()
exit()
</code></pre>
</li>
<li><p><a href=""https://www.pygame.org/docs/ref/rect.html#pygame.Rect.colliderect"" rel=""nofollow noreferrer""><code>pygame.Rect.colliderect</code></a></p>
<blockquote>
<p>Test if two rectangles overlap</p>
</blockquote>
<p>See also <a href=""https://stackoverflow.com/questions/63561028/how-to-detect-collision-between-two-images-in-pygame/63561152#63561152"">How to detect collisions between two rectangular objects or images in pygame</a></p>
<p><kbd><a href=""https://repl.it/@Rabbid76/PyGame-colliderect#main.py"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5jD0C.png"" alt="""" /> repl.it/@Rabbid76/PyGame-colliderect</a></kbd></p>
<p><a href=""https://i.stack.imgur.com/r2y9r.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/r2y9r.gif"" alt=""colliderect"" /></a></p>
<pre class=""lang-py prettyprint-override""><code>import pygame

pygame.init()
window = pygame.display.set_mode((250, 250))
rect1 = pygame.Rect(*window.get_rect().center, 0, 0).inflate(75, 75)
rect2 = pygame.Rect(0, 0, 75, 75)

run = True
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    rect2.center = pygame.mouse.get_pos()
    collide = rect1.colliderect(rect2)
    color = (255, 0, 0) if collide else (255, 255, 255)

    window.fill(0)
    pygame.draw.rect(window, color, rect1)
    pygame.draw.rect(window, (0, 255, 0), rect2, 6, 1)
    pygame.display.flip()

pygame.quit()
exit()
</code></pre>
</li>
</ul>
<p>Furthermore, <a href=""https://www.pygame.org/docs/ref/rect.html#pygame.Rect.collidelist"" rel=""nofollow noreferrer""><code>pygame.Rect.collidelist</code></a> and <a href=""https://www.pygame.org/docs/ref/rect.html#pygame.Rect.collidelistall"" rel=""nofollow noreferrer""><code>pygame.Rect.collidelistall</code></a> can be used for the collision test between a rectangle and a list of rectangles. <a href=""https://www.pygame.org/docs/ref/rect.html#pygame.Rect.collidedict"" rel=""nofollow noreferrer""><code>pygame.Rect.collidedict</code></a> and <a href=""https://www.pygame.org/docs/ref/rect.html#pygame.Rect.collidedictall"" rel=""nofollow noreferrer""><code>pygame.Rect.collidedictall</code></a> can be used for the collision test between a rectangle and a dictionary of rectangles.</p>
<p>The collision of <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.Sprite"" rel=""nofollow noreferrer""><code>pygame.sprite.Sprite</code></a> and <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.Group"" rel=""nofollow noreferrer""><code>pygame.sprite.Group</code></a> objects, can be detected by <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.spritecollide"" rel=""nofollow noreferrer""><code>pygame.sprite.spritecollide()</code></a>, <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.groupcollide"" rel=""nofollow noreferrer""><code>pygame.sprite.groupcollide()</code></a> or <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.spritecollideany"" rel=""nofollow noreferrer""><code>pygame.sprite.spritecollideany()</code></a>. When using these methods, the collision detection algorithm can be specified by the <code>collided</code> argument:</p>
<blockquote>
<p>The collided argument is a callback function used to calculate if two sprites are colliding.</p>
</blockquote>
<p>Possible <code>collided</code> callables are <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.collide_rect"" rel=""nofollow noreferrer""><code>collide_rect</code></a>, <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.collide_rect_ratio"" rel=""nofollow noreferrer""><code>collide_rect_ratio</code></a>, <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.collide_circle"" rel=""nofollow noreferrer""><code>collide_circle</code></a>, <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.collide_circle_ratio"" rel=""nofollow noreferrer""><code>collide_circle_ratio</code></a>, <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.collide_mask"" rel=""nofollow noreferrer""><code>collide_mask</code></a></p>
<p>Some examples:</p>
<ul>
<li><p><a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.spritecollide"" rel=""nofollow noreferrer""><code>pygame.sprite.spritecollide()</code></a></p>
<p><kbd><a href=""https://repl.it/@Rabbid76/PyGame-spritecollide#main.py"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5jD0C.png"" alt="""" /> repl.it/@Rabbid76/PyGame-spritecollide</a></kbd></p>
<p><a href=""https://i.stack.imgur.com/3DdjL.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3DdjL.gif"" alt="""" /></a></p>
<pre class=""lang-py prettyprint-override""><code>import pygame

pygame.init()
window = pygame.display.set_mode((250, 250))

sprite1 = pygame.sprite.Sprite()
sprite1.image = pygame.Surface((75, 75))
sprite1.image.fill((255, 0, 0))
sprite1.rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(75, 75)
sprite2 = pygame.sprite.Sprite()
sprite2.image = pygame.Surface((75, 75))
sprite2.image.fill((0, 255, 0))
sprite2.rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(75, 75)

all_group = pygame.sprite.Group([sprite2, sprite1])
test_group = pygame.sprite.Group(sprite2)

run = True
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    sprite1.rect.center = pygame.mouse.get_pos()
    collide = pygame.sprite.spritecollide(sprite1, test_group, False)

    window.fill(0)
    all_group.draw(window)
    for s in collide:
        pygame.draw.rect(window, (255, 255, 255), s.rect, 5, 1)
    pygame.display.flip()

pygame.quit()
exit()
</code></pre>
</li>
</ul>
<p>For a collision with masks, see <a href=""https://stackoverflow.com/questions/56043600/how-can-i-made-a-collision-mask/56045037#56045037"">How can I make a collision mask?</a> or <a href=""https://stackoverflow.com/questions/60077813/pygame-mask-collision/60078039#60078039"">Pygame mask collision</a></p>
<p>See also <a href=""https://github.com/Rabbid76/PyGameExamplesAndAnswers/blob/master/documentation/pygame/pygame_collision_and_intesection.md"" rel=""nofollow noreferrer"">Collision and Intersection</a></p>
<ul>
<li><p><a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.spritecollide"" rel=""nofollow noreferrer""><code>pygame.sprite.spritecollide()</code></a> / <a href=""https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.collide_circle"" rel=""nofollow noreferrer""><code>collide_circle</code></a></p>
<p><kbd><a href=""https://repl.it/@Rabbid76/PyGame-spritecollidecollidecircle#main.py"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5jD0C.png"" alt="""" /> repl.it/@Rabbid76/PyGame-spritecollidecollidecircle</a></kbd></p>
<p><a href=""https://i.stack.imgur.com/SS1Pb.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SS1Pb.gif"" alt="""" /></a></p>
<pre class=""lang-py prettyprint-override""><code>import pygame

pygame.init()
window = pygame.display.set_mode((250, 250))

sprite1 = pygame.sprite.Sprite()
sprite1.image = pygame.Surface((80, 80), pygame.SRCALPHA)
pygame.draw.circle(sprite1.image, (255, 0, 0), (40, 40), 40)
sprite1.rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(80, 80)
sprite1.radius = 40
sprite2 = pygame.sprite.Sprite()
sprite2.image = pygame.Surface((80, 89), pygame.SRCALPHA)
pygame.draw.circle(sprite2.image, (0, 255, 0), (40, 40), 40)
sprite2.rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(80, 80)
sprite2.radius = 40 

all_group = pygame.sprite.Group([sprite2, sprite1])
test_group = pygame.sprite.Group(sprite2)

run = True
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    sprite1.rect.center = pygame.mouse.get_pos()
    collide = pygame.sprite.spritecollide(sprite1, test_group, False, pygame.sprite.collide_circle)

    window.fill(0)
    all_group.draw(window)
    for s in collide:
        pygame.draw.circle(window, (255, 255, 255), s.rect.center, s.rect.width // 2, 5)
    pygame.display.flip()

pygame.quit()
exit()
</code></pre>
</li>
</ul>
<hr />
<p>What does this all mean for your code?</p>
<p><a href=""https://www.pygame.org/docs/ref/surface.html#pygame.Surface.get_rect"" rel=""nofollow noreferrer""><code>pygame.Surface.get_rect.get_rect()</code></a> returns a rectangle with the size of the <em>Surface</em> object, that always starts at (0, 0) since a <em>Surface</em> object has no position. The position of the rectangle can be specified by a keyword argument. For example, the centre of the rectangle can be specified with the keyword argument <code>center</code>. These keyword arguments are applied to the attributes of the <a href=""https://www.pygame.org/docs/ref/rect.html"" rel=""nofollow noreferrer""><code>pygame.Rect</code></a> before it is returned (see <a href=""https://www.pygame.org/docs/ref/rect.html"" rel=""nofollow noreferrer""><code>pygame.Rect</code></a> for a list of the keyword arguments).<br />
See *<a href=""https://stackoverflow.com/questions/57730329/pygame-collide-rect-function-always-returning-true/57730378#57730378"">Why is my collision test always returning 'true' and why is the position of the rectangle of the image always wrong (0, 0)?</a></p>
<p>You do not need the <code>x</code> and <code>y</code> attributes of <code>Sprite</code> and <code>Bullet</code> at all. Use the position of the <code>rect</code> attribute instead:</p>
<pre class=""lang-py prettyprint-override""><code>#Define the sprite class
class Sprite:
    def __init__(self, x, y, name):
        self.image = pygame.image.load(name)
        self.rect = self.image.get_rect(topleft = (x, y))

    def render(self):
        window.blit(self.image, self.rect)

# Define the bullet class to create bullets          
class Bullet:
    def __init__(self, x, y):
        self.bullet = pygame.image.load(&quot;user_bullet.BMP&quot;)
        self.rect = self.bullet.get_rect(topleft = (x + 23, y))

    def render(self):
        window.blit(self.bullet, self.rect)
</code></pre>
<p>Use <a href=""https://www.pygame.org/docs/ref/rect.html#pygame.Rect.colliderect"" rel=""nofollow noreferrer""><code>pygame.Rect.colliderect()</code></a> to detect collisions between instances of <code>Sprite</code> and<code> Bullet</code>.<br />
See <a href=""https://stackoverflow.com/questions/63561028/how-to-detect-collision-between-two-images-in-pygame/63561152#63561152"">How to detect collisions between two rectangular objects or images in pygame</a>:</p>
<pre class=""lang-py prettyprint-override""><code>my_sprite = Sprite(sx, sy, name)
my_bullet = Bullet(by, by)
</code></pre>
<pre class=""lang-py prettyprint-override""><code>while True:
    # [...]

    if my_sprite.rect.colliderect(my_bullet.rect):
        printe(&quot;hit&quot;)
</code></pre>
"
36250354,"<p>This happens because your local module named <code>requests.py</code> shadows the installed <code>requests</code> module you are trying to use.  The current directory is prepended to <code>sys.path</code>, so the local name takes precedence over the installed name.</p>
<p>An extra debugging tip when this comes up is to look at the Traceback carefully, and realize that the name of your script in question is matching the module you are trying to import:</p>
<p>Notice the name you used in your script:</p>
<pre><code>File &quot;/Users/me/dev/rough/requests.py&quot;, line 1, in &lt;module&gt;
</code></pre>
<p>The module you are trying to import: <code>requests</code></p>
<p>Rename your module to something else to avoid the name collision.</p>
<p>Python may generate a <code>requests.pyc</code> file next to your <code>requests.py</code> file (in the <code>__pycache__</code> directory in Python 3).  Remove that as well after your rename, as the interpreter will still reference that file, re-producing the error. However, the <code>pyc</code> file in <code>__pycache__</code> <em>should</em> not affect your code if the <code>py</code> file has been removed.</p>
<p>In the example, renaming the file to <code>my_requests.py</code>, removing <code>requests.pyc</code>, and running again successfully prints <code>&lt;Response [200]&gt;</code>.</p>
<hr />
<p><em><strong>Note:</strong></em> This doesn't only happen when naming your file as the module you are trying to import. This can also happen if you name your file the same as a module imported by a module you import directly. For example, having a file called <em><strong><code>copy.py</code></strong></em> and trying to <code>import pandas</code> from there, will give</p>
<pre><code>ImportError: cannot import name 'copy' from 'copy'
</code></pre>
<p>That is because <code>pandas</code> imports <code>copy</code>. There is no magic solution here as you can't know all the modules' names in the world, but a rule of thumb is to try to make names of modules as unique as possible and try to change the name whenever you get such error.</p>
"
49775808,"<p>Once you wait for the element and moving forward as you are trying to invoke <code>click()</code> method instead of using <code>presence_of_element_located()</code> method you need to use <a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.element_to_be_clickable"" rel=""noreferrer""><strong><code>element_to_be_clickable()</code></strong></a> as follows :</p>

<pre><code>try:
    myElem = WebDriverWait(self.browser, delay).until(EC.element_to_be_clickable((By.XPATH , xpath)))
</code></pre>

<hr>

<h2>Update</h2>

<p>As per your counter question in the comments here are the details of the three methods :</p>

<h2>presence_of_element_located</h2>

<p><a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.presence_of_element_located"" rel=""noreferrer"">presence_of_element_located(locator)</a> is defined as follows :</p>

<pre><code>class selenium.webdriver.support.expected_conditions.presence_of_element_located(locator)

Parameter : locator - used to find the element returns the WebElement once it is located

Description : An expectation for checking that an element is present on the DOM of a page. This does not necessarily mean that the element is visible or interactable (i.e. clickable). 
</code></pre>

<h2>visibility_of_element_located</h2>

<p><a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.visibility_of_element_located"" rel=""noreferrer"">visibility_of_element_located(locator)</a> is defined as follows :</p>

<pre><code>class selenium.webdriver.support.expected_conditions.visibility_of_element_located(locator)

Parameter : locator -  used to find the element returns the WebElement once it is located and visible

Description : An expectation for checking that an element is present on the DOM of a page and visible. Visibility means that the element is not only displayed but also has a height and width that is greater than 0.
</code></pre>

<h2>element_to_be_clickable</h2>

<p><a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.element_to_be_clickable"" rel=""noreferrer"">element_to_be_clickable(locator)</a> is defined as follows :</p>

<pre><code>class selenium.webdriver.support.expected_conditions.element_to_be_clickable(locator)

Parameter : locator - used to find the element returns the WebElement once it is visible, enabled and interactable (i.e. clickable).

Description : An Expectation for checking an element is visible, enabled and interactable such that you can click it. 
</code></pre>
"
19960116,"<p>You can use <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.isin.html"" rel=""noreferrer""><code>pd.Series.isin</code></a>.</p>
<p>For &quot;IN&quot; use: <code>something.isin(somewhere)</code></p>
<p>Or for &quot;NOT IN&quot;: <code>~something.isin(somewhere)</code></p>
<p>As a worked example:</p>
<pre><code>&gt;&gt;&gt; df
    country
0        US
1        UK
2   Germany
3     China
&gt;&gt;&gt; countries_to_keep
['UK', 'China']
&gt;&gt;&gt; df.country.isin(countries_to_keep)
0    False
1     True
2    False
3     True
Name: country, dtype: bool
&gt;&gt;&gt; df[df.country.isin(countries_to_keep)]
    country
1        UK
3     China
&gt;&gt;&gt; df[~df.country.isin(countries_to_keep)]
    country
0        US
2   Germany
</code></pre>
"
533917,"<p>Use <a href=""https://docs.python.org/3/library/itertools.html#itertools.product"" rel=""noreferrer""><code>itertools.product</code></a>, which has been available since Python 2.6.</p>
<pre><code>import itertools

somelists = [
   [1, 2, 3],
   ['a', 'b'],
   [4, 5]
]
for element in itertools.product(*somelists):
    print(element)
</code></pre>
<p>This is the same as:</p>
<pre><code>for element in itertools.product([1, 2, 3], ['a', 'b'], [4, 5]):
    print(element)
</code></pre>
"
2709832,"<p>The reason you need to use <code>self.</code> is because Python does not use special syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed</em> automatically, but not <em>received</em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self</code> is the convention, and people will generally frown at you when you use something else.) <code>self</code> is not special to the code, it's just another object.</p>
<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.</code>.</p>
"
6260097,"<p>You're modifying the list while you iterate over it. That means that the first time through the loop, <code>i == 1</code>, so 1 is removed from the list. Then the <code>for</code> loop goes to the second item in the list, which is not 2, but 3! Then that's removed from the list, and then the <code>for</code> loop goes on to the third item in the list, which is now 5. And so on. Perhaps it's easier to visualize like so, with a ^ pointing to the value of <code>i</code>:</p>

<pre><code>[1, 2, 3, 4, 5, 6...]
 ^
</code></pre>

<p>That's the state of the list initially; then 1 is removed and the loop goes to the second item in the list:</p>

<pre><code>[2, 3, 4, 5, 6...]
    ^
[2, 4, 5, 6...]
       ^
</code></pre>

<p>And so on. </p>

<p>There's no good way to alter a list's length while iterating over it. The best you can do is something like this:</p>

<pre><code>numbers = [n for n in numbers if n &gt;= 20]
</code></pre>

<p>or this, for in-place alteration (the thing in parens is a generator expression, which is implicitly converted into a tuple before slice-assignment):</p>

<pre><code>numbers[:] = (n for in in numbers if n &gt;= 20)
</code></pre>

<p>If you want to perform an operation on n before removing it, one trick you could try is this:</p>

<pre><code>for i, n in enumerate(numbers):
    if n &lt; 20 :
        print(""do something"")
        numbers[i] = None
numbers = [n for n in numbers if n is not None]
</code></pre>
"
48056120,"<p>This question have been asked and answered in numerous forums in different formats. Considering them all if we prioritize the locators the list would be as follows :</p>
<ul>
<li><strong>id</strong>: Select element with the specified <code>id</code> attribute.</li>
<li><strong>name</strong>: Select first element with the specified <code>name</code> attribute.</li>
<li><strong>link_text</strong>: Select link (anchor tag) element which contains <em>text</em> matching the specified <code>LinkText</code>.</li>
<li><strong>partial_link_text</strong>: Select link (anchor tag) element which contains <em>text</em> matching the specified <code>PartialLinkText</code>.</li>
<li><strong>tag_name</strong>: Locate Element using a <code>Tag Name</code>.</li>
<li><strong>class_name</strong>: Locate Element using a <code>ClassName</code>.</li>
<li><strong>css_selector</strong>: Select the element using <code>CssSelectors</code>.</li>
<li><strong>xpath</strong>: Locate an element using an <code>XPath</code> expression.</li>
</ul>
<p>So the question now is <strong>Whats New</strong>?</p>
<p>The answer is <strong>Selenium have evolved a lot recently</strong>. <strong><code>WebDriver</code></strong> is now a <a href=""https://www.w3.org/TR/webdriver/"" rel=""nofollow noreferrer""><strong><code>W3C Recommendation Candidate</code></strong></a>. Things within <code>Selenium</code> are changing pretty fast. It's no more only about choosing the locator. We need to use a locator which will :</p>
<ul>
<li><em>Uniquely identify an element</em>.</li>
<li><em>The performance of the locator must be optimized.</em></li>
</ul>
<p>Keeping these two factors in mind, the best strategy would be to <strong>Mock the DOM</strong>. The <a href=""https://www.w3.org/TR/webdriver/#locator-strategies"" rel=""nofollow noreferrer""><strong><code>W3C Recommendation Candidate</code></strong></a> does mentions the list of the locators as per the below :</p>
<p><a href=""https://i.stack.imgur.com/ZTq7X.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZTq7X.png"" alt=""Selenium_Locators"" /></a></p>
<p>So the verdict is clear and concise.</p>
"
394814,"<p>Yes, it was <a href=""https://mail.python.org/pipermail/python-dev/2005-September/056846.html"" rel=""noreferrer"" title=""[Python-Dev] Conditional Expression Resolution"">added</a> in version 2.5. The expression syntax is:</p>
<pre class=""lang-py prettyprint-override""><code>a if condition else b
</code></pre>
<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href=""https://en.wikipedia.org/wiki/Boolean_data_type"" rel=""noreferrer"" title=""Boolean data type"">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>
<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>
<p>For example:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; 'true' if True else 'false'
'true'
&gt;&gt;&gt; 'true' if False else 'false'
'false'
</code></pre>
<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use <strong>statements</strong> such as <code>pass</code>, or assignments with <code>=</code> (or &quot;augmented&quot; assignments like <code>+=</code>), within a conditional <strong>expression</strong>:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; pass if False else pass
  File &quot;&lt;stdin&gt;&quot;, line 1
    pass if False else pass
         ^
SyntaxError: invalid syntax

&gt;&gt;&gt; # Python parses this as `x = (1 if False else y) = 2`
&gt;&gt;&gt; # The `(1 if False else x)` part is actually valid, but
&gt;&gt;&gt; # it can't be on the left-hand side of `=`.
&gt;&gt;&gt; x = 1 if False else y = 2
  File &quot;&lt;stdin&gt;&quot;, line 1
SyntaxError: cannot assign to conditional expression

&gt;&gt;&gt; # If we parenthesize it instead...
&gt;&gt;&gt; (x = 1) if False else (y = 2)
  File &quot;&lt;stdin&gt;&quot;, line 1
    (x = 1) if False else (y = 2)
       ^
SyntaxError: invalid syntax
</code></pre>
<p>(In 3.8 and above, the <code>:=</code> &quot;walrus&quot; operator allows simple assignment of values <em>as an expression</em>, which is then compatible with this syntax. But please don't write code like that; it will quickly become very difficult to understand.)</p>
<p>Similarly, because it is an expression, the <code>else</code> part is <em>mandatory</em>:</p>
<pre><code># Invalid syntax: we didn't specify what the value should be if the 
# condition isn't met. It doesn't matter if we can verify that
# ahead of time.
a if True
</code></pre>
<p>You can, however, use conditional expressions to assign a variable like so:</p>
<pre class=""lang-py prettyprint-override""><code>x = a if True else b
</code></pre>
<p>Or for example to return a value:</p>
<pre><code># Of course we should just use the standard library `max`;
# this is just for demonstration purposes.
def my_max(a, b):
    return a if a &gt; b else b
</code></pre>
<p>Think of the conditional expression as switching between two values. We can use it when we are in a 'one value or another' situation, where we will <em>do the same thing</em> with the result, regardless of whether the condition is met. We use the expression to compute the value, and then do something with it. If you need to <em>do something different</em> depending on the condition, then use a normal <code>if</code> <strong>statement</strong> instead.</p>
<hr />
<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>
<ul>
<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as <a href=""https://en.wikipedia.org/wiki/C_%28programming_language%29"" rel=""noreferrer"">C</a>, <a href=""https://en.wikipedia.org/wiki/C%2B%2B"" rel=""noreferrer"">C++</a>, <a href=""https://en.wikipedia.org/wiki/Go_%28programming_language%29"" rel=""noreferrer"">Go</a>, <a href=""https://en.wikipedia.org/wiki/Perl"" rel=""noreferrer"">Perl</a>, <a href=""https://en.wikipedia.org/wiki/Ruby_%28programming_language%29"" rel=""noreferrer"">Ruby</a>, <a href=""https://en.wikipedia.org/wiki/Java_%28programming_language%29"" rel=""noreferrer"">Java</a>, <a href=""https://en.wikipedia.org/wiki/JavaScript"" rel=""noreferrer"">JavaScript</a>, etc.), which may lead to bugs when people unfamiliar with Python's &quot;surprising&quot; behaviour use it (they may reverse the argument order).</li>
<li>Some find it &quot;unwieldy&quot;, since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>
<li>Stylistic reasons. (Although the 'inline <code>if</code>' can be <em>really</em> useful, and make your script more concise, it really does complicate your code)</li>
</ul>
<p>If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>
<p>Official documentation:</p>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#conditional-expressions"" rel=""noreferrer"" title=""Conditional expressions"">Conditional expressions</a></li>
<li><a href=""https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator"" rel=""noreferrer"" title=""Is there an equivalent of Câs â?:â ternary operator?"">Is there an equivalent of Câs â?:â ternary operator?</a></li>
</ul>
"
36922103,"<p>The <code>or</code> and <code>and</code> Python statements require <strong>truth</strong>-values. For pandas, these are considered ambiguous, so you should use &quot;bitwise&quot; <code>|</code> (or) or <code>&amp;</code> (and) operations:</p>
<pre><code>df = df[(df['col'] &lt; -0.25) | (df['col'] &gt; 0.25)]
</code></pre>
<p>These are overloaded for these kinds of data structures to yield the element-wise <code>or</code> or <code>and</code>.</p>
<hr />
<p>Just to add some more explanation to this statement:</p>
<p>The exception is thrown when you want to get the <code>bool</code> of a <code>pandas.Series</code>:</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; x = pd.Series([1])
&gt;&gt;&gt; bool(x)
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
</code></pre>
<p>You hit a place where the operator <strong>implicitly</strong> converted the operands to <code>bool</code> (you used <code>or</code> but it also happens for <code>and</code>, <code>if</code> and <code>while</code>):</p>
<pre><code>&gt;&gt;&gt; x or x
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&gt;&gt;&gt; x and x
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&gt;&gt;&gt; if x:
...     print('fun')
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&gt;&gt;&gt; while x:
...     print('fun')
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
</code></pre>
<p>Besides these four statements, there are several Python functions that hide some <code>bool</code> calls (like <code>any</code>, <code>all</code>, <code>filter</code>, ...). These are normally not problematic with <code>pandas.Series</code>, but for completeness I wanted to mention these.</p>
<hr />
<p>In your case, the exception isn't really helpful, because it doesn't mention the <strong>right alternatives</strong>. For <code>and</code> and <code>or</code>, if you want element-wise comparisons, you can use:</p>
<ul>
<li><p><a href=""https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html"" rel=""noreferrer""><code>numpy.logical_or</code></a>:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.logical_or(x, y)
</code></pre>
<p>or simply the <code>|</code> operator:</p>
<pre><code>&gt;&gt;&gt; x | y
</code></pre>
</li>
<li><p><a href=""https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html"" rel=""noreferrer""><code>numpy.logical_and</code></a>:</p>
<pre><code>&gt;&gt;&gt; np.logical_and(x, y)
</code></pre>
<p>or simply the <code>&amp;</code> operator:</p>
<pre><code>&gt;&gt;&gt; x &amp; y
</code></pre>
</li>
</ul>
<p>If you're using the operators, then be sure to set your parentheses correctly because of <a href=""https://docs.python.org/reference/expressions.html#operator-precedence"" rel=""noreferrer"">operator precedence</a>.</p>
<p>There are <a href=""https://docs.scipy.org/doc/numpy/reference/routines.logic.html"" rel=""noreferrer"">several logical NumPy functions</a> which <em>should</em> work on <code>pandas.Series</code>.</p>
<hr />
<p>The alternatives mentioned in the Exception are more suited if you encountered it when doing <code>if</code> or <code>while</code>. I'll shortly explain each of these:</p>
<ul>
<li><p>If you want to check if your Series is <strong>empty</strong>:</p>
<pre><code>&gt;&gt;&gt; x = pd.Series([])
&gt;&gt;&gt; x.empty
True
&gt;&gt;&gt; x = pd.Series([1])
&gt;&gt;&gt; x.empty
False
</code></pre>
<p>Python normally interprets the <code>len</code>gth of containers (like <code>list</code>, <code>tuple</code>, ...) as truth-value if it has no explicit Boolean interpretation. So if you want the Python-like check, you could do: <code>if x.size</code> or <code>if not x.empty</code> instead of <code>if x</code>.</p>
</li>
<li><p>If your <code>Series</code> contains <strong>one and only one</strong> Boolean value:</p>
<pre><code>&gt;&gt;&gt; x = pd.Series([100])
&gt;&gt;&gt; (x &gt; 50).bool()
True
&gt;&gt;&gt; (x &lt; 50).bool()
False
</code></pre>
</li>
<li><p>If you want to check the <strong>first and only item</strong> of your Series (like <code>.bool()</code>, but it works even for non-Boolean contents):</p>
<pre><code>&gt;&gt;&gt; x = pd.Series([100])
&gt;&gt;&gt; x.item()
100
</code></pre>
</li>
<li><p>If you want to check if <strong>all</strong> or <strong>any</strong> item is not-zero, not-empty or not-False:</p>
<pre><code>&gt;&gt;&gt; x = pd.Series([0, 1, 2])
&gt;&gt;&gt; x.all()   # Because one element is zero
False
&gt;&gt;&gt; x.any()   # because one (or more) elements are non-zero
True
</code></pre>
</li>
</ul>
"
14132912,"<p><strong>Script vs. Module</strong></p>
<p>Here's an explanation.  The short version is that there is a big difference between directly running a Python file, and importing that file from somewhere else.  <strong>Just knowing what directory a file is in does not determine what package Python thinks it is in.</strong>  That depends, additionally, on how you load the file into Python (by running or by importing).</p>
<p>There are two ways to load a Python file: as the top-level script, or as a
module.  A file is loaded as the top-level script if you execute it directly, for instance by typing <code>python myfile.py</code> on the command line.  It is loaded as a module when an <code>import</code> statement is encountered inside some other file.  There can only be one top-level script at a time; the top-level script is the Python file you ran to start things off.</p>
<p><strong>Naming</strong></p>
<p>When a file is loaded, it is given a name (which is stored in its <code>__name__</code> attribute).</p>
<ul>
<li>If it was loaded as the top-level script, its name is <code>__main__</code>.</li>
<li>If it was loaded as a module, its name is [ the filename, preceded by the names of any packages/subpackages of which it is a part, separated by dots ], for example, <code>package.subpackage1.moduleX</code>.</li>
</ul>
<p>But be aware, if you load <code>moduleX</code> as a module from shell command line using something like <code>python -m package.subpackage1.moduleX</code>, the <code>__name__</code> will still be <code>__main__</code>.</p>
<p>So for instance in your example:</p>
<pre><code>package/
    __init__.py
    subpackage1/
        __init__.py
        moduleX.py
    moduleA.py
</code></pre>
<p>if you imported <code>moduleX</code> (note: <em>imported</em>, not directly executed), its name would be <code>package.subpackage1.moduleX</code>.  If you imported <code>moduleA</code>, its name would be <code>package.moduleA</code>.  However, if you <em>directly run</em> <code>moduleX</code> from the command line, its name will instead be <code>__main__</code>, and if you directly run <code>moduleA</code> from the command line, its name will be <code>__main__</code>.  When a module is run as the top-level script, it loses its normal name and its name is instead <code>__main__</code>.</p>
<p><strong>Accessing a module NOT through its containing package</strong></p>
<p>There is an additional wrinkle: the module's name depends on whether it was imported &quot;directly&quot; from the directory it is in or imported via a package.  This only makes a difference if you run Python in a directory, and try to import a file in that same directory (or a subdirectory of it).  For instance, if you start the Python interpreter in the directory <code>package/subpackage1</code> and then do <code>import moduleX</code>, the name of <code>moduleX</code> will just be <code>moduleX</code>, and not <code>package.subpackage1.moduleX</code>.  This is because Python adds the current directory to its search path when the interpreter is entered interactively; if it finds the to-be-imported module in the current directory, it will not know that that directory is part of a package, and the package information will not become part of the module's name.</p>
<p>A special case is if you run the interpreter interactively (e.g., just type <code>python</code> and start entering Python code on the fly).  In this case, the name of that interactive session is <code>__main__</code>.</p>
<p>Now here is the crucial thing for your error message: <strong>if a module's name has no dots, it is not considered to be part of a package</strong>.  It doesn't matter where the file actually is on disk.  All that matters is what its name is, and its name depends on how you loaded it.</p>
<p>Now look at the quote you included in your question:</p>
<blockquote>
<p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top-level module, regardless of where the module is actually located on the file system.</p>
</blockquote>
<p><strong>Relative imports...</strong></p>
<p>Relative imports use the module's <em>name</em> to determine where it is in a package.  When you use a relative import like <code>from .. import foo</code>, the dots indicate to step up some number of levels in the package hierarchy.  For instance, if your current module's name is <code>package.subpackage1.moduleX</code>, then <code>..moduleA</code> would mean <code>package.moduleA</code>.  For a <code>from .. import</code> to work, the module's name must have at least as many dots as there are in the <code>import</code> statement.</p>
<p><strong>... are only relative in a package</strong></p>
<p>However, if your module's name is <code>__main__</code>, it is not considered to be in a package.  Its name has no dots, and therefore you cannot use <code>from .. import</code> statements inside it.  If you try to do so, you will get the &quot;relative-import in non-package&quot; error.</p>
<p><strong>Scripts can't import relative</strong></p>
<p>What you probably did is you tried to run <code>moduleX</code> or the like from the command line.  When you did this, its name was set to <code>__main__</code>, which means that relative imports within it will fail, because its name does not reveal that it is in a package. Note that this will also happen if you run Python from the same directory where a module is, and then try to import that module, because, as described above, Python will find the module in the current directory &quot;too early&quot; without realizing it is part of a package.</p>
<p>Also remember that when you run the interactive interpreter, the &quot;name&quot; of that interactive session is always <code>__main__</code>.  Thus <strong>you cannot do relative imports directly from an interactive session</strong>.  Relative imports are only for use within module files.</p>
<p><strong>Two solutions:</strong></p>
<ol>
<li><p>If you really do want to run <code>moduleX</code> directly, but you still want it to be considered part of a package, you can do <code>python -m package.subpackage1.moduleX</code>.  The <code>-m</code> tells Python to load it as a module, not as the top-level script.</p>
</li>
<li><p>Or perhaps you don't actually want to <em>run</em> <code>moduleX</code>, you just want to run some other script, say <code>myfile.py</code>, that <em>uses</em> functions inside <code>moduleX</code>.  If that is the case, put <code>myfile.py</code> <em>somewhere else</em> â <em>not</em> inside the <code>package</code> directory â and run it.  If inside <code>myfile.py</code> you do things like <code>from package.moduleA import spam</code>, it will work fine.</p>
</li>
</ol>
<p><strong>Notes</strong></p>
<ul>
<li><p>For either of these solutions, the package directory (<code>package</code> in your example) must be accessible from the Python module search path (<code>sys.path</code>).  If it is not, you will not be able to use anything in the package reliably at all.</p>
</li>
<li><p>Since Python 2.6, the module's &quot;name&quot; for package-resolution purposes is determined not just by its <code>__name__</code> attributes but also by the <code>__package__</code> attribute.  That's why I'm avoiding using the explicit symbol <code>__name__</code> to refer to the module's &quot;name&quot;.  Since Python 2.6 a module's &quot;name&quot; is effectively <code>__package__ + '.' + __name__</code>, or just <code>__name__</code> if <code>__package__</code> is <code>None</code>.)</p>
</li>
</ul>
"
306353,"<p>Take a look at this:</p>
<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; id(a) == id(b)
True
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; id(a) == id(b)
False
</code></pre>
<p>Here's what I found in the documentation for <a href=""https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong"" rel=""nofollow noreferrer"">&quot;Plain Integer Objects&quot;</a>:</p>
<blockquote>
<p>The current implementation keeps an array of integer objects for all integers between <code>-5</code> and <code>256</code>. When you create an int in that range you actually just get back a reference to the existing object.</p>
</blockquote>
<p>So, integers 256 are <a href=""https://docs.python.org/3/library/functions.html#id"" rel=""nofollow noreferrer"">identical</a>, but 257 are not. This is a CPython implementation detail, and not guaranteed for other Python implementations.</p>
"
26853961,"<h2>How can I merge two Python dictionaries in a single expression?</h2>
<p>For dictionaries <code>x</code> and <code>y</code>, their shallowly-merged dictionary <code>z</code> takes values from <code>y</code>, replacing those from <code>x</code>.</p>
<ul>
<li><p>In Python 3.9.0 or greater (released 17 October 2020, <a href=""https://www.python.org/dev/peps/pep-0584/"" rel=""noreferrer""><code>PEP-584</code></a>, <a href=""https://bugs.python.org/issue36144"" rel=""noreferrer"">discussed here</a>):</p>
<pre class=""lang-py prettyprint-override""><code>z = x | y
</code></pre>
</li>
<li><p>In Python 3.5 or greater:</p>
<pre class=""lang-py prettyprint-override""><code>z = {**x, **y}
</code></pre>
</li>
<li><p>In Python 2, (or 3.4 or lower) write a function:</p>
<pre class=""lang-py prettyprint-override""><code>def merge_two_dicts(x, y):
    z = x.copy()   # start with keys and values of x
    z.update(y)    # modifies z with keys and values of y
    return z
</code></pre>
<p>and now:</p>
<pre class=""lang-py prettyprint-override""><code>z = merge_two_dicts(x, y)
</code></pre>
</li>
</ul>
<h3>Explanation</h3>
<p>Say you have two dictionaries and you want to merge them into a new dictionary without altering the original dictionaries:</p>
<pre class=""lang-py prettyprint-override""><code>x = {'a': 1, 'b': 2}
y = {'b': 3, 'c': 4}
</code></pre>
<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dictionary's values overwriting those from the first.</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; z
{'a': 1, 'b': 3, 'c': 4}
</code></pre>
<p>A new syntax for this, proposed in <a href=""https://www.python.org/dev/peps/pep-0448"" rel=""noreferrer"">PEP 448</a> and <a href=""https://mail.python.org/pipermail/python-dev/2015-February/138564.html"" rel=""noreferrer"">available as of Python 3.5</a>, is</p>
<pre class=""lang-py prettyprint-override""><code>z = {**x, **y}
</code></pre>
<p>And it is indeed a single expression.</p>
<p>Note that we can merge in with literal notation as well:</p>
<pre class=""lang-py prettyprint-override""><code>z = {**x, 'foo': 1, 'bar': 2, **y}
</code></pre>
<p>and now:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; z
{'a': 1, 'b': 3, 'foo': 1, 'bar': 2, 'c': 4}
</code></pre>
<p>It is now showing as implemented in the <a href=""https://www.python.org/dev/peps/pep-0478/#features-for-3-5"" rel=""noreferrer"">release schedule for 3.5, PEP 478</a>, and it has now made its way into the <a href=""https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations"" rel=""noreferrer"">What's New in Python 3.5</a> document.</p>
<p>However, since many organizations are still on Python 2, you may wish to do this in a backward-compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>
<pre class=""lang-py prettyprint-override""><code>z = x.copy()
z.update(y) # which returns None since it mutates z
</code></pre>
<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>b</code> will point to <code>3</code> in our final result.</p>
<h2>Not yet on Python 3.5, but want a <em>single expression</em></h2>
<p>If you are not yet on Python 3.5 or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while the correct approach is to put it in a function:</p>
<pre class=""lang-py prettyprint-override""><code>def merge_two_dicts(x, y):
    &quot;&quot;&quot;Given two dictionaries, merge them into a new dict as a shallow copy.&quot;&quot;&quot;
    z = x.copy()
    z.update(y)
    return z
</code></pre>
<p>and then you have a single expression:</p>
<pre class=""lang-py prettyprint-override""><code>z = merge_two_dicts(x, y)
</code></pre>
<p>You can also make a function to merge an arbitrary number of dictionaries, from zero to a very large number:</p>
<pre class=""lang-py prettyprint-override""><code>def merge_dicts(*dict_args):
    &quot;&quot;&quot;
    Given any number of dictionaries, shallow copy and merge into a new dict,
    precedence goes to key-value pairs in latter dictionaries.
    &quot;&quot;&quot;
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result
</code></pre>
<p>This function will work in Python 2 and 3 for all dictionaries. e.g. given dictionaries <code>a</code> to <code>g</code>:</p>
<pre class=""lang-py prettyprint-override""><code>z = merge_dicts(a, b, c, d, e, f, g) 
</code></pre>
<p>and key-value pairs in <code>g</code> will take precedence over dictionaries <code>a</code> to <code>f</code>, and so on.</p>
<h2>Critiques of Other Answers</h2>
<p>Don't use what you see in the formerly accepted answer:</p>
<pre class=""lang-py prettyprint-override""><code>z = dict(x.items() + y.items())
</code></pre>
<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists -</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; c = dict(a.items() + b.items())
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'
</code></pre>
<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power.</p>
<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; c = dict(a.items() | b.items())
</code></pre>
<p>This example demonstrates what happens when values are unhashable:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; x = {'a': []}
&gt;&gt;&gt; y = {'b': []}
&gt;&gt;&gt; dict(x.items() | y.items())
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</code></pre>
<p>Here's an example where <code>y</code> should have precedence, but instead the value from <code>x</code> is retained due to the arbitrary order of sets:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; x = {'a': 2}
&gt;&gt;&gt; y = {'a': 1}
&gt;&gt;&gt; dict(x.items() | y.items())
{'a': 2}
</code></pre>
<p>Another hack you should not use:</p>
<pre class=""lang-py prettyprint-override""><code>z = dict(x, **y)
</code></pre>
<p>This uses the <code>dict</code> constructor and is very fast and memory-efficient (even slightly more so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic.</p>
<p>Here's an example of the usage being <a href=""https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff"" rel=""noreferrer"">remediated in django</a>.</p>
<p>Dictionaries are intended to take hashable keys (e.g. <code>frozenset</code>s or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; c = dict(a, **b)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: keyword arguments must be strings
</code></pre>
<p>From the <a href=""https://mail.python.org/pipermail/python-dev/2010-April/099459.html"" rel=""noreferrer"">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>
<blockquote>
<p>I am fine with
declaring dict({}, **{1:3}) illegal, since after all it is abuse of
the ** mechanism.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Apparently dict(x, **y) is going around as &quot;cool hack&quot; for &quot;call
x.update(y) and return x&quot;. Personally, I find it more despicable than
cool.</p>
</blockquote>
<p>It is my understanding (as well as the understanding of the <a href=""https://mail.python.org/pipermail/python-dev/2010-April/099485.html"" rel=""noreferrer"">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dictionaries for readability purposes, e.g.:</p>
<pre class=""lang-py prettyprint-override""><code>dict(a=1, b=10, c=11)
</code></pre>
<p>instead of</p>
<pre class=""lang-py prettyprint-override""><code>{'a': 1, 'b': 10, 'c': 11}
</code></pre>
<h2>Response to comments</h2>
<blockquote>
<p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-coming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact, ** was designed precisely to pass dictionaries as keywords.</p>
</blockquote>
<p>Again, it doesn't work for 3 when keys are not strings. The implicit calling contract is that namespaces take ordinary dictionaries, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>
<pre><code>&gt;&gt;&gt; foo(**{('a', 'b'): None})
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: foo() keywords must be strings
&gt;&gt;&gt; dict(**{('a', 'b'): None})
{('a', 'b'): None}
</code></pre>
<p>This inconsistency was bad given other implementations of Python (PyPy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>
<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>
<p>More comments:</p>
<blockquote>
<p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts.</p>
</blockquote>
<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>
<blockquote>
<p><code>{**x, **y}</code> does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word &quot;merging&quot; these answers describe &quot;updating one dict with another&quot;, and not merging.</p>
</blockquote>
<p>Yes. I must refer you back to the question, which is asking for a <em>shallow</em> merge of <em><strong>two</strong></em> dictionaries, with the first's values being overwritten by the second's - in a single expression.</p>
<p>Assuming two dictionaries of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dictionaries from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:</p>
<pre class=""lang-py prettyprint-override""><code>from copy import deepcopy

def dict_of_dicts_merge(x, y):
    z = {}
    overlapping_keys = x.keys() &amp; y.keys()
    for key in overlapping_keys:
        z[key] = dict_of_dicts_merge(x[key], y[key])
    for key in x.keys() - overlapping_keys:
        z[key] = deepcopy(x[key])
    for key in y.keys() - overlapping_keys:
        z[key] = deepcopy(y[key])
    return z
</code></pre>
<p>Usage:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; x = {'a':{1:{}}, 'b': {2:{}}}
&gt;&gt;&gt; y = {'b':{10:{}}, 'c': {11:{}}}
&gt;&gt;&gt; dict_of_dicts_merge(x, y)
{'b': {2: {}, 10: {}}, 'a': {1: {}}, 'c': {11: {}}}
</code></pre>
<p>Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at <a href=""https://stackoverflow.com/a/24088493/541136"">my answer to the canonical question on a &quot;Dictionaries of dictionaries merge&quot;</a>.</p>
<h2>Less Performant But Correct Ad-hocs</h2>
<p>These approaches are less performant, but they will provide correct behavior.
They will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dictionaries have precedence)</p>
<p>You can also chain the dictionaries manually inside a <a href=""https://www.python.org/dev/peps/pep-0274/"" rel=""noreferrer"">dict comprehension</a>:</p>
<pre class=""lang-py prettyprint-override""><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7
</code></pre>
<p>or in Python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>
<pre class=""lang-py prettyprint-override""><code>dict((k, v) for d in dicts for k, v in d.items()) # iteritems in Python 2
</code></pre>
<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import chain
z = dict(chain(x.items(), y.items())) # iteritems in Python 2
</code></pre>
<h2>Performance Analysis</h2>
<p>I'm only going to do the performance analysis of the usages known to behave correctly. (Self-contained so you can copy and paste yourself.)</p>
<pre class=""lang-py prettyprint-override""><code>from timeit import repeat
from itertools import chain

x = dict.fromkeys('abcdefg')
y = dict.fromkeys('efghijk')

def merge_two_dicts(x, y):
    z = x.copy()
    z.update(y)
    return z

min(repeat(lambda: {**x, **y}))
min(repeat(lambda: merge_two_dicts(x, y)))
min(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))
min(repeat(lambda: dict(chain(x.items(), y.items()))))
min(repeat(lambda: dict(item for d in (x, y) for item in d.items())))
</code></pre>
<p>In Python 3.8.1, NixOS:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; min(repeat(lambda: {**x, **y}))
1.0804965235292912
&gt;&gt;&gt; min(repeat(lambda: merge_two_dicts(x, y)))
1.636518670246005
&gt;&gt;&gt; min(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))
3.1779992282390594
&gt;&gt;&gt; min(repeat(lambda: dict(chain(x.items(), y.items()))))
2.740647904574871
&gt;&gt;&gt; min(repeat(lambda: dict(item for d in (x, y) for item in d.items())))
4.266070580109954
</code></pre>
<pre class=""lang-sh prettyprint-override""><code>$ uname -a
Linux nixos 4.19.113 #1-NixOS SMP Wed Mar 25 07:06:15 UTC 2020 x86_64 GNU/Linux
</code></pre>
<h2>Resources on Dictionaries</h2>
<ul>
<li><a href=""https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302"">My explanation of Python's <strong>dictionary implementation</strong>, updated for 3.6.</a></li>
<li><a href=""https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535"">Answer on how to add new keys to a dictionary</a></li>
<li><a href=""https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067"">Mapping two lists into a dictionary</a></li>
<li><a href=""https://docs.python.org/3/tutorial/datastructures.html#dictionaries"" rel=""noreferrer"">The official Python docs on dictionaries</a></li>
<li><a href=""https://www.youtube.com/watch?v=66P5FMkWoVU"" rel=""noreferrer"">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>
<li><a href=""https://www.youtube.com/watch?v=npw4s1QTmPg"" rel=""noreferrer"">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>
</ul>
"
493399,"<p>In Python 3, you can use the <code>sep=</code> and <code>end=</code> parameters of the <a href=""https://docs.python.org/library/functions.html#print"" rel=""noreferrer""><code>print</code></a> function:</p>

<p>To not add a newline to the end of the string:</p>

<pre><code>print('.', end='')
</code></pre>

<p>To not add a space between all the function arguments you want to print:</p>

<pre><code>print('a', 'b', 'c', sep='')
</code></pre>

<p>You can pass any string to either parameter, and you can use both parameters at the same time.</p>

<p>If you are having trouble with buffering, you can flush the output by adding <code>flush=True</code> keyword argument:</p>

<pre><code>print('.', end='', flush=True)
</code></pre>

<h2>Python 2.6 and 2.7</h2>

<p>From Python 2.6 you can either import the <code>print</code> function from Python 3 using the <a href=""https://docs.python.org/2/library/__future__.html"" rel=""noreferrer""><code>__future__</code> module</a>:</p>

<pre><code>from __future__ import print_function
</code></pre>

<p>which allows you to use the Python 3 solution above.</p>

<p>However, note that the <code>flush</code> keyword is not available in the version of the <code>print</code> function imported from <code>__future__</code> in Python 2; it only works in Python 3, more specifically 3.3 and later. In earlier versions you'll still need to flush manually with a call to <code>sys.stdout.flush()</code>. You'll also have to rewrite all other print statements in the file where you do this import.</p>

<p>Or you can use <a href=""https://docs.python.org/library/sys.html#sys.stdout"" rel=""noreferrer""><code>sys.stdout.write()</code></a></p>

<pre><code>import sys
sys.stdout.write('.')
</code></pre>

<p>You may also need to call</p>

<pre><code>sys.stdout.flush()
</code></pre>

<p>to ensure <code>stdout</code> is flushed immediately.</p>
"
,
,
2626364,"
<p><a href=""https://stackoverflow.com/users/95810/alex-martelli"">Alex</a> summarized well but, surprisingly, was too succinct.</p>
<p>First, let me reiterate the main points in <a href=""https://stackoverflow.com/a/1436756/3798217"">Alexâs post</a>:</p>
<ul>
<li>The default implementation is useless (itâs hard to think of one which wouldnât be, but yeah)</li>
<li><code>__repr__</code> goal is to be unambiguous</li>
<li><code>__str__</code> goal is to be readable</li>
<li>Containerâs <code>__str__</code> uses contained objectsâ <code>__repr__</code></li>
</ul>
<p><strong>Default implementation is useless</strong></p>
<p>This is mostly a surprise because Pythonâs defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>
<pre class=""lang-python prettyprint-override""><code>return &quot;%s(%r)&quot; % (self.__class__, self.__dict__)
</code></pre>
<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>
<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> thatâs usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a âpretty printâ functionality (for example, used by a report generator).</p>
<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>
<p>Let me come right out and say it â I do not believe in debuggers. I donât really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature â most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>
<pre class=""lang-python prettyprint-override""><code>log(INFO, &quot;I am in the weird function and a is&quot;, a, &quot;and b is&quot;, b, &quot;but I got a null C â using default&quot;, default_c)
</code></pre>
<p>But you have to do the last step â make sure every object you implement has a useful repr, so code like that can just work. This is why the âevalâ thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If thatâs easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>&quot;MyClass(this=%r,that=%r)&quot; % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments â but it is a useful form to express âthis is everything you need to know about this instanceâ.</p>
<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or youâre defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass(&quot;3&quot;)</code>.</p>
<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>
<p>Specifically, it is not intended to be unambiguous â notice that <code>str(3)==str(&quot;3&quot;)</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be &quot;2010/4/12 15:35:22&quot;, etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class â as long is it supports readability, it is an improvement.</p>
<p><strong>Containerâs <code>__str__</code> uses contained objectsâ <code>__repr__</code></strong></p>
<p>This seems surprising, doesnât it? It is a little, but how readable would it be if it used their <code>__str__</code>?</p>
<pre class=""lang-python prettyprint-override""><code>[moshe is, 3, hello
world, this is a list, oh I don't know, containing just 4 elements]
</code></pre>
<p>Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when youâre printing a list, just</p>
<pre class=""lang-python prettyprint-override""><code>print(&quot;[&quot; + &quot;, &quot;.join(l) + &quot;]&quot;)
</code></pre>
<p>(you can probably also figure out what to do about dictionaries).</p>
<p><strong>Summary</strong></p>
<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of readability.</p>
"
20648053,"<p>In production, configure the HTTP server (Nginx, Apache, etc.) in front of your application to serve requests to <code>/static</code> from the static folder. A dedicated web server is very good at serving static files efficiently, although you probably won't notice a difference compared to Flask at low volumes.</p>
<p>Flask automatically creates a <code>/static/&lt;path:filename&gt;</code> route that will serve any <code>filename</code> under the <code>static</code> folder next to the Python module that defines your Flask app. Use <code>url_for</code> to link to static files: <code>url_for('static', filename='js/analytics.js')</code></p>
<p>You can also use <a href=""http://flask.palletsprojects.com/api/#flask.send_from_directory"" rel=""noreferrer""><code>send_from_directory</code></a> to serve files from a directory in your own route. This takes a base directory and a path, and ensures that the path is contained in the directory, which makes it safe to accept user-provided paths. This can be useful in cases where you want to check something before serving the file, such as if the logged in user has permission.</p>
<pre><code>from flask import send_from_directory

@app.route('/reports/&lt;path:path&gt;')
def send_report(path):
    return send_from_directory('reports', path)
</code></pre>
<p>Do <strong>not</strong> use <code>send_file</code> or <code>send_static_file</code> with a user-supplied path.  This will expose you to <a href=""https://en.m.wikipedia.org/wiki/Directory_traversal_attack"" rel=""noreferrer"">directory traversal attacks</a>.  <code>send_from_directory</code> was designed to safely handle user-supplied paths under a known directory, and will raise an error if the path attempts to escape the directory.</p>
<p>If you are generating a file in memory without writing it to the filesystem, you can pass a <code>BytesIO</code> object to <a href=""http://flask.palletsprojects.com/api/#flask.send_file"" rel=""noreferrer""><code>send_file</code></a> to serve it like a file. You'll need to pass other arguments to <code>send_file</code> in this case since it can't infer things like the file name or content type.</p>
"
1680555,"<p>You want this:</p>

<pre><code>class a:
    def __init__(self):
        self.list = []
</code></pre>

<p>Declaring the variables inside the class declaration makes them ""class"" members and not instance members. Declaring them inside the <code>__init__</code> method makes sure that a new instance of the members is created alongside every new instance of the object, which is the behavior you're looking for.</p>
"
466376,"<p><a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime"" rel=""noreferrer""><code>datetime.strptime</code></a> parses an input string in the user-specified format into a <em>timezone-naive</em> <a href=""https://docs.python.org/3/library/datetime.html#datetime-objects"" rel=""noreferrer""><code>datetime</code></a> object:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
datetime.datetime(2005, 6, 1, 13, 33)
</code></pre>
<p>To obtain a <a href=""https://docs.python.org/3/library/datetime.html#date-objects"" rel=""noreferrer""><code>date</code></a> object using an existing <code>datetime</code> object, convert it using <code>.date()</code>:</p>
<pre><code>&gt;&gt;&gt; datetime.strptime('Jun 1 2005', '%b %d %Y').date()
date(2005, 6, 1)
</code></pre>
<hr />
<p><strong>Links:</strong></p>
<ul>
<li><p><code>strptime</code> docs: <a href=""https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime"" rel=""noreferrer"" title=""datetime.datetime.strptime"">Python 2</a>, <a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime"" rel=""noreferrer"">Python 3</a></p>
</li>
<li><p><code>strptime</code>/<code>strftime</code> format string docs: <a href=""https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior"" rel=""noreferrer"" title=""strftime-and-strptime-behavior"">Python 2</a>, <a href=""https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior"" rel=""noreferrer"">Python 3</a></p>
</li>
<li><p><a href=""http://strftime.org/"" rel=""noreferrer"">strftime.org</a> format string cheatsheet</p>
</li>
</ul>
<p><strong>Notes:</strong></p>
<ul>
<li><code>strptime</code> = &quot;string parse time&quot;</li>
<li><code>strftime</code> = &quot;string format time&quot;</li>
</ul>
"
16664376,"<p>The <a href=""https://flask.palletsprojects.com/api/#flask.Request"" rel=""noreferrer"">docs</a> describe the attributes available on the <code>request</code> object (<code>from flask import request</code>) during a request. In most common cases <code>request.data</code> will be empty because it's used as a fallback:</p>
<blockquote>
<p><code>request.data</code> Contains the incoming request data as string in case it came with a mimetype Flask does not handle.</p>
</blockquote>
<ul>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.args"" rel=""noreferrer""><code>request.args</code></a>: the key/value pairs in the URL query string</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.form"" rel=""noreferrer""><code>request.form</code></a>: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.files"" rel=""noreferrer""><code>request.files</code></a>: the files in the body, which Flask keeps separate from <code>form</code>. HTML forms must use <code>enctype=multipart/form-data</code> or files will not be uploaded.</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.values"" rel=""noreferrer""><code>request.values</code></a>: combined <code>args</code> and <code>form</code>, preferring <code>args</code> if keys overlap</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.json"" rel=""noreferrer""><code>request.json</code></a>: parsed JSON data. The request must have the <code>application/json</code> content type, or use <a href=""https://flask.palletsprojects.com/api/#flask.Request.get_json"" rel=""noreferrer""><code>request.get_json(force=True)</code></a> to ignore the content type.</li>
</ul>
<p>All of these are <a href=""https://werkzeug.palletsprojects.com/datastructures/#werkzeug.datastructures.MultiDict"" rel=""noreferrer""><code>MultiDict</code></a> instances (except for <code>json</code>). You can access values using:</p>
<ul>
<li><code>request.form['name']</code>: use indexing if you know the key exists</li>
<li><code>request.form.get('name')</code>: use <code>get</code> if the key might not exist</li>
<li><code>request.form.getlist('name')</code>: use <code>getlist</code> if the key is sent multiple times and you want a list of values. <code>get</code> only returns the first value.</li>
</ul>
"
2295368,"<blockquote>
<p>What do the closures capture exactly?</p>
</blockquote>
<p>Closures in Python use lexical scoping: they remember the name and scope of the closed-over variable <em>where</em> it is created. <strong>However</strong>, they are still <em>late binding</em>: the name is looked up <em>when</em> the code in the closure is used, not when the closure is created. Since all the functions in your example are created in the same scope and use the same variable name, they always refer to the same variable.</p>
<p>There are at least two ways to get early binding instead:</p>
<ol>
<li><p>The most concise, but not strictly equivalent way is the <a href=""https://stackoverflow.com/a/2295372/181765"">one recommended by Adrien Plisson</a>. Create a lambda with an extra argument, and set the extra argument's default value to the object you want preserved.</p>
</li>
<li><p>More verbosely but also more robustly, we can create a new scope for each created lambda:</p>
<pre><code>&gt;&gt;&gt; adders = [0,1,2,3]
&gt;&gt;&gt; for i in [0,1,2,3]:
...     adders[i] = (lambda b: lambda a: b + a)(i)
...     
&gt;&gt;&gt; adders[1](3)
4
&gt;&gt;&gt; adders[2](3)
5
</code></pre>
<p>The scope here is created using a new function (another lambda, for brevity), which binds its argument, and passing the value you want to bind as the argument. In real code, though, you most likely will have an ordinary function instead of the lambda to create the new scope:</p>
<pre><code>def createAdder(x):
    return lambda y: y + x
adders = [createAdder(i) for i in range(4)]
</code></pre>
</li>
</ol>
"
100146,"<p>A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>

<p>While in Python you can use arbitrary callables for metaclasses (like <a href=""https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037"">Jerub</a> shows), the better approach is to make it an actual class itself. <code>type</code> is the usual metaclass in Python. <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>

<p>A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry or replace the class with something else entirely.</p>

<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>

<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>

<p>Here's an aggregated example of the bits and pieces:</p>

<pre><code>def make_hook(f):
    """"""Decorator to turn 'foo' method into '__foo__'""""""
    f.is_hook = 1
    return f

class MyType(type):
    def __new__(mcls, name, bases, attrs):

        if name.startswith('None'):
            return None

        # Go over attributes and see if they should be renamed.
        newattrs = {}
        for attrname, attrvalue in attrs.iteritems():
            if getattr(attrvalue, 'is_hook', 0):
                newattrs['__%s__' % attrname] = attrvalue
            else:
                newattrs[attrname] = attrvalue

        return super(MyType, mcls).__new__(mcls, name, bases, newattrs)

    def __init__(self, name, bases, attrs):
        super(MyType, self).__init__(name, bases, attrs)

        # classregistry.register(self, self.interfaces)
        print ""Would register class %s now."" % self

    def __add__(self, other):
        class AutoClass(self, other):
            pass
        return AutoClass
        # Alternatively, to autogenerate the classname as well as the class:
        # return type(self.__name__ + other.__name__, (self, other), {})

    def unregister(self):
        # classregistry.unregister(self)
        print ""Would unregister class %s now."" % self

class MyObject:
    __metaclass__ = MyType


class NoneSample(MyObject):
    pass

# Will print ""NoneType None""
print type(NoneSample), repr(NoneSample)

class Example(MyObject):
    def __init__(self, value):
        self.value = value
    @make_hook
    def add(self, other):
        return self.__class__(self.value + other.value)

# Will unregister the class
Example.unregister()

inst = Example(10)
# Will fail with an AttributeError
#inst.unregister()

print inst + inst
class Sibling(MyObject):
    pass

ExampleSibling = Example + Sibling
# ExampleSibling is now a subclass of both Example and Sibling (with no
# content of its own) although it will believe it's called 'AutoClass'
print ExampleSibling
print ExampleSibling.__mro__
</code></pre>
"
,
39923012,"<p>Use <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html"" rel=""noreferrer""><code>GroupBy.sum</code></a>:</p>
<pre><code>df.groupby(['Fruit','Name']).sum()

Out[31]: 
               Number
Fruit   Name         
Apples  Bob        16
        Mike        9
        Steve      10
Grapes  Bob        35
        Tom        87
        Tony       15
Oranges Bob        67
        Mike       57
        Tom        15
        Tony        1
</code></pre>
<p>To specify the column to sum, use this: <code>df.groupby(['Name', 'Fruit'])['Number'].sum()</code></p>
"
53218939,"<p>I know <code>object</code> dtype columns makes the data hard to convert with pandas functions. When I receive data like this, the first thing that came to mind was to &quot;flatten&quot; or unnest the columns.</p>
<p>I am using pandas and Python functions for this type of question. If you are worried about the speed of the above solutions, check out <a href=""https://stackoverflow.com/questions/53219045"">user3483203's answer</a>, since it's using numpy and most of the time numpy is faster. I recommend <a href=""https://cython.org/"" rel=""noreferrer"">Cython</a> or <a href=""http://numba.pydata.org/"" rel=""noreferrer"">numba</a> if speed matters.</p>
<hr />
<p><strong>Method 0 [pandas &gt;= 0.25]</strong>
Starting from <a href=""https://pandas.pydata.org/pandas-docs/version/0.25/user_guide/reshaping.html#exploding-a-list-like-column"" rel=""noreferrer"">pandas 0.25</a>, if you only need to explode <em>one</em> column, you can use the <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.explode.html"" rel=""noreferrer""><code>pandas.DataFrame.explode</code></a> function:</p>
<pre><code>df.explode('B')

       A  B
    0  1  1
    1  1  2
    0  2  1
    1  2  2
</code></pre>
<p>Given a dataframe with an empty <code>list</code> or a <code>NaN</code> in the column. An empty list will not cause an issue, but a <code>NaN</code> will need to be filled with a <code>list</code></p>
<pre><code>df = pd.DataFrame({'A': [1, 2, 3, 4],'B': [[1, 2], [1, 2], [], np.nan]})
df.B = df.B.fillna({i: [] for i in df.index})  # replace NaN with []
df.explode('B')

   A    B
0  1    1
0  1    2
1  2    1
1  2    2
2  3  NaN
3  4  NaN
</code></pre>
<hr />
<p><strong>Method 1</strong>
<strong><code>apply + pd.Series</code></strong> (easy to understand but in terms of performance not recommended . )</p>
<pre><code>df.set_index('A').B.apply(pd.Series).stack().reset_index(level=0).rename(columns={0:'B'})
Out[463]:
   A  B
0  1  1
1  1  2
0  2  1
1  2  2
</code></pre>
<hr />
<p><strong>Method 2</strong>
Using <code>repeat</code> with <code>DataFrame</code> constructor , re-create your dataframe (good at performance, not good at multiple columns )</p>
<pre><code>df=pd.DataFrame({'A':df.A.repeat(df.B.str.len()),'B':np.concatenate(df.B.values)})
df
Out[465]:
   A  B
0  1  1
0  1  2
1  2  1
1  2  2
</code></pre>
<p><strong>Method 2.1</strong>
for example besides A we have A.1 .....A.n. If we still use the method(<strong>Method 2</strong>) above it is hard for us to re-create the columns one by one .</p>
<p>Solution : <code>join</code> or <code>merge</code> with the <code>index</code> after 'unnest' the single columns</p>
<pre><code>s=pd.DataFrame({'B':np.concatenate(df.B.values)},index=df.index.repeat(df.B.str.len()))
s.join(df.drop('B',1),how='left')
Out[477]:
   B  A
0  1  1
0  2  1
1  1  2
1  2  2
</code></pre>
<p>If you need the column order exactly the same as before, add <code>reindex</code> at the end.</p>
<pre><code>s.join(df.drop('B',1),how='left').reindex(columns=df.columns)
</code></pre>
<hr />
<p><strong>Method 3</strong>
recreate the <code>list</code></p>
<pre><code>pd.DataFrame([[x] + [z] for x, y in df.values for z in y],columns=df.columns)
Out[488]:
   A  B
0  1  1
1  1  2
2  2  1
3  2  2
</code></pre>
<p>If more than two columns, use</p>
<pre><code>s=pd.DataFrame([[x] + [z] for x, y in zip(df.index,df.B) for z in y])
s.merge(df,left_on=0,right_index=True)
Out[491]:
   0  1  A       B
0  0  1  1  [1, 2]
1  0  2  1  [1, 2]
2  1  1  2  [1, 2]
3  1  2  2  [1, 2]
</code></pre>
<hr />
<p><strong>Method 4</strong>
using <code>reindex</code>  or <code>loc</code></p>
<pre><code>df.reindex(df.index.repeat(df.B.str.len())).assign(B=np.concatenate(df.B.values))
Out[554]:
   A  B
0  1  1
0  1  2
1  2  1
1  2  2

#df.loc[df.index.repeat(df.B.str.len())].assign(B=np.concatenate(df.B.values))
</code></pre>
<hr />
<p><strong>Method 5</strong>
when the list only contains unique values:</p>
<pre><code>df=pd.DataFrame({'A':[1,2],'B':[[1,2],[3,4]]})
from collections import ChainMap
d = dict(ChainMap(*map(dict.fromkeys, df['B'], df['A'])))
pd.DataFrame(list(d.items()),columns=df.columns[::-1])
Out[574]:
   B  A
0  1  1
1  2  1
2  3  2
3  4  2
</code></pre>
<hr />
<p><strong>Method 6</strong>
using <code>numpy</code> for high performance:</p>
<pre><code>newvalues=np.dstack((np.repeat(df.A.values,list(map(len,df.B.values))),np.concatenate(df.B.values)))
pd.DataFrame(data=newvalues[0],columns=df.columns)
   A  B
0  1  1
1  1  2
2  2  1
3  2  2
</code></pre>
<hr />
<p><strong>Method 7</strong>
using base function <code>itertools</code> <code>cycle</code> and <code>chain</code>: Pure python solution just for fun</p>
<pre><code>from itertools import cycle,chain
l=df.values.tolist()
l1=[list(zip([x[0]], cycle(x[1])) if len([x[0]]) &gt; len(x[1]) else list(zip(cycle([x[0]]), x[1]))) for x in l]
pd.DataFrame(list(chain.from_iterable(l1)),columns=df.columns)
   A  B
0  1  1
1  1  2
2  2  1
3  2  2
</code></pre>
<hr />
<p><strong>Generalizing to multiple columns</strong></p>
<pre><code>df=pd.DataFrame({'A':[1,2],'B':[[1,2],[3,4]],'C':[[1,2],[3,4]]})
df
Out[592]:
   A       B       C
0  1  [1, 2]  [1, 2]
1  2  [3, 4]  [3, 4]
</code></pre>
<p>Self-def function:</p>
<pre><code>def unnesting(df, explode):
    idx = df.index.repeat(df[explode[0]].str.len())
    df1 = pd.concat([
        pd.DataFrame({x: np.concatenate(df[x].values)}) for x in explode], axis=1)
    df1.index = idx

    return df1.join(df.drop(explode, 1), how='left')


unnesting(df,['B','C'])
Out[609]:
   B  C  A
0  1  1  1
0  2  2  1
1  3  3  2
1  4  4  2
</code></pre>
<hr />
<h3><strong>Column-wise Unnesting</strong></h3>
<p>All above method is talking about the <em><strong>vertical</strong></em> unnesting and explode , If you do need expend the list <em><strong>horizontal</strong></em>, Check with <code>pd.DataFrame</code> constructor</p>
<pre><code>df.join(pd.DataFrame(df.B.tolist(),index=df.index).add_prefix('B_'))
Out[33]:
   A       B       C  B_0  B_1
0  1  [1, 2]  [1, 2]    1    2
1  2  [3, 4]  [3, 4]    3    4
</code></pre>
<p><strong>Updated function</strong></p>
<pre><code>def unnesting(df, explode, axis):
    if axis==1:
        idx = df.index.repeat(df[explode[0]].str.len())
        df1 = pd.concat([
            pd.DataFrame({x: np.concatenate(df[x].values)}) for x in explode], axis=1)
        df1.index = idx

        return df1.join(df.drop(explode, 1), how='left')
    else :
        df1 = pd.concat([
                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) for x in explode], axis=1)
        return df1.join(df.drop(explode, 1), how='left')
</code></pre>
<p>Test Output</p>
<pre><code>unnesting(df, ['B','C'], axis=0)
Out[36]:
   B0  B1  C0  C1  A
0   1   2   1   2  1
1   3   4   3   4  2
</code></pre>
<blockquote>
<p>Update 2021-02-17 with original explode function</p>
</blockquote>
<pre><code>def unnesting(df, explode, axis):
    if axis==1:
        df1 = pd.concat([df[x].explode() for x in explode], axis=1)
        return df1.join(df.drop(explode, 1), how='left')
    else :
        df1 = pd.concat([
                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) for x in explode], axis=1)
        return df1.join(df.drop(explode, 1), how='left')
</code></pre>
"
39980744,"<blockquote>
<p><strong>Are dictionaries ordered in Python 3.6+?</strong></p>
</blockquote>
<p>They are <strong>insertion ordered</strong><sup><strong>[1]</strong></sup>.</p>
<p><strong>As of Python 3.6</strong>, for the CPython implementation of Python, dictionaries <em>remember the order of items inserted</em>. <em>This is considered an implementation detail in Python 3.6</em>; you need to use <code>OrderedDict</code> if you want insertion ordering that's <em>guaranteed</em> across other implementations of Python (and other ordered behavior<sup><strong>[1]</strong></sup>).</p>
<p><strong>As of Python 3.7</strong>, this is a guaranteed language feature, not merely an implementation detail. <a href=""https://mail.python.org/pipermail/python-dev/2017-December/151283.html"" rel=""noreferrer"">From a python-dev message by GvR</a>:</p>
<blockquote>
<p>Make it so. &quot;Dict keeps insertion order&quot; is the ruling. Thanks!</p>
</blockquote>
<p>This simply means that <em>you can depend on it</em>. Other implementations of Python must also offer an insertion ordered dictionary if they wish to be a conforming implementation of Python 3.7.</p>
<hr />
<blockquote>
<p><strong>How does the Python <code>3.6</code> dictionary implementation perform better<sup>[2]</sup> than the older one while preserving element order?</strong></p>
</blockquote>
<p>Essentially, by <em>keeping two arrays</em>.</p>
<ul>
<li><p>The first array, <a href=""https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L551"" rel=""noreferrer""><code>dk_entries</code></a>, holds the entries (<a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L4"" rel=""noreferrer"">of type <code> PyDictKeyEntry</code></a>) for the dictionary in the order that they were inserted. Preserving order is achieved by this being an append only array where new items are always inserted at the end (insertion order).</p>
</li>
<li><p>The second, <a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L70"" rel=""noreferrer""><code>dk_indices</code></a>, holds the indices for the <code>dk_entries</code> array (that is, values that indicate the position of the corresponding entry in <code>dk_entries</code>). This array acts as the hash table. When a key is hashed it leads to one of the indices stored in <code>dk_indices</code> and the corresponding entry is fetched by indexing <code>dk_entries</code>. Since only indices are kept, the type of this array depends on the overall size of the dictionary (ranging from type <a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L64"" rel=""noreferrer""><code>int8_t</code></a>(<code>1</code> byte) to <a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L66"" rel=""noreferrer""><code>int32_t</code></a>/<a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L68"" rel=""noreferrer""><code>int64_t</code></a> (<code>4</code>/<code>8</code> bytes) on <code>32</code>/<code>64</code> bit builds)</p>
</li>
</ul>
<p>In the previous implementation, a sparse array of type <code>PyDictKeyEntry</code> and size <code>dk_size</code> had to be allocated; unfortunately, it also resulted in a lot of empty space since that array was not allowed to be more than <code>2/3 * dk_size</code> full <a href=""https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375"" rel=""noreferrer"">for performance reasons</a>. (and the empty space <em>still</em> had <code>PyDictKeyEntry</code> size!).</p>
<p>This is not the case now since only the <em>required</em> entries are stored (those that have been inserted) and a sparse array of type <code>intX_t</code> (<code>X</code> depending on dict size) <code>2/3 * dk_size</code>s full is kept. The empty space changed from type <code>PyDictKeyEntry</code> to <code>intX_t</code>.</p>
<p>So, obviously, creating a sparse array of type <code>PyDictKeyEntry</code> is much more memory demanding than a sparse array for storing <code>int</code>s.</p>
<p>You can see the full conversation <a href=""https://mail.python.org/pipermail/python-dev/2016-September/146327.html"" rel=""noreferrer"">on Python-Dev</a> regarding this feature if interested, it is a good read.</p>
<hr />
<p><a href=""https://mail.python.org/pipermail/python-dev/2012-December/123028.html"" rel=""noreferrer"">In the original proposal made by Raymond Hettinger</a>, a visualization of the data structures used can be seen which captures the gist of the idea.</p>
<blockquote>
<p>For example, the dictionary:</p>
<pre><code>d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}
</code></pre>
<p>is currently stored as [keyhash, key, value]:</p>
<pre><code>entries = [['--', '--', '--'],
           [-8522787127447073495, 'barry', 'green'],
           ['--', '--', '--'],
           ['--', '--', '--'],
           ['--', '--', '--'],
           [-9092791511155847987, 'timmy', 'red'],
           ['--', '--', '--'],
           [-6480567542315338377, 'guido', 'blue']]
</code></pre>
<p>Instead, the data should be organized as follows:</p>
<pre><code>indices =  [None, 1, None, None, None, 0, None, 2]
entries =  [[-9092791511155847987, 'timmy', 'red'],
            [-8522787127447073495, 'barry', 'green'],
            [-6480567542315338377, 'guido', 'blue']]
</code></pre>
</blockquote>
<p>As you can visually now see, in the original proposal, a lot of space is essentially empty to reduce collisions and make look-ups faster. With the new approach, you reduce the memory required by moving the sparseness where it's really required, in the indices.</p>
<hr />
<sub>
[1]: I say ""insertion ordered"" and not ""ordered"" since, with the existence of OrderedDict, ""ordered"" suggests further behavior that the `dict` object *doesn't provide*. OrderedDicts are reversible, provide order sensitive methods and, mainly, provide an order-sensive equality tests (`==`, `!=`). `dict`s currently don't offer any of those behaviors/methods.
</sub>
<hr />
<sub>
[2]: The new dictionary implementations performs better **memory wise** by being designed more compactly; that's the main benefit here. Speed wise, the difference isn't so drastic, there's places where the new dict might introduce slight regressions (<a href=""https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375"" rel=""noreferrer"">key-lookups, for example</a>) while in others (iteration and resizing come to mind) a performance boost should be present. 
</sub>
<sub>
Overall, the performance of the dictionary, especially in real-life situations, improves due to the compactness introduced.  
</sub>
"
325528,"<p>It is generally a bad pattern to kill a thread abruptly, in Python, and in any language. Think of the following cases:</p>
<ul>
<li>the thread is holding a critical resource that must be closed properly</li>
<li>the thread has created several other threads that must be killed as well.</li>
</ul>
<p>The nice way of handling this, if you can afford it (if you are managing your own threads), is to have an exit_request flag that each thread checks on a regular interval to see if it is time for it to exit.</p>
<p><strong>For example:</strong></p>
<pre><code>import threading

class StoppableThread(threading.Thread):
    &quot;&quot;&quot;Thread class with a stop() method. The thread itself has to check
    regularly for the stopped() condition.&quot;&quot;&quot;

    def __init__(self,  *args, **kwargs):
        super(StoppableThread, self).__init__(*args, **kwargs)
        self._stop_event = threading.Event()

    def stop(self):
        self._stop_event.set()

    def stopped(self):
        return self._stop_event.is_set()
</code></pre>
<p>In this code, you should call <code>stop()</code> on the thread when you want it to exit, and wait for the thread to exit properly using <code>join()</code>. The thread should check the stop flag at regular intervals.</p>
<p>There are cases, however, when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls, and you want to interrupt it.</p>
<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>
<pre><code>def _async_raise(tid, exctype):
    '''Raises an exception in the threads with id tid'''
    if not inspect.isclass(exctype):
        raise TypeError(&quot;Only types can be raised (not instances)&quot;)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),
                                                     ctypes.py_object(exctype))
    if res == 0:
        raise ValueError(&quot;invalid thread id&quot;)
    elif res != 1:
        # &quot;if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect&quot;
        ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)
        raise SystemError(&quot;PyThreadState_SetAsyncExc failed&quot;)

class ThreadWithExc(threading.Thread):
    '''A thread class that supports raising an exception in the thread from
       another thread.
    '''
    def _get_my_tid(self):
        &quot;&quot;&quot;determines this (self's) thread id

        CAREFUL: this function is executed in the context of the caller
        thread, to get the identity of the thread represented by this
        instance.
        &quot;&quot;&quot;
        if not self.isAlive():
            raise threading.ThreadError(&quot;the thread is not active&quot;)

        # do we have it cached?
        if hasattr(self, &quot;_thread_id&quot;):
            return self._thread_id

        # no, look for it in the _active dict
        for tid, tobj in threading._active.items():
            if tobj is self:
                self._thread_id = tid
                return tid

        # TODO: in python 2.6, there's a simpler way to do: self.ident

        raise AssertionError(&quot;could not determine the thread's id&quot;)

    def raiseExc(self, exctype):
        &quot;&quot;&quot;Raises the given exception type in the context of this thread.

        If the thread is busy in a system call (time.sleep(),
        socket.accept(), ...), the exception is simply ignored.

        If you are sure that your exception should terminate the thread,
        one way to ensure that it works is:

            t = ThreadWithExc( ... )
            ...
            t.raiseExc( SomeException )
            while t.isAlive():
                time.sleep( 0.1 )
                t.raiseExc( SomeException )

        If the exception is to be caught by the thread, you need a way to
        check that your thread has caught it.

        CAREFUL: this function is executed in the context of the
        caller thread, to raise an exception in the context of the
        thread represented by this instance.
        &quot;&quot;&quot;
        _async_raise( self._get_my_tid(), exctype )
</code></pre>
<p>(Based on <a href=""http://tomerfiliba.com/recipes/Thread2/"" rel=""noreferrer"">Killable Threads</a> by Tomer Filiba. The quote about the return value of <code>PyThreadState_SetAsyncExc</code> appears to be from an <a href=""https://svn.python.org/projects/stackless/Python-2.4.3/dev/Python/pystate.c"" rel=""noreferrer"">old version of Python</a>.)</p>
<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>
<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>
"
480227,"<p>Here you have some alternatives: <a href=""http://www.peterbe.com/plog/uniqifiers-benchmark"" rel=""noreferrer"">http://www.peterbe.com/plog/uniqifiers-benchmark</a></p>

<p>Fastest one:</p>

<pre><code>def f7(seq):
    seen = set()
    seen_add = seen.add
    return [x for x in seq if not (x in seen or seen_add(x))]
</code></pre>

<p>Why assign <code>seen.add</code> to <code>seen_add</code> instead of just calling <code>seen.add</code>? Python is a dynamic language, and resolving <code>seen.add</code> each iteration is more costly than resolving a local variable. <code>seen.add</code> could have changed between iterations, and the runtime isn't smart enough to rule that out. To play it safe, it has to check the object each time.</p>

<p>If you plan on using this function a lot on the same dataset, perhaps you would be better off with an ordered set: <a href=""http://code.activestate.com/recipes/528878/"" rel=""noreferrer"">http://code.activestate.com/recipes/528878/</a></p>

<p><em>O</em>(1) insertion, deletion and member-check per operation.</p>

<p>(Small additional note: <code>seen.add()</code> always returns <code>None</code>, so the <em><code>or</code></em> above is there only as a way to attempt a set update, and not as an integral part of the logical test.)</p>
"
34835952,"<p><a href=""https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"" rel=""noreferrer"">From <strong>the documentation</strong>:</a></p>

<blockquote>
  <p>List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.</p>
</blockquote>

<hr>

<p>About your question, the list comprehension does the same thing as the following ""plain"" Python code:</p>

<pre><code>&gt;&gt;&gt; l = [] 
&gt;&gt;&gt; for x in range(10):
...     l.append(x**2)
&gt;&gt;&gt; l
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>

<p>How do you write it in one line? Hmm...we can...probably...use <a href=""https://docs.python.org/3/library/functions.html#map"" rel=""noreferrer""><code>map()</code></a> with <a href=""https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions"" rel=""noreferrer""><code>lambda</code></a>:</p>

<pre><code>&gt;&gt;&gt; list(map(lambda x: x**2, range(10)))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>

<p>But isn't it clearer and simpler to just use a list comprehension?</p>

<pre><code>&gt;&gt;&gt; [x**2 for x in range(10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>

<hr>

<p>Basically, we can do anything with <code>x</code>. Not only <code>x**2</code>. For example, run a method of <code>x</code>:</p>

<pre><code>&gt;&gt;&gt; [x.strip() for x in ('foo\n', 'bar\n', 'baz\n')]
['foo', 'bar', 'baz']
</code></pre>

<p>Or use <code>x</code> as another function's argument:</p>

<pre><code>&gt;&gt;&gt; [int(x) for x in ('1', '2', '3')]
[1, 2, 3]
</code></pre>

<p>We can also, for example, use <code>x</code> as the key of a <code>dict</code> object. Let's see:</p>

<pre><code>&gt;&gt;&gt; d = {'foo': '10', 'bar': '20', 'baz': '30'}
&gt;&gt;&gt; [d[x] for x in ['foo', 'baz']]
['10', '30']
</code></pre>

<p>How about a combination?  </p>

<pre><code>&gt;&gt;&gt; d = {'foo': '10', 'bar': '20', 'baz': '30'}
&gt;&gt;&gt; [int(d[x].rstrip('0')) for x in ['foo', 'baz']]
[1, 3]
</code></pre>

<p>And so on.</p>

<hr>

<p>You can also use <code>if</code> or <code>if...else</code> in a list comprehension. For example, you only want odd numbers in <code>range(10)</code>. You can do:</p>

<pre><code>&gt;&gt;&gt; l = []
&gt;&gt;&gt; for x in range(10):
...     if x%2:
...         l.append(x)
&gt;&gt;&gt; l
[1, 3, 5, 7, 9]
</code></pre>

<p>Ah that's too complex. What about the following version?</p>

<pre><code>&gt;&gt;&gt; [x for x in range(10) if x%2]
[1, 3, 5, 7, 9]
</code></pre>

<p>To use an <code>if...else</code> ternary expression, you need put the <code>if ... else ...</code> after <code>x</code>, <strong>not</strong> after <code>range(10)</code>:</p>

<pre><code>&gt;&gt;&gt; [i if i%2 != 0 else None for i in range(10)]
[None, 1, None, 3, None, 5, None, 7, None, 9]
</code></pre>

<hr>

<p>Have you heard about <a href=""https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions"" rel=""noreferrer""><strong>nested list comprehension</strong></a>? You can put <em>two or more <code>for</code>s in one list comprehension</em>. For example:</p>

<pre><code>&gt;&gt;&gt; [i for x in [[1, 2, 3], [4, 5, 6]] for i in x]
[1, 2, 3, 4, 5, 6]

&gt;&gt;&gt; [j for x in [[[1, 2], [3]], [[4, 5], [6]]] for i in x for j in i]
[1, 2, 3, 4, 5, 6]
</code></pre>

<p>Let's talk about the first part, <code>for x in [[1, 2, 3], [4, 5, 6]]</code> which gives <code>[1, 2, 3]</code> and <code>[4, 5, 6]</code>. Then, <code>for i in x</code> gives <code>1</code>, <code>2</code>, <code>3</code> and <code>4</code>, <code>5</code>, <code>6</code>. </p>

<p><strong>Warning:</strong> You always need put <code>for x in [[1, 2, 3], [4, 5, 6]]</code> <strong>before</strong> <code>for i in x</code>:</p>

<pre><code>&gt;&gt;&gt; [j for j in x for x in [[1, 2, 3], [4, 5, 6]]]
Traceback (most recent call last):
  File ""&lt;input&gt;"", line 1, in &lt;module&gt;
NameError: name 'x' is not defined
</code></pre>

<hr>

<p>We also have <em>set comprehensions</em>, <em>dict comprehensions</em>, and <em>generator expressions</em>.</p>

<p><strong>set comprehensions</strong> and list comprehensions are basically the same, but the former returns a <em>set</em> instead of a <em>list</em>:</p>

<pre><code>&gt;&gt;&gt; {x for x in [1, 1, 2, 3, 3, 1]}
{1, 2, 3}
</code></pre>

<p>It's the same as:</p>

<pre><code>&gt;&gt;&gt; set([i for i in [1, 1, 2, 3, 3, 1]])
{1, 2, 3}
</code></pre>

<p>A <a href=""https://www.python.org/dev/peps/pep-0274/"" rel=""noreferrer""><strong>dict comprehension</strong></a> <em>looks like</em> a set comprehension, but it uses <code>{key: value for key, value in ...}</code> or <code>{i: i for i in ...}</code> instead of  <code>{i for i in ...}</code>.</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; {i: i**2 for i in range(5)}
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
</code></pre>

<p>And it equals:</p>

<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for i in range(5):
...     d[i] = i**2
&gt;&gt;&gt; d
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
</code></pre>

<p>Does <code>(i for i in range(5))</code> give a <em>tuple</em>? No!, it's a <a href=""https://www.python.org/dev/peps/pep-0289/"" rel=""noreferrer""><strong>generator expression</strong></a>. Which returns a <strong>generator</strong>:</p>

<pre><code>&gt;&gt;&gt; (i for i in range(5))
&lt;generator object &lt;genexpr&gt; at 0x7f52703fbca8&gt;
</code></pre>

<p>It's the same as:</p>

<pre><code>&gt;&gt;&gt; def gen():
...     for i in range(5):
...         yield i
&gt;&gt;&gt; gen()
&lt;generator object gen at 0x7f5270380db0&gt;
</code></pre>

<p>And you can use it as a generator:</p>

<pre><code>&gt;&gt;&gt; gen = (i for i in range(5))
&gt;&gt;&gt; next(gen)
0
&gt;&gt;&gt; next(gen)
1
&gt;&gt;&gt; list(gen)
[2, 3, 4]
&gt;&gt;&gt; next(gen)
Traceback (most recent call last):
  File ""&lt;input&gt;"", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<p><strong>Note:</strong> If you use a list comprehension <em>inside a function</em>, you don't need the <code>[]</code> if that function could loop over a generator. For example, <a href=""https://docs.python.org/3/library/functions.html#sum"" rel=""noreferrer""><code>sum()</code></a>:</p>

<pre><code>&gt;&gt;&gt; sum(i**2 for i in range(5))
30
</code></pre>

<p><strong>Related</strong> (about generators): <a href=""https://stackoverflow.com/questions/1756096/understanding-generators-in-python"">Understanding Generators in Python</a>.</p>
"
3431699,"<p>You're running into a problem with <em>late binding</em> -- each function looks up <code>i</code> as late as possible (thus, when called after the end of the loop, <code>i</code> will be set to <code>2</code>).  </p>

<p>Easily fixed by forcing early binding: change <code>def f():</code> to <code>def f(i=i):</code> like this:</p>

<pre><code>def f(i=i):
    return i
</code></pre>

<p>Default values (the right-hand <code>i</code> in <code>i=i</code> is a default value for argument name <code>i</code>, which is the left-hand <code>i</code> in <code>i=i</code>) are looked up at <code>def</code> time, not at <code>call</code> time, so essentially they're a way to specifically looking for early binding.</p>

<p>If you're worried about <code>f</code> getting an extra argument (and thus potentially being called erroneously), there's a more sophisticated way which involved using a closure as a ""function factory"":</p>

<pre><code>def make_f(i):
    def f():
        return i
    return f
</code></pre>

<p>and in your loop use <code>f = make_f(i)</code> instead of the <code>def</code> statement.</p>
"
2600208,"<p>If you only want a single item's count, use the <code>count</code> method:</p>
<pre><code>&gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)
3
</code></pre>
<hr />
<h4><strong>Important: this is very slow if you are counting <em>multiple</em> different items</strong></h4>
<p>Each <code>count</code> call goes over the entire list of <code>n</code> elements. Calling <code>count</code> in a loop <code>n</code> times means <code>n * n</code> total checks, which can be catastrophic for performance.</p>
<p>If you want to count multiple items, use <a href=""https://stackoverflow.com/a/5829377/365102""><code>Counter</code></a>, which only does <code>n</code> total checks.</p>
"
15705958,"<p>Firstly, we can get the max count for each group like this:</p>
<pre><code>In [1]: df
Out[1]:
    Sp  Mt Value  count
0  MM1  S1     a      3
1  MM1  S1     n      2
2  MM1  S3    cb      5
3  MM2  S3    mk      8
4  MM2  S4    bg     10
5  MM2  S4   dgd      1
6  MM4  S2    rd      2
7  MM4  S2    cb      2
8  MM4  S2   uyi      7

In [2]: df.groupby(['Sp', 'Mt'])['count'].max()
Out[2]:
Sp   Mt
MM1  S1     3
     S3     5
MM2  S3     8
     S4    10
MM4  S2     7
Name: count, dtype: int64
</code></pre>
<p>To get the indices of the original DF you can do:</p>
<pre><code>In [3]: idx = df.groupby(['Sp', 'Mt'])['count'].transform(max) == df['count']

In [4]: df[idx]
Out[4]:
    Sp  Mt Value  count
0  MM1  S1     a      3
2  MM1  S3    cb      5
3  MM2  S3    mk      8
4  MM2  S4    bg     10
8  MM4  S2   uyi      7
</code></pre>
<p>Note that if you have multiple max values per group, all will be returned.</p>
<hr />
<p><strong>Update</strong></p>
<p>On a Hail Mary chance that this is what the OP is requesting:</p>
<pre><code>In [5]: df['count_max'] = df.groupby(['Sp', 'Mt'])['count'].transform(max)

In [6]: df
Out[6]:
    Sp  Mt Value  count  count_max
0  MM1  S1     a      3          3
1  MM1  S1     n      2          3
2  MM1  S3    cb      5          5
3  MM2  S3    mk      8          8
4  MM2  S4    bg     10         10
5  MM2  S4   dgd      1         10
6  MM4  S2    rd      2          7
7  MM4  S2    cb      2          7
8  MM4  S2   uyi      7          7
</code></pre>
"
2953843,"<p>you can use always:</p>

<pre><code>'C:/mydir'
</code></pre>

<p>this works both in linux and windows.
Other posibility is</p>

<pre><code>'C:\\mydir'
</code></pre>

<p>if you have problems with some names you can also try raw string literals:</p>

<pre><code>r'C:\mydir'
</code></pre>

<p>however best practice is to use the <code>os.path</code> module functions that always select the correct configuration for your OS:</p>

<pre><code>os.path.join(mydir, myfile)
</code></pre>

<p>From python 3.4 you can also use the <a href=""https://docs.python.org/3/library/pathlib.html#operators"" rel=""noreferrer"">pathlib</a> module. This is equivelent to the above:</p>

<pre><code>pathlib.Path(mydir, myfile)
</code></pre>

<p>or</p>

<pre><code>pathlib.Path(mydir) / myfile
</code></pre>
"
902417,"<pre><code>cursor.execute(&quot;INSERT INTO table VALUES (%s, %s, %s)&quot;, (var1, var2, var3))
</code></pre>
<p>Note that the parameters are passed as a tuple, <code>(a, b, c)</code>. If you're passing a single parameter, the tuple needs to end with a comma, <code>(a,)</code>.</p>
<p>The database API does proper escaping and quoting of variables. Be careful not to use the string formatting operator (<code>%</code>), because</p>
<ol>
<li>It does not do any escaping or quoting.</li>
<li>It is prone to uncontrolled string format attacks e.g. <a href=""http://en.wikipedia.org/wiki/SQL_injection"" rel=""nofollow noreferrer"">SQL injection</a>.</li>
</ol>
"
133024,"<p><code>is</code> will return <code>True</code> if two variables point to the same object (in memory), <code>==</code> if the objects referred to by the variables are equal.</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a 
True
&gt;&gt;&gt; b == a
True

# Make a new copy of list `a` via the slice operator, 
# and assign it to variable `b`
&gt;&gt;&gt; b = a[:] 
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b == a
True
</code></pre>
<p>In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:</p>
<pre><code>&gt;&gt;&gt; 1000 is 10**3
False
&gt;&gt;&gt; 1000 == 10**3
True
</code></pre>
<p>The same holds true for string literals:</p>
<pre><code>&gt;&gt;&gt; &quot;a&quot; is &quot;a&quot;
True
&gt;&gt;&gt; &quot;aa&quot; is &quot;a&quot; * 2
True
&gt;&gt;&gt; x = &quot;a&quot;
&gt;&gt;&gt; &quot;aa&quot; is x * 2
False
&gt;&gt;&gt; &quot;aa&quot; is intern(x*2)
True
</code></pre>
<p>Please see <a href=""https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none"">this question</a> as well.</p>
"
,
1301369,"<h2>Single Underscore</h2>
<p>In a class, names with a leading underscore indicate to other programmers that the attribute or method is intended to be be used inside that class. However, privacy is not <em>enforced</em> in any way.
Using leading underscores for functions in a module indicates it should not be imported from somewhere else.</p>
<p>From the <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""noreferrer"">PEP-8</a> style guide:</p>
<blockquote>
<p><code>_single_leading_underscore</code>: weak &quot;internal use&quot; indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>
</blockquote>
<h2>Double Underscore (Name Mangling)</h2>
<p>From <a href=""https://docs.python.org/3/tutorial/classes.html#private-variables"" rel=""noreferrer"">the Python docs</a>:</p>
<blockquote>
<p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes.</p>
</blockquote>
<p>And a warning from the same page:</p>
<blockquote>
<p>Name mangling is intended to give classes an easy way to define âprivateâ instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; <em>it still is possible for a determined soul to access or modify a variable that is considered private.</em></p>
</blockquote>
<h2>Example</h2>
<pre><code>&gt;&gt;&gt; class MyClass():
...     def __init__(self):
...             self.__superprivate = &quot;Hello&quot;
...             self._semiprivate = &quot;, world!&quot;
...
&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; print mc.__superprivate
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: myClass instance has no attribute '__superprivate'
&gt;&gt;&gt; print mc._semiprivate
, world!
&gt;&gt;&gt; print mc.__dict__
{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}
</code></pre>
"
18415320,"<p>There is a third party library for this on PyPI called <a href=""https://github.com/SethMMorton/natsort"" rel=""nofollow noreferrer"">natsort</a> (full disclosure, I am the package's author).  For your case, you can do either of the following:</p>
<pre><code>&gt;&gt;&gt; from natsort import natsorted, ns
&gt;&gt;&gt; x = ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']
&gt;&gt;&gt; natsorted(x, key=lambda y: y.lower())
['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']
&gt;&gt;&gt; natsorted(x, alg=ns.IGNORECASE)  # or alg=ns.IC
['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']
</code></pre>
<p>You should note that <code>natsort</code> uses a general algorithm so it should work for just about any input that you throw at it. If you want more details on why you might choose a library to do this rather than rolling your own function, check out the <code>natsort</code> documentation's <a href=""http://natsort.readthedocs.io/en/stable/howitworks.html"" rel=""nofollow noreferrer"">How It Works</a> page, in particular the <a href=""http://natsort.readthedocs.io/en/stable/howitworks.html#special-cases-everywhere"" rel=""nofollow noreferrer"">Special Cases Everywhere!</a> section.</p>
<hr />
<p>If you need a sorting key instead of a sorting function, use either of the below formulas.</p>
<pre><code>&gt;&gt;&gt; from natsort import natsort_keygen, ns
&gt;&gt;&gt; l1 = ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']
&gt;&gt;&gt; l2 = l1[:]
&gt;&gt;&gt; natsort_key1 = natsort_keygen(key=lambda y: y.lower())
&gt;&gt;&gt; l1.sort(key=natsort_key1)
&gt;&gt;&gt; l1
['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']
&gt;&gt;&gt; natsort_key2 = natsort_keygen(alg=ns.IGNORECASE)
&gt;&gt;&gt; l2.sort(key=natsort_key2)
&gt;&gt;&gt; l2
['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']
</code></pre>
<hr />
<p><strong>Update November 2020</strong></p>
<p>Given that a popular request/question is &quot;how to sort like Windows Explorer?&quot; (or whatever is your operating system's file system browser), as of <code>natsort</code> version 7.1.0 there is a function called <a href=""https://natsort.readthedocs.io/en/stable/api.html#natsort.os_sorted"" rel=""nofollow noreferrer""><code>os_sorted</code></a> to do exactly this. On Windows, it will sort in the same order as Windows Explorer, and on other operating systems it should sort like whatever is the local file system browser.</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; from natsort import os_sorted
&gt;&gt;&gt; os_sorted(list_of_paths)
# your paths sorted like your file system browser
</code></pre>
<p>For those needing a sort key, you can use <code>os_sort_keygen</code> (or <code>os_sort_key</code> if you just need the defaults).</p>
<p><em>Caveat</em> - Please read the API documentation for this function before you use to understand the limitations and how to get best results.</p>
"
7961390,"<p>The common approach to get a unique collection of items is to use a <a href=""http://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset"" rel=""noreferrer""><code>set</code></a>. Sets are <em>unordered</em> collections of <em>distinct</em> objects. To create a set from any iterable, you can simply pass it to the built-in <a href=""http://docs.python.org/3/library/functions.html#func-set"" rel=""noreferrer""><code>set()</code></a> function. If you later need a real list again, you can similarly pass the set to the <a href=""http://docs.python.org/3/library/functions.html#func-list"" rel=""noreferrer""><code>list()</code></a> function.</p>
<p>The following example should cover whatever you are trying to do:</p>
<pre><code>&gt;&gt;&gt; t = [1, 2, 3, 1, 2, 3, 5, 6, 7, 8]
&gt;&gt;&gt; list(set(t))
[1, 2, 3, 5, 6, 7, 8]
&gt;&gt;&gt; s = [1, 2, 3]
&gt;&gt;&gt; list(set(t) - set(s))
[8, 5, 6, 7]
</code></pre>
<p>As you can see from the example result, <em>the original order is not maintained</em>. As mentioned above, sets themselves are unordered collections, so the order is lost. When converting a set back to a list, an arbitrary order is created.</p>
<h3>Maintaining order</h3>
<p>If order is important to you, then you will have to use a different mechanism. A very common solution for this is to rely on <a href=""https://docs.python.org/3/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>OrderedDict</code></a> to keep the order of keys during insertion:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; list(OrderedDict.fromkeys(t))
[1, 2, 3, 5, 6, 7, 8]
</code></pre>
<p><a href=""https://mail.python.org/pipermail/python-dev/2017-December/151283.html"" rel=""noreferrer"">Starting with Python 3.7</a>, the built-in dictionary is guaranteed to maintain the insertion order as well, so you can also use that directly if you are on Python 3.7 or later (or CPython 3.6):</p>
<pre><code>&gt;&gt;&gt; list(dict.fromkeys(t))
[1, 2, 3, 5, 6, 7, 8]
</code></pre>
<p>Note that this may have some overhead of creating a dictionary first, and then creating a list from it. If you donât actually need to preserve the order, youâre often better off using a set, especially because it gives you a lot more operations to work with. Check out <a href=""https://stackoverflow.com/q/480214/216074"">this question</a> for more details and alternative ways to preserve the order when removing duplicates.</p>
<hr />
<p>Finally note that both the <code>set</code> as well as the <code>OrderedDict</code>/<code>dict</code> solutions require your items to be <em>hashable</em>. This usually means that they have to be immutable. If you have to deal with items that are not hashable (e.g. list objects), then you will have to use a slow approach in which you will basically have to compare every item with every other item in a nested loop.</p>
"
32825482,"<p>You can't use global variables to hold this sort of data. Not only is it not thread safe, it's not <em>process</em> safe, and WSGI servers in production spawn multiple processes. Not only would your counts be wrong if you were using threads to handle requests, they would also vary depending on which process handled the request.</p>

<p>Use a data source outside of Flask to hold global data. A database, memcached, or redis are all appropriate separate storage areas, depending on your needs. If you need to load and access Python data, consider <a href=""https://stackoverflow.com/a/28426819""><code>multiprocessing.Manager</code></a>. You could also use the session for simple data that is per-user.</p>

<hr>

<p>The development server may run in single thread and process. You won't see the behavior you describe since each request will be handled synchronously. Enable threads or processes and you will see it. <code>app.run(threaded=True)</code> or <code>app.run(processes=10)</code>. (In 1.0 the server is threaded by default.)</p>

<hr>

<p>Some WSGI servers may support gevent or another async worker. Global variables are still not thread safe because there's still no protection against most race conditions. You can still have a scenario where one worker gets a value, yields, another modifies it, yields, then the first worker also modifies it.</p>

<hr>

<p>If you need to store some global data <em>during</em> a request, you may use Flask's <a href=""http://flask.pocoo.org/docs/1.0/api/#flask.g"" rel=""noreferrer""><code>g</code> object</a>. Another common case is some top-level object that manages database connections. The distinction for this type of ""global"" is that it's unique to each request, not used <em>between</em> requests, and there's something managing the set up and teardown of the resource.</p>
"
67692,"<p>For Python 3.5+ use (<a href=""https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly"" rel=""noreferrer"">docs</a>):</p>
<pre><code>import importlib.util
import sys
spec = importlib.util.spec_from_file_location(&quot;module.name&quot;, &quot;/path/to/file.py&quot;)
foo = importlib.util.module_from_spec(spec)
sys.modules[&quot;module.name&quot;] = foo
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>
<p>For Python 3.3 and 3.4 use:</p>
<pre><code>from importlib.machinery import SourceFileLoader

foo = SourceFileLoader(&quot;module.name&quot;, &quot;/path/to/file.py&quot;).load_module()
foo.MyClass()
</code></pre>
<p>(Although this has been deprecated in Python 3.4.)</p>
<p>For Python 2 use:</p>
<pre><code>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</code></pre>
<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>
<p>See also <a href=""http://bugs.python.org/issue21436"" rel=""noreferrer"">http://bugs.python.org/issue21436</a>.</p>
"
,
19158418,"<p>This has nothing to do with Python; global variables are bad in any programming language.</p>

<p><strong>However, global constants</strong> are not conceptually the same as <strong>global variables</strong>; global constants are perfectly harmless. In Python the distinction between the two is purely by convention: <code>CONSTANTS_ARE_CAPITALIZED</code> and <code>globals_are_not</code>.</p>

<p>The reason global variables are bad is that they enable functions to have hidden (non-obvious, surprising, hard to detect, hard to diagnose) side effects, leading to an increase in complexity, potentially leading to <a href=""https://en.wikipedia.org/wiki/Spaghetti_code"" rel=""noreferrer"">Spaghetti code</a>.</p>

<p>However, sane use of global state is acceptable (as is local state and mutability) even in functional programming, either for algorithm optimization, reduced complexity, caching and memoization, or the practicality of porting structures originating in a predominantly imperative codebase.</p>

<p>All in all, your question can be answered in many ways, so your best bet is to just google ""why are global variables bad"". Some examples:</p>

<ul>
<li><a href=""http://c2.com/cgi/wiki?GlobalVariablesAreBad"" rel=""noreferrer"">Global Variables Are Bad - Wiki Wiki Web</a></li>
<li><a href=""https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil"">Why is Global State so Evil? - Software Engineering Stack Exchange</a></li>
<li><a href=""https://stackoverflow.com/questions/484635/are-global-variables-bad"">Are global variables bad?</a></li>
</ul>

<p>If you want to go deeper and find out why side effects are all about, and many other enlightening things, you should learn Functional Programming:</p>

<ul>
<li><a href=""https://en.wikipedia.org/wiki/Side_effect_(computer_science)"" rel=""noreferrer"">Side effect (computer science) - Wikipedia</a></li>
<li><a href=""https://softwareengineering.stackexchange.com/questions/15269/why-are-side-effects-considered-evil-in-functional-programming"">Why are side-effects considered evil in functional programming? - Software Engineering Stack Exchange</a></li>
<li><a href=""https://en.wikipedia.org/wiki/Functional_programming"" rel=""noreferrer"">Functional programming - Wikipedia</a></li>
</ul>
"
739665,"<p>Check out <a href=""http://docs.python.org/reference/compound_stmts.html#function"" rel=""noreferrer"">the documentation</a> to see how decorators work. Here is what you asked for:</p>
<pre><code>from functools import wraps

def makebold(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        return &quot;&lt;b&gt;&quot; + fn(*args, **kwargs) + &quot;&lt;/b&gt;&quot;
    return wrapper

def makeitalic(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        return &quot;&lt;i&gt;&quot; + fn(*args, **kwargs) + &quot;&lt;/i&gt;&quot;
    return wrapper

@makebold
@makeitalic
def hello():
    return &quot;hello world&quot;

@makebold
@makeitalic
def log(s):
    return s

print hello()        # returns &quot;&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;&quot;
print hello.__name__ # with functools.wraps() this returns &quot;hello&quot;
print log('hello')   # returns &quot;&lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;&quot;
</code></pre>
"
464882,"<p>Have a look at <a href=""http://docs.python.org/library/itertools.html#itertools.combinations"" rel=""noreferrer"">itertools.combinations</a>:</p>

<blockquote>
<pre><code>itertools.combinations(iterable, r)
</code></pre>
  
  <p>Return r length subsequences of elements from
  the input iterable.</p>
  
  <p>Combinations are emitted in lexicographic sort order. So, if the
  input iterable is sorted, the
  combination tuples will be produced in
  sorted order.</p>
</blockquote>

<p>Since 2.6, batteries are included!</p>
"
3294899,"<p><code>key</code> is just a variable name.  </p>

<pre><code>for key in d:
</code></pre>

<p>will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:</p>

<p>For Python 3.x:</p>

<pre><code>for key, value in d.items():
</code></pre>

<p>For Python 2.x:</p>

<pre><code>for key, value in d.iteritems():
</code></pre>

<p>To test for yourself, change the word <code>key</code> to <code>poop</code>.</p>

<p>In Python 3.x, <code>iteritems()</code> was replaced with simply <code>items()</code>, which returns a set-like view backed by the dict, like <code>iteritems()</code> but even better. 
This is also available in 2.7 as <code>viewitems()</code>. </p>

<p>The operation <code>items()</code> will work for both 2 and 3, but in 2 it will return a list of the dictionary's <code>(key, value)</code> pairs, which will not reflect changes to the dict that happen after the <code>items()</code> call. If you want the 2.x behavior in 3.x, you can call <code>list(d.items())</code>.</p>
"
,
8949265,"<p>NoneType means that instead of an instance of whatever Class or Object you think you're working with, you've actually got <code>None</code>.  That usually means that an assignment or function call up above failed or returned an unexpected result.</p>
"
47995294,"<h2>NoSuchElementException</h2>

<p><em>selenium.common.exceptions.NoSuchElementException</em> popularly known as <code>NoSuchElementException</code> is defined as :</p>

<pre><code>exception selenium.common.exceptions.NoSuchElementException(msg=None, screen=None, stacktrace=None)
</code></pre>

<p><code>NoSuchElementException</code> is basically thrown in 2 cases as follows :</p>

<ul>
<li><p>When using :</p>

<pre><code>webdriver.find_element_by_*(""expression"")
//example : my_element = driver.find_element_by_xpath(""xpath_expression"")
</code></pre></li>
<li><p>When using :</p>

<pre><code>element.find_element_by_*(""expression"")
//example : my_element = element.find_element_by_*(""expression"")
</code></pre></li>
</ul>

<p>As per the API Docs just like any other <code>selenium.common.exceptions</code>, <code>NoSuchElementException</code> should contain the following parameters :</p>

<ul>
<li><p>msg, screen, stacktrace</p>

<pre><code>    raise exception_class(message, screen, stacktrace)
selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {""method"":""xpath"",""selector"":"".//*[@id='create-portal-popup']/div[4]/div[1]/button[3]""}
  (Session info: chrome=61.0.3163.100)
  (Driver info: chromedriver=2.32.498550 (9dec58e66c31bcc53a9ce3c7226f0c1c5810906a),platform=Windows NT 10.0.10240 x86_64)
</code></pre></li>
</ul>

<hr>

<h2>Reason</h2>

<p>The reason for <em>NoSuchElementException</em> can be either of the following :</p>

<ul>
<li>The <em>Locator Strategy</em> you have adopted doesn't identifies any element in the <a href=""https://www.w3schools.com/js/js_htmldom.asp"" rel=""noreferrer""><strong>HTML DOM</strong></a>.</li>
<li>The <em>Locator Strategy</em> you have adopted is unable to identify the element as it is not within the browser's <a href=""https://www.w3schools.com/css/css_rwd_viewport.asp"" rel=""noreferrer"">Viewport</a>.</li>
<li>The <em>Locator Strategy</em> you have adopted identifies the element but is invisible due to presence of the attribute <strong>style=""display: none;""</strong>.</li>
<li>The <em>Locator Strategy</em> you have adopted doesn't <strong>uniquely</strong> identifies the desired element in the <em>HTML DOM</em> and currently finds some other <em>hidden</em> / <em>invisible</em> element.</li>
<li>The <em>WebElement</em> you are trying to locate is within an <code>&lt;iframe&gt;</code> tag.</li>
<li>The <em>WebDriver</em> instance is looking out for the <em>WebElement</em> even before the element is present/visibile within the <em>HTML DOM</em>.</li>
</ul>

<hr>

<h2>Solution</h2>

<p>The solution to address <em>NoSuchElementException</em> can be either of the following :</p>

<ul>
<li><p>Adopt a <a href=""https://stackoverflow.com/questions/48369043/official-locator-strategies-for-the-webdriver/48376890#48376890"">Locator Strategy</a> which uniquely identifies the desired <em>WebElement</em>. You can take help of the <em>Developer Tools</em> (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd> or <kbd>F12</kbd>) and use <em>Element Inspector</em>. </p>

<p>Here you will find a detailed discussion on <a href=""https://stackoverflow.com/questions/46700764/how-to-inspect-element-in-selenium3-6-as-firebug-is-not-an-option-any-more-for-f/46702281#46702281"">how to inspect element in selenium3.6 as firebug is not an option any more for FF 56?</a></p></li>
<li><p>Use <a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script"" rel=""noreferrer""><strong><code>execute_script()</code></strong></a> method to scroll the element in to view as follows :</p>

<pre><code>elem = driver.find_element_by_xpath(""element_xpath"")
driver.execute_script(""arguments[0].scrollIntoView();"", elem)
</code></pre>

<p>Here you will find a detailed discussion on <a href=""https://stackoverflow.com/questions/45576958/scrolling-to-top-of-the-page-in-python-using-selenium/45581830#45581830"">Scrolling to top of the page in Python using Selenium</a></p></li>
<li><p>Incase element is having the attribute <strong>style=""display: none;""</strong>, remove the attribute  through <code>executeScript()</code> method as follows :</p>

<pre><code>elem = driver.find_element_by_xpath(""element_xpath"")
driver.execute_script(""arguments[0].removeAttribute('style')"", elem)
elem.send_keys(""text_to_send"")
</code></pre></li>
<li><p>To check if the element is within an <code>&lt;iframe&gt;</code> traverse up the <em>HTML</em> to locate the respective <code>&lt;iframe&gt;</code> tag and <code>switchTo()</code> the desired <em>iframe</em> through either of the following methods :</p>

<pre><code>driver.switch_to.frame(""iframe_name"")
driver.switch_to.frame(""iframe_id"")
driver.switch_to.frame(1) // 1 represents frame index
</code></pre>

<p>Here you can find a detailed discussion on <a href=""https://stackoverflow.com/questions/47770144/how-can-i-select-a-html-element-no-matter-what-frame-it-is-in-in-selenium/47771879#47771879"">How can I select a html element no matter what frame it is in in selenium?</a>.</p></li>
<li><p>If the element is not <em>present</em>/<em>visible</em> in the <em>HTML DOM</em> immediately, induce <a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.wait.html#module-selenium.webdriver.support.wait"" rel=""noreferrer"">WebDriverWait</a> with <a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions"" rel=""noreferrer"">expected_conditions</a> set to proper method as follows :</p>

<ul>
<li><p>To wait for <a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.presence_of_element_located"" rel=""noreferrer""><strong>presence_of_element_located</strong></a> :</p>

<pre><code>element = WebDriverWait(driver, 20).until(expected_conditions.presence_of_element_located((By.XPATH, ""element_xpath']"")))
</code></pre></li>
<li><p>To wait for <a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.visibility_of_element_located"" rel=""noreferrer""><strong>visibility_of_element_located</strong></a> :</p>

<pre><code>element = WebDriverWait(driver, 20).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ""element_css"")
</code></pre></li>
<li><p>To wait for <a href=""https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.element_to_be_clickable"" rel=""noreferrer""><strong>element_to_be_clickable</strong></a> :</p>

<pre><code>element = WebDriverWait(driver, 20).until(expected_conditions.element_to_be_clickable((By.LINK_TEXT, ""element_link_text"")))
</code></pre></li>
</ul></li>
</ul>

<hr>

<h2>This Usecase</h2>

<p>You are seeing <code>NoSuchElementException</code> because the <em>id</em> locator doesn't identifies the <strong>canvas</strong> uniquely. To identify the canvas and <code>click()</code> on it you have to wait for the <strong>canvas</strong> to be <code>clickable</code> and to achieve that you can use the following code block :</p>

<pre><code>WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, ""//canvas[@id='window1']""))).click()
</code></pre>

<hr>

<h2>Reference</h2>

<p>You can find <a href=""https://stackoverflow.com/questions/54459701/what-is-selenium-and-what-is-webdriver/54482491#54482491"">Selenium</a>'s <a href=""/questions/tagged/java"" class=""post-tag"" title=""show questions tagged &#39;java&#39;"" rel=""tag"">java</a> client based relevant discussion in:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/48471321/nosuchelementexception-selenium-unable-to-locate-element/48472940#48472940"">NoSuchElementException, Selenium unable to locate element</a></li>
</ul>
"
522578,"<p>Use the built-in function <a href=""https://docs.python.org/3/library/functions.html#enumerate"" rel=""noreferrer"" title=""enumerate""><code>enumerate()</code></a>:</p>
<pre><code>for idx, x in enumerate(xs):
    print(idx, x)
</code></pre>
<p>It is <em><a href=""https://stackoverflow.com/questions/25011078/what-does-pythonic-mean"">non-pythonic</a></em> to manually index via <code>for i in range(len(xs)): x = xs[i]</code> or manually manage an additional state variable.</p>
<p>Check out <a href=""https://www.python.org/dev/peps/pep-0279/"" rel=""noreferrer"" title=""PEP 279"">PEP 279</a> for more.</p>
"
3172488,"<p>The benefit of not calling via the shell is that you are not invoking a 'mystery program.'  On POSIX, the environment variable <code>SHELL</code> controls which binary is invoked as the ""shell.""  On Windows, there is no bourne shell descendent, only cmd.exe.</p>

<p>So invoking the shell invokes a program of the user's choosing and is platform-dependent.  Generally speaking, avoid invocations via the shell.</p>

<p>Invoking via the shell does allow you to expand environment variables and file globs according to the shell's usual mechanism.  On POSIX systems, the shell expands file globs to a list of files.  On Windows, a file glob (e.g., ""*.*"") is not expanded by the shell, anyway (but environment variables on a command line <em>are</em> expanded by cmd.exe).</p>

<p>If you think you want environment variable expansions and file globs, research the <code>ILS</code> attacks of 1992-ish on network services which performed subprogram invocations via the shell.  Examples include the various <code>sendmail</code> backdoors involving <code>ILS</code>.</p>

<p>In summary, use <code>shell=False</code>.</p>
"
39983806,"<p>As the comments described, it just refers to values which are evaluated to True or False.</p>

<p>For instance, to see if a list is not empty, instead of checking like this:</p>

<pre><code>if len(my_list) != 0:
   print(""Not empty!"")
</code></pre>

<p>You can simply do this:</p>

<pre><code>if my_list:
   print(""Not empty!"")
</code></pre>

<p>This is because some values, such as empty lists, are considered False when evaluated for a boolean value. Non-empty lists are True.</p>

<p>Similarly for the integer 0, the empty string """", and so on, for False, and non-zero integers, non-empty strings, and so on, for True.</p>

<p>The idea of terms like ""truthy"" and ""falsy"" simply refer to those values which are considered True in cases like those described above, and those which are considered False.</p>

<p>For example, an empty list (<code>[]</code>) is considered ""falsy"", and a non-empty list (for example, <code>[1]</code>) is considered ""truthy"".</p>

<p>See also <a href=""https://docs.python.org/3/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">this section of the documentation</a>.</p>
"
582337,"<p>Python includes a profiler called <a href=""https://docs.python.org/3/library/profile.html#module-cProfile"" rel=""noreferrer"">cProfile</a>. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.</p>

<p>You can call it from within your code, or from the interpreter, like this:</p>

<pre><code>import cProfile
cProfile.run('foo()')
</code></pre>

<p>Even more usefully, you can invoke the cProfile when running a script:</p>

<pre><code>python -m cProfile myscript.py
</code></pre>

<p>To make it even easier, I made a little batch file called 'profile.bat':</p>

<pre><code>python -m cProfile %1
</code></pre>

<p>So all I have to do is run:</p>

<pre><code>profile euler048.py
</code></pre>

<p>And I get this:</p>

<pre class=""lang-none prettyprint-override""><code>1007 function calls in 0.061 CPU seconds

Ordered by: standard name
ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)
 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)
    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)
    1    0.000    0.000    0.061    0.061 {execfile}
    1    0.002    0.002    0.053    0.053 {map}
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}
    1    0.000    0.000    0.000    0.000 {range}
    1    0.003    0.003    0.003    0.003 {sum}
</code></pre>

<p>EDIT: Updated link to a good video resource from PyCon 2013 titled 
<a href=""https://web.archive.org/web/20170318204046/http://lanyrd.com/2013/pycon/scdywg/"" rel=""noreferrer""><strong><em>Python Profiling</em></strong></a><br>
<a href=""https://www.youtube.com/watch?v=QJwVYlDzAXs"" rel=""noreferrer"">Also via YouTube</a>.</p>
"
448279,"<p>It used to be a required part of a package (<a href=""https://docs.python.org/3/reference/import.html#regular-packages"" rel=""noreferrer"">old, pre-3.3 ""regular package""</a>, not <a href=""https://docs.python.org/3/reference/import.html#namespace-packages"" rel=""noreferrer"">newer 3.3+ ""namespace package""</a>).</p>

<p><a href=""https://docs.python.org/3/reference/import.html#regular-packages"" rel=""noreferrer"">Here's the documentation.</a></p>

<blockquote>
  <p>Python defines two types of packages, regular packages and namespace packages. Regular packages are traditional packages as they existed in Python 3.2 and earlier. A regular package is typically implemented as a directory containing an <code>__init__.py</code> file. When a regular package is imported, this <code>__init__.py</code> file is implicitly executed, and the objects it defines are bound to names in the packageâs namespace. The <code>__init__.py</code> file can contain the same Python code that any other module can contain, and Python will add some additional attributes to the module when it is imported.</p>
</blockquote>

<p>But just click the link, it contains an example, more information, and an explanation of namespace packages, the kind of packages without <code>__init__.py</code>.</p>
"
379910,"<pre><code>&gt;&gt;&gt; a = ""545.2222""
&gt;&gt;&gt; float(a)
545.22220000000004
&gt;&gt;&gt; int(float(a))
545
</code></pre>
"
3071,"<p>Given a module <code>foo</code> with method <code>bar</code>:</p>
<pre><code>import foo
bar = getattr(foo, 'bar')
result = bar()
</code></pre>
<p><a href=""https://docs.python.org/library/functions.html#getattr"" rel=""noreferrer""><code>getattr</code></a> can similarly be used on class instance bound methods, module-level methods, class methods... the list goes on.</p>
"
28654127,"<p><strong>UPDATE</strong><br />
From v0.20, <a href=""https://pandas.pydata.org/docs/reference/api/pandas.melt.html"" rel=""noreferrer""><code>melt</code></a> is a first order function, you can now use</p>
<pre><code>df.melt(id_vars=[&quot;location&quot;, &quot;name&quot;], 
        var_name=&quot;Date&quot;, 
        value_name=&quot;Value&quot;)

  location    name        Date  Value
0        A  &quot;test&quot;    Jan-2010     12
1        B   &quot;foo&quot;    Jan-2010     18
2        A  &quot;test&quot;    Feb-2010     20
3        B   &quot;foo&quot;    Feb-2010     20
4        A  &quot;test&quot;  March-2010     30
5        B   &quot;foo&quot;  March-2010     25
</code></pre>
<hr />
<p><strong>OLD(ER) VERSIONS: &lt;0.20</strong></p>
<p>You can use <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.melt.html"" rel=""noreferrer""><code>pd.melt</code></a> to get most of the way there, and then sort:</p>
<pre><code>&gt;&gt;&gt; df
  location  name  Jan-2010  Feb-2010  March-2010
0        A  test        12        20          30
1        B   foo        18        20          25
&gt;&gt;&gt; df2 = pd.melt(df, id_vars=[&quot;location&quot;, &quot;name&quot;], 
                  var_name=&quot;Date&quot;, value_name=&quot;Value&quot;)
&gt;&gt;&gt; df2
  location  name        Date  Value
0        A  test    Jan-2010     12
1        B   foo    Jan-2010     18
2        A  test    Feb-2010     20
3        B   foo    Feb-2010     20
4        A  test  March-2010     30
5        B   foo  March-2010     25
&gt;&gt;&gt; df2 = df2.sort([&quot;location&quot;, &quot;name&quot;])
&gt;&gt;&gt; df2
  location  name        Date  Value
0        A  test    Jan-2010     12
2        A  test    Feb-2010     20
4        A  test  March-2010     30
1        B   foo    Jan-2010     18
3        B   foo    Feb-2010     20
5        B   foo  March-2010     25
</code></pre>
<p>(Might want to throw in a <code>.reset_index(drop=True)</code>, just to keep the output clean.)</p>
<p><strong>Note</strong>: <code>pd.DataFrame.sort</code> <a href=""https://stackoverflow.com/questions/44123874/dataframe-object-has-no-attribute-sort"">has been deprecated</a> in favour of <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html"" rel=""noreferrer""><code>pd.DataFrame.sort_values</code></a>.</p>
"
104436,"<p>Use <a href=""https://docs.python.org/3/library/itertools.html#itertools.permutations"" rel=""noreferrer""><code>itertools.permutations</code></a> from the <strong>standard library</strong>:</p>
<pre><code>import itertools
list(itertools.permutations([1, 2, 3]))
</code></pre>
<hr />
<p>Adapted from <a href=""http://code.activestate.com/recipes/252178/"" rel=""noreferrer"">here</a> is a demonstration of how <code>itertools.permutations</code> might be implemented:</p>
<pre><code>def permutations(elements):
    if len(elements) &lt;= 1:
        yield elements
        return
    for perm in permutations(elements[1:]):
        for i in range(len(elements)):
            # nb elements[0:1] works in both string and list contexts
            yield perm[:i] + elements[0:1] + perm[i:]
</code></pre>
<p>A couple of alternative approaches are listed in the documentation of <code>itertools.permutations</code>. Here's one:</p>
<pre><code>def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &gt; n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return
</code></pre>
<p>And another, based on <code>itertools.product</code>:</p>
<pre><code>def permutations(iterable, r=None):
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    for indices in product(range(n), repeat=r):
        if len(set(indices)) == r:
            yield tuple(pool[i] for i in indices)
</code></pre>
"
,
,
31915155,"<pre><code>s = r'abc123d, hello 3.1415926, this is my book'
print re.findall(r'-?[0-9]+(?:\.[0-9]*)?|-?\.[0-9]+',s)
</code></pre>

<p>You dont need to <strong>escape</strong> twice when you are using <strong>raw mode</strong>.</p>

<p>Output:<code>['123', '3.1415926']</code></p>

<p>Also the return type will be a list of <strong>strings</strong>. If you want return type as <strong>integers</strong> and <strong>floats</strong> use <code>map</code></p>

<pre><code>import re,ast
s = r'abc123d, hello 3.1415926, this is my book'
print map(ast.literal_eval,re.findall(r'-?[0-9]+(?:\.[0-9]*)?|-?\.[0-9]+',s))
</code></pre>

<p>Output: <code>[123, 3.1415926]</code></p>
"
45621723,"<h2>Why does indentation matter?</h2>
<p>In Python, indentation is used to delimit <a href=""https://en.wikipedia.org/wiki/Block_(programming)"" rel=""nofollow noreferrer"">blocks of code</a>. This is different from many other languages that use curly braces <code>{}</code> to delimit blocks such as Java, Javascript, and C. Because of this, Python users must pay close attention to when and how they indent their code because whitespace matters.</p>
<p>When Python encounters a problem with the indentation of your program, it either raises an exception called <a href=""https://docs.python.org/3/library/exceptions.html#IndentationError"" rel=""nofollow noreferrer""><code>IndentationError</code></a> or <a href=""https://docs.python.org/3/library/exceptions.html#TabError"" rel=""nofollow noreferrer""><code>TabError</code></a>.</p>
<p><strong>A little history</strong></p>
<p>The historical reasons for why Python uses indentation vs the arguably more commonly accepted curly braces <code>{}</code> is outlined in <a href=""http://python-history.blogspot.com/2009/02/early-language-design-and-development.html"" rel=""nofollow noreferrer"">an article of the history of Python by Guido van Rossum</a> - the creator of Python:</p>
<blockquote>
<p>Pythonâs use of indentation comes directly from ABC, but this idea didnât originate with ABC--it had already been promoted by Donald Knuth and was a well-known concept of programming style. (The occam programming language also used it.) However, ABCâs authors did invent the use of the colon that separates the lead-in clause from the indented block. After early user testing without the colon, it was discovered that the meaning of the indentation was unclear to beginners being taught the first steps of programming. The addition of the colon clarified it significantly: the colon somehow draws attention to what follows and ties the phrases before and after it together in just the right way.</p>
</blockquote>
<h2>How do I indent my code?</h2>
<p>The basic rule for indenting Python code (considering that you treat the entire program as a &quot;basic block&quot;) is: The first statement in a basic block, and each subsequent statement after it must be indented by the same amount.</p>
<p>So technically the following Python program is correct:</p>
<pre><code>def perm(l):
        # Compute the list of all permutations of l
    if len(l) &lt;= 1:
                  return [l]
    r = []
    for i in range(len(l)):
             s = l[:i] + l[i+1:]
             p = perm(s)
             for x in p:
              r.append(l[i:i+1] + x)
    return r
</code></pre>
<p>However, as you can probably tell from above, randomly indenting your code makes is extremely hard to read and follow the flow of the program. It's better to be consistent and follow a style.</p>
<p><a href=""https://www.python.org/dev/peps/pep-0008/#indentation"" rel=""nofollow noreferrer"">PEP 8 -- the Python style guide -- says</a>:</p>
<blockquote>
<p>Use 4 spaces per indentation level.</p>
</blockquote>
<p>That is, <strong>each statement that is starting a new block and each subsequent statement in the new block, should be indented four spaces from the current indentation level</strong>. Here is the above program indented according to the PEP8 style guide:</p>
<pre><code>def perm(l):
    # Compute the list of all permutations of l
    if len(l) &lt;= 1:
        return [l]
    r = []
    for i in range(len(l)):
        s = l[:i] + l[i+1:]
        p = perm(s)
        for x in p:
            r.append(l[i:i+1] + x)
    return r
</code></pre>
<h2>Can I still use tabs?</h2>
<p>Python realizes that some people still prefer tabs over spaces and that legacy code may use tabs rather than spaces, so it allows the use of tabs as indentation. <a href=""https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"" rel=""nofollow noreferrer"">PEP8 touches on this topic</a>:</p>
<blockquote>
<p>Spaces are the preferred indentation method.</p>
<p>Tabs should be used solely to remain consistent with code that is already indented with tabs.</p>
</blockquote>
<p>Note however the one big caveat is <strong>not to use both tabs <em>and</em> spaces for indentation</strong>. Doing so can cause all kinds of strange hard to debug indentation errors. Python <a href=""https://stackoverflow.com/questions/2034517"">expands tabs to the next 8th column</a>, but if your editor is set to a tab size of 4 columns, or you you use spaces as well as tabs, you can easily produce indented code that <em>looks</em> fine  in your editor, but Python will refuse to run. The Python 3 compiler <em>explicitly</em> rejects any program containing an ambiguous mixture of tabs and spaces, usually by raising a <code>TabError</code>. However, by default, mixing tabs and spaces is still allowed in Python 2, but it is highly recommended not to use this &quot;feature&quot;. Use the <code>-t</code> and <code>-tt</code> command line flags to force Python 2 to raise a warning or (preferably) an error respectively. <a href=""https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"" rel=""nofollow noreferrer"">PEP8 also discusses this topic</a>:</p>
<blockquote>
<p>Python 3 disallows mixing the use of tabs and spaces for indentation.</p>
<p>Python 2 code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.</p>
<p>When invoking the Python 2 command line interpreter with the -t option, it issues warnings about code that illegally mixes tabs and spaces. When using -tt these warnings become errors. These options are highly recommended!</p>
</blockquote>
<h2>What does &quot;IndentationError: unexpected indent&quot; mean?</h2>
<p><strong>Problem</strong></p>
<p>This error occurs when a statement is unnecessarily indented or its indentation does not match the indentation of former statements in the same block. For example, the first statement in the program below is unnecessarily indented:</p>
<pre><code>&gt;&gt;&gt;  print('Hello') # this is indented 
  File &quot;&lt;stdin&gt;&quot;, line 1
    print('Hello') # this is indented 
    ^
IndentationError: unexpected indent
</code></pre>
<p>In this example, the <code>can_drive = True</code> line in the <code>if</code> block does not match the indentation of any former statement:</p>
<pre><code>&gt;&gt;&gt; age = 10
&gt;&gt;&gt; can_drive = None
&gt;&gt;&gt; 
&gt;&gt;&gt; if age &gt;= 18:
...     print('You can drive')
...      can_drive = True # incorrectly indented
  File &quot;&lt;stdin&gt;&quot;, line 3
    can_drive = True # incorrectly indented
    ^
IndentationError: unexpected indent
</code></pre>
<p><strong>Fix</strong></p>
<p>The fix for this error is to first make sure the problematic line even needs to be indented. For example, the above example using <code>print</code> can be fixed simply be unindenting the line:</p>
<pre><code>&gt;&gt;&gt; print('Hello') # simply unindent the line
Hello
</code></pre>
<p>However, if you are sure the line does need to be indented, the indentation needs to match that of a former statement in the same block. In the second example above using <code>if</code>, we can fix the error by making sure the line with <code>can_drive = True</code> is indented at the same level as the former statements in the <code>if</code> body:</p>
<pre><code>&gt;&gt;&gt; age = 10
&gt;&gt;&gt; can_drive = None
&gt;&gt;&gt; 
&gt;&gt;&gt; if age &gt;= 18:
...     print('You can drive')
...     can_drive = True # indent this line at the same level.
... 
</code></pre>
<h2>What does &quot;IndentationError: expected an indented block&quot; mean?</h2>
<p>(This might also occur as <code>SyntaxError: unexpected EOF while parsing</code> in Python 3.8 or lower.)</p>
<p><strong>Problem</strong></p>
<p>This error occurs when Python sees the 'header' for a compound statement, such as <code>if &lt;condition&gt;:</code> or <code>while &lt;condition&gt;:</code> but the compound statement's body or <strong><em>block</em></strong> is never defined. For example in the code below we began an <code>if</code> statement, but we never define a body for the statement:</p>
<pre><code>&gt;&gt;&gt; if True:
... 
  File &quot;&lt;stdin&gt;&quot;, line 2
    
    ^
IndentationError: expected an indented block
</code></pre>
<p>In this second example, we began writing a <code>for</code> loop, but we forget to indent the <code>for</code> loop body. So Python still expects an indented block for the <code>for</code> loop body:</p>
<pre><code>&gt;&gt;&gt; names = ['sarah', 'lucy', 'michael']
&gt;&gt;&gt; for name in names:
... print(name)
  File &quot;&lt;stdin&gt;&quot;, line 2
    print(name)
        ^
IndentationError: expected an indented block
</code></pre>
<p>Comments don't count as bodies:</p>
<pre><code>&gt;&gt;&gt; if True:
...     # TODO
...
  File &quot;&lt;stdin&gt;&quot;, line 3

    ^
IndentationError: expected an indented block
</code></pre>
<p><strong>Fix</strong></p>
<p>The fix for this error is to simply include a body for the compound statement.</p>
<p>As shown above, a common mistake by new users is that they forget to indent the body. If this is the case, make sure each statement meant to be included in the compound statement's body is indented at the same level under the compound statement's beginning. Here is the above example fixed:</p>
<pre><code>&gt;&gt;&gt; names = ['sarah', 'lucy', 'michael']
&gt;&gt;&gt; for name in names:
...     print(name) # The for loop body is now correctly indented.
... 
sarah
lucy
michael
</code></pre>
<p>Another common case is that, for some reason, a user may not want to define an actual body for the compound statement, or the body may be commented out. In this case, the <a href=""https://docs.python.org/3/reference/simple_stmts.html#grammar-token-pass_stmt"" rel=""nofollow noreferrer""><code>pass</code></a> statement can be used. The <code>pass</code> statement can be used anywhere Python expects one or more statements as a placeholder. <a href=""https://docs.python.org/3/reference/simple_stmts.html#the-pass-statement"" rel=""nofollow noreferrer"">From the documentation for <code>pass</code></a>:</p>
<blockquote>
<p>pass is a null operation â when it is executed, nothing happens. It is useful as a placeholder when a statement is required syntactically, but no code needs to be executed, for example:</p>
<pre><code>def f(arg): pass    # a function that does nothing (yet)

class C: pass       # a class with no methods (yet)
</code></pre>
</blockquote>
<p>Here is the above example with the <code>if</code> statement fixed by using the <code>pass</code> keyword:</p>
<pre><code>&gt;&gt;&gt; if True:
...     pass # We don't want to define a body.
... 
&gt;&gt;&gt; 
</code></pre>
<h2>What does &quot;IndentationError: unindent does not match any outer indentation level&quot; mean?</h2>
<p><strong>Problem</strong></p>
<p>This error occurs when you unindent a statement, but now the indentation level of that statement does not match that of any former statement. For example, in the below code we unindent the second call to <code>print</code>. However, the indentation level does not match that of any former statement:</p>
<pre><code>&gt;&gt;&gt; if True:
...     if True:
...         print('yes')
...    print()
  File &quot;&lt;stdin&gt;&quot;, line 4
    print()
          ^
IndentationError: unindent does not match any outer indentation level
</code></pre>
<p>This error is especially hard to catch because even one space will cause your code to fail.</p>
<p><strong>Fix</strong></p>
<p>The fix is to ensure that when you unindent a statement, the indentation level matches that of a former statement. Consider the above example once again. In the example, I want the second call to print to be in the first <code>if</code> statements body. So I need to make sure that that line's indentation level matches that of the former statements in the first <code>if</code> statement's body:</p>
<pre><code>&gt;&gt;&gt; if True:
...     if True:
...         print('yes')
...     print() # indentation level now matches former statement's level.
... 
yes

&gt;&gt;&gt; 
</code></pre>
<h2>I'm still getting an IndentationError but my program appears to be correctly indented. What do I do?</h2>
<p>If your program visually appears to have correct indentation, but your still getting an <code>IndentationError</code> you have most likely <strong>mixed tabs with spaces</strong>. This will sometimes cause Python to raises strange errors. See the subsection <strong><em>Special cases</em></strong> under <strong><em>What does &quot;TabError: inconsistent use of tabs and spaces in indentation&quot; mean?</em></strong> for an more in-depth explanation of the problem.</p>
<h2>What does &quot;TabError: inconsistent use of tabs and spaces in indentation&quot; mean?</h2>
<p><strong>Problem</strong></p>
<p>This error only occurs when you attempt to mix tabs and spaces as indentation characters. As said above, Python will not allow your program to contain a mix of tabs and spaces, and will raise the specific exception <code>TabError</code> if it finds you have. For example, in the program below, a mix of tabs and spaces is used for indentation:</p>
<pre><code>&gt;&gt;&gt; if True:
...     if True:
...         print()
...     print()
...     print()
  File &quot;&lt;stdin&gt;&quot;, line 5
    print()
          ^
TabError: inconsistent use of tabs and spaces in indentation
</code></pre>
<p>Here is a picture which visually shows the whitespace in the above program. Gray dots are spaces, and gray arrows are tabs:</p>
<p><a href=""https://i.stack.imgur.com/pFV48.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pFV48.png"" alt=""enter image description here"" /></a></p>
<p>We can see we have indeed mixed spaces and tabs for indentation.</p>
<p><strong>Special cases</strong></p>
<p>Note Python <strong><em>will not</em></strong> <em>always</em> raise a <code>TabError</code> if you mix tabs and spaces into your program. If the program indentation is unambiguous, Python will allow tabs and spaces to be mixed. For example:</p>
<pre><code>&gt;&gt;&gt; if True:
...     if True: # tab
...         pass # tab, then 4 spaces
... 
&gt;&gt;&gt; 
</code></pre>
<p>And sometimes Python simply chokes on the mixture of tabs and spaces and erroneously raises an <code>IndentationError</code> exception when a <code>TabError</code> would be more appropriate. Another example:</p>
<pre><code>&gt;&gt;&gt; if True:
...     pass # tab
...     pass # 4 spaces
  File &quot;&lt;stdin&gt;&quot;, line 3
    pass # 4 spaces
                ^
IndentationError: unindent does not match any outer indentation level
</code></pre>
<p>As you can see, running your code this way can create mysterious errors. Even though the program <em>visually</em> appears to be fine, Python became confused trying to parse the tabs and spaces used for indention and errored out.</p>
<p>These are excellent examples that demonstrate why to never mix tabs and spaces and make use of the <code>-t</code> and <code>-tt</code> interpreter flags when using Python 2.</p>
<p><strong>Fix</strong></p>
<p>If your program is short, probably the easiest and quickest fix is to simply re-indent the program. Make sure each statement is indented by four spaces per indention level (see <strong><em>How do I indent my code?</em></strong>).</p>
<p>However, if you already have a large program that you've mixed tabs and spaces into, there are automated tools that can be used to convert all of your indentation to just spaces.</p>
<p>Many editors such as <a href=""https://www.jetbrains.com/pycharm/"" rel=""nofollow noreferrer"">PyCharm</a> and <a href=""https://www.sublimetext.com/"" rel=""nofollow noreferrer"">SublimeText</a> have options to automatically convert tabs to spaces. There are also several on-line tools such as <a href=""http://tabstospaces.com/"" rel=""nofollow noreferrer"">Tabs To Spaces</a> or <a href=""https://www.browserling.com/tools/tabs-to-spaces"" rel=""nofollow noreferrer"">Browserling</a> that allow you to quickly re-indent your code. There are also tools written in Python. <a href=""https://github.com/hhatto/autopep8"" rel=""nofollow noreferrer"">autopep8</a> for example can automatically re-indent your code and fix other indentation errors as well.</p>
<p>Even the best tools though will sometimes not be able to fix all of your indentation errors and you'll have to fix them manually. That's why it's important to always properly indent your code from the start.</p>
<h2>A note about &quot;SyntaxError&quot; related indentation problems</h2>
<p>Although not often, sometimes certain <code>SyntaxError</code> exceptions are raised due to incorrect indentation.  For example, look at the code below:</p>
<pre><code>if True:
    pass
pass # oops! this statement should be indented!.
else:
    pass
</code></pre>
<p>When the above code is run, a <code>SyntaxError</code> is raised:</p>
<pre><code>Traceback (most recent call last):
  File &quot;python&quot;, line 4
    else:
       ^
SyntaxError: invalid syntax
</code></pre>
<p>Although Python raises a <code>SyntaxError</code>, the <em>real</em> problem with the above code is that the second <code>pass</code> statement should be indented. Because the second <code>pass</code> isn't indented, Python doesn't realize that the previous <code>if</code> statement and the <code>else</code> statement are meant to be connected.</p>
<p>The fix for this type of error is to simply correctly re-indent your code. To see how to properly indent your code, see the section <em><strong>How do I indent my code?</strong></em>.</p>
<h2>I'm still having a hard time with Python's indentation syntax. What do I do?</h2>
<p>Don't get discouraged if you're still struggling. It can take time to get use to
Python's whitespace syntax rules. Here are some tips to help:</p>
<ul>
<li>Get an editor that will tell you when you have an indentation error. Some goods ones are as said above are, <a href=""https://www.jetbrains.com/pycharm/"" rel=""nofollow noreferrer"">PyCharm</a>, <a href=""https://www.sublimetext.com/"" rel=""nofollow noreferrer"">SublimeText</a>, and <a href=""https://github.com/jupyter/notebook"" rel=""nofollow noreferrer"">Jupyter Notebook</a>.</li>
<li>When you indent your code, count out loud to yourself how many times you press the space-bar (or tab key). For example, if you needed to indent a line by four spaces, you would say out loud &quot;<em>one</em>, <em>two</em>, <em>three</em>, <em>four</em>&quot; while simultaneously pressing the space-bar each time. It sounds silly, but it helps train your brain to think about how deep you're indenting your code.</li>
<li>If you have an editor, see if it has an option to automatically convert tabs to spaces.</li>
<li>View others' code. Browse <a href=""https://github.com/"" rel=""nofollow noreferrer"">github</a> or <a href=""https://stackoverflow.com/"">Stackoverflow</a> and see examples of Python code.</li>
<li>Just write code. That's the single best way to get better. The more you write Python code, the better you'll get.</li>
</ul>
<h2>Resources used</h2>
<ul>
<li><a href=""https://en.wikipedia.org/"" rel=""nofollow noreferrer"">https://en.wikipedia.org/</a></li>
<li><a href=""https://docs.python.org/3/"" rel=""nofollow noreferrer"">https://docs.python.org/3/</a></li>
<li><a href=""http://python-history.blogspot.com/2009/02/early-language-design-and-development.html"" rel=""nofollow noreferrer"">http://python-history.blogspot.com/2009/02/early-language-design-and-development.html</a></li>
<li><a href=""https://www.python.org/dev/peps/pep-0008/"" rel=""nofollow noreferrer"">https://www.python.org/dev/peps/pep-0008/</a></li>
</ul>
"
9189193,"<p>This is because <strong>strings are immutable in Python</strong>.</p>

<p>Which means that <code>X.replace(""hello"",""goodbye"")</code> returns <strong>a copy of <code>X</code> with replacements made</strong>. Because of that you need replace this line:</p>

<pre><code>X.replace(""hello"", ""goodbye"")
</code></pre>

<p>with this line:</p>

<pre><code>X = X.replace(""hello"", ""goodbye"")
</code></pre>

<p>More broadly, <strong>this is true for all Python string methods that change a string's content ""in-place""</strong>, e.g. <code>replace</code>,<code>strip</code>,<code>translate</code>,<code>lower</code>/<code>upper</code>,<code>join</code>,...</p>

<p><strong>You must assign their output to something if you want to use it</strong> and not throw it away, e.g.</p>

<pre><code>X  = X.strip(' \t')
X2 = X.translate(...)
Y  = X.lower()
Z  = X.upper()
A  = X.join(':')
B  = X.capitalize()
C  = X.casefold()
</code></pre>

<p>and so on.</p>
"
7557028,"<p>One way is to stack the frames on top of each other, then you can simply raise one above the other in the stacking order. The one on top will be the one that is visible. This works best if all the frames are the same size, but with a little work you can get it to work with any sized frames.</p>
<p><strong>Note</strong>: for this to work, all of the widgets for a page must have that page (ie: <code>self</code>) or a descendant as a parent (or master, depending on the terminology you prefer).</p>
<p>Here's a bit of a contrived example to show you the general concept:</p>
<pre><code>try:
    import tkinter as tk                # python 3
    from tkinter import font as tkfont  # python 3
except ImportError:
    import Tkinter as tk     # python 2
    import tkFont as tkfont  # python 2

class SampleApp(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title_font = tkfont.Font(family='Helvetica', size=18, weight=&quot;bold&quot;, slant=&quot;italic&quot;)

        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
        container.pack(side=&quot;top&quot;, fill=&quot;both&quot;, expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (StartPage, PageOne, PageTwo):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # put all of the pages in the same location;
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky=&quot;nsew&quot;)

        self.show_frame(&quot;StartPage&quot;)

    def show_frame(self, page_name):
        '''Show a frame for the given page name'''
        frame = self.frames[page_name]
        frame.tkraise()


class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text=&quot;This is the start page&quot;, font=controller.title_font)
        label.pack(side=&quot;top&quot;, fill=&quot;x&quot;, pady=10)

        button1 = tk.Button(self, text=&quot;Go to Page One&quot;,
                            command=lambda: controller.show_frame(&quot;PageOne&quot;))
        button2 = tk.Button(self, text=&quot;Go to Page Two&quot;,
                            command=lambda: controller.show_frame(&quot;PageTwo&quot;))
        button1.pack()
        button2.pack()


class PageOne(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text=&quot;This is page 1&quot;, font=controller.title_font)
        label.pack(side=&quot;top&quot;, fill=&quot;x&quot;, pady=10)
        button = tk.Button(self, text=&quot;Go to the start page&quot;,
                           command=lambda: controller.show_frame(&quot;StartPage&quot;))
        button.pack()


class PageTwo(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text=&quot;This is page 2&quot;, font=controller.title_font)
        label.pack(side=&quot;top&quot;, fill=&quot;x&quot;, pady=10)
        button = tk.Button(self, text=&quot;Go to the start page&quot;,
                           command=lambda: controller.show_frame(&quot;StartPage&quot;))
        button.pack()


if __name__ == &quot;__main__&quot;:
    app = SampleApp()
    app.mainloop()
</code></pre>
<p><a href=""https://i.stack.imgur.com/w1sVH.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/w1sVH.png"" alt=""start page"" /></a> <a href=""https://i.stack.imgur.com/xH5w5.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/xH5w5.png"" alt=""page 1"" /></a> <a href=""https://i.stack.imgur.com/339hd.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/339hd.png"" alt=""page 2"" /></a></p>
<p>If you find the concept of creating instance in a class confusing, or if different pages need different arguments during construction, you can explicitly call each class separately. The loop serves mainly to illustrate the point that each class is identical.</p>
<p>For example, to create the classes individually you can remove the loop (<code>for F in (StartPage, ...)</code> with this:</p>
<pre><code>self.frames[&quot;StartPage&quot;] = StartPage(parent=container, controller=self)
self.frames[&quot;PageOne&quot;] = PageOne(parent=container, controller=self)
self.frames[&quot;PageTwo&quot;] = PageTwo(parent=container, controller=self)

self.frames[&quot;StartPage&quot;].grid(row=0, column=0, sticky=&quot;nsew&quot;)
self.frames[&quot;PageOne&quot;].grid(row=0, column=0, sticky=&quot;nsew&quot;)
self.frames[&quot;PageTwo&quot;].grid(row=0, column=0, sticky=&quot;nsew&quot;)
</code></pre>
<hr />
<p>Over time people have asked other questions using this code (or an online tutorial that copied this code) as a starting point. You might want to read the answers to these questions:</p>
<ul>
<li><a href=""https://stackoverflow.com/q/32864610/7432"">Understanding parent and controller in Tkinter __init__</a></li>
<li><a href=""https://stackoverflow.com/q/34301300/7432"">Tkinter! Understanding how to switch frames</a></li>
<li><a href=""https://stackoverflow.com/q/32212408/7432"">How to get variable data from a class</a></li>
<li><a href=""https://stackoverflow.com/q/48731097/7432"">Calling functions from a Tkinter Frame to another</a></li>
<li><a href=""https://stackoverflow.com/q/33646605/7432"">How to access variables from different classes in tkinter?</a></li>
<li><a href=""https://stackoverflow.com/q/35029188/7432"">How would I make a method which is run every time a frame is shown in tkinter</a></li>
<li><a href=""https://stackoverflow.com/q/35991126/7432"">Tkinter Frame Resize</a></li>
<li><a href=""https://stackoverflow.com/q/39530107/7432"">Tkinter have code for pages in separate files</a></li>
<li><a href=""https://stackoverflow.com/q/45064732/7432"">Refresh a tkinter frame on button press</a></li>
</ul>
"
4855685,"<p>You know what has worked for me really well on windows.</p>

<p><code>My Computer &gt; Properties &gt; Advanced System Settings &gt; Environment Variables &gt;</code> </p>

<p>Just add the path as C:\Python27 (or wherever you installed python)</p>

<p>OR</p>

<p>Then under system variables I create a new Variable called <code>PythonPath</code>. In this variable I have <code>C:\Python27\Lib;C:\Python27\DLLs;C:\Python27\Lib\lib-tk;C:\other-folders-on-the-path</code></p>

<p><img src=""https://i.stack.imgur.com/ZGp36.png"" alt=""enter image description here""></p>

<p>This is the best way that has worked for me which I hadn't found in any of the docs offered.</p>

<p><strong>EDIT:</strong> For those who are not able to get it,
Please add </p>

<blockquote>
  <p>C:\Python27;</p>
</blockquote>

<p>along with it. Else it will <em>never work</em>.</p>
"
16044380,"<p>You can get the events from pygame and then watch out for the <code>KEYDOWN</code> event, instead of looking at the keys returned by <code>get_pressed()</code>(which gives you keys that are currently pressed down, whereas the <code>KEYDOWN</code> event shows you which keys were pressed down on <em>that frame</em>).</p>
<p>What's happening with your code right now is that if your game is rendering at 30fps, and you hold down the left arrow key for half a second, you're updating the location 15 times.</p>
<pre class=""lang-py prettyprint-override""><code>events = pygame.event.get()
for event in events:
    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_LEFT:
            location -= 1
        if event.key == pygame.K_RIGHT:
            location += 1
</code></pre>
<p>To support continuous movement while a key is being held down, you would have to establish some sort of limitation, either based on a forced maximum frame rate of the game loop or by a counter which only allows you to move every so many ticks of the loop.</p>
<pre class=""lang-py prettyprint-override""><code>move_ticker = 0
keys=pygame.key.get_pressed()
if keys[K_LEFT]:
    if move_ticker == 0:
        move_ticker = 10
        location -= 1
        if location == -1:
            location = 0
if keys[K_RIGHT]:
    if move_ticker == 0:   
        move_ticker = 10     
        location+=1
        if location == 5:
            location = 4
</code></pre>
<p>Then somewhere during the game loop you would do something like this:</p>
<pre class=""lang-py prettyprint-override""><code>if move_ticker &gt; 0:
    move_ticker -= 1
</code></pre>
<p>This would only let you move once every 10 frames (so if you move, the ticker gets set to 10, and after 10 frames it will allow you to move again)</p>
"
4706520,"<p>Set the mode in <a href=""https://docs.python.org/3/library/functions.html#open"" rel=""noreferrer""><code>open()</code></a> to <code>&quot;a&quot;</code> (append) instead of <code>&quot;w&quot;</code> (write):</p>
<pre class=""lang-py prettyprint-override""><code>with open(&quot;test.txt&quot;, &quot;a&quot;) as myfile:
    myfile.write(&quot;appended text&quot;)
</code></pre>
<p>The <a href=""https://docs.python.org/3/library/functions.html#open"" rel=""noreferrer"">documentation</a> lists all the available modes.</p>
"
2371789,"<p><a href=""https://github.com/pyparsing/pyparsing"" rel=""noreferrer"">Pyparsing</a> can be used to parse mathematical expressions. In particular, <a href=""https://github.com/pyparsing/pyparsing/blob/master/examples/fourFn.py"" rel=""noreferrer"">fourFn.py</a>
shows how to parse basic arithmetic expressions. Below, I've rewrapped fourFn into a numeric parser class for easier reuse. </p>

<pre><code>from __future__ import division
from pyparsing import (Literal, CaselessLiteral, Word, Combine, Group, Optional,
                       ZeroOrMore, Forward, nums, alphas, oneOf)
import math
import operator

__author__ = 'Paul McGuire'
__version__ = '$Revision: 0.0 $'
__date__ = '$Date: 2009-03-20 $'
__source__ = '''http://pyparsing.wikispaces.com/file/view/fourFn.py
http://pyparsing.wikispaces.com/message/view/home/15549426
'''
__note__ = '''
All I've done is rewrap Paul McGuire's fourFn.py as a class, so I can use it
more easily in other places.
'''


class NumericStringParser(object):
    '''
    Most of this code comes from the fourFn.py pyparsing example

    '''

    def pushFirst(self, strg, loc, toks):
        self.exprStack.append(toks[0])

    def pushUMinus(self, strg, loc, toks):
        if toks and toks[0] == '-':
            self.exprStack.append('unary -')

    def __init__(self):
        """"""
        expop   :: '^'
        multop  :: '*' | '/'
        addop   :: '+' | '-'
        integer :: ['+' | '-'] '0'..'9'+
        atom    :: PI | E | real | fn '(' expr ')' | '(' expr ')'
        factor  :: atom [ expop factor ]*
        term    :: factor [ multop factor ]*
        expr    :: term [ addop term ]*
        """"""
        point = Literal(""."")
        e = CaselessLiteral(""E"")
        fnumber = Combine(Word(""+-"" + nums, nums) +
                          Optional(point + Optional(Word(nums))) +
                          Optional(e + Word(""+-"" + nums, nums)))
        ident = Word(alphas, alphas + nums + ""_$"")
        plus = Literal(""+"")
        minus = Literal(""-"")
        mult = Literal(""*"")
        div = Literal(""/"")
        lpar = Literal(""("").suppress()
        rpar = Literal("")"").suppress()
        addop = plus | minus
        multop = mult | div
        expop = Literal(""^"")
        pi = CaselessLiteral(""PI"")
        expr = Forward()
        atom = ((Optional(oneOf(""- +"")) +
                 (ident + lpar + expr + rpar | pi | e | fnumber).setParseAction(self.pushFirst))
                | Optional(oneOf(""- +"")) + Group(lpar + expr + rpar)
                ).setParseAction(self.pushUMinus)
        # by defining exponentiation as ""atom [ ^ factor ]..."" instead of
        # ""atom [ ^ atom ]..."", we get right-to-left exponents, instead of left-to-right
        # that is, 2^3^2 = 2^(3^2), not (2^3)^2.
        factor = Forward()
        factor &lt;&lt; atom + \
            ZeroOrMore((expop + factor).setParseAction(self.pushFirst))
        term = factor + \
            ZeroOrMore((multop + factor).setParseAction(self.pushFirst))
        expr &lt;&lt; term + \
            ZeroOrMore((addop + term).setParseAction(self.pushFirst))
        # addop_term = ( addop + term ).setParseAction( self.pushFirst )
        # general_term = term + ZeroOrMore( addop_term ) | OneOrMore( addop_term)
        # expr &lt;&lt;  general_term
        self.bnf = expr
        # map operator symbols to corresponding arithmetic operations
        epsilon = 1e-12
        self.opn = {""+"": operator.add,
                    ""-"": operator.sub,
                    ""*"": operator.mul,
                    ""/"": operator.truediv,
                    ""^"": operator.pow}
        self.fn = {""sin"": math.sin,
                   ""cos"": math.cos,
                   ""tan"": math.tan,
                   ""exp"": math.exp,
                   ""abs"": abs,
                   ""trunc"": lambda a: int(a),
                   ""round"": round,
                   ""sgn"": lambda a: abs(a) &gt; epsilon and cmp(a, 0) or 0}

    def evaluateStack(self, s):
        op = s.pop()
        if op == 'unary -':
            return -self.evaluateStack(s)
        if op in ""+-*/^"":
            op2 = self.evaluateStack(s)
            op1 = self.evaluateStack(s)
            return self.opn[op](op1, op2)
        elif op == ""PI"":
            return math.pi  # 3.1415926535
        elif op == ""E"":
            return math.e  # 2.718281828
        elif op in self.fn:
            return self.fn[op](self.evaluateStack(s))
        elif op[0].isalpha():
            return 0
        else:
            return float(op)

    def eval(self, num_string, parseAll=True):
        self.exprStack = []
        results = self.bnf.parseString(num_string, parseAll)
        val = self.evaluateStack(self.exprStack[:])
        return val
</code></pre>

<p>You can use it like this</p>

<pre><code>nsp = NumericStringParser()
result = nsp.eval('2^4')
print(result)
# 16.0

result = nsp.eval('exp(2^4)')
print(result)
# 8886110.520507872
</code></pre>
"
434411,"<p>Modified from the <a href=""https://docs.python.org/library/itertools.html#itertools-recipes"" rel=""noreferrer"">Recipes</a> section of Python's <a href=""http://docs.python.org/library/itertools.html"" rel=""noreferrer""><code>itertools</code></a> docs:</p>
<pre><code>from itertools import zip_longest

def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p><strong>Example</strong></p>
<pre><code>grouper('ABCDEFG', 3, 'x')  # --&gt; 'ABC' 'DEF' 'Gxx'
</code></pre>
<p><strong>Note:</strong> on Python 2 use <code>izip_longest</code> instead of <code>zip_longest</code>.</p>
"
15479974,"<blockquote>
  <p><strong>Note:</strong> This answer was written before the implementation of the <code>dict</code> type changed, in Python 3.6. Most of the implementation details in this answer still apply, but the listing order of keys in <em>dictionaries</em> is no longer determined by hash values. The set implementation remains unchanged.</p>
</blockquote>

<p>The order is not arbitrary, but depends on the insertion and deletion history of the dictionary or set, as well as on the specific Python implementation. For the remainder of this answer, for 'dictionary', you can also read 'set'; sets are implemented as dictionaries with just keys and no values.</p>

<p>Keys are hashed, and hash values are assigned to slots in a dynamic table (it can grow or shrink based on needs). And that mapping process can lead to collisions, meaning that a key will have to be slotted in a <em>next</em> slot based on what is already there.</p>

<p>Listing the contents loops over the slots, and so keys are listed in the order they <em>currently</em> reside in the table.</p>

<p>Take the keys <code>'foo'</code> and <code>'bar'</code>, for example, and lets assume the table size is 8 slots. In Python 2.7, <code>hash('foo')</code> is <code>-4177197833195190597</code>, <code>hash('bar')</code> is <code>327024216814240868</code>. Modulo 8, that means these two keys are slotted in slots 3 and 4 then:</p>

<pre><code>&gt;&gt;&gt; hash('foo')
-4177197833195190597
&gt;&gt;&gt; hash('foo') % 8
3
&gt;&gt;&gt; hash('bar')
327024216814240868
&gt;&gt;&gt; hash('bar') % 8
4
</code></pre>

<p>This informs their listing order:</p>

<pre><code>&gt;&gt;&gt; {'bar': None, 'foo': None}
{'foo': None, 'bar': None}
</code></pre>

<p>All slots except 3 and 4 are empty, looping over the table first lists slot 3, then slot 4, so <code>'foo'</code> is listed before <code>'bar'</code>.</p>

<p><code>bar</code> and <code>baz</code>, however, have hash values that are exactly 8 apart and thus map to the exact same slot, <code>4</code>:</p>

<pre><code>&gt;&gt;&gt; hash('bar')
327024216814240868
&gt;&gt;&gt; hash('baz')
327024216814240876
&gt;&gt;&gt; hash('bar') % 8
4
&gt;&gt;&gt; hash('baz') % 8
4
</code></pre>

<p>Their order now depends on which key was slotted first; the second key will have to be moved to a next slot:</p>

<pre><code>&gt;&gt;&gt; {'baz': None, 'bar': None}
{'bar': None, 'baz': None}
&gt;&gt;&gt; {'bar': None, 'baz': None}
{'baz': None, 'bar': None}
</code></pre>

<p>The table order differs here, because one or the other key was slotted first.</p>

<p>The technical name for the underlying structure used by CPython (the most commonly used Python implemenation) is a <a href=""http://en.wikipedia.org/wiki/hash_table"" rel=""noreferrer"">hash table</a>, one that uses open addressing. If you are curious, and understand C well enough, take a look at the <a href=""http://hg.python.org/cpython/file/tip/Objects/dictobject.c"" rel=""noreferrer"">C implementation</a> for all the (well documented) details. You could also watch this <a href=""http://pyvideo.org/video/276/the-mighty-dictionary-55"" rel=""noreferrer"">Pycon 2010 presentation by Brandon Rhodes</a> about how CPython <code>dict</code> works, or pick up a copy of <a href=""http://shop.oreilly.com/product/9780596510046.do"" rel=""noreferrer"">Beautiful Code</a>, which includes a chapter on the implementation written by Andrew Kuchling.</p>

<p>Note that as of Python 3.3, a random hash seed is used as well, making hash collisions unpredictable to prevent certain types of denial of service (where an attacker renders a Python server unresponsive by causing mass hash collisions). This means that the order of a given dictionary or set is then <em>also</em> dependent on the random hash seed for the current Python invocation.</p>

<p>Other implementations are free to use a different structure for dictionaries, as long as they satisfy the documented Python interface for them, but I believe that all implementations so far use a variation of the hash table.</p>

<p>CPython 3.6 introduces a <em>new</em> <code>dict</code> implementation that maintains insertion order, and is faster and more memory efficient to boot. Rather than keep a large sparse table where each row references the stored hash value, and the key and value objects, the new implementation adds a smaller hash <em>array</em> that only references indices in a separate 'dense' table (one that only contains as many rows as there are actual key-value pairs), and it is the dense table that happens to list the contained items in order. See the <a href=""https://mail.python.org/pipermail/python-dev/2012-December/123028.html"" rel=""noreferrer"">proposal to Python-Dev for more details</a>. Note that in Python 3.6 this is considered an <em>implementation detail</em>, Python-the-language does not specify that other implementations have to retain order. This changed in Python 3.7, where this detail was <a href=""https://mail.python.org/pipermail/python-dev/2017-December/151283.html"" rel=""noreferrer"">elevated to be a <em>language specification</em></a>; for any implementation to be properly compatible with Python 3.7 or newer it <strong>must</strong> copy this order-preserving behaviour. And to be explicit: this change doesn't apply to sets, as sets already have a 'small' hash structure.</p>

<p>Python 2.7 and newer also provides an <a href=""https://docs.python.org/2/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>OrderedDict</code> class</a>, a subclass of <code>dict</code> that adds an additional data structure to record key order. At the price of some speed and extra memory, this class remembers in what order you inserted keys; listing keys, values or items will then do so in that order. It uses a doubly-linked list stored in an additional dictionary to keep the order up-to-date efficiently. See the <a href=""https://mail.python.org/pipermail/python-dev/2012-December/123028.html"" rel=""noreferrer"">post by Raymond Hettinger outlining the idea</a>. <code>OrderedDict</code> objects have other advantages, such as being <em>re-orderable</em>.</p>

<p>If you wanted an ordered set, you can install the <a href=""https://pypi.python.org/pypi/oset"" rel=""noreferrer""><code>oset</code> package</a>; it works on Python 2.5 and up.</p>
"
180993,"<p><code>re.match</code> is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using <code>^</code> in the pattern.</p>

<p>As the <a href=""http://docs.python.org/2/library/re.html#re.match"" rel=""noreferrer"">re.match documentation</a> says:</p>

<blockquote>
  <p>If zero or more characters at the
  <strong>beginning of string</strong> match the regular expression pattern, return a
  corresponding <code>MatchObject</code> instance.
  Return <code>None</code> if the string does not
  match the pattern; note that this is
  different from a zero-length match.</p>
  
  <p>Note: If you want to locate a match
  anywhere in string, use <code>search()</code>
  instead.</p>
</blockquote>

<p><code>re.search</code> searches the entire string, as <a href=""http://docs.python.org/2/library/re.html#re.search"" rel=""noreferrer"">the documentation says</a>:</p>

<blockquote>
  <p><strong>Scan through string</strong> looking for a
  location where the regular expression
  pattern produces a match, and return a
  corresponding <code>MatchObject</code> instance.
  Return <code>None</code> if no position in the
  string matches the pattern; note that
  this is different from finding a
  zero-length match at some point in the
  string.</p>
</blockquote>

<p>So if you need to match at the beginning of the string, or to match the entire string use <code>match</code>. It is faster. Otherwise use <code>search</code>.</p>

<p>The documentation has a <a href=""http://docs.python.org/2/library/re.html#search-vs-match"" rel=""noreferrer"">specific section for <code>match</code> vs. <code>search</code></a> that also covers multiline strings:</p>

<blockquote>
  <p>Python offers two different primitive
  operations based on regular
  expressions: <code>match</code> checks for a match
  <strong>only at the beginning</strong> of the string,
  while <code>search</code> checks for a match
  <strong>anywhere</strong> in the string (this is what
  Perl does by default).</p>
  
  <p>Note that <code>match</code> may differ from <code>search</code>
  even when using a regular expression
  beginning with <code>'^'</code>: <code>'^'</code> matches only
  at the start of the string, or in
  <code>MULTILINE</code> mode also immediately
  following a newline. The â<code>match</code>â
  operation succeeds <em>only if the pattern
  matches at the <strong>start</strong> of the string</em>
  regardless of mode, or at the starting
  position given by the optional <code>pos</code>
  argument regardless of whether a
  newline precedes it.</p>
</blockquote>

<p>Now, enough talk. Time to see some example code:</p>

<pre><code># example code:
string_with_newlines = """"""something
someotherthing""""""

import re

print re.match('some', string_with_newlines) # matches
print re.match('someother', 
               string_with_newlines) # won't match
print re.match('^someother', string_with_newlines, 
               re.MULTILINE) # also won't match
print re.search('someother', 
                string_with_newlines) # finds something
print re.search('^someother', string_with_newlines, 
                re.MULTILINE) # also finds something

m = re.compile('thing$', re.MULTILINE)

print m.match(string_with_newlines) # no match
print m.match(string_with_newlines, pos=4) # matches
print m.search(string_with_newlines, 
               re.MULTILINE) # also matches
</code></pre>
"
12681217,"<p>How about something like this:</p>

<pre><code>In [55]: pd.concat([Series(row['var2'], row['var1'].split(','))              
                    for _, row in a.iterrows()]).reset_index()
Out[55]: 
  index  0
0     a  1
1     b  1
2     c  1
3     d  2
4     e  2
5     f  2
</code></pre>

<p>Then you just have to rename the columns</p>
"
9961598,"<p>You can use <a href=""http://www.pygame.org/docs/ref/key.html#pygame.key.get_pressed"" rel=""noreferrer"">pygame.key.get_pressed</a> to do that.</p>

<p>example:</p>

<pre><code>while running:
    keys = pygame.key.get_pressed()  #checking pressed keys
    if keys[pygame.K_UP]:
        y1 -= 1
    if keys[pygame.K_DOWN]:
        y1 += 1
</code></pre>
"
4760517,"<p>In all officially maintained versions of Python, the simplest approach is to use the <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.check_output"" rel=""noreferrer""><code>subprocess.check_output</code></a> function:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(['ls', '-l'])
b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>
<p>The <code>check_output</code> function works in all officially maintained versions of Python. But for more recent versions, a more flexible approach is available.</p>
<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>
<p>If you're using <strong>Python 3.5+</strong>, and <strong>do not need backwards compatibility</strong>, the new <a href=""https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module"" rel=""noreferrer""><code>run</code></a> function is recommended by the official documentation for most tasks. It provides a very general, high-level API for the <a href=""https://docs.python.org/3/library/subprocess.html"" rel=""noreferrer""><code>subprocess</code></a> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess"" rel=""noreferrer""><code>CompletedProcess</code></a> object:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)
&gt;&gt;&gt; result.stdout
b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>
<pre><code>&gt;&gt;&gt; result.stdout.decode('utf-8')
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>This can all be compressed to a one-liner if desired:</p>
<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>If you want to pass input to the process's <code>stdin</code>, you can pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>
<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']
&gt;&gt;&gt; ip = 'foo\nfoofoo\n'.encode('utf-8')
&gt;&gt;&gt; result = subprocess.run(cmd, stdout=subprocess.PIPE, input=ip)
&gt;&gt;&gt; result.stdout.decode('utf-8')
'foofoo\n'
</code></pre>
<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). If you want <code>run</code> to throw an exception when the process returns a nonzero exit code, you can pass <code>check=True</code>. (Or you can check the <code>returncode</code> attribute of <code>result</code> above.) When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described at the end of this answer.</p>
<p>Later versions of Python streamline the above further. In Python 3.7+, the above one-liner can be spelled like this:</p>
<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], capture_output=True, text=True).stdout
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>Using <code>run</code> this way adds just a bit of complexity, compared to the old way of doing things. But now you can do almost anything you need to do with the <code>run</code> function alone.</p>
<h3>Older versions of Python (3-3.4): more about <code>check_output</code></h3>
<p>If you are using an older version of Python, or need modest backwards compatibility, you can use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>
<pre><code>subprocess.check_output(*popenargs, **kwargs)  
</code></pre>
<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. In Python 3.5+, <code>check_output</code> is equivalent to executing <code>run</code> with <code>check=True</code> and <code>stdout=PIPE</code>, and returning just the <code>stdout</code> attribute.</p>
<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described at the end of this answer.</p>
<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case.</p>
<h3>Complex applications and legacy versions of Python (2.6 and below): <code>Popen</code></h3>
<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> or <code>run</code> provide, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses.</p>
<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href=""https://docs.python.org/3/library/shlex.html"" rel=""noreferrer""><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.Popen"" rel=""noreferrer"">host of different arguments</a> for process IO management and low-level configuration.</p>
<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>
<pre><code>output = subprocess.Popen([&quot;mycmd&quot;, &quot;myarg&quot;], 
                          stdout=subprocess.PIPE).communicate()[0]
</code></pre>
<p>Or</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, 
...                                    stderr=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate()
&gt;&gt;&gt; print out
.
..
foo
</code></pre>
<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>
<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']
&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
...                           stderr=subprocess.PIPE,
...                           stdin=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate('foo\nfoofoo\n')
&gt;&gt;&gt; print out
foofoo
</code></pre>
<p>Note <a href=""https://stackoverflow.com/a/21867841/577088"">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>
<p>In some rare cases, you may need complex, real-time output capturing. <a href=""https://stackoverflow.com/a/4760274/577088"">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>
<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>
<h3>Notes</h3>
<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>
<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support. For example:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output('cat books/* | wc', shell=True, text=True)
' 1299377 17005208 101299376\n'
</code></pre>
<p>However, doing this raises <a href=""https://docs.python.org/3/library/subprocess.html#security-considerations"" rel=""noreferrer"">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>
<pre><code>run(cmd, [stdout=etc...], input=other_output)
</code></pre>
<p>Or</p>
<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)
</code></pre>
<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href=""https://stackoverflow.com/questions/6341451/piping-together-several-subprocesses"">this</a>.</p>
"
2960791,"<pre><code>plot.savefig('hanning(%d).pdf' % num)
</code></pre>
<p>The <code>%</code> operator, when following a string, allows you to insert values into that string via format codes (the <code>%d</code> in this case). For more details, see the Python documentation:</p>
<p><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"" rel=""nofollow noreferrer""><code>printf</code>-style String Formatting</a></p>
"
3906148,"<p>Calling <code>read()</code> reads through the entire file and leaves the read cursor at the end of the file (with nothing more to read). If you are looking to read a certain number of lines at a time you could use  <code>readline()</code>, <code>readlines()</code> or iterate through lines with <code>for line in handle:</code>.</p>
<p>To answer your question directly, once a file has been read, with <code>read()</code> you can use <code>seek(0)</code> to return the read cursor to the start of the file (docs are <a href=""http://docs.python.org/2.4/lib/bltin-file-objects.html"" rel=""noreferrer"">here</a>). If you know the file isn't going to be too large, you can also save the <code>read()</code> output to a variable, using it in your <code>findall</code> expressions.</p>
<p>Ps. Don't forget to close the file after you are done with it.</p>
"
2081708,"<p>There's not really any ""raw <em>string</em>""; there are raw <em>string literals</em>, which are exactly the string literals marked by an <code>'r'</code> before the opening quote.</p>

<p>A ""raw string literal"" is a slightly different syntax for a string literal, in which a backslash, <code>\</code>, is taken as meaning ""just a backslash"" (except when it comes right before a quote that would otherwise terminate the literal) -- no ""escape sequences"" to represent newlines, tabs, backspaces, form-feeds, and so on.  In normal string literals, each backslash must be doubled up to avoid being taken as the start of an escape sequence.</p>

<p>This syntax variant exists mostly because the syntax of regular expression patterns is heavy with backslashes (but never at the end, so the ""except"" clause above doesn't matter) and it looks a bit better when you avoid doubling up each of them -- that's all.  It also gained some popularity to express native Windows file paths (with backslashes instead of regular slashes like on other platforms), but that's very rarely needed (since normal slashes mostly work fine on Windows too) and imperfect (due to the ""except"" clause above).</p>

<p><code>r'...'</code> is a byte string (in Python 2.*), <code>ur'...'</code> is a Unicode string (again, in Python 2.*), and any of the other three kinds of quoting also produces exactly the same types of strings (so for example <code>r'...'</code>, <code>r'''...'''</code>, <code>r""...""</code>, <code>r""""""...""""""</code> are all byte strings, and so on).</p>

<p>Not sure what you mean by ""going <em>back</em>"" - there is no intrinsically back and forward directions, because there's no raw string <strong>type</strong>, it's just an alternative syntax to express perfectly normal string objects, byte or unicode as they may be.</p>

<p>And yes, in Python 2.*, <code>u'...'</code> <strong>is</strong> of course always distinct from just <code>'...'</code> -- the former is a unicode string, the latter is a byte string. What encoding the literal might be expressed in is a completely orthogonal issue.</p>

<p>E.g., consider (Python 2.6):</p>

<pre><code>&gt;&gt;&gt; sys.getsizeof('ciao')
28
&gt;&gt;&gt; sys.getsizeof(u'ciao')
34
</code></pre>

<p>The Unicode object of course takes more memory space (very small difference for a very short string, obviously ;-).</p>
"
826957,"<p>In Python 3, <code>print</code> <a href=""http://docs.python.org/3.0/whatsnew/3.0.html#print-is-a-function"" rel=""noreferrer"">became a function</a>. This means that you need to include parenthesis now like mentioned below:</p>

<pre><code>print(""Hello World"")
</code></pre>
"
,
60211,"<p>Python 3.10 (2021) introduced the <a href=""https://www.python.org/dev/peps/pep-0634/"" rel=""noreferrer""><code>match</code>-<code>case</code></a> statement which provides a first-class implementation of a &quot;switch&quot; for Python. For example:</p>
<pre><code>def f(x):
    match x:
        case 'a':
            return 1
        case 'b':
            return 2
        case _:
            return 0   # 0 is the default case if x is not found
</code></pre>
<p>The <code>match</code>-<code>case</code> statement is considerably more powerful than this simple example.</p>
<hr />
<p>The original answer below was written in 2008, before <code>match</code>-<code>case</code> was available:</p>
<p>You could use a dictionary:</p>
<pre><code>def f(x):
    return {
        'a': 1,
        'b': 2,
    }[x]
</code></pre>
"
25336738,"<p>An iterator can only be consumed once. For example:</p>
<pre><code>lst = [1, 2, 3]
it = iter(lst)

next(it)
# =&gt; 1
next(it)
# =&gt; 2
next(it)
# =&gt; 3
next(it)
# =&gt; StopIteration
</code></pre>
<p>When the iterator is supplied to a <code>for</code> loop instead, that last <code>StopIteration</code> will cause it to exit the first time. Trying to use the same iterator in another for loop will cause <code>StopIteration</code> again immediately, because the iterator has already been consumed.</p>
<p>A simple way to work around this is to save all the elements to a list, which can be traversed as many times as needed. For example:</p>
<pre><code>data = list(data)
</code></pre>
<p>If the iterator would iterate over many elements, however, it's a better idea to create independent iterators using <a href=""https://docs.python.org/library/itertools.html#itertools.tee"" rel=""noreferrer""><code>tee()</code></a>:</p>
<pre><code>import itertools
it1, it2 = itertools.tee(data, 2) # create as many as needed
</code></pre>
<p>Now each one can be iterated over in turn:</p>
<pre><code>for e in it1:
    print(&quot;first loop&quot;)

for e in it2:
    print(&quot;second loop&quot;)
</code></pre>
"
7053664,"<p>It's the return value of the function, which you print out. If there is no return statement (or <a href=""http://docs.python.org/reference/simple_stmts.html#return"" rel=""noreferrer"">just a <code>return</code> without an argument</a>), an implicit <code>return None</code> is added to the end of a function.</p>

<p>You probably want to return the values in the function instead of printing them:</p>

<pre><code>def jiskya(x, y):
    if x &gt; y:
        return y
    else:
        return x

print(jiskya(2, 3))
</code></pre>
"
1504742,"<p><code>is</code> is identity testing, and <code>==</code> is equality testing. What happens in your code would be emulated in the interpreter like this:</p>
<pre><code>&gt;&gt;&gt; a = 'pub'
&gt;&gt;&gt; b = ''.join(['p', 'u', 'b'])
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</code></pre>
<p>So, no wonder they're not the same, right?</p>
<p>In other words: <code>a is b</code> is the equivalent of <code>id(a) == id(b)</code></p>
"
5036775,"<p>Unless there is an overwhelming need to create a mess of variable names, I would just use a dictionary, where you can dynamically create the key names and associate a value to each.</p>
<pre><code>a = {}
k = 0
while k &lt; 10:
    # dynamically create key
    key = ...
    # calculate value
    value = ...
    a[key] = value 
    k += 1
</code></pre>
<p>There are also some interesting data structures in the <a href=""https://docs.python.org/library/collections.html"" rel=""noreferrer""><code>collections</code> module</a> that might be applicable.</p>
"
73050,"<p>The <a href=""https://docs.python.org/library/functions.html#sorted"" rel=""noreferrer""><code>sorted()</code></a> function takes a <code>key=</code> parameter</p>
<pre><code>newlist = sorted(list_to_be_sorted, key=lambda d: d['name']) 
</code></pre>
<p>Alternatively, you can use <a href=""https://docs.python.org/library/operator.html#operator.itemgetter"" rel=""noreferrer""><code>operator.itemgetter</code></a> instead of defining the function yourself</p>
<pre><code>from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name')) 
</code></pre>
<p>For completeness, add <code>reverse=True</code> to sort in descending order</p>
<pre><code>newlist = sorted(list_to_be_sorted, key=itemgetter('name'), reverse=True)
</code></pre>
"
12453584,"<p>Use <a href=""https://docs.python.org/library/stdtypes.html#str.join"" rel=""noreferrer""><code>str.join</code></a>:</p>
<pre><code>&gt;&gt;&gt; words = ['this', 'is', 'a', 'sentence']
&gt;&gt;&gt; '-'.join(words)
'this-is-a-sentence'
&gt;&gt;&gt; ' '.join(words)
'this is a sentence'
</code></pre>
"
5893946,"<p><code>_</code> has 3 main conventional uses in Python:</p>
<ol>
<li><p>To hold the result of the last executed expression in an interactive
interpreter session (see <a href=""https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers"" rel=""noreferrer"">docs</a>). This precedent was set by the standard CPython
interpreter, and other interpreters have followed suit</p>
</li>
<li><p>For translation lookup in i18n (see the
<a href=""https://docs.python.org/3/library/gettext.html#localizing-your-module"" rel=""noreferrer"">gettext</a>
documentation for example), as in code like</p>
<pre><code>raise forms.ValidationError(_(&quot;Please enter a correct username&quot;))
</code></pre>
</li>
<li><p>As a general purpose &quot;throwaway&quot; variable name:</p>
<ol>
<li><p>To indicate that part
of a function result is being deliberately ignored (Conceptually, it is being discarded.), as in code like:</p>
<pre><code>label, has_label, _ = text.partition(':')
</code></pre>
</li>
<li><p>As part of a function definition (using either <code>def</code> or <code>lambda</code>), where
the signature is fixed (e.g. by a callback or parent class API), but
this particular function implementation doesn't need all of the
parameters, as in code like:</p>
<pre><code>def callback(_):
    return True
</code></pre>
<p>[For a long time this answer didn't list this use case, but it came up often enough, as noted <a href=""https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python/5893946?noredirect=1#comment100906549_5893946"">here</a>, to be worth listing explicitly.]</p>
</li>
</ol>
<p>This use case can conflict with the translation lookup use case, so it is necessary to avoid using <code>_</code> as a throwaway variable in any code block that also uses it for i18n translation (many folks prefer a double-underscore, <code>__</code>, as their throwaway variable for exactly this reason).</p>
<p>Linters often recognize this use case. For example <code>year, month, day = date()</code> will raise a lint warning if <code>day</code> is not used later in the code. The fix, if <code>day</code> is truly not needed, is to write <code>year, month, _ = date()</code>. Same with lambda functions, <code>lambda arg: 1.0</code> creates a function requiring one argument but not using it, which will be caught by lint. The fix is to write <code>lambda _: 1.0</code>. An unused variable is often hiding a bug/typo (e.g. set <code>day</code> but use <code>dya</code> in the next line).</p>
<p>The pattern matching feature added in Python 3.10 elevated this usage from &quot;convention&quot; to &quot;language syntax&quot; where <code>match</code> statements are concerned: in match cases, <code>_</code> is a <a href=""https://docs.python.org/3/reference/compound_stmts.html#wildcard-patterns"" rel=""noreferrer"">wildcard pattern</a>, and the runtime doesn't even bind a value to the symbol in that case.</p>
<p>For other use cases, remember that <code>_</code> is still a valid variable name, and hence will still keep objects alive. In cases where this is undesirable (e.g. to release memory or external resources) an explicit <code>del name</code> call will both satisfy linters that the name is being used, <em>and</em> promptly clear the reference to the object.</p>
</li>
</ol>
"
28648923,"<p>You have four main options for converting types in pandas:</p>
<ol>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html"" rel=""noreferrer""><code>to_datetime()</code></a> and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_timedelta.html"" rel=""noreferrer""><code>to_timedelta()</code></a>.)</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to <a href=""https://pandas.pydata.org/docs/user_guide/categorical.html"" rel=""noreferrer"">categorial</a> types (very useful).</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a> - a utility method to convert object columns holding Python objects to a pandas type if possible.</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html"" rel=""noreferrer""><code>convert_dtypes()</code></a> - convert DataFrame columns to the &quot;best possible&quot;  dtype that supports <code>pd.NA</code> (pandas' object to indicate a missing value).</p>
</li>
</ol>
<p>Read on for more detailed explanations and usage of each of these methods.</p>
<hr />
<h1>1. <code>to_numeric()</code></h1>
<p>The best way to convert one or more columns of a DataFrame to numeric values is to use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>pandas.to_numeric()</code></a>.</p>
<p>This function will try to change non-numeric objects (such as strings) into integers or floating-point numbers as appropriate.</p>
<h2>Basic usage</h2>
<p>The input to <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> is a Series or a single column of a DataFrame.</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([&quot;8&quot;, 6, &quot;7.5&quot;, 3, &quot;0.9&quot;]) # mixed string and numeric values
&gt;&gt;&gt; s
0      8
1      6
2    7.5
3      3
4    0.9
dtype: object

&gt;&gt;&gt; pd.to_numeric(s) # convert everything to float values
0    8.0
1    6.0
2    7.5
3    3.0
4    0.9
dtype: float64
</code></pre>
<p>As you can see, a new Series is returned. Remember to assign this output to a variable or column name to continue using it:</p>
<pre><code># convert Series
my_series = pd.to_numeric(my_series)

# convert column &quot;a&quot; of a DataFrame
df[&quot;a&quot;] = pd.to_numeric(df[&quot;a&quot;])
</code></pre>
<p>You can also use it to convert multiple columns of a DataFrame via the <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html"" rel=""noreferrer""><code>apply()</code></a> method:</p>
<pre><code># convert all columns of DataFrame
df = df.apply(pd.to_numeric) # convert all columns of DataFrame

# convert just columns &quot;a&quot; and &quot;b&quot;
df[[&quot;a&quot;, &quot;b&quot;]] = df[[&quot;a&quot;, &quot;b&quot;]].apply(pd.to_numeric)
</code></pre>
<p>As long as your values can all be converted, that's probably all you need.</p>
<h2>Error handling</h2>
<p>But what if some values can't be converted to a numeric type?</p>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> also takes an <code>errors</code> keyword argument that allows you to force non-numeric values to be <code>NaN</code>, or simply ignore columns containing these values.</p>
<p>Here's an example using a Series of strings <code>s</code> which has the object dtype:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series(['1', '2', '4.7', 'pandas', '10'])
&gt;&gt;&gt; s
0         1
1         2
2       4.7
3    pandas
4        10
dtype: object
</code></pre>
<p>The default behaviour is to raise if it can't convert a value. In this case, it can't cope with the string 'pandas':</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')
ValueError: Unable to parse string
</code></pre>
<p>Rather than fail, we might want 'pandas' to be considered a missing/bad numeric value. We can coerce invalid values to <code>NaN</code> as follows using the <code>errors</code> keyword argument:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, errors='coerce')
0     1.0
1     2.0
2     4.7
3     NaN
4    10.0
dtype: float64
</code></pre>
<p>The third option for <code>errors</code> is just to ignore the operation if an invalid value is encountered:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, errors='ignore')
# the original Series is returned untouched
</code></pre>
<p>This last option is particularly useful for converting your entire DataFrame, but don't know which of our columns can be converted reliably to a numeric type. In that case, just write:</p>
<pre><code>df.apply(pd.to_numeric, errors='ignore')
</code></pre>
<p>The function will be applied to each column of the DataFrame. Columns that can be converted to a numeric type will be converted, while columns that cannot (e.g. they contain non-digit strings or dates) will be left alone.</p>
<h2>Downcasting</h2>
<p>By default, conversion with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> will give you either an <code>int64</code> or <code>float64</code> dtype (or whatever integer width is native to your platform).</p>
<p>That's usually what you want, but what if you wanted to save some memory and use a more compact dtype, like <code>float32</code>, or <code>int8</code>?</p>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> gives you the option to downcast to either <code>'integer'</code>, <code>'signed'</code>, <code>'unsigned'</code>, <code>'float'</code>. Here's an example for a simple series <code>s</code> of integer type:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([1, 2, -7])
&gt;&gt;&gt; s
0    1
1    2
2   -7
dtype: int64
</code></pre>
<p>Downcasting to <code>'integer'</code> uses the smallest possible integer that can hold the values:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, downcast='integer')
0    1
1    2
2   -7
dtype: int8
</code></pre>
<p>Downcasting to <code>'float'</code> similarly picks a smaller than normal floating type:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, downcast='float')
0    1.0
1    2.0
2   -7.0
dtype: float32
</code></pre>
<hr />
<h1>2. <code>astype()</code></h1>
<p>The <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> method enables you to be explicit about the dtype you want your DataFrame or Series to have. It's very versatile in that you can try and go from one type to any other.</p>
<h2>Basic usage</h2>
<p>Just pick a type: you can use a NumPy dtype (e.g. <code>np.int16</code>), some Python types (e.g. bool), or pandas-specific types (like the categorical dtype).</p>
<p>Call the method on the object you want to convert and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> will try and convert it for you:</p>
<pre><code># convert all DataFrame columns to the int64 dtype
df = df.astype(int)

# convert column &quot;a&quot; to int64 dtype and &quot;b&quot; to complex type
df = df.astype({&quot;a&quot;: int, &quot;b&quot;: complex})

# convert Series to float16 type
s = s.astype(np.float16)

# convert Series to Python strings
s = s.astype(str)

# convert Series to categorical type - see docs for more details
s = s.astype('category')
</code></pre>
<p>Notice I said &quot;try&quot; - if <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> does not know how to convert a value in the Series or DataFrame, it will raise an error. For example, if you have a <code>NaN</code> or <code>inf</code> value you'll get an error trying to convert it to an integer.</p>
<p>As of pandas 0.20.0, this error can be suppressed by passing <code>errors='ignore'</code>. Your original object will be returned untouched.</p>
<h2>Be careful</h2>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> is powerful, but it will sometimes convert values &quot;incorrectly&quot;. For example:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([1, 2, -7])
&gt;&gt;&gt; s
0    1
1    2
2   -7
dtype: int64
</code></pre>
<p>These are small integers, so how about converting to an unsigned 8-bit type to save memory?</p>
<pre><code>&gt;&gt;&gt; s.astype(np.uint8)
0      1
1      2
2    249
dtype: uint8
</code></pre>
<p>The conversion worked, but the -7 was wrapped round to become 249 (i.e. 2<sup>8</sup> - 7)!</p>
<p>Trying to downcast using <code>pd.to_numeric(s, downcast='unsigned')</code> instead could help prevent this error.</p>
<hr />
<h1>3. <code>infer_objects()</code></h1>
<p>Version 0.21.0 of pandas introduced the method <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a> for converting columns of a DataFrame that have an object datatype to a more specific type (soft conversions).</p>
<p>For example, here's a DataFrame with two columns of object type. One holds actual integers and the other holds strings representing integers:</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'a': [7, 1, 5], 'b': ['3','2','1']}, dtype='object')
&gt;&gt;&gt; df.dtypes
a    object
b    object
dtype: object
</code></pre>
<p>Using <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a>, you can change the type of column 'a' to int64:</p>
<pre><code>&gt;&gt;&gt; df = df.infer_objects()
&gt;&gt;&gt; df.dtypes
a     int64
b    object
dtype: object
</code></pre>
<p>Column 'b' has been left alone since its values were strings, not integers. If you wanted to force both columns to an integer type, you could use <code>df.astype(int)</code> instead.</p>
<hr />
<h1>4. <code>convert_dtypes()</code></h1>
<p>Version 1.0 and above includes a method <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html"" rel=""noreferrer""><code>convert_dtypes()</code></a> to convert Series and DataFrame columns to the best possible dtype that supports the <code>pd.NA</code> missing value.</p>
<p>Here &quot;best possible&quot; means the type most suited to hold the values. For example, this a pandas integer type, if all of the values are integers (or missing values): an object column of Python integer objects are converted to <code>Int64</code>, a column of NumPy <code>int32</code> values, will become the pandas dtype <code>Int32</code>.</p>
<p>With our <code>object</code> DataFrame <code>df</code>, we get the following result:</p>
<pre><code>&gt;&gt;&gt; df.convert_dtypes().dtypes                                             
a     Int64
b    string
dtype: object
</code></pre>
<p>Since column 'a' held integer values, it was converted to the <code>Int64</code> type (which is capable of holding missing values, unlike <code>int64</code>).</p>
<p>Column 'b' contained string objects, so was changed to pandas' <code>string</code> dtype.</p>
<p>By default, this method will infer the type from object values in each column. We can change this by passing <code>infer_objects=False</code>:</p>
<pre><code>&gt;&gt;&gt; df.convert_dtypes(infer_objects=False).dtypes                          
a    object
b    string
dtype: object
</code></pre>
<p>Now column 'a' remained an object column: pandas knows it can be described as an 'integer' column (internally it ran <a href=""https://github.com/pandas-dev/pandas/blob/6b2d0260c818e62052eaf535767f3a8c4b446c69/pandas/_libs/lib.pyx#L1188-L1434"" rel=""noreferrer""><code>infer_dtype</code></a>) but didn't infer exactly what dtype of integer it should have so did not convert it. Column 'b' was again converted to 'string' dtype as it was recognised as holding 'string' values.</p>
"
209854,"<p>Like this:</p>
<pre><code>keys = ['a', 'b', 'c']
values = [1, 2, 3]
dictionary = dict(zip(keys, values))
print(dictionary) # {'a': 1, 'b': 2, 'c': 3}
</code></pre>
<p>Voila :-)  The pairwise <a href=""https://docs.python.org/3/library/functions.html#func-dict"" rel=""noreferrer""><code>dict</code></a> constructor and <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a> function are awesomely useful.</p>
"
252711,"<p><a href=""https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>append</code></a> appends a specified object at the end of the list:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; x.append([4, 5])
&gt;&gt;&gt; print(x)
[1, 2, 3, [4, 5]]
</code></pre>
<p><a href=""https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>extend</code></a> extends the list by appending elements from the specified iterable:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; x.extend([4, 5])
&gt;&gt;&gt; print(x)
[1, 2, 3, 4, 5]
</code></pre>
"
,
52413247,"<h1>First: Do not post images of data, text only please</h1>
<h3>Second: Do not paste data in the comments section or as an answer, edit your question instead</h3>
<hr />
<h2>How to quickly provide sample data from a pandas DataFrame</h2>
<ul>
<li>There is more than one way to answer this question.  However, this answer isn't meant as an exhaustive solution.  It provides the simplest method possible.</li>
<li>For the curious, there are other more verbose solutions provided on Stack Overflow.</li>
</ul>
<ol>
<li>Provide a link to a shareable dataset (maybe on GitHub or a shared file on Google). This is particularly useful if it's a large dataset and the objective is to optimize some method.  The drawback is that the data may no longer be available in the future, which reduces the benefit of the post.
<ul>
<li>Data must be provided in the question, but can be accompanied by a link to a more extensive dataset.</li>
<li>Do not post only a link or an image of the data.</li>
</ul>
</li>
<li><strong>Provide the output of <code>df.head(10).to_clipboard(sep=',', index=True)</code></strong></li>
</ol>
<h2>Code:</h2>
<p><strong>Provide the output of <code>pandas.DataFrame.to_clipboard</code></strong></p>
<pre class=""lang-py prettyprint-override""><code>df.head(10).to_clipboard(sep=',', index=True)
</code></pre>
<ul>
<li>If you have a multi-index DataFrame add a note, telling which columns are the indices.</li>
<li><strong>Note</strong>: when the previous line of code is executed, no output will appear.
<ul>
<li>The result of the code is now on the clipboard.</li>
</ul>
</li>
<li>Paste the clipboard into a <code>code block</code> in your Stack Overflow question</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>,a,b
2020-07-30,2,4
2020-07-31,1,5
2020-08-01,2,2
2020-08-02,9,8
2020-08-03,4,0
2020-08-04,3,3
2020-08-05,7,7
2020-08-06,7,0
2020-08-07,8,4
2020-08-08,3,2
</code></pre>
<ul>
<li>This can be copied to the clipboard by someone trying to answer your question, and followed by:</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>df = pd.read_clipboard(sep=',')
</code></pre>
<h2>Locations of the dataframe other the <code>.head(10)</code></h2>
<ul>
<li>Specify a section of the dataframe with the <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iloc.html"" rel=""nofollow noreferrer""><code>.iloc</code></a> property</li>
<li>The following example selects rows 3 - 11 and all the columns</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>df.iloc[3:12, :].to_clipboard(sep=',')
</code></pre>
<h2>Additional References for <code>pd.read_clipboard</code></h2>
<ul>
<li><a href=""https://stackoverflow.com/questions/45800520"">Specify Multi-Level columns using pd.read_clipboard?</a></li>
<li><a href=""https://stackoverflow.com/questions/45528198"">How do you handle column names having spaces in them when using pd.read_clipboard?</a></li>
<li><a href=""https://stackoverflow.com/questions/45725500"">How to handle custom named index when copying a dataframe using pd.read_clipboard?</a></li>
</ul>
<h2>Google Colab Users</h2>
<ul>
<li><code>.to_clipboard()</code> won't work</li>
<li>Use <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_dict.html"" rel=""nofollow noreferrer""><code>.to_dict()</code></a> to copy your dataframe</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># if you have a datetime column, convert it to a str
df['date'] = df['date'].astype('str')

# if you have a datetime index, convert it to a str
df.index = df.index.astype('str')

# output to a dict
df.head(10).to_dict(orient='index')

# which will look like
{'2020-07-30': {'a': 2, 'b': 4},
 '2020-07-31': {'a': 1, 'b': 5},
 '2020-08-01': {'a': 2, 'b': 2},
 '2020-08-02': {'a': 9, 'b': 8},
 '2020-08-03': {'a': 4, 'b': 0},
 '2020-08-04': {'a': 3, 'b': 3},
 '2020-08-05': {'a': 7, 'b': 7},
 '2020-08-06': {'a': 7, 'b': 0},
 '2020-08-07': {'a': 8, 'b': 4},
 '2020-08-08': {'a': 3, 'b': 2}}

# copy the previous dict and paste into a code block on SO
# the dict can be converted to a dataframe with 
# df = pd.DataFrame.from_dict(d, orient='index')  # d is the name of the dict
# convert datatime column or index back to datetime
</code></pre>
<ul>
<li>For a more thorough answer using <code>.to_dict()</code>
<ul>
<li><a href=""https://stackoverflow.com/questions/63163254"">How to easily share a sample dataframe using df.to_dict()</a></li>
<li><a href=""https://stackoverflow.com/questions/32536193"">How to make good reproducible pandas examples</a></li>
</ul>
</li>
</ul>
"
3323013,"<p>It is a guard against a stack overflow, yes. Python (or rather, the CPython implementation) doesn't optimize tail recursion, and unbridled recursion causes stack overflows. You can check the recursion limit with <a href=""https://docs.python.org/library/sys.html#sys.getrecursionlimit"" rel=""noreferrer""><code>sys.getrecursionlimit</code></a>:</p>
<pre><code>import sys
print(sys.getrecursionlimit())
</code></pre>
<p>and change the recursion limit with <a href=""https://docs.python.org/library/sys.html#sys.setrecursionlimit"" rel=""noreferrer""><code>sys.setrecursionlimit</code></a>:</p>
<pre><code>sys.setrecursionlimit(1500)
</code></pre>
<p>but doing so is dangerous -- the standard limit is a little conservative, but Python stackframes can be quite big.</p>
<p>Python isn't a functional language and tail recursion is not a particularly efficient technique. Rewriting the algorithm iteratively, if possible, is generally a better idea.</p>
"
,
5082482,"<p>To answer your first question... <code>.format</code> just seems more sophisticated in many ways. An annoying thing about <code>%</code> is also how it can either take a variable or a tuple. You'd think the following would always work:</p>
<pre><code>&quot;Hello %s&quot; % name
</code></pre>
<p>yet, if <code>name</code> happens to be <code>(1, 2, 3)</code>, it will throw a <code>TypeError</code>. To guarantee that it always prints, you'd need to do</p>
<pre><code>&quot;Hello %s&quot; % (name,)   # supply the single argument as a single-item tuple
</code></pre>
<p>which is just ugly. <code>.format</code> doesn't have those issues. Also in the second example you gave, the <code>.format</code> example is much cleaner looking.</p>
<p>Only use it for backwards compatibility with Python 2.5.</p>
<hr />
<p>To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so the expression <code>log.debug(&quot;some debug info: %s&quot; % some_info)</code> will first evaluate the string to, e.g. <code>&quot;some debug info: roflcopters are active&quot;</code>, then that string will be passed to <code>log.debug()</code>.</p>
"
,
16985066,"<blockquote>
<p>unfortunately, this module needs to be inside the package, and it also
needs to be runnable as a script, sometimes. Any idea how I could
achieve that?</p>
</blockquote>
<p>It's quite common to have a layout like this...</p>
<pre><code>main.py
mypackage/
    __init__.py
    mymodule.py
    myothermodule.py
</code></pre>
<p>...with a <code>mymodule.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

# Exported function
def as_int(a):
    return int(a)

# Test function for module  
def _test():
    assert as_int('1') == 1

if __name__ == '__main__':
    _test()
</code></pre>
<p>...a <code>myothermodule.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

from .mymodule import as_int

# Exported function
def add(a, b):
    return as_int(a) + as_int(b)

# Test function for module  
def _test():
    assert add('1', '1') == 2

if __name__ == '__main__':
    _test()
</code></pre>
<p>...and a <code>main.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

from mypackage.myothermodule import add

def main():
    print(add('1', '1'))

if __name__ == '__main__':
    main()
</code></pre>
<p>...which works fine when you run <code>main.py</code> or <code>mypackage/mymodule.py</code>, but fails with <code>mypackage/myothermodule.py</code>, due to the relative import...</p>
<pre><code>from .mymodule import as_int
</code></pre>
<p>The way you're supposed to run it is by using the -m option and giving the path in the Python module system (rather than in the filesystem)...</p>
<pre><code>python3 -m mypackage.myothermodule
</code></pre>
<p>...but it's somewhat verbose, and doesn't mix well with a shebang line like <code>#!/usr/bin/env python3</code>.</p>
<p>An alternative is to avoid using relative imports, and just use...</p>
<pre><code>from mypackage.mymodule import as_int
</code></pre>
<p>Either way, you'll need to run from the parent of <code>mypackage</code>, or add that directory to <code>PYTHONPATH</code> (either one will ensure that <code>mypackage</code> is in the sys.path <a href=""https://docs.python.org/3/library/sys_path_init.html"" rel=""nofollow noreferrer"">module search path</a>). Or, if you want it to work &quot;out of the box&quot;, you can frob the <code>PYTHONPATH</code> in code first with this...</p>
<pre><code>import sys
import os

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(SCRIPT_DIR))

from mypackage.mymodule import as_int
</code></pre>
<p>It's kind of a pain, but there's a clue as to why in <a href=""http://mail.python.org/pipermail/python-3000/2007-April/006793.html"" rel=""nofollow noreferrer"">an email</a> written by a certain Guido van Rossum...</p>
<blockquote>
<p>I'm -1 on this and on any other proposed twiddlings of the <code>__main__</code>
machinery. The only use case seems to be running scripts that happen
to be living inside a module's directory, which I've always seen as an
antipattern. To make me change my mind you'd have to convince me that
it isn't.</p>
</blockquote>
<p>Whether running scripts inside a package is an antipattern or not is subjective, but personally I find it really useful in a package I have which contains some custom wxPython widgets, so I can run the script for any of the source files to display a <code>wx.Frame</code> containing only that widget for testing purposes.</p>
"
107717,"<p>From <a href=""http://mail.python.org/pipermail/tutor/2003-November/026645.html"" rel=""noreferrer"">Magnus Lycka answer on a mailing list</a>:</p>
<blockquote>
<p>You can skip buffering for a whole
python process using <code>python -u</code>
or by
setting the environment variable
PYTHONUNBUFFERED.</p>
<p>You could also replace sys.stdout with
some other stream like wrapper which
does a flush after every call.</p>
<pre><code>class Unbuffered(object):
   def __init__(self, stream):
       self.stream = stream
   def write(self, data):
       self.stream.write(data)
       self.stream.flush()
   def writelines(self, datas):
       self.stream.writelines(datas)
       self.stream.flush()
   def __getattr__(self, attr):
       return getattr(self.stream, attr)

import sys
sys.stdout = Unbuffered(sys.stdout)
print 'Hello'
</code></pre>
</blockquote>
"
743823,"<p>Given a string <code>sentence</code>, this stores each word in a list called <code>words</code>:</p>
<pre><code>words = sentence.split()
</code></pre>
"
9001529,"<blockquote>
<p><strong>Note:</strong> for Python 3.7+, see <a href=""https://stackoverflow.com/a/47017849"">this answer</a></p>
</blockquote>
<p>Standard Python dictionaries are unordered (until Python 3.7). Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a <code>dict</code> in a way that would preserve the ordering.</p>
<p>The easiest way is to use <a href=""http://docs.python.org/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>OrderedDict</code></a>, which remembers the order in which the elements have been inserted:</p>
<pre><code>In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])
</code></pre>
<p>Never mind the way <code>od</code> is printed out; it'll work as expected:</p>
<pre><code>In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5
</code></pre>
<h2>Python 3</h2>
<p>For Python 3 users, one needs to use the <code>.items()</code> instead of <code>.iteritems()</code>:</p>
<pre><code>In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5
</code></pre>
"
68672,"<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>
<pre><code>&gt;&gt;&gt; class MyClass:
...     i = 3
...
&gt;&gt;&gt; MyClass.i
3 
</code></pre>
<p>As @<a href=""https://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067"">millerdev</a> points out, this creates a class-level <code>i</code> variable, but this is distinct from any instance-level <code>i</code> variable, so you could have</p>
<pre><code>&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.i = 4
&gt;&gt;&gt; MyClass.i, m.i
&gt;&gt;&gt; (3, 4)
</code></pre>
<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>
<p>See <a href=""https://docs.python.org/3/tutorial/classes.html#class-objects"" rel=""noreferrer"">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>
<p>@Steve Johnson has already answered regarding <a href=""http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod"" rel=""noreferrer"">static methods</a>, also documented under <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"">&quot;Built-in Functions&quot; in the Python Library Reference</a>.</p>
<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</code></pre>
<p>@beidy recommends <a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer"">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument.</p>
"
3394898,"<p><a href=""http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists"" rel=""noreferrer"">The syntax is the <code>*</code> and <code>**</code></a>.  The names <code>*args</code> and <code>**kwargs</code> are only by convention but there's no hard requirement to use them.</p>

<p>You would use <code>*args</code> when you're not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function.  For example:</p>

<pre><code>&gt;&gt;&gt; def print_everything(*args):
        for count, thing in enumerate(args):
...         print( '{0}. {1}'.format(count, thing))
...
&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')
0. apple
1. banana
2. cabbage
</code></pre>

<p>Similarly, <code>**kwargs</code> allows you to handle named arguments that you have not defined in advance:</p>

<pre><code>&gt;&gt;&gt; def table_things(**kwargs):
...     for name, value in kwargs.items():
...         print( '{0} = {1}'.format(name, value))
...
&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')
cabbage = vegetable
apple = fruit
</code></pre>

<p>You can use these along with named arguments too.  The explicit arguments get values first and then everything else is passed to <code>*args</code> and <code>**kwargs</code>.  The named arguments come first in the list.  For example:</p>

<pre><code>def table_things(titlestring, **kwargs)
</code></pre>

<p>You can also use both in the same function definition but <code>*args</code> must occur before <code>**kwargs</code>.</p>

<p>You can also use the <code>*</code> and <code>**</code> syntax when calling a function.  For example:</p>

<pre><code>&gt;&gt;&gt; def print_three_things(a, b, c):
...     print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))
...
&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']
&gt;&gt;&gt; print_three_things(*mylist)
a = aardvark, b = baboon, c = cat
</code></pre>

<p>As you can see in this case it takes the list (or tuple) of items and unpacks it. By this it matches them to the arguments in the function.  Of course, you could have a <code>*</code> both in the function definition and in the function call.</p>
"
54432584,"<h1><code>apply</code>, the Convenience Function you Never Needed</h1>
<p>We start by addressing the questions in the OP, one by one.</p>
<blockquote>
<h2>&quot;If <code>apply</code> is so bad, then why is it in the API?&quot;</h2>
</blockquote>
<p><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply"" rel=""noreferrer""><code>DataFrame.apply</code></a> and <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html"" rel=""noreferrer""><code>Series.apply</code></a> are <em>convenience functions</em> defined on DataFrame and Series object respectively. <code>apply</code> accepts any user defined function that applies a transformation/aggregation on a DataFrame. <code>apply</code> is effectively a silver bullet that does whatever any existing pandas function cannot do.</p>
<p>Some of the things <code>apply</code> can do:</p>
<ul>
<li>Run any user-defined function on a DataFrame or Series</li>
<li>Apply a function either row-wise (<code>axis=1</code>) or column-wise (<code>axis=0</code>) on a DataFrame</li>
<li>Perform index alignment while applying the function</li>
<li>Perform aggregation with user-defined functions (however, we usually prefer <code>agg</code> or <code>transform</code> in these cases)</li>
<li>Perform element-wise transformations</li>
<li>Broadcast aggregated results to original rows (see the <code>result_type</code> argument).</li>
<li>Accept positional/keyword arguments to pass to the user-defined functions.</li>
</ul>
<p>...Among others. For more information, see <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#row-or-column-wise-function-application"" rel=""noreferrer"">Row or Column-wise Function Application</a> in the documentation.</p>
<p>So, with all these features, why is <code>apply</code> bad? It is <strong>because <code>apply</code> is</strong> <strong>slow</strong>. Pandas makes no assumptions about the nature of your function, and so <strong>iteratively applies your function</strong> to each row/column as necessary. Additionally, handling <em>all</em> of the situations above means <code>apply</code> incurs some major overhead at each iteration. Further, <code>apply</code> consumes a lot more memory, which is a challenge for memory bounded applications.</p>
<p>There are very few situations where <code>apply</code> is appropriate to use (more on that below). <strong>If you're not sure whether you should be using <code>apply</code>, you probably shouldn't.</strong></p>
<hr />
<hr />
<p>Let's address the next question.</p>
<blockquote>
<h2>&quot;How and when should I make my code <code>apply</code>-free?&quot;</h2>
</blockquote>
<p>To rephrase, here are some common situations where you will want to <em>get rid</em> of any calls to <code>apply</code>.</p>
<h3><strong>Numeric Data</strong></h3>
<p>If you're working with numeric data, there is likely already a vectorized cython function that does exactly what you're trying to do (if not, please either ask a question on Stack Overflow or open a feature request on GitHub).</p>
<p>Contrast the performance of <code>apply</code> for a simple addition operation.</p>
<pre><code>df = pd.DataFrame({&quot;A&quot;: [9, 4, 2, 1], &quot;B&quot;: [12, 7, 5, 4]})
df

   A   B
0  9  12
1  4   7
2  2   5
3  1   4
</code></pre>
<p>&lt;!- -&gt;</p>
<pre><code>df.apply(np.sum)

A    16
B    28
dtype: int64

df.sum()

A    16
B    28
dtype: int64
</code></pre>
<p>Performance wise, there's no comparison, the cythonized equivalent is much faster. There's no need for a graph, because the difference is obvious even for toy data.</p>
<pre><code>%timeit df.apply(np.sum)
%timeit df.sum()
2.22 ms Â± 41.2 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
471 Âµs Â± 8.16 Âµs per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<p>Even if you enable passing raw arrays with the <code>raw</code> argument, it's still twice as slow.</p>
<pre><code>%timeit df.apply(np.sum, raw=True)
840 Âµs Â± 691 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
</code></pre>
<p>Another example:</p>
<pre><code>df.apply(lambda x: x.max() - x.min())

A    8
B    8
dtype: int64

df.max() - df.min()

A    8
B    8
dtype: int64

%timeit df.apply(lambda x: x.max() - x.min())
%timeit df.max() - df.min()

2.43 ms Â± 450 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
1.23 ms Â± 14.7 Âµs per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<p>In general, <strong>seek out vectorized alternatives if possible.</strong></p>
<hr />
<h3><strong>String/Regex</strong></h3>
<p>Pandas provides &quot;vectorized&quot; string functions in most situations, but there are rare cases where those functions do not... &quot;apply&quot;, so to speak.</p>
<p>A common problem is to check whether a value in a column is present in another column of the same row.</p>
<pre><code>df = pd.DataFrame({
    'Name': ['mickey', 'donald', 'minnie'],
    'Title': ['wonderland', &quot;welcome to donald's castle&quot;, 'Minnie mouse clubhouse'],
    'Value': [20, 10, 86]})
df

     Name  Value                       Title
0  mickey     20                  wonderland
1  donald     10  welcome to donald's castle
2  minnie     86      Minnie mouse clubhouse
</code></pre>
<p>This should return the row second and third row, since &quot;donald&quot; and &quot;minnie&quot; are present in their respective &quot;Title&quot; columns.</p>
<p>Using apply, this would be done using</p>
<pre><code>df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)

0    False
1     True
2     True
dtype: bool
 
df[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]

     Name                       Title  Value
1  donald  welcome to donald's castle     10
2  minnie      Minnie mouse clubhouse     86
</code></pre>
<p>However, a better solution exists using list comprehensions.</p>
<pre><code>df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]

     Name                       Title  Value
1  donald  welcome to donald's castle     10
2  minnie      Minnie mouse clubhouse     86
</code></pre>
<p>&lt;!- -&gt;</p>
<pre><code>%timeit df[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]
%timeit df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]

2.85 ms Â± 38.4 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
788 Âµs Â± 16.4 Âµs per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<p>The thing to note here is that iterative routines happen to be faster than <code>apply</code>, because of the lower overhead. If you need to handle NaNs and invalid dtypes, you can build on this using a custom function you can then call with arguments inside the list comprehension.</p>
<p>For more information on when list comprehensions should be considered a good option, see my writeup: <a href=""https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care"">Are for-loops in pandas really bad? When should I care?</a>.</p>
<blockquote>
<p><strong>Note</strong><br />
Date and datetime operations also have vectorized versions. So, for example, you should prefer <code>pd.to_datetime(df['date'])</code>, over,
say, <code>df['date'].apply(pd.to_datetime)</code>.</p>
<p>Read more at the
<a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html"" rel=""noreferrer"">docs</a>.</p>
</blockquote>
<hr />
<h3><strong>A Common Pitfall: Exploding Columns of Lists</strong></h3>
<pre><code>s = pd.Series([[1, 2]] * 3)
s

0    [1, 2]
1    [1, 2]
2    [1, 2]
dtype: object
</code></pre>
<p>People are tempted to use <code>apply(pd.Series)</code>. This is <em>horrible</em> in terms of performance.</p>
<pre><code>s.apply(pd.Series)

   0  1
0  1  2
1  1  2
2  1  2
</code></pre>
<p>A better option is to listify the column and pass it to pd.DataFrame.</p>
<pre><code>pd.DataFrame(s.tolist())

   0  1
0  1  2
1  1  2
2  1  2
</code></pre>
<p>&lt;!- -&gt;</p>
<pre><code>%timeit s.apply(pd.Series)
%timeit pd.DataFrame(s.tolist())

2.65 ms Â± 294 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
816 Âµs Â± 40.5 Âµs per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<hr />
<hr />
<p>Lastly,</p>
<blockquote>
<h2>&quot;Are there any situations where <code>apply</code> is good?&quot;</h2>
</blockquote>
<p>Apply is a convenience function, so there <em>are</em> situations where the overhead is negligible enough to forgive. It really depends on how many times the function is called.</p>
<p><strong>Functions that are Vectorized for Series, but not DataFrames</strong><br />
What if you want to apply a string operation on multiple columns? What if you want to convert multiple columns to datetime? These functions are vectorized for Series only, so they must be <em>applied</em> over each column that you want to convert/operate on.</p>
<pre><code>df = pd.DataFrame(
         pd.date_range('2018-12-31','2019-01-31', freq='2D').date.astype(str).reshape(-1, 2), 
         columns=['date1', 'date2'])
df

       date1      date2
0 2018-12-31 2019-01-02
1 2019-01-04 2019-01-06
2 2019-01-08 2019-01-10
3 2019-01-12 2019-01-14
4 2019-01-16 2019-01-18
5 2019-01-20 2019-01-22
6 2019-01-24 2019-01-26
7 2019-01-28 2019-01-30

df.dtypes

date1    object
date2    object
dtype: object
    
</code></pre>
<p>This is an admissible case for <code>apply</code>:</p>
<pre><code>df.apply(pd.to_datetime, errors='coerce').dtypes

date1    datetime64[ns]
date2    datetime64[ns]
dtype: object
</code></pre>
<p>Note that it would also make sense to <code>stack</code>, or just use an explicit loop. All these options are slightly faster than using <code>apply</code>, but the difference is small enough to forgive.</p>
<pre><code>%timeit df.apply(pd.to_datetime, errors='coerce')
%timeit pd.to_datetime(df.stack(), errors='coerce').unstack()
%timeit pd.concat([pd.to_datetime(df[c], errors='coerce') for c in df], axis=1)
%timeit for c in df.columns: df[c] = pd.to_datetime(df[c], errors='coerce')

5.49 ms Â± 247 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
3.94 ms Â± 48.1 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
3.16 ms Â± 216 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
2.41 ms Â± 1.71 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
</code></pre>
<p>You can make a similar case for other operations such as string operations, or conversion to category.</p>
<pre><code>u = df.apply(lambda x: x.str.contains(...))
v = df.apply(lambda x: x.astype(category))
</code></pre>
<p>v/s</p>
<pre><code>u = pd.concat([df[c].str.contains(...) for c in df], axis=1)
v = df.copy()
for c in df:
    v[c] = df[c].astype(category)
</code></pre>
<p>And so on...</p>
<hr />
<h3><strong>Converting Series to <code>str</code>: <code>astype</code> versus <code>apply</code></strong></h3>
<p>This seems like an idiosyncrasy of the API. Using <code>apply</code> to convert integers in a Series to string is comparable (and sometimes faster) than using <code>astype</code>.</p>
<p><a href=""https://i.stack.imgur.com/eSs2r.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/eSs2r.png"" alt=""enter image description here"" /></a>
The graph was plotted using the <a href=""https://github.com/nschloe/perfplot"" rel=""noreferrer""><code>perfplot</code></a> library.</p>
<pre><code>import perfplot

perfplot.show(
    setup=lambda n: pd.Series(np.random.randint(0, n, n)),
    kernels=[
        lambda s: s.astype(str),
        lambda s: s.apply(str)
    ],
    labels=['astype', 'apply'],
    n_range=[2**k for k in range(1, 20)],
    xlabel='N',
    logx=True,
    logy=True,
    equality_check=lambda x, y: (x == y).all())
</code></pre>
<p>With floats, I see the <code>astype</code> is consistently as fast as, or slightly faster than <code>apply</code>. So this has to do with the fact that the data in the test is integer type.</p>
<hr />
<h3><strong><code>GroupBy</code> operations with chained transformations</strong></h3>
<p><code>GroupBy.apply</code> has not been discussed until now, but <code>GroupBy.apply</code> is also an iterative convenience function to handle anything that the existing <code>GroupBy</code> functions do not.</p>
<p>One common requirement is to perform a GroupBy and then two prime operations such as a &quot;lagged cumsum&quot;:</p>
<pre><code>df = pd.DataFrame({&quot;A&quot;: list('aabcccddee'), &quot;B&quot;: [12, 7, 5, 4, 5, 4, 3, 2, 1, 10]})
df

   A   B
0  a  12
1  a   7
2  b   5
3  c   4
4  c   5
5  c   4
6  d   3
7  d   2
8  e   1
9  e  10
</code></pre>
<p>&lt;!- -&gt;</p>
<p>You'd need two successive groupby calls here:</p>
<pre><code>df.groupby('A').B.cumsum().groupby(df.A).shift()
 
0     NaN
1    12.0
2     NaN
3     NaN
4     4.0
5     9.0
6     NaN
7     3.0
8     NaN
9     1.0
Name: B, dtype: float64
</code></pre>
<p>Using <code>apply</code>, you can shorten this to a a single call.</p>
<pre><code>df.groupby('A').B.apply(lambda x: x.cumsum().shift())

0     NaN
1    12.0
2     NaN
3     NaN
4     4.0
5     9.0
6     NaN
7     3.0
8     NaN
9     1.0
Name: B, dtype: float64
</code></pre>
<p>It is very hard to quantify the performance because it depends on the data. But in general, <code>apply</code> is an acceptable solution if the goal is to reduce a <code>groupby</code> call (because <code>groupby</code> is also quite expensive).</p>
<hr />
<hr />
<h2>Other Caveats</h2>
<p>Aside from the caveats mentioned above, it is also worth mentioning that <code>apply</code> operates on the first row (or column) twice. This is done to determine whether the function has any side effects. If not, <code>apply</code> may be able to use a fast-path for evaluating the result, else it falls back to a slow implementation.</p>
<pre><code>df = pd.DataFrame({
    'A': [1, 2],
    'B': ['x', 'y']
})

def func(x):
    print(x['A'])
    return x

df.apply(func, axis=1)

# 1
# 1
# 2
   A  B
0  1  x
1  2  y
</code></pre>
<p>This behaviour is also seen in <code>GroupBy.apply</code> on pandas versions &lt;0.25 (it was fixed for 0.25, <a href=""https://stackoverflow.com/a/56215416/4909087"">see here for more information</a>.)</p>
"
576183,"<p><code>super()</code> lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=236275"" rel=""noreferrer"">fun stuff</a> can happen. See the <a href=""https://docs.python.org/2/library/functions.html#super"" rel=""noreferrer"">standard docs on super</a> if you haven't already.</p>

<p>Note that <a href=""https://docs.python.org/3/library/functions.html#super"" rel=""noreferrer"">the syntax changed in Python 3.0</a>: you can just say <code>super().__init__()</code> instead of <code>super(ChildB, self).__init__()</code> which IMO is quite a bit nicer. The standard docs also refer to a <a href=""https://rhettinger.wordpress.com/2011/05/26/super-considered-super/"" rel=""noreferrer"">guide to using <code>super()</code></a> which is quite explanatory.</p>
"
1009864,"<p>The canonical solution in the standard library is <code>argparse</code> (<a href=""https://docs.python.org/3/library/argparse.html"" rel=""noreferrer"">docs</a>):</p>

<p>Here is an example:</p>

<pre><code>from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument(""-f"", ""--file"", dest=""filename"",
                    help=""write report to FILE"", metavar=""FILE"")
parser.add_argument(""-q"", ""--quiet"",
                    action=""store_false"", dest=""verbose"", default=True,
                    help=""don't print status messages to stdout"")

args = parser.parse_args()
</code></pre>

<p><code>argparse</code> supports (among other things):</p>

<ul>
<li>Multiple options in any order.</li>
<li>Short and long options.</li>
<li>Default values.</li>
<li>Generation of a usage help message.</li>
</ul>
"
10063039,"<p>If <code>a</code> and <code>b</code> are Boolean NumPy arrays, the <code>&amp;</code> operation returns the elementwise-and of them:</p>
<pre><code>a &amp; b
</code></pre>
<p>That returns a Boolean <em>array</em>. To reduce this to a single Boolean <em>value</em>, use either</p>
<pre><code>(a &amp; b).any()
</code></pre>
<p>or</p>
<pre><code>(a &amp; b).all()
</code></pre>
<p>Note: if <code>a</code> and <code>b</code> are <em>non-Boolean</em> arrays, consider <code>(a - b).any()</code> or <code>(a - b).all()</code> instead.</p>
<hr />
<h4>Rationale</h4>
<p>The NumPy developers felt there was no one commonly understood way to evaluate an array in Boolean context: it could mean <code>True</code> if <em>any</em> element is <code>True</code>, or it could mean <code>True</code> if <em>all</em> elements are <code>True</code>, or <code>True</code> if the array has non-zero length, just to name three possibilities.</p>
<p>Since different users might have different needs and different assumptions, the
NumPy developers refused to guess and instead decided to raise a <code>ValueError</code> whenever one tries to evaluate an array in Boolean context. Applying <code>and</code> to two numpy arrays causes the two arrays to be evaluated in Boolean context (by calling <code>__bool__</code> in Python3 or <code>__nonzero__</code> in Python2).</p>
"
22221675,"<p>You can do this using <code>groupby</code> to group on the column of interest and then <code>apply</code> <code>list</code> to every group:</p>

<pre><code>In [1]: df = pd.DataFrame( {'a':['A','A','B','B','B','C'], 'b':[1,2,5,5,4,6]})
        df

Out[1]: 
   a  b
0  A  1
1  A  2
2  B  5
3  B  5
4  B  4
5  C  6

In [2]: df.groupby('a')['b'].apply(list)
Out[2]: 
a
A       [1, 2]
B    [5, 5, 4]
C          [6]
Name: b, dtype: object

In [3]: df1 = df.groupby('a')['b'].apply(list).reset_index(name='new')
        df1
Out[3]: 
   a        new
0  A     [1, 2]
1  B  [5, 5, 4]
2  C        [6]
</code></pre>
"
8548165,"<p>pip is run from the command line, not the Python interpreter. It is a program that <strong>installs</strong> modules, so you can use them from Python. Once you have installed the module, then you can open the Python shell and do <code>import selenium</code>.</p>

<p>The Python shell is not a command line, it is an interactive interpreter. You type Python code into it, not commands.</p>
"
5466478,"<p>You need to double the <code>{{</code> and <code>}}</code>:</p>

<pre><code>&gt;&gt;&gt; x = "" {{ Hello }} {0} ""
&gt;&gt;&gt; print(x.format(42))
' { Hello } 42 '
</code></pre>

<p>Here's the relevant part of the <a href=""https://docs.python.org/library/string.html#formatstrings"" rel=""noreferrer"">Python documentation for format string syntax</a>:</p>

<blockquote>
  <p>Format strings contain âreplacement fieldsâ surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p>
</blockquote>
"
931095,"<p>Using <a href=""https://stackoverflow.com/questions/509211/understanding-slicing"">slicing</a>:</p>
<pre><code>&gt;&gt;&gt; 'hello world'[::-1]
'dlrow olleh'
</code></pre>
<hr />
<p>Slice notation takes the form <code>[start:stop:step]</code>. In this case, we omit the <code>start</code> and <code>stop</code> positions since we want the whole string. We also use <code>step = -1</code>, which means, &quot;repeatedly step from right to left by 1 character&quot;.</p>
"
4020824,"<p>The correct thing to do is use the 'string-escape' code to decode the string.</p>

<pre><code>&gt;&gt;&gt; myString = ""spam\\neggs""
&gt;&gt;&gt; decoded_string = bytes(myString, ""utf-8"").decode(""unicode_escape"") # python3 
&gt;&gt;&gt; decoded_string = myString.decode('string_escape') # python2
&gt;&gt;&gt; print(decoded_string)
spam
eggs
</code></pre>

<p>Don't use the AST or eval. Using the string codecs is much safer.</p>
"
1466036,"<p>The opening modes are exactly the same as those for the C standard library function <strong><code>fopen()</code></strong>.</p>

<p><a href=""http://www.manpagez.com/man/3/fopen/"" rel=""noreferrer"">The BSD <code>fopen</code> manpage</a> defines them as follows:</p>

<pre class=""lang-none prettyprint-override""><code> The argument mode points to a string beginning with one of the following
 sequences (Additional characters may follow these sequences.):

 ``r''   Open text file for reading.  The stream is positioned at the
         beginning of the file.

 ``r+''  Open for reading and writing.  The stream is positioned at the
         beginning of the file.

 ``w''   Truncate file to zero length or create text file for writing.
         The stream is positioned at the beginning of the file.

 ``w+''  Open for reading and writing.  The file is created if it does not
         exist, otherwise it is truncated.  The stream is positioned at
         the beginning of the file.

 ``a''   Open for writing.  The file is created if it does not exist.  The
         stream is positioned at the end of the file.  Subsequent writes
         to the file will always end up at the then current end of file,
         irrespective of any intervening fseek(3) or similar.

 ``a+''  Open for reading and writing.  The file is created if it does not
         exist.  The stream is positioned at the end of the file.  Subse-
         quent writes to the file will always end up at the then current
         end of file, irrespective of any intervening fseek(3) or similar.
</code></pre>
"
52108199,"<h2><strong>Replacing <code>cdc_</code> string</strong></h2>
<p>You can use <a href=""https://en.wikipedia.org/wiki/Vim_%28text_editor%29"" rel=""nofollow noreferrer"">Vim</a> or <a href=""https://en.wikipedia.org/wiki/Perl"" rel=""nofollow noreferrer"">Perl</a> to replace the <code>cdc_</code> string in <code>chromedriver</code>. <em>See the <a href=""https://stackoverflow.com/a/41220267/6841414"">answer by @Erti-Chris Eelmaa</a> to learn more about that string and how it's a detection point</em>.</p>
<p>Using Vim or Perl prevents you from having to recompile source code or use a hex editor.</p>
<p><strong>Make sure to make a copy of the original <code>chromedriver</code> before attempting to edit it.</strong></p>
<p>Our goal is to alter the <code>cdc_</code> string, which looks something like <code>$cdc_lasutopfhvcZLmcfl</code>.</p>
<p>The methods below were tested on <code>chromedriver version 2.41.578706</code>.</p>
<hr />
<h2><strong>Using Vim</strong></h2>
<pre><code>vim -b /path/to/chromedriver
</code></pre>
<p>After running the line above, you'll probably see a bunch of gibberish. Do the following:</p>
<ol>
<li>Replace all instances of <code>cdc_</code> with <code>dog_</code> by typing <code>:%s/cdc_/dog_/g</code>.
<ul>
<li><code>dog_</code> is just an example. You can choose anything as long as it has the same amount of characters as the search string (e.g., <code>cdc_</code>), otherwise the <code>chromedriver</code> will fail.</li>
</ul>
</li>
<li>To save the changes and quit, type <code>:wq!</code> and press <code>return</code>.
<ul>
<li>If you need to quit without saving changes, type <code>:q!</code> and press <code>return</code>.</li>
</ul>
</li>
</ol>
<p>The <code>-b</code> option tells vim upfront to open the file as a binary, so it won't mess with things like (missing) line endings (especially at the end of the file).</p>
<hr />
<h2><strong>Using Perl</strong></h2>
<p>The line below replaces all <code>cdc_</code> occurrences with <code>dog_</code>. Credit to <a href=""https://stackoverflow.com/questions/33225947/can-a-website-detect-when-you-are-using-selenium-with-chromedriver/52108199?noredirect=1#comment84056917_41220267"">Vic Seedoubleyew</a>:</p>
<pre><code>perl -pi -e 's/cdc_/dog_/g' /path/to/chromedriver
</code></pre>
<p>Make sure that the replacement string (e.g., <code>dog_</code>) has the same number of characters as the search string (e.g., <code>cdc_</code>), otherwise the <code>chromedriver</code> will fail.</p>
<hr />
<h2><em><strong>Wrapping Up</strong></em></h2>
<p>To verify that all occurrences of <code>cdc_</code> were replaced:</p>
<pre><code>grep &quot;cdc_&quot; /path/to/chromedriver
</code></pre>
<p>If no output was returned, the replacement was successful.</p>
<p>Go to the altered <code>chromedriver</code> and double click on it. A terminal window should open up. If you don't see <code>killed</code> in the output, you've successfully altered the driver.</p>
<p>Make sure that the name of the altered <code>chromedriver</code> binary is <code>chromedriver</code>, and that the original binary is either moved from its original location or renamed.</p>
<hr />
<h2><em><strong>My Experience With This Method</strong></em></h2>
<p>I was previously being detected on a website while trying to log in, but after replacing <code>cdc_</code> with an equal sized string, I was able to log in. Like others have said though, if you've already been detected, you might get blocked for a plethora of other reasons even after using this method. So you may have to try accessing the site that was detecting you using a VPN, different network, etc.</p>
"
20250996,"<p>You can use <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html"" rel=""noreferrer""><code>.replace</code></a>.  For example:</p>

<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'col2': {0: 'a', 1: 2, 2: np.nan}, 'col1': {0: 'w', 1: 1, 2: 2}})
&gt;&gt;&gt; di = {1: ""A"", 2: ""B""}
&gt;&gt;&gt; df
  col1 col2
0    w    a
1    1    2
2    2  NaN
&gt;&gt;&gt; df.replace({""col1"": di})
  col1 col2
0    w    a
1    A    2
2    B  NaN
</code></pre>

<p>or directly on the <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.replace.html"" rel=""noreferrer""><code>Series</code></a>, i.e. <code>df[""col1""].replace(di, inplace=True)</code>.</p>
"
494273,"<p>You may use the <a href=""http://docs.python.org/library/signal.html"" rel=""noreferrer"">signal</a> package if you are running on UNIX:</p>
<pre><code>In [1]: import signal

# Register an handler for the timeout
In [2]: def handler(signum, frame):
   ...:     print(&quot;Forever is over!&quot;)
   ...:     raise Exception(&quot;end of time&quot;)
   ...: 

# This function *may* run for an indetermined time...
In [3]: def loop_forever():
   ...:     import time
   ...:     while 1:
   ...:         print(&quot;sec&quot;)
   ...:         time.sleep(1)
   ...:         
   ...:         

# Register the signal function handler
In [4]: signal.signal(signal.SIGALRM, handler)
Out[4]: 0

# Define a timeout for your function
In [5]: signal.alarm(10)
Out[5]: 0

In [6]: try:
   ...:     loop_forever()
   ...: except Exception, exc: 
   ...:     print(exc)
   ....: 
sec
sec
sec
sec
sec
sec
sec
sec
Forever is over!
end of time

# Cancel the timer if the function returned before timeout
# (ok, mine won't but yours maybe will :)
In [7]: signal.alarm(0)
Out[7]: 0
</code></pre>
<p>10 seconds after the call <code>signal.alarm(10)</code>, the handler is called. This raises an exception that you can intercept from the regular Python code.</p>
<p>This module doesn't play well with threads (but then, who does?)</p>
<p><strong>Note that</strong> since we raise an exception when timeout happens, it may end up caught and ignored inside the function, for example of one such function:</p>
<pre><code>def loop_forever():
    while 1:
        print('sec')
        try:
            time.sleep(10)
        except:
            continue
</code></pre>
"
33533514,"<p><strong>TL;DR</strong>: As of today (2019), in Python 3.7+ you can turn this feature on using a &quot;future&quot; statement, <code>from __future__ import annotations</code>.</p>
<p>(The behaviour enabled by <code>from __future__ import annotations</code> <em>might</em> become the default in future versions of Python, and <a href=""https://www.python.org/dev/peps/pep-0563/"" rel=""noreferrer"">was going</a> to be made the default in Python 3.10. However, the change in 3.10 <a href=""https://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/"" rel=""noreferrer"">was reverted</a> at the last minute, and now may not happen at all.)</p>
<p>In Python 3.6 or below, you should use a string.</p>
<hr />
<p>I guess you got this exception:</p>
<pre><code>NameError: name 'Position' is not defined
</code></pre>
<p>This is because <code>Position</code> must be defined before you can use it in an annotation, unless you are using Python with <a href=""https://www.python.org/dev/peps/pep-0563/"" rel=""noreferrer"">PEP 563</a> changes enabled.</p>
<h2>Python 3.7+: <code>from __future__ import annotations</code></h2>
<p>Python 3.7 introduces <a href=""https://www.python.org/dev/peps/pep-0563/"" rel=""noreferrer"">PEP 563: postponed evaluation of annotations</a>. A module that uses the future statement <code>from __future__ import annotations</code> will store annotations as strings automatically:</p>
<pre><code>from __future__ import annotations

class Position:
    def __add__(self, other: Position) -&gt; Position:
        ...
</code></pre>
<p>This had been scheduled to become the default in Python 3.10, but this change has now been postponed. Since Python still is a dynamically typed language so no type-checking is done at runtime, typing annotations should have no performance impact, right? Wrong! Before Python 3.7, the typing module used to be <a href=""https://www.python.org/dev/peps/pep-0560/#performance"" rel=""noreferrer"">one of the slowest python modules in core</a> so <strong>for code that involves importing the <code>typing</code> module, you will see an <a href=""https://docs.python.org/3.7/whatsnew/3.7.html#pep-560-core-support-for-typing-module-and-generic-types"" rel=""noreferrer"">up to 7 times increase in performance</a> when you upgrade to 3.7.</strong></p>
<h2>Python &lt;3.7: use a string</h2>
<p><a href=""https://www.python.org/dev/peps/pep-0484/#forward-references"" rel=""noreferrer"">According to PEP 484</a>, you should use a string instead of the class itself:</p>
<pre><code>class Position:
    ...
    def __add__(self, other: 'Position') -&gt; 'Position':
       ...
</code></pre>
<p>If you use the Django framework, this may be familiar, as Django models also use strings for forward references (foreign key definitions where the foreign model is <code>self</code> or is not declared yet). This should work with Pycharm and other tools.</p>
<h2>Sources</h2>
<p>The relevant parts of PEP 484 and PEP 563, to spare you the trip:</p>
<blockquote>
<h1><a href=""https://www.python.org/dev/peps/pep-0484/#forward-references"" rel=""noreferrer"">Forward references</a></h1>
<p>When a type hint contains names that have not been defined yet, that definition may be expressed as a string literal, to be resolved later.</p>
<p>A situation where this occurs commonly is the definition of a container class, where the class being defined occurs in the signature of some of the methods. For example, the following code (the start of a simple binary tree implementation) does not work:</p>
<pre><code>class Tree:
    def __init__(self, left: Tree, right: Tree):
        self.left = left
        self.right = right
</code></pre>
<p>To address this, we write:</p>
<pre><code>class Tree:
    def __init__(self, left: 'Tree', right: 'Tree'):
        self.left = left
        self.right = right
</code></pre>
<p>The string literal should contain a valid Python expression (i.e., compile(lit, '', 'eval') should be a valid code object) and it should evaluate without errors once the module has been fully loaded. The local and global namespace in which it is evaluated should be the same namespaces in which default arguments to the same function would be evaluated.</p>
</blockquote>
<p>and PEP 563:</p>
<blockquote>
<h1><a href=""https://www.python.org/dev/peps/pep-0563/#implementation"" rel=""noreferrer"">Implementation</a></h1>
<p>In Python 3.10, function and variable annotations will no longer be evaluated at definition time. Instead, a string form will be preserved in the respectiveÂ <code>__annotations__</code>Â dictionary. Static type checkers will see no difference in behavior, whereas tools using annotations at runtime will have to perform postponed evaluation.</p>
<p>...</p>
<h2><a href=""https://www.python.org/dev/peps/pep-0563/#enabling-the-future-behavior-in-python-3-7"" rel=""noreferrer"">Enabling the future behavior in Python 3.7</a></h2>
<p>The functionality described above can be enabled starting from Python 3.7 using the following special import:</p>
<pre><code>from __future__ import annotations
</code></pre>
</blockquote>
<h2>Things that you may be tempted to do instead</h2>
<h3>A. Define a dummy <code>Position</code></h3>
<p>Before the class definition, place a dummy definition:</p>
<pre><code>class Position(object):
    pass


class Position(object):
    ...
</code></pre>
<p>This will get rid of the <code>NameError</code> and may even look OK:</p>
<pre><code>&gt;&gt;&gt; Position.__add__.__annotations__
{'other': __main__.Position, 'return': __main__.Position}
</code></pre>
<p>But is it?</p>
<pre><code>&gt;&gt;&gt; for k, v in Position.__add__.__annotations__.items():
...     print(k, 'is Position:', v is Position)                                                                                                                                                                                                                  
return is Position: False
other is Position: False
</code></pre>
<h3>B. Monkey-patch in order to add the annotations:</h3>
<p>You may want to try some Python metaprogramming magic and write a decorator
to monkey-patch the class definition in order to add annotations:</p>
<pre><code>class Position:
    ...
    def __add__(self, other):
        return self.__class__(self.x + other.x, self.y + other.y)
</code></pre>
<p>The decorator should be responsible for the equivalent of this:</p>
<pre><code>Position.__add__.__annotations__['return'] = Position
Position.__add__.__annotations__['other'] = Position
</code></pre>
<p>At least it seems right:</p>
<pre><code>&gt;&gt;&gt; for k, v in Position.__add__.__annotations__.items():
...     print(k, 'is Position:', v is Position)                                                                                                                                                                                                                  
return is Position: True
other is Position: True
</code></pre>
<p>Probably too much trouble.</p>
"
606199,"<p><a href=""https://docs.python.org/3/library/stdtypes.html#bytes.decode"" rel=""noreferrer"">Decode the <code>bytes</code> object</a> to produce a string:</p>
<pre><code>&gt;&gt;&gt; b&quot;abcde&quot;.decode(&quot;utf-8&quot;) 
'abcde'
</code></pre>
<p>The above example <em>assumes</em> that the <code>bytes</code> object is in UTF-8, because it is a common encoding. However, you should use the encoding your data is actually in!</p>
"
189685,"<p>My first instinct would be to refactor the nested loop into a function and use <code>return</code> to break out. </p>
"
2068548,"<p><strong>Warning:</strong> <code>timeit</code> results may vary due to differences in hardware or
version of Python.  </p>

<p>Below is a script which compares a number of implementations: 
<UL>
<LI>ambi_sieve_plain,
<LI><a href=""https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188"">rwh_primes</a>, 
<LI><a href=""https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188"">rwh_primes1</a>, 
<LI><a href=""https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188"">rwh_primes2</a>, 
<LI><a href=""https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83"" rel=""noreferrer"">sieveOfAtkin</a>, 
<LI><a href=""http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d"" rel=""noreferrer"">sieveOfEratosthenes</a>, 
<LI><a href=""https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279"">sundaram3</a>,
<LI><a href=""http://zerovolt.com/?p=88"" rel=""noreferrer"">sieve_wheel_30</a>,
<LI><a href=""http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html"" rel=""noreferrer"">ambi_sieve</a> (requires numpy)
<LI><a href=""https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188"">primesfrom3to</a> (requires numpy)
<LI><a href=""https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188"">primesfrom2to</a> (requires numpy)
</UL></p>

<p>Many thanks to <a href=""https://stackoverflow.com/users/92092/stephan"">stephan</a> for bringing sieve_wheel_30 to my attention.
Credit goes to <a href=""https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188"">Robert William Hanks</a> for primesfrom2to, primesfrom3to, rwh_primes, rwh_primes1, and rwh_primes2.</p>

<p>Of the plain Python methods tested, <strong>with psyco</strong>, for n=1000000,
<strong>rwh_primes1</strong> was the fastest tested.</p>

<pre><code>+---------------------+-------+
| Method              | ms    |
+---------------------+-------+
| rwh_primes1         | 43.0  |
| sieveOfAtkin        | 46.4  |
| rwh_primes          | 57.4  |
| sieve_wheel_30      | 63.0  |
| rwh_primes2         | 67.8  |    
| sieveOfEratosthenes | 147.0 |
| ambi_sieve_plain    | 152.0 |
| sundaram3           | 194.0 |
+---------------------+-------+
</code></pre>

<p>Of the plain Python methods tested, <strong>without psyco</strong>, for n=1000000,
<strong>rwh_primes2</strong> was the fastest.</p>

<pre><code>+---------------------+-------+
| Method              | ms    |
+---------------------+-------+
| rwh_primes2         | 68.1  |
| rwh_primes1         | 93.7  |
| rwh_primes          | 94.6  |
| sieve_wheel_30      | 97.4  |
| sieveOfEratosthenes | 178.0 |
| ambi_sieve_plain    | 286.0 |
| sieveOfAtkin        | 314.0 |
| sundaram3           | 416.0 |
+---------------------+-------+
</code></pre>

<p>Of all the methods tested, <em>allowing numpy</em>, for n=1000000,
<strong>primesfrom2to</strong> was the fastest tested.</p>

<pre><code>+---------------------+-------+
| Method              | ms    |
+---------------------+-------+
| primesfrom2to       | 15.9  |
| primesfrom3to       | 18.4  |
| ambi_sieve          | 29.3  |
+---------------------+-------+
</code></pre>

<p>Timings were measured using the command:</p>

<pre><code>python -mtimeit -s""import primes"" ""primes.{method}(1000000)""
</code></pre>

<p>with <code>{method}</code> replaced by each of the method names.</p>

<p>primes.py:</p>

<pre><code>#!/usr/bin/env python
import psyco; psyco.full()
from math import sqrt, ceil
import numpy as np

def rwh_primes(n):
    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Returns  a list of primes &lt; n """"""
    sieve = [True] * n
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i]:
            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)
    return [2] + [i for i in xrange(3,n,2) if sieve[i]]

def rwh_primes1(n):
    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Returns  a list of primes &lt; n """"""
    sieve = [True] * (n/2)
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i/2]:
            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)
    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]

def rwh_primes2(n):
    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n """"""
    correction = (n%6&gt;1)
    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]
    sieve = [True] * (n/3)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
      if sieve[i]:
        k=3*i+1|1
        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)
        sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&amp;1))/6-1)/k+1)
    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]

def sieve_wheel_30(N):
    # http://zerovolt.com/?p=88
    ''' Returns a list of primes &lt;= N using wheel criterion 2*3*5 = 30

Copyright 2009 by zerovolt.com
This code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work.
If you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.'''
    __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,
    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,
    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,
    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,
    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,
    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)

    wheel = (2, 3, 5)
    const = 30
    if N &lt; 2:
        return []
    if N &lt;= const:
        pos = 0
        while __smallp[pos] &lt;= N:
            pos += 1
        return list(__smallp[:pos])
    # make the offsets list
    offsets = (7, 11, 13, 17, 19, 23, 29, 1)
    # prepare the list
    p = [2, 3, 5]
    dim = 2 + N // const
    tk1  = [True] * dim
    tk7  = [True] * dim
    tk11 = [True] * dim
    tk13 = [True] * dim
    tk17 = [True] * dim
    tk19 = [True] * dim
    tk23 = [True] * dim
    tk29 = [True] * dim
    tk1[0] = False
    # help dictionary d
    # d[a , b] = c  ==&gt; if I want to find the smallest useful multiple of (30*pos)+a
    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]
    # in general. If b &lt; a, I need [(30*pos)+a][(30*(pos+1))+b]
    d = {}
    for x in offsets:
        for y in offsets:
            res = (x*y) % const
            if res in offsets:
                d[(x, res)] = y
    # another help dictionary: gives tkx calling tmptk[x]
    tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}
    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))
    # inner functions definition
    def del_mult(tk, start, step):
        for k in xrange(start, len(tk), step):
            tk[k] = False
    # end of inner functions definition
    cpos = const * pos
    while prime &lt; stop:
        # 30k + 7
        if tk7[pos]:
            prime = cpos + 7
            p.append(prime)
            lastadded = 7
            for off in offsets:
                tmp = d[(7, off)]
                start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp &lt; 7 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 11
        if tk11[pos]:
            prime = cpos + 11
            p.append(prime)
            lastadded = 11
            for off in offsets:
                tmp = d[(11, off)]
                start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp &lt; 11 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 13
        if tk13[pos]:
            prime = cpos + 13
            p.append(prime)
            lastadded = 13
            for off in offsets:
                tmp = d[(13, off)]
                start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp &lt; 13 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 17
        if tk17[pos]:
            prime = cpos + 17
            p.append(prime)
            lastadded = 17
            for off in offsets:
                tmp = d[(17, off)]
                start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp &lt; 17 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 19
        if tk19[pos]:
            prime = cpos + 19
            p.append(prime)
            lastadded = 19
            for off in offsets:
                tmp = d[(19, off)]
                start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp &lt; 19 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 23
        if tk23[pos]:
            prime = cpos + 23
            p.append(prime)
            lastadded = 23
            for off in offsets:
                tmp = d[(23, off)]
                start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp &lt; 23 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 29
        if tk29[pos]:
            prime = cpos + 29
            p.append(prime)
            lastadded = 29
            for off in offsets:
                tmp = d[(29, off)]
                start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp &lt; 29 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # now we go back to top tk1, so we need to increase pos by 1
        pos += 1
        cpos = const * pos
        # 30k + 1
        if tk1[pos]:
            prime = cpos + 1
            p.append(prime)
            lastadded = 1
            for off in offsets:
                tmp = d[(1, off)]
                start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const
                del_mult(tmptk[off], start, prime)
    # time to add remaining primes
    # if lastadded == 1, remove last element and start adding them from tk1
    # this way we don't need an ""if"" within the last while
    if lastadded == 1:
        p.pop()
    # now complete for every other possible prime
    while pos &lt; len(tk1):
        cpos = const * pos
        if tk1[pos]: p.append(cpos + 1)
        if tk7[pos]: p.append(cpos + 7)
        if tk11[pos]: p.append(cpos + 11)
        if tk13[pos]: p.append(cpos + 13)
        if tk17[pos]: p.append(cpos + 17)
        if tk19[pos]: p.append(cpos + 19)
        if tk23[pos]: p.append(cpos + 23)
        if tk29[pos]: p.append(cpos + 29)
        pos += 1
    # remove exceeding if present
    pos = len(p) - 1
    while p[pos] &gt; N:
        pos -= 1
    if pos &lt; len(p) - 1:
        del p[pos+1:]
    # return p list
    return p

def sieveOfEratosthenes(n):
    """"""sieveOfEratosthenes(n): return the list of the primes &lt; n.""""""
    # Code from: &lt;dickinsm@gmail.com&gt;, Nov 30 2006
    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d
    if n &lt;= 2:
        return []
    sieve = range(3, n, 2)
    top = len(sieve)
    for si in sieve:
        if si:
            bottom = (si*si - 3) // 2
            if bottom &gt;= top:
                break
            sieve[bottom::si] = [0] * -((bottom - top) // si)
    return [2] + [el for el in sieve if el]

def sieveOfAtkin(end):
    """"""sieveOfAtkin(end): return a list of all the prime numbers &lt;end
    using the Sieve of Atkin.""""""
    # Code by Steve Krenzel, &lt;Sgk284@gmail.com&gt;, improved
    # Code: https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83
    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin
    assert end &gt; 0
    lng = ((end-1) // 2)
    sieve = [False] * (lng + 1)

    x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4
    for xd in xrange(4, 8*x_max + 2, 8):
        x2 += xd
        y_max = int(sqrt(end-x2))
        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1
        if not (n &amp; 1):
            n -= n_diff
            n_diff -= 2
        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):
            m = n % 12
            if m == 1 or m == 5:
                m = n &gt;&gt; 1
                sieve[m] = not sieve[m]
            n -= d

    x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3
    for xd in xrange(3, 6 * x_max + 2, 6):
        x2 += xd
        y_max = int(sqrt(end-x2))
        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1
        if not(n &amp; 1):
            n -= n_diff
            n_diff -= 2
        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):
            if n % 12 == 7:
                m = n &gt;&gt; 1
                sieve[m] = not sieve[m]
            n -= d

    x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3
    for x in xrange(1, x_max + 1):
        x2 += xd
        xd += 6
        if x2 &gt;= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) &lt;&lt; 1) - 2) &lt;&lt; 1
        n, n_diff = ((x*x + x) &lt;&lt; 1) - 1, (((x-1) &lt;&lt; 1) - 2) &lt;&lt; 1
        for d in xrange(n_diff, y_min, -8):
            if n % 12 == 11:
                m = n &gt;&gt; 1
                sieve[m] = not sieve[m]
            n += d

    primes = [2, 3]
    if end &lt;= 3:
        return primes[:max(0,end-2)]

    for n in xrange(5 &gt;&gt; 1, (int(sqrt(end))+1) &gt;&gt; 1):
        if sieve[n]:
            primes.append((n &lt;&lt; 1) + 1)
            aux = (n &lt;&lt; 1) + 1
            aux *= aux
            for k in xrange(aux, end, 2 * aux):
                sieve[k &gt;&gt; 1] = False

    s  = int(sqrt(end)) + 1
    if s  % 2 == 0:
        s += 1
    primes.extend([i for i in xrange(s, end, 2) if sieve[i &gt;&gt; 1]])

    return primes

def ambi_sieve_plain(n):
    s = range(3, n, 2)
    for m in xrange(3, int(n**0.5)+1, 2): 
        if s[(m-3)/2]: 
            for t in xrange((m*m-3)/2,(n&gt;&gt;1)-1,m):
                s[t]=0
    return [2]+[t for t in s if t&gt;0]

def sundaram3(max_n):
    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279
    numbers = range(3, max_n+1, 2)
    half = (max_n)//2
    initial = 4

    for step in xrange(3, max_n+1, 2):
        for i in xrange(initial, half, step):
            numbers[i-1] = 0
        initial += 2*(step+1)

        if initial &gt; half:
            return [2] + filter(None, numbers)

################################################################################
# Using Numpy:
def ambi_sieve(n):
    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html
    s = np.arange(3, n, 2)
    for m in xrange(3, int(n ** 0.5)+1, 2): 
        if s[(m-3)/2]: 
            s[(m*m-3)/2::m]=0
    return np.r_[2, s[s&gt;0]]

def primesfrom3to(n):
    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Returns a array of primes, p &lt; n """"""
    assert n&gt;=2
    sieve = np.ones(n/2, dtype=np.bool)
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i/2]:
            sieve[i*i/2::i] = False
    return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1]    

def primesfrom2to(n):
    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n """"""
    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[      ((k*k)/3)      ::2*k] = False
            sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k] = False
    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]

if __name__=='__main__':
    import itertools
    import sys

    def test(f1,f2,num):
        print('Testing {f1} and {f2} return same results'.format(
            f1=f1.func_name,
            f2=f2.func_name))
        if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):
            sys.exit(""Error: %s(%s) != %s(%s)""%(f1.func_name,num,f2.func_name,num))

    n=1000000
    test(sieveOfAtkin,sieveOfEratosthenes,n)
    test(sieveOfAtkin,ambi_sieve,n)
    test(sieveOfAtkin,ambi_sieve_plain,n) 
    test(sieveOfAtkin,sundaram3,n)
    test(sieveOfAtkin,sieve_wheel_30,n)
    test(sieveOfAtkin,primesfrom3to,n)
    test(sieveOfAtkin,primesfrom2to,n)
    test(sieveOfAtkin,rwh_primes,n)
    test(sieveOfAtkin,rwh_primes1,n)         
    test(sieveOfAtkin,rwh_primes2,n)
</code></pre>

<p>Running the script tests that all implementations give the same result.</p>
"
988251,"<p>You can use the built-in <a href=""https://docs.python.org/library/ast.html#ast.literal_eval"" rel=""noreferrer""><code>ast.literal_eval</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(&quot;{'muffin' : 'lolz', 'foo' : 'kitty'}&quot;)
{'muffin': 'lolz', 'foo': 'kitty'}
</code></pre>
<p>This is safer than using <code>eval</code>.  As its own docs say:</p>
<pre>
>>> help(ast.literal_eval)
Help on function literal_eval in module ast:

literal_eval(node_or_string)
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
    and None.
</pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; eval(&quot;shutil.rmtree('mongo')&quot;)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;/opt/Python-2.6.1/lib/python2.6/shutil.py&quot;, line 208, in rmtree
    onerror(os.listdir, path, sys.exc_info())
  File &quot;/opt/Python-2.6.1/lib/python2.6/shutil.py&quot;, line 206, in rmtree
    names = os.listdir(path)
OSError: [Errno 2] No such file or directory: 'mongo'
&gt;&gt;&gt; ast.literal_eval(&quot;shutil.rmtree('mongo')&quot;)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;/opt/Python-2.6.1/lib/python2.6/ast.py&quot;, line 68, in literal_eval
    return _convert(node_or_string)
  File &quot;/opt/Python-2.6.1/lib/python2.6/ast.py&quot;, line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
</code></pre>
"
,
2612615,"<p>There are built-in functions called <a href=""https://docs.python.org/3/library/functions.html#getattr"" rel=""noreferrer""><code>getattr</code></a> and <a href=""https://docs.python.org/3/library/functions.html#setattr"" rel=""noreferrer""><code>setattr</code></a></p>

<pre><code>getattr(object, attrname)
setattr(object, attrname, value)
</code></pre>

<p>In this case </p>

<pre><code>x = getattr(t, 'attr1')
setattr(t, 'attr1', 21)
</code></pre>
"
31728991,"<p>There are several ways to do it. The <code>subplots</code> method creates the figure along with the subplots that are then stored in the <code>ax</code> array. For example:</p>

<pre><code>import matplotlib.pyplot as plt

x = range(10)
y = range(10)

fig, ax = plt.subplots(nrows=2, ncols=2)

for row in ax:
    for col in row:
        col.plot(x, y)

plt.show()
</code></pre>

<p><a href=""https://i.stack.imgur.com/2JxAs.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/2JxAs.png"" alt=""enter image description here""></a></p>

<p>However, something like this will also work, it's not so ""clean"" though since you are creating a figure with subplots and then add on top of them:</p>

<pre><code>fig = plt.figure()

plt.subplot(2, 2, 1)
plt.plot(x, y)

plt.subplot(2, 2, 2)
plt.plot(x, y)

plt.subplot(2, 2, 3)
plt.plot(x, y)

plt.subplot(2, 2, 4)
plt.plot(x, y)

plt.show()
</code></pre>

<p><a href=""https://i.stack.imgur.com/0EiUD.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/0EiUD.png"" alt=""enter image description here""></a></p>
"
,
5753614,"<p>It is very anti-Pythonic to do so, and any seasoned Pythonista will give you hell over it. The intermediate list is thrown away after it is created, and it could potentially be very, very large, and therefore expensive to create.</p>
"
1912483,"<p>I suggest <a href=""http://docs.python.org/library/xml.etree.elementtree.html"" rel=""noreferrer""><code>ElementTree</code></a>.  There are other compatible implementations of the same API, such as <a href=""https://lxml.de/parsing.html"" rel=""noreferrer""><code>lxml</code></a>, and <code>cElementTree</code> in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which <code>ElementTree</code> defines.</p>
<p>First build an Element instance <code>root</code> from the XML, e.g. with the <a href=""http://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML"" rel=""noreferrer"">XML</a> function, or by parsing a file with something like:</p>
<pre class=""lang-py prettyprint-override""><code>import xml.etree.ElementTree as ET
root = ET.parse('thefile.xml').getroot()
</code></pre>
<p>Or any of the many other ways shown at <a href=""http://docs.python.org/library/xml.etree.elementtree.html"" rel=""noreferrer""><code>ElementTree</code></a>. Then do something like:</p>
<pre class=""lang-py prettyprint-override""><code>for type_tag in root.findall('bar/type'):
    value = type_tag.get('foobar')
    print(value)
</code></pre>
<p>Output:</p>
<pre><code>1
2
</code></pre>
"
13913933,"<p><em>Class scope and list, set or dictionary comprehensions, as well as generator expressions do not mix.</em></p>
<h2>The why; or, the official word on this</h2>
<p>In Python 3, list comprehensions were given a proper scope (local namespace) of their own, to prevent their local variables bleeding over into the surrounding scope (see <a href=""https://stackoverflow.com/q/4198906"">List comprehension rebinds names even after scope of comprehension. Is this right?</a>). That's great when using such a list comprehension in a module or in a function, but in classes, scoping is a little, uhm, <em>strange</em>.</p>
<p>This is documented in <a href=""http://www.python.org/dev/peps/pep-0227/"" rel=""noreferrer"">pep 227</a>:</p>
<blockquote>
<p>Names in class scope are not accessible.  Names are resolved in
the innermost enclosing function scope.  If a class definition
occurs in a chain of nested scopes, the resolution process skips
class definitions.</p>
</blockquote>
<p>and in the <a href=""http://docs.python.org/3/reference/compound_stmts.html#class-definitions"" rel=""noreferrer""><code>class</code> compound statement documentation</a>:</p>
<blockquote>
<p>The classâs suite is then executed in a new execution frame (see section <a href=""http://docs.python.org/3/reference/executionmodel.html#naming"" rel=""noreferrer""><em>Naming and binding</em></a>), using a newly created local namespace and the original global namespace. (Usually, the suite contains only function definitions.) When the classâs suite finishes execution, <strong>its execution frame is discarded but its local namespace is saved</strong>. <a href=""http://docs.python.org/3/reference/compound_stmts.html#id8"" rel=""noreferrer"">[4]</a> A class object is then created using the inheritance list for the base classes and the saved local namespace for the attribute dictionary.</p>
</blockquote>
<p>Emphasis mine; the execution frame is the temporary scope.</p>
<p>Because the scope is repurposed as the attributes on a class object, allowing it to be used as a nonlocal scope as well leads to undefined behaviour; what would happen if a class method referred to <code>x</code> as a nested scope variable, then manipulates <code>Foo.x</code> as well, for example? More importantly, what would that mean for subclasses of <code>Foo</code>? Python <em>has</em> to treat a class scope differently as it is very different from a function scope.</p>
<p>Last, but definitely not least, the linked <a href=""http://docs.python.org/3/reference/executionmodel.html#naming"" rel=""noreferrer"">Naming and binding</a> section in the Execution model documentation mentions class scopes explicitly:</p>
<blockquote>
<p>The scope of names defined in a class block is limited to the class block; it does not extend to the code blocks of methods â this includes comprehensions and generator expressions since they are implemented using a function scope. This means that the following will fail:</p>
<pre><code>class A:
     a = 42
     b = list(a + i for i in range(10))
</code></pre>
</blockquote>
<p>So, to summarize: you cannot access the class scope from functions, list comprehensions or generator expressions enclosed in that scope; they act as if that scope does not exist. In Python 2, list comprehensions were implemented using a shortcut, but in Python 3 they got their own function scope (as they should have had all along) and thus your example breaks. Other comprehension types have their own scope regardless of Python version, so a similar example with a set or dict comprehension would break in Python 2.</p>
<pre><code># Same error, in Python 2 or 3
y = {x: x for i in range(1)}
</code></pre>
<h2>The (small) exception; or, why one part <em>may</em> still work</h2>
<p>There's one part of a comprehension or generator expression that executes in the surrounding scope, regardless of Python version. That would be the expression for the outermost iterable. In your example, it's the <code>range(1)</code>:</p>
<pre><code>y = [x for i in range(1)]
#               ^^^^^^^^
</code></pre>
<p>Thus, using <code>x</code> in that expression would not throw an error:</p>
<pre><code># Runs fine
y = [i for i in range(x)]
</code></pre>
<p>This only applies to the outermost iterable; if a comprehension has multiple <code>for</code> clauses, the iterables for inner <code>for</code> clauses are evaluated in the comprehension's scope:</p>
<pre><code># NameError
y = [i for i in range(1) for j in range(x)]
#      ^^^^^^^^^^^^^^^^^ -----------------
#      outer loop        inner, nested loop
</code></pre>
<p>This design decision was made in order to throw an error at genexp creation time instead of iteration time when creating the outermost iterable of a generator expression throws an error, or when the outermost iterable turns out not to be iterable. Comprehensions share this behavior for consistency.</p>
<h2>Looking under the hood; or, way more detail than you ever wanted</h2>
<p>You can see this all in action using the <a href=""http://docs.python.org/3/library/dis.html"" rel=""noreferrer""><code>dis</code> module</a>. I'm using Python 3.3 in the following examples, because it adds <a href=""http://docs.python.org/3/whatsnew/3.3.html#pep-3155-qualified-name-for-classes-and-functions"" rel=""noreferrer"">qualified names</a> that neatly identify the code objects we want to inspect. The bytecode produced is otherwise functionally identical to Python 3.2.</p>
<p>To <em>create</em> a class, Python essentially takes the whole suite that makes up the class body (so everything indented one level deeper than the <code>class &lt;name&gt;:</code> line), and executes that as if it were a function:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     class Foo:
...         x = 5
...         y = [x for i in range(1)]
...     return Foo
... 
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_BUILD_CLASS     
              1 LOAD_CONST               1 (&lt;code object Foo at 0x10a436030, file &quot;&lt;stdin&gt;&quot;, line 2&gt;) 
              4 LOAD_CONST               2 ('Foo') 
              7 MAKE_FUNCTION            0 
             10 LOAD_CONST               2 ('Foo') 
             13 CALL_FUNCTION            2 (2 positional, 0 keyword pair) 
             16 STORE_FAST               0 (Foo) 

  5          19 LOAD_FAST                0 (Foo) 
             22 RETURN_VALUE         
</code></pre>
<p>The first <code>LOAD_CONST</code> there loads a code object for the <code>Foo</code> class body, then makes that into a function, and calls it. The <em>result</em> of that call is then used to create the namespace of the class, its <code>__dict__</code>. So far so good.</p>
<p>The thing to note here is that the bytecode contains a nested code object; in Python, class definitions, functions, comprehensions and generators all are represented as code objects that contain not only bytecode, but also structures that represent local variables, constants, variables taken from globals, and variables taken from the nested scope. The compiled bytecode refers to those structures and the python interpreter knows how to access those given the bytecodes presented.</p>
<p>The important thing to remember here is that Python creates these structures at compile time; the <code>class</code> suite is a code object (<code>&lt;code object Foo at 0x10a436030, file &quot;&lt;stdin&gt;&quot;, line 2&gt;</code>) that is already compiled.</p>
<p>Let's inspect that code object that creates the class body itself; code objects have a <code>co_consts</code> structure:</p>
<pre><code>&gt;&gt;&gt; foo.__code__.co_consts
(None, &lt;code object Foo at 0x10a436030, file &quot;&lt;stdin&gt;&quot;, line 2&gt;, 'Foo')
&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[1])
  2           0 LOAD_FAST                0 (__locals__) 
              3 STORE_LOCALS         
              4 LOAD_NAME                0 (__name__) 
              7 STORE_NAME               1 (__module__) 
             10 LOAD_CONST               0 ('foo.&lt;locals&gt;.Foo') 
             13 STORE_NAME               2 (__qualname__) 

  3          16 LOAD_CONST               1 (5) 
             19 STORE_NAME               3 (x) 

  4          22 LOAD_CONST               2 (&lt;code object &lt;listcomp&gt; at 0x10a385420, file &quot;&lt;stdin&gt;&quot;, line 4&gt;) 
             25 LOAD_CONST               3 ('foo.&lt;locals&gt;.Foo.&lt;listcomp&gt;') 
             28 MAKE_FUNCTION            0 
             31 LOAD_NAME                4 (range) 
             34 LOAD_CONST               4 (1) 
             37 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             40 GET_ITER             
             41 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             44 STORE_NAME               5 (y) 
             47 LOAD_CONST               5 (None) 
             50 RETURN_VALUE         
</code></pre>
<p>The above bytecode creates the class body. The function is executed and the resulting <code>locals()</code> namespace, containing <code>x</code> and <code>y</code> is used to create the class (except that it doesn't work because <code>x</code> isn't defined as a global). Note that after storing <code>5</code> in <code>x</code>, it loads another code object; that's the list comprehension; it is wrapped in a function object just like the class body was; the created function takes a positional argument, the <code>range(1)</code> iterable to use for its looping code, cast to an iterator. As shown in the bytecode, <code>range(1)</code> is evaluated in the class scope.</p>
<p>From this you can see that the only difference between a code object for a function or a generator, and a code object for a comprehension is that the latter is executed <em>immediately</em> when the parent code object is executed; the bytecode simply creates a function on the fly and executes it in a few small steps.</p>
<p>Python 2.x uses inline bytecode there instead, here is output from Python 2.7:</p>
<pre><code>  2           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)

  3           6 LOAD_CONST               0 (5)
              9 STORE_NAME               2 (x)

  4          12 BUILD_LIST               0
             15 LOAD_NAME                3 (range)
             18 LOAD_CONST               1 (1)
             21 CALL_FUNCTION            1
             24 GET_ITER            
        &gt;&gt;   25 FOR_ITER                12 (to 40)
             28 STORE_NAME               4 (i)
             31 LOAD_NAME                2 (x)
             34 LIST_APPEND              2
             37 JUMP_ABSOLUTE           25
        &gt;&gt;   40 STORE_NAME               5 (y)
             43 LOAD_LOCALS         
             44 RETURN_VALUE        
</code></pre>
<p>No code object is loaded, instead a <code>FOR_ITER</code> loop is run inline. So in Python 3.x, the list generator was given a proper code object of its own, which means it has its own scope.</p>
<p>However, the comprehension was compiled together with the rest of the python source code when the module or script was first loaded by the interpreter, and the compiler does <em>not</em> consider a class suite a valid scope. Any referenced variables in a list comprehension must look in the scope <em>surrounding</em> the class definition, recursively. If the variable wasn't found by the compiler, it marks it as a global. Disassembly of the list comprehension code object shows that <code>x</code> is indeed loaded as a global:</p>
<pre><code>&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts
('foo.&lt;locals&gt;.Foo', 5, &lt;code object &lt;listcomp&gt; at 0x10a385420, file &quot;&lt;stdin&gt;&quot;, line 4&gt;, 'foo.&lt;locals&gt;.Foo.&lt;listcomp&gt;', 1, None)
&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[1].co_consts[2])
  4           0 BUILD_LIST               0 
              3 LOAD_FAST                0 (.0) 
        &gt;&gt;    6 FOR_ITER                12 (to 21) 
              9 STORE_FAST               1 (i) 
             12 LOAD_GLOBAL              0 (x) 
             15 LIST_APPEND              2 
             18 JUMP_ABSOLUTE            6 
        &gt;&gt;   21 RETURN_VALUE         
</code></pre>
<p>This chunk of bytecode loads the first argument passed in (the <code>range(1)</code> iterator), and just like the Python 2.x version uses <code>FOR_ITER</code> to loop over it and create its output.</p>
<p>Had we defined <code>x</code> in the <code>foo</code> function instead, <code>x</code> would be a cell variable (cells refer to nested scopes):</p>
<pre><code>&gt;&gt;&gt; def foo():
...     x = 2
...     class Foo:
...         x = 5
...         y = [x for i in range(1)]
...     return Foo
... 
&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[2].co_consts[2])
  5           0 BUILD_LIST               0 
              3 LOAD_FAST                0 (.0) 
        &gt;&gt;    6 FOR_ITER                12 (to 21) 
              9 STORE_FAST               1 (i) 
             12 LOAD_DEREF               0 (x) 
             15 LIST_APPEND              2 
             18 JUMP_ABSOLUTE            6 
        &gt;&gt;   21 RETURN_VALUE         
</code></pre>
<p>The <code>LOAD_DEREF</code> will indirectly load <code>x</code> from the code object cell objects:</p>
<pre><code>&gt;&gt;&gt; foo.__code__.co_cellvars               # foo function `x`
('x',)
&gt;&gt;&gt; foo.__code__.co_consts[2].co_cellvars  # Foo class, no cell variables
()
&gt;&gt;&gt; foo.__code__.co_consts[2].co_consts[2].co_freevars  # Refers to `x` in foo
('x',)
&gt;&gt;&gt; foo().y
[2]
</code></pre>
<p>The actual referencing looks the value up from the current frame data structures, which were initialized from a function object's <code>.__closure__</code> attribute. Since the function created for the comprehension code object is discarded again, we do not get to inspect that function's closure. To see a closure in action, we'd have to inspect a nested function instead:</p>
<pre><code>&gt;&gt;&gt; def spam(x):
...     def eggs():
...         return x
...     return eggs
... 
&gt;&gt;&gt; spam(1).__code__.co_freevars
('x',)
&gt;&gt;&gt; spam(1)()
1
&gt;&gt;&gt; spam(1).__closure__
&gt;&gt;&gt; spam(1).__closure__[0].cell_contents
1
&gt;&gt;&gt; spam(5).__closure__[0].cell_contents
5
</code></pre>
<p>So, to summarize:</p>
<ul>
<li>List comprehensions get their own code objects in Python 3, and there is no difference between code objects for functions, generators or comprehensions; comprehension code objects are wrapped in a temporary function object and called immediately.</li>
<li>Code objects are created at compile time, and any non-local variables are marked as either global or as free variables, based on the nested scopes of the code. The class body is <em>not</em> considered a scope for looking up those variables.</li>
<li>When executing the code, Python has only to look into the globals, or the closure of the currently executing object. Since the compiler didn't include the class body as a scope, the temporary function namespace is not considered.</li>
</ul>
<h2>A workaround; or, what to do about it</h2>
<p>If you were to create an explicit scope for the <code>x</code> variable, like in a function, you <em>can</em> use class-scope variables for a list comprehension:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     x = 5
...     def y(x):
...         return [x for i in range(1)]
...     y = y(x)
... 
&gt;&gt;&gt; Foo.y
[5]
</code></pre>
<p>The 'temporary' <code>y</code> function can be called directly; we replace it when we do with its return value. Its scope <em>is</em> considered when resolving <code>x</code>:</p>
<pre><code>&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts[2]
&lt;code object y at 0x10a5df5d0, file &quot;&lt;stdin&gt;&quot;, line 4&gt;
&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts[2].co_cellvars
('x',)
</code></pre>
<p>Of course, people reading your code will scratch their heads over this a little; you may want to put a big fat comment in there explaining why you are doing this.</p>
<p>The best work-around is to just use <code>__init__</code> to create an instance variable instead:</p>
<pre><code>def __init__(self):
    self.y = [self.x for i in range(1)]
</code></pre>
<p>and avoid all the head-scratching, and questions to explain yourself. For your own concrete example, I would not even store the <code>namedtuple</code> on the class; either use the output directly (don't store the generated class at all), or use a global:</p>
<pre><code>from collections import namedtuple
State = namedtuple('State', ['name', 'capital'])

class StateDatabase:
    db = [State(*args) for args in [
       ('Alabama', 'Montgomery'),
       ('Alaska', 'Juneau'),
       # ...
    ]]
</code></pre>
"
58178276,"<p>The resource (image, font, sound, etc.) file path has to be relative to the current working directory. The working directory is possibly different from the directory of the python file.<br />
It is not enough to put the files in the same directory or sub directory. You also need to set the working directory. Alternatively, you can create an absolute file path.</p>
<hr />
<p>The name and path of the file can be get by <a href=""https://docs.python.org/3/reference/import.html#import-related-module-attributes"" rel=""nofollow noreferrer""><code>__file__</code></a>. The current working directory can be get by <a href=""https://docs.python.org/3/library/os.html"" rel=""nofollow noreferrer""><code>os.getcwd()</code></a> and can be changed by <a href=""https://docs.python.org/3/library/os.html"" rel=""nofollow noreferrer""><code>os.chdir(path)</code></a>:</p>
<pre class=""lang-py prettyprint-override""><code>import os

os.chdir(os.path.dirname(os.path.abspath(__file__)))
</code></pre>
<p>An alternative solution is to find the absolute path.
If the file is in an subfolder of the python file (or even in the same folder), then you can get the directory of the file and join (<a href=""https://docs.python.org/3/library/os.path.html"" rel=""nofollow noreferrer""><code>os.path.join()</code></a>) the relative filepath. e.g.:</p>
<pre class=""lang-py prettyprint-override""><code>import pygame
import os

# get the directory of this file
sourceFileDir = os.path.dirname(os.path.abspath(__file__))

# [...]

# join the filepath and the filename
filePath = os.path.join(sourceFileDir, 'test_bg.jpg')
# filePath = os.path.join(sourceFileDir, '_pycache_/test_bg.jpg')

surface = pygame.image.load(filePath)
</code></pre>
<hr />
<p>The same can be achieved with the <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""nofollow noreferrer""><code>pathlib</code></a> module.
Change the working directory</p>
<pre class=""lang-py prettyprint-override""><code>import os, pathlib

os.chdir(pathlib.Path(__file__).resolve().parent)
</code></pre>
<p>or create an absolute filepath:</p>
<pre class=""lang-py prettyprint-override""><code>import pathlib

# [...]

filePath = pathlib.Path(__file__).resolve().parent / 'test_bg.jpg'
surface = pygame.image.load(filePath)
</code></pre>
"
9942822,"<p>Read the Python <a href=""https://docs.python.org/2.7/howto/unicode.html"" rel=""noreferrer"">Unicode HOWTO</a>. This error is the <a href=""https://docs.python.org/2.7/howto/unicode.html#the-unicode-type"" rel=""noreferrer"">very first example</a>.</p>
<p>Do not use <code>str()</code> to convert from unicode to encoded text / bytes.</p>
<p>Instead, use <a href=""http://docs.python.org/library/stdtypes.html#str.encode"" rel=""noreferrer""><code>.encode()</code></a> to encode the string:</p>
<pre><code>p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()
</code></pre>
<p>or work entirely in unicode.</p>
"
,
23709194,"<p><strong>You need to add the path of your pip installation to your PATH system variable</strong>. By default, pip is installed to <code>C:\Python34\Scripts\pip</code> (pip now comes bundled with new versions of python), so the path ""C:\Python34\Scripts"" needs to be added to your PATH variable.</p>

<p>To check if it is already in your PATH variable, type <code>echo %PATH%</code> at the CMD prompt</p>

<p><strong>To add the path of your pip installation to your PATH variable</strong>, you can use the Control Panel or the <code>setx</code> command. For example:</p>

<pre><code>setx PATH ""%PATH%;C:\Python34\Scripts""
</code></pre>

<hr>

<p><strong>Note</strong>:
According to the <a href=""https://technet.microsoft.com/en-us/library/cc755104%28v=ws.11%29.aspx"">official documentation</a>, ""[v]ariables set with setx variables are available in future command windows only, not in the current command window"". In particular, <em>you will need to start a new cmd.exe instance</em> after entering the above command in order to utilize the new environment variable. </p>

<p>Thanks to Scott Bartell for pointing this out.</p>
"
152596,"<p>Use <a href=""https://docs.python.org/library/functions.html#isinstance"" rel=""noreferrer""><code>isinstance</code></a> to check if <code>o</code> is an instance of <code>str</code> or any subclass of <code>str</code>:</p>
<pre><code>if isinstance(o, str):
</code></pre>
<p>To check if the type of <code>o</code> is exactly <code>str</code>, <em>excluding subclasses of <code>str</code></em>:</p>
<pre><code>if type(o) is str:
</code></pre>
<p>See <a href=""http://docs.python.org/library/functions.html"" rel=""noreferrer"">Built-in Functions</a> in the Python Library Reference for relevant information.</p>
<hr />
<h4>Checking for strings in Python 2</h4>
<p>For Python 2, this is a better way to check if <code>o</code> is a string:</p>
<pre><code>if isinstance(o, basestring):
</code></pre>
<p>because this will also catch Unicode strings. <a href=""https://docs.python.org/2/library/functions.html#unicode"" rel=""noreferrer""><code>unicode</code></a> is not a subclass of <code>str</code>; both <code>str</code> and <code>unicode</code> are subclasses of <a href=""https://docs.python.org/2/library/functions.html#basestring"" rel=""noreferrer""><code>basestring</code></a>. In Python 3, <code>basestring</code> no longer exists since there's <a href=""https://docs.python.org/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit"" rel=""noreferrer"">a strict separation</a> of strings (<a href=""https://docs.python.org/3/library/functions.html#func-str"" rel=""noreferrer""><code>str</code></a>) and binary data (<a href=""https://docs.python.org/3/library/functions.html#func-bytes"" rel=""noreferrer""><code>bytes</code></a>).</p>
<p>Alternatively, <code>isinstance</code> accepts a tuple of classes. This will return <code>True</code> if <code>o</code> is an instance of any subclass of any of <code>(str, unicode)</code>:</p>
<pre><code>if isinstance(o, (str, unicode)):
</code></pre>
"
3092341,"<h2>Overview</h2>
<p>You can only associate scrollbars with a few widgets, and the root widget and <code>Frame</code> aren't part of that group of widgets.</p>
<p>There are at least a couple of ways to do this. If you need a simple vertical or horizontal group of widgets, you can use a text widget and the <code>window_create</code> method to add widgets. This method is simple, but doesn't allow for a complex layout of the widgets.</p>
<p>A more common general-purpose solution is to create a canvas widget and associate the scrollbars with that widget. Then, into that canvas embed the frame that contains your label widgets. Determine the width/height of the frame and feed that into the canvas <code>scrollregion</code> option so that the scrollregion exactly matches the size of the frame.</p>
<p>Why put the widgets in a frame rather than directly in the canvas? A scrollbar attached to a canvas can only scroll items created with one of the <code>create_</code> methods. You cannot scroll items added to a canvas with <code>pack</code>, <code>place</code>, or <code>grid</code>. By using a frame, you can use those methods inside the frame, and then call <code>create_window</code> once for the frame.</p>
<p>Drawing the text items directly on the canvas isn't very hard, so you might want to reconsider that approach if the frame-embedded-in-a-canvas solution seems too complex. Since you're creating a grid, the coordinates of each text item is going to be very easy to compute, especially if each row is the same height (which it probably is if you're using a single font).</p>
<p>For drawing directly on the canvas, just figure out the line height of the font you're using (and there are commands for that). Then, each y coordinate is <code>row*(lineheight+spacing)</code>. The x coordinate will be a fixed number based on the widest item in each column. If you give everything a tag for the column it is in, you can adjust the x coordinate and width of all items in a column with a single command.</p>
<h2>Object-oriented solution</h2>
<p>Here's an example of the frame-embedded-in-canvas solution, using an object-oriented approach:</p>
<pre><code>import tkinter as tk

class Example(tk.Frame):
    def __init__(self, parent):

        tk.Frame.__init__(self, parent)
        self.canvas = tk.Canvas(self, borderwidth=0, background=&quot;#ffffff&quot;)
        self.frame = tk.Frame(self.canvas, background=&quot;#ffffff&quot;)
        self.vsb = tk.Scrollbar(self, orient=&quot;vertical&quot;, command=self.canvas.yview)
        self.canvas.configure(yscrollcommand=self.vsb.set)

        self.vsb.pack(side=&quot;right&quot;, fill=&quot;y&quot;)
        self.canvas.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True)
        self.canvas.create_window((4,4), window=self.frame, anchor=&quot;nw&quot;,
                                  tags=&quot;self.frame&quot;)

        self.frame.bind(&quot;&lt;Configure&gt;&quot;, self.onFrameConfigure)

        self.populate()

    def populate(self):
        '''Put in some fake data'''
        for row in range(100):
            tk.Label(self.frame, text=&quot;%s&quot; % row, width=3, borderwidth=&quot;1&quot;,
                     relief=&quot;solid&quot;).grid(row=row, column=0)
            t=&quot;this is the second column for row %s&quot; %row
            tk.Label(self.frame, text=t).grid(row=row, column=1)

    def onFrameConfigure(self, event):
        '''Reset the scroll region to encompass the inner frame'''
        self.canvas.configure(scrollregion=self.canvas.bbox(&quot;all&quot;))

if __name__ == &quot;__main__&quot;:
    root=tk.Tk()
    example = Example(root)
    example.pack(side=&quot;top&quot;, fill=&quot;both&quot;, expand=True)
    root.mainloop()
</code></pre>
<h2>Procedural solution</h2>
<p>Here is a solution that doesn't use a class:</p>
<pre><code>import tkinter as tk

def populate(frame):
    '''Put in some fake data'''
    for row in range(100):
        tk.Label(frame, text=&quot;%s&quot; % row, width=3, borderwidth=&quot;1&quot;, 
                 relief=&quot;solid&quot;).grid(row=row, column=0)
        t=&quot;this is the second column for row %s&quot; %row
        tk.Label(frame, text=t).grid(row=row, column=1)

def onFrameConfigure(canvas):
    '''Reset the scroll region to encompass the inner frame'''
    canvas.configure(scrollregion=canvas.bbox(&quot;all&quot;))

root = tk.Tk()
canvas = tk.Canvas(root, borderwidth=0, background=&quot;#ffffff&quot;)
frame = tk.Frame(canvas, background=&quot;#ffffff&quot;)
vsb = tk.Scrollbar(root, orient=&quot;vertical&quot;, command=canvas.yview)
canvas.configure(yscrollcommand=vsb.set)

vsb.pack(side=&quot;right&quot;, fill=&quot;y&quot;)
canvas.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True)
canvas.create_window((4,4), window=frame, anchor=&quot;nw&quot;)

frame.bind(&quot;&lt;Configure&gt;&quot;, lambda event, canvas=canvas: onFrameConfigure(canvas))

populate(frame)

root.mainloop()
</code></pre>
"
1267892,"<p>In Python 2, division of two ints produces an int. In Python 3, it produces a float. We can get the new behaviour by importing from <code>__future__</code>.</p>

<pre><code>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; a = 4
&gt;&gt;&gt; b = 6
&gt;&gt;&gt; c = a / b
&gt;&gt;&gt; c
0.66666666666666663
</code></pre>
"
6473724,"<p>Python 3:</p>
<pre class=""lang-py prettyprint-override""><code># short circuits at shortest nested list if table is jagged:
list(map(list, zip(*l)))

# discards no data if jagged and fills short nested lists with None
list(map(list, itertools.zip_longest(*l, fillvalue=None)))
</code></pre>
<p>Python 2:</p>
<pre class=""lang-py prettyprint-override""><code>map(list, zip(*l))
</code></pre>
<pre><code>[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</code></pre>
<p>Explanation:</p>
<p>There are two things we need to know to understand what's going on:</p>
<ol>
<li>The signature of <a href=""https://docs.python.org/library/functions.html#zip"" rel=""noreferrer"">zip</a>: <code>zip(*iterables)</code> This means <code>zip</code> expects an arbitrary number of arguments each of which must be iterable. E.g. <code>zip([1, 2], [3, 4], [5, 6])</code>.</li>
<li><a href=""https://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists"" rel=""noreferrer"">Unpacked argument lists</a>: Given a sequence of arguments <code>args</code>, <code>f(*args)</code> will call <code>f</code> such that each element in <code>args</code> is a separate positional argument of <code>f</code>.</li>
<li><code>itertools.zip_longest</code> does not discard any data if the number of elements of the nested lists are not the same (homogenous), and instead fills in the shorter nested lists <em>then</em> zips them up.</li>
</ol>
<p>Coming back to the input from the question <code>l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code>, <code>zip(*l)</code> would be equivalent to <code>zip([1, 2, 3], [4, 5, 6], [7, 8, 9])</code>. The rest is just making sure the result is a list of lists instead of a list of tuples.</p>
"
3277407,"<p>This is detailed with a reasonable amount of detail by Guido himself in his blog post <a href=""http://python-history.blogspot.com/2010/06/method-resolution-order.html"" rel=""noreferrer"">Method Resolution Order</a> (including two earlier attempts).</p>
<p>In your example, <code>Third()</code> will call <code>First.__init__</code>. Python looks for each attribute in the class's parents as they are listed left to right. In this case, we are looking for <code>__init__</code>. So, if you define</p>
<pre><code>class Third(First, Second):
    ...
</code></pre>
<p>Python will start by looking at <code>First</code>, and, if <code>First</code> doesn't have the attribute, then it will look at <code>Second</code>.</p>
<p>This situation becomes more complex when inheritance starts crossing paths (for example if <code>First</code> inherited from <code>Second</code>). Read the link above for more details, but, in a nutshell, Python will try to maintain the order in which each class appears on the inheritance list, starting with the child class itself.</p>
<p>So, for instance, if you had:</p>
<pre><code>class First(object):
    def __init__(self):
        print &quot;first&quot;

class Second(First):
    def __init__(self):
        print &quot;second&quot;

class Third(First):
    def __init__(self):
        print &quot;third&quot;

class Fourth(Second, Third):
    def __init__(self):
        super(Fourth, self).__init__()
        print &quot;that's it&quot;
</code></pre>
<p>the MRO would be <code>[Fourth, Second, Third, First].</code></p>
<p>By the way: if Python cannot find a coherent method resolution order, it'll raise an exception, instead of falling back to behavior which might surprise the user.</p>
<p>Example of an ambiguous MRO:</p>
<pre><code>class First(object):
    def __init__(self):
        print &quot;first&quot;
        
class Second(First):
    def __init__(self):
        print &quot;second&quot;

class Third(First, Second):
    def __init__(self):
        print &quot;third&quot;
</code></pre>
<p>Should <code>Third</code>'s MRO be <code>[First, Second]</code> or <code>[Second, First]</code>? There's no obvious expectation, and Python will raise an error:</p>
<pre><code>TypeError: Error when calling the metaclass bases
    Cannot create a consistent method resolution order (MRO) for bases Second, First
</code></pre>
<p>Why do the examples above lack <code>super()</code> calls? The point of the examples is to show how the MRO is constructed. They are <strong>not</strong> intended to print <code>&quot;first\nsecond\third&quot;</code> or whatever. You can â and should, of course, play around with the example, add <code>super()</code> calls, see what happens, and gain a deeper understanding of Python's inheritance model. But my goal here is to keep it simple and show how the MRO is built. And it is built as I explained:</p>
<pre><code>&gt;&gt;&gt; Fourth.__mro__
(&lt;class '__main__.Fourth'&gt;,
 &lt;class '__main__.Second'&gt;, &lt;class '__main__.Third'&gt;,
 &lt;class '__main__.First'&gt;,
 &lt;type 'object'&gt;)
</code></pre>
"
4693385,"<p>The keyword <code>global</code> is only useful to change or create global variables in a local context, although creating global variables is seldom considered a good solution.</p>

<pre><code>def bob():
    me = ""locally defined""    # Defined only in local context
    print(me)

bob()
print(me)     # Asking for a global variable
</code></pre>

<p>The above will give you:</p>

<pre><code>locally defined
Traceback (most recent call last):
  File ""file.py"", line 9, in &lt;module&gt;
    print(me)
NameError: name 'me' is not defined
</code></pre>

<p>While if you use the <code>global</code> statement, the variable will become available ""outside"" the scope of the function, effectively becoming a global variable.</p>

<pre><code>def bob():
    global me
    me = ""locally defined""   # Defined locally but declared as global
    print(me)

bob()
print(me)     # Asking for a global variable
</code></pre>

<p>So the above code will give you:</p>

<pre><code>locally defined
locally defined
</code></pre>

<p>In addition, due to the nature of python, you could also use <code>global</code> to declare functions, classes or other objects in a local context. Although I would advise against it since it causes nightmares if something goes wrong or needs debugging.</p>
"
23435320,"<p>use <code>cumcount()</code>, see docs <a href=""http://pandas.pydata.org/pandas-docs/stable/groupby.html#enumerate-group-items"">here</a></p>

<pre><code>In [4]: df.groupby(['c1', 'c2']).cumcount()
Out[4]: 
0     0
1     1
2     0
3     1
4     0
5     1
6     2
7     0
8     0
9     0
10    1
11    2
dtype: int64
</code></pre>

<p>If you want orderings starting at 1</p>

<pre><code>In [5]: df.groupby(['c1', 'c2']).cumcount()+1
Out[5]: 
0     1
1     2
2     1
3     2
4     1
5     2
6     3
7     1
8     1
9     1
10    2
11    3
dtype: int64
</code></pre>
"
68961797,"<p><strong>Note for pandas versions &lt; 0.20.0</strong>: I will be using <code>df.melt(...)</code> for my examples, but you will need to use <code>pd.melt(df, ...)</code> instead.</p>
<h3>Documentation references:</h3>
<p>Most of the solutions here would be used with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>melt</code></a>, so to know the method <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>melt</code></a>, see <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer"">the documentation explanation</a>.</p>
<blockquote>
<p>Unpivot a DataFrame from wide to long format, optionally leaving
identifiers set.</p>
<p>This function is useful to massage a DataFrame into a format where one
or more columns are identifier variables <em>(id_vars)</em>, while all other
columns, considered measured variables <em>(value_vars)</em>, are âunpivotedâ
to the row axis, leaving just two non-identifier columns, âvariableâ
and âvalueâ.</p>
<p><strong>Parameters</strong></p>
<ul>
<li><p><strong>id_vars</strong> : <em>tuple, list, or ndarray, optional</em></p>
<p>Column(s) to use as identifier variables.</p>
</li>
<li><p><strong>value_vars</strong> : <em>tuple, list, or ndarray, optional</em></p>
<p>Column(s) to unpivot. If not specified, uses all columns that are not set as id_vars.</p>
</li>
<li><p><strong>var_name</strong> : <em>scalar</em></p>
<p>Name to use for the âvariableâ column. If None it uses frame.columns.name or âvariableâ.</p>
</li>
<li><p><strong>value_name</strong> : <em>scalar, default âvalueâ</em></p>
<p>Name to use for the âvalueâ column.</p>
</li>
<li><p><strong>col_level</strong> : <em>int or str, optional</em></p>
<p>If columns are a MultiIndex then use this level to melt.</p>
</li>
<li><p><strong>ignore_index</strong> : <em>bool, default True</em></p>
<p>If True, original index is ignored. If False, the original index is retained. Index labels will be repeated
as necessary.</p>
<p><em>New in version 1.1.0.</em></p>
</li>
</ul>
</blockquote>
<h3>Logic to melting:</h3>
<p>Melting merges multiple columns and converts the dataframe from wide to long, for the solution to Problem 1 (see below), the steps are:</p>
<ol>
<li><p>First we got the original dataframe.</p>
</li>
<li><p>Then the melt firstly merges the <code>Math</code> and <code>English</code> columns and makes the dataframe replicated (longer).</p>
</li>
<li><p>Then finally it adds the column <code>Subject</code> which is the subject of the <code>Grades</code> columns value, respectively:</p>
<p><a href=""https://i.stack.imgur.com/sBEGh.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sBEGh.png"" alt="""" /></a></p>
</li>
</ol>
<p>This is the simple logic to what the <code>melt</code> function does.</p>
<h3>Solutions:</h3>
<p>I will solve my own questions.</p>
<h4>Problem 1:</h4>
<p>Problem 1 could be solve using <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>pd.DataFrame.melt</code></a> with the following code:</p>
<pre><code>print(df.melt(id_vars=['Name', 'Age'], var_name='Subject', value_name='Grades'))
</code></pre>
<p>This code passes the <code>id_vars</code> argument to <code>['Name', 'Age']</code>, then automatically the <code>value_vars</code> would be set to the other columns (<code>['Math', 'English']</code>), which is transposed into that format.</p>
<p>You could also solve Problem 1 using <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"" rel=""nofollow noreferrer""><code>stack</code></a> like the below:</p>
<pre><code>print(
    df.set_index([&quot;Name&quot;, &quot;Age&quot;])
    .stack()
    .reset_index(name=&quot;Grade&quot;)
    .rename(columns={&quot;level_2&quot;: &quot;Subject&quot;})
    .sort_values(&quot;Subject&quot;)
    .reset_index(drop=True)
)
</code></pre>
<p>This code sets the <code>Name</code> and <code>Age</code> columns as the index and stacks the rest of the columns <code>Math</code> and <code>English</code>, and resets the index and assigns <code>Grade</code> as the column name, then renames the other column <code>level_2</code> to <code>Subject</code> and then sorts by the <code>Subject</code> column, then finally resets the index again.</p>
<p>Both of these solutions output:</p>
<pre class=""lang-none prettyprint-override""><code>    Name  Age  Subject Grade
0    Bob   13  English     C
1   John   16  English     B
2    Foo   16  English     B
3    Bar   15  English    A+
4   Alex   17  English     F
5    Tom   12  English     A
6    Bob   13     Math    A+
7   John   16     Math     B
8    Foo   16     Math     A
9    Bar   15     Math     F
10  Alex   17     Math     D
11   Tom   12     Math     C
</code></pre>
<h4>Problem 2:</h4>
<p>This is similar to my first question, but this one I only one to filter in the <code>Math</code> columns, this time the <code>value_vars</code> argument can come into use, like the below:</p>
<pre><code>print(
    df.melt(
        id_vars=[&quot;Name&quot;, &quot;Age&quot;],
        value_vars=&quot;Math&quot;,
        var_name=&quot;Subject&quot;,
        value_name=&quot;Grades&quot;,
    )
)
</code></pre>
<p>Or we can also use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"" rel=""nofollow noreferrer""><code>stack</code></a> with column specification:</p>
<pre><code>print(
    df.set_index([&quot;Name&quot;, &quot;Age&quot;])[[&quot;Math&quot;]]
    .stack()
    .reset_index(name=&quot;Grade&quot;)
    .rename(columns={&quot;level_2&quot;: &quot;Subject&quot;})
    .sort_values(&quot;Subject&quot;)
    .reset_index(drop=True)
)
</code></pre>
<p>Both of these solutions give:</p>
<pre class=""lang-none prettyprint-override""><code>   Name  Age Subject Grade
0   Bob   13    Math    A+
1  John   16    Math     B
2   Foo   16    Math     A
3   Bar   15    Math     F
4  Alex   15    Math     D
5   Tom   13    Math     C
</code></pre>
<h2>Problem 3:</h2>
<p>Problem 3 could be solved with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>melt</code></a> and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html"" rel=""nofollow noreferrer""><code>groupby</code></a>, using the <code>agg</code> function with <code>', '.join</code>, like the below:</p>
<pre><code>print(
    df.melt(id_vars=[&quot;Name&quot;, &quot;Age&quot;])
    .groupby(&quot;value&quot;, as_index=False)
    .agg(&quot;, &quot;.join)
)
</code></pre>
<p>It melts the dataframe then groups by the grades and aggregates them and joins them by a comma.</p>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"" rel=""nofollow noreferrer""><code>stack</code></a> could be also used to solve this problem, with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"" rel=""nofollow noreferrer""><code>stack</code></a> and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html"" rel=""nofollow noreferrer""><code>groupby</code></a> like the below:</p>
<pre><code>print(
    df.set_index([&quot;Name&quot;, &quot;Age&quot;])
    .stack()
    .reset_index()
    .rename(columns={&quot;level_2&quot;: &quot;Subjects&quot;, 0: &quot;Grade&quot;})
    .groupby(&quot;Grade&quot;, as_index=False)
    .agg(&quot;, &quot;.join)
)
</code></pre>
<p>This <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"" rel=""nofollow noreferrer""><code>stack</code></a> function just transposes the dataframe in a way that is equivalent to <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>melt</code></a>, then resets the index, renames the columns and groups and aggregates.</p>
<p>Both solutions output:</p>
<pre class=""lang-none prettyprint-override""><code>  Grade             Name                Subjects
0     A         Foo, Tom           Math, English
1    A+         Bob, Bar           Math, English
2     B  John, John, Foo  Math, English, English
3     C         Bob, Tom           English, Math
4     D             Alex                    Math
5     F        Bar, Alex           Math, English
</code></pre>
<h4>Problem 4:</h4>
<p>We first melt the dataframe for the input data:</p>
<pre><code>df = df.melt(id_vars=['Name', 'Age'], var_name='Subject', value_name='Grades')
</code></pre>
<hr />
<hr />
<p>Then now we can start solving this Problem 4.</p>
<p>Problem 4 could be solved with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot_table.html"" rel=""nofollow noreferrer""><code>pivot_table</code></a>, we would have to specify to the <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot_table.html"" rel=""nofollow noreferrer""><code>pivot_table</code></a> arguments, <code>values</code>, <code>index</code>, <code>columns</code> and also <code>aggfunc</code>.</p>
<p>We could solve it with the below code:</p>
<pre><code>print(
    df.pivot_table(&quot;Grades&quot;, [&quot;Name&quot;, &quot;Age&quot;], &quot;Subject&quot;, aggfunc=&quot;first&quot;)
    .reset_index()
    .rename_axis(columns=None)
)
</code></pre>
<p>Output:</p>
<pre class=""lang-none prettyprint-override""><code>   Name  Age English Math
0  Alex   15       F    D
1   Bar   15      A+    F
2   Bob   13       C   A+
3   Foo   16       B    A
4  John   16       B    B
5   Tom   13       A    C
</code></pre>
<p>The melted dataframe is converted back to the exact same format as the original dataframe.</p>
<p>We first pivot the melted dataframe and then reset the index and remove the column axis name.</p>
<h4>Problem 5:</h4>
<p>Problem 5 could be solved with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>melt</code></a> and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html"" rel=""nofollow noreferrer""><code>groupby</code></a> like the following:</p>
<pre><code>print(
    df.melt(id_vars=[&quot;Name&quot;, &quot;Age&quot;], var_name=&quot;Subject&quot;, value_name=&quot;Grades&quot;)
    .groupby(&quot;Name&quot;, as_index=False)
    .agg(&quot;, &quot;.join)
)
</code></pre>
<p>That melts and groups by <code>Name</code>.</p>
<p>Or you could <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"" rel=""nofollow noreferrer""><code>stack</code></a>:</p>
<pre><code>print(
    df.set_index([&quot;Name&quot;, &quot;Age&quot;])
    .stack()
    .reset_index()
    .groupby(&quot;Name&quot;, as_index=False)
    .agg(&quot;, &quot;.join)
    .rename({&quot;level_2&quot;: &quot;Subjects&quot;, 0: &quot;Grades&quot;}, axis=1)
)
</code></pre>
<p>Both codes output:</p>
<pre class=""lang-none prettyprint-override""><code>   Name       Subjects Grades
0  Alex  Math, English   D, F
1   Bar  Math, English  F, A+
2   Bob  Math, English  A+, C
3   Foo  Math, English   A, B
4  John  Math, English   B, B
5   Tom  Math, English   C, A
</code></pre>
<h4>Problem 6:</h4>
<p>Problem 6 could be solved with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>melt</code></a> and no column needed to be specified, just specify the expected column names:</p>
<pre><code>print(df.melt(var_name='Column', value_name='Value'))
</code></pre>
<p>That melts the whole dataframe.</p>
<p>Or you could <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"" rel=""nofollow noreferrer""><code>stack</code></a>:</p>
<pre><code>print(
    df.stack()
    .reset_index(level=1)
    .sort_values(&quot;level_1&quot;)
    .reset_index(drop=True)
    .set_axis([&quot;Column&quot;, &quot;Value&quot;], axis=1)
)
</code></pre>
<p>Both codes output:</p>
<pre class=""lang-none prettyprint-override""><code>     Column Value
0       Age    16
1       Age    15
2       Age    15
3       Age    16
4       Age    13
5       Age    13
6   English    A+
7   English     B
8   English     B
9   English     A
10  English     F
11  English     C
12     Math     C
13     Math    A+
14     Math     D
15     Math     B
16     Math     F
17     Math     A
18     Name  Alex
19     Name   Bar
20     Name   Tom
21     Name   Foo
22     Name  John
23     Name   Bob
</code></pre>
<h2>Conclusion:</h2>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>melt</code></a> is a really handy function, and often it's required. Once you meet these types of problems, don't forget to try <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html"" rel=""nofollow noreferrer""><code>melt</code></a>. It may well solve your problem.</p>
"
65264742,"<p>Your application works well. However, you haven't implemented an application loop:</p>
<pre class=""lang-py prettyprint-override""><code>import pygame
from pygame.locals import *

pygame.init()

win = pygame.display.set_mode((400,400))
pygame.display.set_caption(&quot;My first game&quot;)
clock = pygame.time.Clock()

run = True
while run:

    # handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    # update game objects
    # [...]

    # clear display
    win.fill((0, 0, 0))

    # draw game objects
    # [...]

    # update display
    pygame.display.flip()

    # limit frames per second
    clock.tick(60) 

pygame.quit()
</code></pre>
<p>The typical PyGame application loop has to:</p>
<ul>
<li>handle the events by calling either <a href=""https://www.pygame.org/docs/ref/event.html#pygame.event.pump"" rel=""nofollow noreferrer""><code>pygame.event.pump()</code></a> or <a href=""https://www.pygame.org/docs/ref/event.html#pygame.event.get"" rel=""nofollow noreferrer""><code>pygame.event.get()</code></a>.</li>
<li>update the game states and positions of objects dependent on the input events and time (respectively frames)</li>
<li>clear the entire display or draw the background</li>
<li>draw the entire scene (<code>blit</code> all the objects)</li>
<li>update the display by calling either <a href=""https://www.pygame.org/docs/ref/display.html#pygame.display.update"" rel=""nofollow noreferrer""><code>pygame.display.update()</code></a> or <a href=""https://www.pygame.org/docs/ref/display.html#pygame.display.flip"" rel=""nofollow noreferrer""><code>pygame.display.flip()</code></a></li>
<li>limit frames per second to limit CPU usage with <a href=""https://www.pygame.org/docs/ref/time.html#pygame.time.Clock"" rel=""nofollow noreferrer""><code>pygame.time.Clock.tick</code></a></li>
</ul>
<p><kbd><a href=""https://repl.it/@Rabbid76/PyGame-MinimalApplicationLoop#main.py"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5jD0C.png"" alt="""" /> repl.it/@Rabbid76/PyGame-MinimalApplicationLoop</a></kbd> See also <a href=""https://github.com/Rabbid76/PyGameExamplesAndAnswers/blob/master/documentation/pygame/pygame_event_and_application_loop.md"" rel=""nofollow noreferrer"">Event and application loop</a></p>
"
,
354130,"<blockquote>
  <p>Which, not only is ugly and slow</p>
</blockquote>

<p>I'd dispute both.</p>

<p>A regex or other string parsing method would be uglier and slower.  </p>

<p>I'm not sure that anything much could be faster than the above.  It calls the function and returns.  Try/Catch doesn't introduce much overhead because the most common exception is caught without an extensive search of stack frames.</p>

<p>The issue is that any numeric conversion function has two kinds of results</p>

<ul>
<li>A number, if the number is valid</li>
<li>A status code (e.g., via errno) or exception to show that no valid number could be parsed.</li>
</ul>

<p>C (as an example) hacks around this a number of ways.  Python lays it out clearly and explicitly.</p>

<p>I think your code for doing this is perfect.</p>
"
4289557,"<p>If you only want to extract only positive integers, try the following:</p>
<pre><code>&gt;&gt;&gt; txt = &quot;h3110 23 cat 444.4 rabbit 11 2 dog&quot;
&gt;&gt;&gt; [int(s) for s in txt.split() if s.isdigit()]
[23, 11, 2]
</code></pre>
<p>I would argue that this is better than the regex example because you don't need another module and it's more readable because you don't need to parse (and learn) the <a href=""https://docs.python.org/3/library/re.html#regular-expression-syntax"" rel=""noreferrer"">regex mini-language</a>.</p>
<p>This will not recognize floats, negative integers, or integers in hexadecimal format.  If you can't accept these limitations, <a href=""https://stackoverflow.com/questions/4289331/python-extract-numbers-of-a-string/4289415#4289415"">jmnas's answer below</a> will do the trick.</p>
"
,
230774,"<p>In Python 3, <a href=""https://docs.python.org/library/functions.html#print"" rel=""noreferrer""><code>print</code></a> can take an optional <code>flush</code> argument:</p>
<pre><code>print(&quot;Hello, World!&quot;, flush=True)
</code></pre>
<p>In Python 2, after calling <code>print</code>, do:</p>
<pre><code>import sys
sys.stdout.flush()
</code></pre>
<p>By default, <a href=""https://docs.python.org/2/reference/simple_stmts.html#the-print-statement"" rel=""noreferrer""><code>print</code></a> prints to <a href=""https://docs.python.org/2/library/sys.html#sys.stdout"" rel=""noreferrer""><code>sys.stdout</code></a> (see the documentation for more about <a href=""https://docs.python.org/2/library/stdtypes.html#file-objects"" rel=""noreferrer"">file objects</a>).</p>
"
4896288,"<p><a href=""https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/4025909#4025909""><code>fcntl</code></a>, <a href=""https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/375511#375511""><code>select</code></a>, <a href=""https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/437888#437888""><code>asyncproc</code></a> won't help in this case.</p>

<p>A reliable way to read a stream without blocking regardless of operating system is to use <a href=""https://docs.python.org/3/library/queue.html#queue.Queue.get_nowait"" rel=""noreferrer""><code>Queue.get_nowait()</code></a>:</p>

<pre><code>import sys
from subprocess import PIPE, Popen
from threading  import Thread

try:
    from queue import Queue, Empty
except ImportError:
    from Queue import Queue, Empty  # python 2.x

ON_POSIX = 'posix' in sys.builtin_module_names

def enqueue_output(out, queue):
    for line in iter(out.readline, b''):
        queue.put(line)
    out.close()

p = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)
q = Queue()
t = Thread(target=enqueue_output, args=(p.stdout, q))
t.daemon = True # thread dies with the program
t.start()

# ... do other things here

# read line without blocking
try:  line = q.get_nowait() # or q.get(timeout=.1)
except Empty:
    print('no output yet')
else: # got line
    # ... do something with line
</code></pre>
"
510364,"<p>Here's a link to the ActiveState Recipes site that says how you can read a single character in Windows, Linux and OSX:</p>
<p>Â Â Â Â <a href=""https://code.activestate.com/recipes/134892/"" rel=""noreferrer"">getch()-like unbuffered character reading from stdin on both Windows and Unix</a></p>
<pre><code>class _Getch:
    &quot;&quot;&quot;Gets a single character from standard input.  Does not echo to the
screen.&quot;&quot;&quot;
    def __init__(self):
        try:
            self.impl = _GetchWindows()
        except ImportError:
            self.impl = _GetchUnix()

    def __call__(self): return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys

    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt

    def __call__(self):
        import msvcrt
        return msvcrt.getch()


getch = _Getch()
</code></pre>
"
3437070,"<p>Use the <a href=""https://docs.python.org/reference/expressions.html#membership-test-details"" rel=""noreferrer""><code>in</code> operator</a>:</p>
<pre><code>if &quot;blah&quot; not in somestring: 
    continue
</code></pre>
"
5458807,"<p>You can use <a href=""http://www.py2exe.org/"" rel=""noreferrer"">py2exe</a> as already answered and use <a href=""http://cython.org/"" rel=""noreferrer"">Cython</a> to convert your key <code>.py</code> files in <code>.pyc</code>, C compiled files, like <code>.dll</code> in Windows and <code>.so</code> on Linux.</p>
<p>It is much harder to revert than common <code>.pyo</code> and <code>.pyc</code> files (and also gain in performance!).</p>
"
1247490,"<p><em>map</em> may be microscopically faster in some cases (when you're <em>not</em> making a lambda for the purpose, but using the same function in map and a <a href=""https://en.wikipedia.org/wiki/List_comprehension#Python"" rel=""noreferrer"">list comprehension</a>). List comprehensions may be faster in other cases and most (not all) Pythonistas consider them more direct and clearer.</p>
<p>An example of the tiny speed advantage of <em>map</em> when using exactly the same function:</p>
<pre class=""lang-none prettyprint-override""><code>$ python -m timeit -s'xs=range(10)' 'map(hex, xs)'
100000 loops, best of 3: 4.86 usec per loop

$ python -m timeit -s'xs=range(10)' '[hex(x) for x in xs]'
100000 loops, best of 3: 5.58 usec per loop
</code></pre>
<p>An example of how performance comparison gets completely reversed when map needs a lambda:</p>
<pre class=""lang-none prettyprint-override""><code>$ python -m timeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'
100000 loops, best of 3: 4.24 usec per loop

$ python -m timeit -s'xs=range(10)' '[x+2 for x in xs]'
100000 loops, best of 3: 2.32 usec per loop
</code></pre>
"
35491399,"<p>You can use the <code>DataFrame</code> constructor with <code>lists</code> created by <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.to_list.html"" rel=""noreferrer""><code>to_list</code></a>:</p>
<pre><code>import pandas as pd

d1 = {'teams': [['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],
                ['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG']]}
df2 = pd.DataFrame(d1)
print (df2)
       teams
0  [SF, NYG]
1  [SF, NYG]
2  [SF, NYG]
3  [SF, NYG]
4  [SF, NYG]
5  [SF, NYG]
6  [SF, NYG]
</code></pre>
<hr />
<pre><code>df2[['team1','team2']] = pd.DataFrame(df2.teams.tolist(), index= df2.index)
print (df2)
       teams team1 team2
0  [SF, NYG]    SF   NYG
1  [SF, NYG]    SF   NYG
2  [SF, NYG]    SF   NYG
3  [SF, NYG]    SF   NYG
4  [SF, NYG]    SF   NYG
5  [SF, NYG]    SF   NYG
6  [SF, NYG]    SF   NYG
</code></pre>
<p>And for a new <code>DataFrame</code>:</p>
<pre><code>df3 = pd.DataFrame(df2['teams'].to_list(), columns=['team1','team2'])
print (df3)
  team1 team2
0    SF   NYG
1    SF   NYG
2    SF   NYG
3    SF   NYG
4    SF   NYG
5    SF   NYG
6    SF   NYG
</code></pre>
<p>A solution with <code>apply(pd.Series)</code> is very slow:</p>
<pre><code>#7k rows
df2 = pd.concat([df2]*1000).reset_index(drop=True)

In [121]: %timeit df2['teams'].apply(pd.Series)
1.79 s Â± 52.5 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)

In [122]: %timeit pd.DataFrame(df2['teams'].to_list(), columns=['team1','team2'])
1.63 ms Â± 54.3 Âµs per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
</code></pre>
"
11566296,"<p>The <code>form</code> tag needs some attributes set:</p>
<ol>
<li><code>action</code>: The URL that the form data is sent to on submit. Generate it with <code>url_for</code>. It can be omitted if the same URL handles showing the form and processing the data.</li>
<li><code>method=&quot;post&quot;</code>: Submits the data as form data with the POST method. If not given, or explicitly set to <code>get</code>, the data is submitted in the query string (<code>request.args</code>) with the GET method instead.</li>
<li><code>enctype=&quot;multipart/form-data&quot;</code>: When the form contains file inputs, it must have this encoding set, otherwise the files will not be uploaded and Flask won't see them.</li>
</ol>
<p>The <code>input</code> tag needs a <code>name</code> parameter.</p>
<p>Add a view to handle the submitted data, which is in <code>request.form</code> under the same key as the input's <code>name</code>. Any file inputs will be in <code>request.files</code>.</p>
<pre><code>@app.route('/handle_data', methods=['POST'])
def handle_data():
    projectpath = request.form['projectFilepath']
    # your code
    # return a response
</code></pre>
<p>Set the form's <code>action</code> to that view's URL using <code>url_for</code>:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;form action=&quot;{{ url_for('handle_data') }}&quot; method=&quot;post&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;projectFilepath&quot;&gt;
    &lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;
</code></pre>
"
24085681,"<p>What you are seeing is the <em>representation</em> of <code>my_string</code> created by its <a href=""https://docs.python.org/3/reference/datamodel.html#object.__repr__"" rel=""noreferrer""><code>__repr__()</code></a> method. If you print it, you can see that you've actually got single backslashes, just as you intended:</p>

<pre><code>&gt;&gt;&gt; print(my_string)
why\does\it\happen?
</code></pre>

<p>The string below has <em>three</em> characters in it, not four:</p>

<pre><code>&gt;&gt;&gt; 'a\\b'
'a\\b'
&gt;&gt;&gt; len('a\\b')
3
</code></pre>

<p>You can get the standard representation of a string (or any other object) with the <a href=""https://docs.python.org/3/library/functions.html#repr"" rel=""noreferrer""><code>repr()</code></a> built-in function:</p>

<pre><code>&gt;&gt;&gt; print(repr(my_string))
'why\\does\\it\\happen?'
</code></pre>

<p>Python represents backslashes in strings as <code>\\</code> because the backslash is an escape character - for instance, <code>\n</code> represents a newline, and <code>\t</code> represents a tab.</p>

<p>This can sometimes get you into trouble:</p>

<pre><code>&gt;&gt;&gt; print(""this\text\is\not\what\it\seems"")
this    ext\is
ot\what\it\seems
</code></pre>

<p>Because of this, there needs to be a way to tell Python you <em>really</em> want the two characters <code>\n</code> rather than a newline, and you do that by escaping the backslash itself, with another one:</p>

<pre><code>&gt;&gt;&gt; print(""this\\text\is\what\you\\need"")
this\text\is\what\you\need
</code></pre>

<p>When Python returns the representation of a string, it plays safe, escaping all backslashes (even if they wouldn't otherwise be part of an escape sequence), and that's what you're seeing. However, the string itself contains only single backslashes.</p>

<p><em>More information about Python's string literals can be found at: <a href=""https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"" rel=""noreferrer"">String and Bytes literals</a> in the Python documentation.</em></p>
"
1534343,"<p><strong>NOTE:</strong> For <strong>Python 3.3+</strong>, see The Aelfinn's <a href=""https://stackoverflow.com/a/39713544/1450294"">answer</a> below.</p>
<hr />
<p>Use the <code>--python</code> (or short <code>-p</code>) option when creating a virtualenv instance to specify the Python executable you want to use, e.g.:</p>
<pre><code>virtualenv --python=&quot;/usr/bin/python2.6&quot; &quot;/path/to/new/virtualenv/&quot;
</code></pre>
"
7027113,"<p>While this is possible, you should not use the Flask dev server in production. The Flask dev server is not designed to be particularly secure, stable, or efficient. See the docs on <a href=""https://flask.palletsprojects.com/deploying/index.html"" rel=""noreferrer"">deploying</a> for correct solutions.</p>
<hr />
<p>The <code>--host</code> option to <code>flask run</code>, or the <code>host</code> parameter to <code>app.run()</code>, controls what address the development server listens to. By default it runs on <code>localhost</code>, change it to <code>flask run --host=0.0.0.0</code> (or <code>app.run(host=&quot;0.0.0.0&quot;)</code>) to run on all your machine's IP addresses.</p>
<p><code>0.0.0.0</code> is a special value that you can't use in the browser directly, you'll need to navigate to the actual IP address of the machine on the network. You may also need to adjust your firewall to allow external access to the port.</p>
<p>The Flask <a href=""https://flask.palletsprojects.com/quickstart/#a-minimal-application"" rel=""noreferrer"">quickstart docs</a> explain this in the &quot;Externally Visible Server&quot; section:</p>
<blockquote>
<p>If you run the server you will notice that the server is only
accessible from your own computer, not from any other in the network.
This is the default because in debugging mode a user of the
application can execute arbitrary Python code on your computer.</p>
<p>If you have the debugger disabled or trust the users on your network,
you can make the server publicly available simply by adding
<code>--host=0.0.0.0</code> to the command line:</p>
<pre class=""lang-none prettyprint-override""><code>$ flask run --host=0.0.0.0
</code></pre>
<p>This tells your operating system to listen on all public IPs.</p>
</blockquote>
"
176921,"<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;].index(&quot;bar&quot;)
1
</code></pre>
<p>See <a href=""https://docs.python.org/tutorial/datastructures.html#more-on-lists"" rel=""noreferrer"">the documentation</a> for the built-in <code>.index()</code> method of the list:</p>
<blockquote>
<pre><code>list.index(x[, start[, end]])
</code></pre>
<p>Return zero-based index in the list of the first item whose value is equal to <em>x</em>. Raises a <a href=""https://docs.python.org/library/exceptions.html#ValueError"" rel=""noreferrer""><code>ValueError</code></a> if there is no such item.</p>
<p>The optional arguments <em>start</em> and <em>end</em> are interpreted as in the <a href=""https://docs.python.org/tutorial/introduction.html#lists"" rel=""noreferrer"">slice notation</a> and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.</p>
</blockquote>
<h2>Caveats</h2>
<h3>Linear time-complexity in list length</h3>
<p>An <code>index</code> call checks every element of the list in order, until it finds a match. If the list is long, and if there is no guarantee that the value will be near the beginning, this can slow down the code.</p>
<p>This problem can only be completely avoided by using a different data structure. However, if the element is known to be within a certain part of the list, the <code>start</code> and <code>end</code> parameters can be used to narrow the search.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('l.index(999_999)', setup='l = list(range(0, 1_000_000))', number=1000)
9.356267921015387
&gt;&gt;&gt; timeit.timeit('l.index(999_999, 999_990, 1_000_000)', setup='l = list(range(0, 1_000_000))', number=1000)
0.0004404920036904514
</code></pre>
<p>The second call is orders of magnitude faster, because it only has to search through 10 elements, rather than all 1 million.</p>
<h3>Only the index of the <em>first match</em> is returned</h3>
<p>A call to <code>index</code> searches through the list in order until it finds a match, and <em>stops there.</em> If there could be more than one occurrence of the value, and all indices are needed, <code>index</code> cannot solve the problem:</p>
<pre><code>&gt;&gt;&gt; [1, 1].index(1) # the `1` index is not found.
0
</code></pre>
<p>Instead, use a <a href=""/questions/34835951/"">list comprehension or generator expression to do the search</a>, with <a href=""/questions/522563/""><code>enumerate</code> to get indices</a>:</p>
<pre><code>&gt;&gt;&gt; # A list comprehension gives a list of indices directly:
&gt;&gt;&gt; [i for i, e in enumerate([1, 2, 1]) if e == 1]
[0, 2]
&gt;&gt;&gt; # A generator comprehension gives us an iterable object...
&gt;&gt;&gt; g = (i for i, e in enumerate([1, 2, 1]) if e == 1)
&gt;&gt;&gt; # which can be used in a `for` loop, or manually iterated with `next`:
&gt;&gt;&gt; next(g)
0
&gt;&gt;&gt; next(g)
2
</code></pre>
<p>The list comprehension and generator expression techniques still work if there is only one match, and are more generalizable.</p>
<h3>Raises an exception if there is no match</h3>
<p>As noted in the documentation above, using <code>.index</code> will raise an exception if the searched-for value is not in the list:</p>
<pre><code>&gt;&gt;&gt; [1, 1].index(2)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: 2 is not in list
</code></pre>
<p>If this is a concern, either <a href=""https://stackoverflow.com/questions/12934190"">explicitly check first</a> using <code>item in my_list</code>, or handle the exception with <code>try</code>/<code>except</code> as appropriate.</p>
<p>The explicit check is simple and readable, but it must iterate the list a second time. See <a href=""https://stackoverflow.com/questions/11360858"">What is the EAFP principle in Python?</a> for more guidance on this choice.</p>
"
4700674,"<ul>
<li>You can make the legend text smaller by specifying <code>set_size</code> of <code>FontProperties</code>.</li>
<li>Resources:
<ul>
<li><a href=""https://matplotlib.org/tutorials/intermediate/legend_guide.html#legend-guide"" rel=""noreferrer"">Legend guide</a></li>
<li><a href=""https://matplotlib.org/api/legend_api.html"" rel=""noreferrer""><code>matplotlib.legend</code></a></li>
<li><a href=""https://matplotlib.org/api/_as_gen/matplotlib.pyplot.legend.html#matplotlib.pyplot.legend"" rel=""noreferrer""><code>matplotlib.pyplot.legend</code></a></li>
<li><a href=""https://matplotlib.org/3.3.1/api/font_manager_api.html"" rel=""noreferrer""><code>matplotlib.font_manager</code></a>
<ul>
<li><a href=""https://matplotlib.org/3.3.1/api/font_manager_api.html#matplotlib.font_manager.FontProperties.set_size"" rel=""noreferrer""><code>set_size(self, size)</code></a></li>
<li>Valid font size are <em>xx-small</em>, <em>x-small</em>, <em>small</em>, <em>medium</em>, <em>large</em>, <em>x-large</em>, <em>xx-large</em>, <em>larger</em>, <em>smaller</em>, and <em>None</em>.</li>
</ul>
</li>
<li><a href=""https://realpython.com/python-matplotlib-guide/"" rel=""noreferrer"">Real Python: Python Plotting With Matplotlib (Guide)</a></li>
</ul>
</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties

fontP = FontProperties()
fontP.set_size('xx-small')

p1, = plt.plot([1, 2, 3], label='Line 1')
p2, = plt.plot([3, 2, 1], label='Line 2')
plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', prop=fontP)
</code></pre>
<p><a href=""https://i.stack.imgur.com/OMgiC.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/OMgiC.png"" alt=""Enter image description here"" /></a></p>
<ul>
<li><code>fontsize='xx-small'</code> also works, without importing <code>FontProperties</code>.</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='xx-small')
</code></pre>
"
2921893,"<p>A single star <code>*</code> unpacks a sequence or collection into positional arguments. Suppose we have</p>
<pre><code>def add(a, b):
    return a + b

values = (1, 2)
</code></pre>
<p>Using the <code>*</code> unpacking operator, we can write <code>s = add(*values)</code>, which will be equivalent to writing <code>s = add(1, 2)</code>.</p>
<p>The double star <code>**</code> does the same thing for a dictionary, providing values for named arguments:</p>
<pre><code>values = { 'a': 1, 'b': 2 }
s = add(**values) # equivalent to add(a=1, b=2)
</code></pre>
<p>Both operators can be used for the same function call. For example, given:</p>
<pre><code>def sum(a, b, c, d):
    return a + b + c + d

values1 = (1, 2)
values2 = { 'c': 10, 'd': 15 }
</code></pre>
<p>then <code>s = add(*values1, **values2)</code> is equivalent to <code>s = sum(1, 2, c=10, d=15)</code>.</p>
<p>See also the <a href=""https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists"" rel=""noreferrer"">relevant section</a> of the tutorial in the Python documentation.</p>
<hr />
<p>Similarly, <code>*</code> and <code>**</code> can be used for parameters. Using <code>*</code> allows a function to accept any number of positional arguments, which will be collected into a single parameter:</p>
<pre><code>def add(*values):
    s = 0
    for v in values:
        s = s + v
    return s
</code></pre>
<p>Now when the function is called like <code>s = add(1, 2, 3, 4, 5)</code>, <code>values</code> will be the tuple <code>(1, 2, 3, 4, 5)</code> (which, of course, produces the result <code>15</code>).</p>
<p>Similarly, a parameter marked with <code>**</code> will receive a <code>dict</code>:</p>
<pre><code>def get_a(**values):
    return values['a']

s = get_a(a=1, b=2)      # returns 1
</code></pre>
<p>this allows for specifying a large number of optional parameters without having to declare them.</p>
<p>Again, both can be combined:</p>
<pre><code>def add(*values, **options):
    s = 0
    for i in values:
        s = s + i
    if &quot;neg&quot; in options:
        if options[&quot;neg&quot;]:
            s = -s
    return s
        
s = add(1, 2, 3, 4, 5)            # returns 15
s = add(1, 2, 3, 4, 5, neg=True)  # returns -15
s = add(1, 2, 3, 4, 5, neg=False) # returns 15
</code></pre>
"
6921225,"<p>This can be done using a <code>lambda</code>, like so:</p>
<pre><code>button = Tk.Button(master=frame, text='press', command= lambda: action(someNumber))
</code></pre>
<p>This is a simple way to bind the argument without an explicit wrapper method or modifying the original <code>action</code>.</p>
"
3052827,"<pre><code>def foo():
    x = 'hello world'
    return x  # return 'hello world' would do, too

foo()
print(x)   # NameError - x is not defined outside the function

y = foo()
print(y)   # this works

x = foo()
print(x)   # this also works, and it's a completely different x than that inside
           # foo()

z = bar(x) # of course, now you can use x as you want

z = bar(foo()) # but you don't have to
</code></pre>
"
6269785,"<p>To quote <a href=""https://docs.python.org/2/reference/lexical_analysis.html#string-literals"" rel=""noreferrer"">the Python 2.x documentation</a>:</p>

<blockquote>
  <p>A prefix of 'b' or 'B' is ignored in
  Python 2; it indicates that the
  literal should become a bytes literal
  in Python 3 (e.g. when code is
  automatically converted with 2to3). A
  'u' or 'b' prefix may be followed by
  an 'r' prefix.</p>
</blockquote>

<p>The <a href=""https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"" rel=""noreferrer"">Python 3 documentation</a> states:</p>

<blockquote>
  <p>Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.</p>
</blockquote>
"
218510,"<p>There are two overarching types of variables in Java:</p>
<ol>
<li><p><em>Primitives</em>: variables that contain data. If you want to manipulate the data in a primitive variable you can manipulate that variable directly. By convention primitive types start with a lowercase letter. For example variables of type <code>int</code> or <code>char</code> are primitives.</p>
</li>
<li><p><em>References</em>: variables that contain the memory address of an <code>Object</code> i.e. variables that <em>refer</em> to an <code>Object</code>. If you want to manipulate the <code>Object</code> that a reference variable refers to you must <em>dereference</em> it. Dereferencing usually entails using <code>.</code> to access a method or field, or using <code>[</code> to index an array. By convention reference types are usually denoted with a type that starts in uppercase. For example variables of type <code>Object</code> are references.</p>
</li>
</ol>
<p>Consider the following code where you declare a variable of <em>primitive</em> type <code>int</code> and don't initialize it:</p>
<pre class=""lang-java prettyprint-override""><code>int x;
int y = x + x;
</code></pre>
<p>These two lines will crash the program because no value is specified for <code>x</code> and we are trying to use <code>x</code>'s value to specify <code>y</code>. All primitives have to be initialized to a usable value before they are manipulated.</p>
<p>Now here is where things get interesting. <em>Reference</em> variables can be set to <code>null</code> which means &quot;<strong>I am referencing <em>nothing</em></strong>&quot;. You can get a <code>null</code> value in a reference variable if you explicitly set it that way, or a reference variable is uninitialized and the compiler does not catch it (Java will automatically set the variable to <code>null</code>).</p>
<p>If a reference variable is set to null either explicitly by you or through Java automatically, and you attempt to <em>dereference</em> it you get a <code>NullPointerException</code>.</p>
<p>The <code>NullPointerException</code> (NPE) typically occurs when you declare a variable but did not create an object and assign it to the variable before trying to use the contents of the variable. So you have a reference to something that does not actually exist.</p>
<p>Take the following code:</p>
<pre><code>Integer num;
num = new Integer(10);
</code></pre>
<p>The first line declares a variable named <code>num</code>, but it does not actually contain a reference value yet. Since you have not yet said what to point to, Java sets it to <code>null</code>.</p>
<p>In the second line, the <code>new</code> keyword is used to instantiate (or create) an object of type <code>Integer</code>, and the reference variable <code>num</code> is assigned to that <code>Integer</code> object.</p>
<p>If you attempt to dereference <code>num</code> <em>before</em> creating the object you get a <code>NullPointerException</code>. In the most trivial cases, the compiler will catch the problem and let you know that &quot;<code>num may not have been initialized</code>,&quot; but sometimes you may write code that does not directly create the object.</p>
<p>For instance, you may have a method as follows:</p>
<pre><code>public void doSomething(SomeObject obj) {
   // Do something to obj, assumes obj is not null
   obj.myMethod();
}
</code></pre>
<p>In which case, you are not creating the object <code>obj</code>, but rather assuming that it was created before the <code>doSomething()</code> method was called. Note, it is possible to call the method like this:</p>
<pre><code>doSomething(null);
</code></pre>
<p>In which case, <code>obj</code> is <code>null</code>, and the statement <code>obj.myMethod()</code> will throw a <code>NullPointerException</code>.</p>
<p>If the method is intended to do something to the passed-in object as the above method does, it is appropriate to throw the <code>NullPointerException</code> because it's a programmer error and the programmer will need that information for debugging purposes.</p>
<p>In addition to <code>NullPointerException</code>s thrown as a result of the method's logic, you can also check the method arguments for <code>null</code> values and throw NPEs explicitly by adding something like the following near the beginning of a method:</p>
<pre><code>// Throws an NPE with a custom error message if obj is null
Objects.requireNonNull(obj, &quot;obj must not be null&quot;);
</code></pre>
<p>Note that it's helpful to say in your error message clearly <em>which</em> object cannot be <code>null</code>. The advantage of validating this is that 1) you can return your own clearer error messages and 2) for the rest of the method you know that unless <code>obj</code> is reassigned, it is not null and can be dereferenced safely.</p>
<p>Alternatively, there may be cases where the purpose of the method is not solely to operate on the passed in object, and therefore a null parameter may be acceptable. In this case, you would need to check for a <strong>null parameter</strong> and behave differently. You should also explain this in the documentation. For example, <code>doSomething()</code> could be written as:</p>
<pre><code>/**
  * @param obj An optional foo for ____. May be null, in which case
  *  the result will be ____.
  */
public void doSomething(SomeObject obj) {
    if(obj == null) {
       // Do something
    } else {
       // Do something else
    }
}
</code></pre>
<p>Finally, <a href=""https://stackoverflow.com/q/3988788/2775450"">How to pinpoint the exception &amp; cause using Stack Trace</a></p>
<blockquote>
<p>What methods/tools can be used to determine the cause so that you stop
the exception from causing the program to terminate prematurely?</p>
</blockquote>
<p>Sonar with find bugs can detect NPE.
<a href=""https://stackoverflow.com/questions/20899931/can-sonar-catch-null-pointer-exceptions-caused-by-jvm-dynamically"">Can sonar catch null pointer exceptions caused by JVM Dynamically</a></p>
<p>Now Java 14 has added a new language feature to show the root cause of NullPointerException. This language feature has been part of SAP commercial JVM since 2006.</p>
<p>In Java 14, the following is a sample NullPointerException Exception message:</p>
<blockquote>
<p>in thread &quot;main&quot; java.lang.NullPointerException: Cannot invoke &quot;java.util.List.size()&quot; because &quot;list&quot; is null</p>
</blockquote>
<h3>List of situations that cause a <code>NullPointerException</code> to occur</h3>
<p>Here are all the situations in which a <code>NullPointerException</code> occurs, that are directly* mentioned by the Java Language Specification:</p>
<ul>
<li>Accessing (i.e. getting or setting) an <em>instance</em> field of a null reference. (static fields don't count!)</li>
<li>Calling an <em>instance</em> method of a null reference. (static methods don't count!)</li>
<li><code>throw null;</code></li>
<li>Accessing elements of a null array.</li>
<li>Synchronising on null - <code>synchronized (someNullReference) { ... }</code></li>
<li>Any integer/floating point operator can throw a <code>NullPointerException</code> if one of its operands is a boxed null reference</li>
<li>An unboxing conversion throws a <code>NullPointerException</code> if the boxed value is null.</li>
<li>Calling <code>super</code> on a null reference throws a <code>NullPointerException</code>. If you are confused, this is talking about qualified superclass constructor invocations:</li>
</ul>
<pre><code>class Outer {
    class Inner {}
}
class ChildOfInner extends Outer.Inner {
    ChildOfInner(Outer o) { 
        o.super(); // if o is null, NPE gets thrown
    }
}
</code></pre>
<ul>
<li><p>Using a <code>for (element : iterable)</code> loop to loop through a null collection/array.</p>
</li>
<li><p><code>switch (foo) { ... }</code> (whether its an expression or statement) can throw a <code>NullPointerException</code> when <code>foo</code> is null.</p>
</li>
<li><p><code>foo.new SomeInnerClass()</code> throws a <code>NullPointerException</code> when <code>foo</code> is null.</p>
</li>
<li><p>Method references of the form <code>name1::name2</code> or <code>primaryExpression::name</code> throws a <code>NullPointerException</code> when evaluated when <code>name1</code> or <code>primaryExpression</code> evaluates to null.</p>
<p>a note from the JLS here says that, <code>someInstance.someStaticMethod()</code> doesn't throw an NPE, because <code>someStaticMethod</code> is static, but <code>someInstance::someStaticMethod</code> still throw an NPE!</p>
</li>
</ul>
<p><sub>* Note that the JLS probably also says a lot about NPEs <em>indirectly</em>.</sub></p>
"
513839,"<p><code>==</code> tests for reference equality (whether they are the same object).</p>
<p><code>.equals()</code> tests for value equality (whether they contain the same data).</p>
<p><a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)"" rel=""noreferrer"">Objects.equals()</a> checks for <code>null</code> before calling <code>.equals()</code> so you don't have to (available as of JDK7, also available in <a href=""https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#equals"" rel=""noreferrer"">Guava</a>).</p>
<p>Consequently, if you want to test whether two strings have the same value you will probably want to use <code>Objects.equals()</code>.</p>
<pre><code>// These two have the same value
new String(&quot;test&quot;).equals(&quot;test&quot;) // --&gt; true 

// ... but they are not the same object
new String(&quot;test&quot;) == &quot;test&quot; // --&gt; false 

// ... neither are these
new String(&quot;test&quot;) == new String(&quot;test&quot;) // --&gt; false 

// ... but these are because literals are interned by 
// the compiler and thus refer to the same object
&quot;test&quot; == &quot;test&quot; // --&gt; true 

// ... string literals are concatenated by the compiler
// and the results are interned.
&quot;test&quot; == &quot;te&quot; + &quot;st&quot; // --&gt; true

// ... but you should really just call Objects.equals()
Objects.equals(&quot;test&quot;, new String(&quot;test&quot;)) // --&gt; true
Objects.equals(null, &quot;test&quot;) // --&gt; false
Objects.equals(null, null) // --&gt; true
</code></pre>
<p>You almost <strong>always</strong> want to use <code>Objects.equals()</code>. In the <strong>rare</strong> situation where you <strong>know</strong> you're dealing with <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#intern--"" rel=""noreferrer"">interned</a> strings, you <em>can</em> use <code>==</code>.</p>
<p>From <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5"" rel=""noreferrer"">JLS 3.10.5. <em>String Literals</em></a>:</p>
<blockquote>
<p>Moreover, a string literal always refers to the <em>same</em> instance of class <code>String</code>. This is because string literals - or, more generally, strings that are the values of constant expressions (<a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.28"" rel=""noreferrer"">Â§15.28</a>) - are &quot;interned&quot; so as to share unique instances, using the method <code>String.intern</code>.</p>
</blockquote>
<p>Similar examples can also be found in <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#d5e1634"" rel=""noreferrer"">JLS 3.10.5-1</a>.</p>
<h3>Other Methods To Consider</h3>
<p><a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equalsIgnoreCase-java.lang.String-"" rel=""noreferrer"">String.equalsIgnoreCase()</a> value equality that ignores case. Beware, however, that this method can have unexpected results in various locale-related cases, see <a href=""https://stackoverflow.com/questions/44238749/equalsignorecase-not-working-as-intended"">this question</a>.</p>
<p><a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#contentEquals-java.lang.CharSequence-"" rel=""noreferrer"">String.contentEquals()</a> compares the content of the <code>String</code> with the content of any <code>CharSequence</code> (available since Java 1.5). Saves you from having to turn your StringBuffer, etc into a String before doing the equality comparison, but leaves the null checking to you.</p>
"
5554781,"<p>Your first port of call should be the <a href=""http://download.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html"" rel=""noreferrer"">documentation</a> which explains it reasonably clearly:</p>

<blockquote>
  <p>Thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.</p>
</blockquote>

<p>So for example:</p>

<pre><code>int[] array = new int[5];
int boom = array[10]; // Throws the exception
</code></pre>

<p>As for how to avoid it... um, don't do that. Be careful with your array indexes.</p>

<p>One problem people sometimes run into is thinking that arrays are 1-indexed, e.g.</p>

<pre><code>int[] array = new int[5];
// ... populate the array here ...
for (int index = 1; index &lt;= array.length; index++)
{
    System.out.println(array[index]);
}
</code></pre>

<p>That will miss out the first element (index 0) and throw an exception when index is 5. The valid indexes here are 0-4 inclusive. The correct, idiomatic <code>for</code> statement here would be:</p>

<pre><code>for (int index = 0; index &lt; array.length; index++)
</code></pre>

<p>(That's assuming you <em>need</em> the index, of course. If you can use the enhanced for loop instead, do so.)</p>
"
13102066,"<p>That's because the <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#nextInt%28%29"" rel=""noreferrer""><code>Scanner.nextInt</code></a> method does not read the <em>newline</em> character in your input created by hitting ""Enter,"" and so the call to <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#nextLine%28%29"" rel=""noreferrer""><code>Scanner.nextLine</code></a> returns after reading that <em>newline</em>.</p>

<p>You will encounter the similar behaviour when you use <code>Scanner.nextLine</code> after <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#next%28%29"" rel=""noreferrer""><code>Scanner.next()</code></a> or any <code>Scanner.nextFoo</code> method (except <code>nextLine</code> itself).</p>

<p><strong>Workaround:</strong></p>

<ul>
<li><p>Either put a <code>Scanner.nextLine</code> call after each <code>Scanner.nextInt</code> or <code>Scanner.nextFoo</code> to consume rest of that line including <em>newline</em> </p>

<pre><code>int option = input.nextInt();
input.nextLine();  // Consume newline left-over
String str1 = input.nextLine();
</code></pre></li>
<li><p>Or, even better, read the input through <code>Scanner.nextLine</code> and convert your input to the proper format you need. For example, you may convert to an integer using <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#parseInt(java.lang.String)"" rel=""noreferrer""><code>Integer.parseInt(String)</code></a> method.</p>

<pre><code>int option = 0;
try {
    option = Integer.parseInt(input.nextLine());
} catch (NumberFormatException e) {
    e.printStackTrace();
}
String str1 = input.nextLine();
</code></pre></li>
</ul>
"
23353174,"<p><em>This answer describes the process of retrieving the stack trace. Already have the stack trace? Read up on stack traces in ""<a href=""https://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors"">What is a stack trace, and how can I use it to debug my application errors?</a>""</em></p>

<h1>The Problem</h1>

<p>Your application quit because an uncaught <code>RuntimeException</code> was thrown.<br>
The most common of these is the <a href=""https://stackoverflow.com/questions/218384/what-is-a-nullpointerexception-and-how-do-i-fix-it""><code>NullPointerException</code></a>.</p>

<h1>How to solve it?</h1>

<p>Every time an Android application crashes (or any Java application for that matter), a <code>Stack trace</code> is written to the console (in this case, logcat). This stack trace contains vital information for solving your problem.</p>

<h2>Android Studio</h2>

<p><img src=""https://i.stack.imgur.com/ZL3Y8.png"" alt=""Finding the stack trace in Android Studio""></p>

<p>In the bottom bar of the window, click on the <code>Logcat</code> button. Alternatively, you can press <kbd>alt</kbd>+<kbd>6</kbd>. Make sure your emulator or device is selected in the <code>Devices</code> panel. Next, try to find the stack trace, which is shown in red. There may be a lot of stuff logged into logcat, so you may need to scroll a bit. An easy way to find the stack trace is to clear the logcat (using the recycle bin on the right), and let the app crash again.</p>

<h1>I have found the stack trace, now what?</h1>

<p>Yay! You're halfway to solving your problem.<br>
You only need to find out what exactly made your application crash, by analyzing the stack trace.</p>

<p>Read up on stack traces in ""<a href=""https://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors"">What is a stack trace, and how can I use it to debug my application errors?</a>""</p>

<h1>I still can't solve my problem!</h1>

<p>If you've found your <code>Exception</code> and the line where it occurred, and still cannot figure out how to fix it, don't hesitate to ask a question on StackOverflow.  </p>

<p>Try to be as concise as possible: post the stack trace, and the <em>relevant</em> code (e.g. a few lines up to the line which threw the <code>Exception</code>).</p>
"
6343299,"<p><strong>NOTE : AsyncTask was deprecated in API level 30.<br />
<a href=""https://developer.android.com/reference/android/os/AsyncTask"" rel=""noreferrer"">AsyncTask | Android Developers</a></strong></p>
<p>This exception is thrown when an application attempts to perform a networking operation on its main thread. Run your code in <a href=""http://developer.android.com/reference/android/os/AsyncTask.html"" rel=""noreferrer""><code>AsyncTask</code></a>:</p>
<pre><code>class RetrieveFeedTask extends AsyncTask&lt;String, Void, RSSFeed&gt; {

    private Exception exception;

    protected RSSFeed doInBackground(String... urls) {
        try {
            URL url = new URL(urls[0]);
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser parser = factory.newSAXParser();
            XMLReader xmlreader = parser.getXMLReader();
            RssHandler theRSSHandler = new RssHandler();
            xmlreader.setContentHandler(theRSSHandler);
            InputSource is = new InputSource(url.openStream());
            xmlreader.parse(is);

            return theRSSHandler.getFeed();
        } catch (Exception e) {
            this.exception = e;

            return null;
        } finally {
            is.close();
        }
    }

    protected void onPostExecute(RSSFeed feed) {
        // TODO: check this.exception
        // TODO: do something with the feed
    }
}
</code></pre>
<p>How to execute the task:</p>
<p>In <code>MainActivity.java</code> file you can add this line within your <code>oncreate()</code> method</p>
<pre><code>new RetrieveFeedTask().execute(urlToRssFeed);
</code></pre>
<p>Don't forget to add this to <code>AndroidManifest.xml</code> file:</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;
</code></pre>
"
9554657,"<blockquote>
  <p>I'm just wondering whether it is good practice to use multiple JFrames?</p>
</blockquote>

<p>Bad (bad, bad) practice.  </p>

<ul>
<li>User unfriendly: The user sees multiple icons in their task bar when expecting to see only one.  Plus the side effects of the coding problems..</li>
<li>A nightmare to code and maintain:

<ul>
<li>A <a href=""http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html"" rel=""noreferrer"">modal dialog</a> offers the easy opportunity to focus attention on the content of that dialog - choose/fix/cancel this, <strong>then</strong> proceed.  Multiple frames do not.</li>
<li>A dialog (or floating tool-bar) with a parent will come to front when the parent is clicked on - you'd have to implement that in frames if that was the desired behavior.</li>
</ul></li>
</ul>

<hr>

<p>There are any number of ways of displaying many elements in one GUI, e.g.:</p>

<ul>
<li><a href=""http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html"" rel=""noreferrer""><code>CardLayout</code></a> (short <a href=""https://stackoverflow.com/a/5786005/418556"">demo.</a>). Good for:

<ol>
<li>Showing wizard like dialogs.</li>
<li>Displaying list, tree etc. selections for items that have an associated component.</li>
<li>Flipping between no component and visible component.</li>
</ol></li>
<li><a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html"" rel=""noreferrer""><code>JInternalFrame</code>/<code>JDesktopPane</code></a> typically used for an <a href=""http://en.wikipedia.org/wiki/Multiple_document_interface"" rel=""noreferrer"">MDI</a>.</li>
<li><a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html"" rel=""noreferrer""><code>JTabbedPane</code></a> for groups of components.</li>
<li><a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/splitpane.html"" rel=""noreferrer""><code>JSplitPane</code></a> A way to display two components of which the importance between one or the other (the size) varies according to what the user is doing.</li>
<li><a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html"" rel=""noreferrer""><code>JLayeredPane</code></a> far many well ..layered components.</li>
<li><a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html"" rel=""noreferrer""><code>JToolBar</code></a> typically contains groups of actions or controls.  Can be dragged around the GUI, or off it entirely according to user need.  As mentioned above, will minimize/restore according to the parent doing so.</li>
<li>As items in a <a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/list.html"" rel=""noreferrer""><code>JList</code></a> (simple example below).</li>
<li>As nodes in a <a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html"" rel=""noreferrer""><code>JTree</code></a>.</li>
<li><a href=""https://stackoverflow.com/a/5630271/418556"">Nested layouts</a>.<br><img src=""https://i.stack.imgur.com/Jaqap.png""></li>
</ul>

<p>But if those strategies do not work for a particular use-case, try the following.  Establish a single main <code>JFrame</code>, then have <a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html"" rel=""noreferrer""><code>JDialog</code></a> or <a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#features"" rel=""noreferrer""><code>JOptionPane</code></a> instances appear for the rest of the free-floating elements, using the frame as the parent for the dialogs.</p>

<h2>Many images</h2>

<p>In this case where the multiple elements are images, it would be better to use either of the following instead:</p>

<ol>
<li>A single <code>JLabel</code> (centered in a scroll pane) to display whichever image the user is interested in at that moment.  As seen in <a href=""https://stackoverflow.com/a/13463684/418556""><code>ImageViewer</code></a>.<br><img src=""https://i.stack.imgur.com/5JXpC.gif""></li>
<li>A single row <code>JList</code>. As seen in <a href=""https://stackoverflow.com/a/9544652/418556"">this answer</a>.  The 'single row' part of that only works if they are all the same dimensions.  Alternately, if you are prepared to scale the images on the fly, and they are all the same aspect ratio (e.g. 4:3 or 16:9).</li>
</ol>

<p><img src=""https://i.stack.imgur.com/q8hEl.jpg""></p>
"
513259,"<p>Tips about writing micro benchmarks <a href=""https://wiki.openjdk.java.net/display/HotSpot/Main"" rel=""noreferrer"">from the creators of Java HotSpot</a>:</p>

<p><strong>Rule 0:</strong> Read a reputable paper on JVMs and micro-benchmarking. A good one is <a href=""http://www.ibm.com/developerworks/java/library/j-jtp02225"" rel=""noreferrer"">Brian Goetz, 2005</a>. Do not expect too much from micro-benchmarks; they measure only a limited range of JVM performance characteristics.</p>

<p><strong>Rule 1:</strong> Always include a warmup phase which runs your test kernel all the way through, enough to trigger all initializations and compilations before timing phase(s). (Fewer iterations is OK on the warmup phase. The rule of thumb is several tens of thousands of inner loop iterations.)</p>

<p><strong>Rule 2:</strong> Always run with <code>-XX:+PrintCompilation</code>, <code>-verbose:gc</code>, etc., so you can verify that the compiler and other parts of the JVM are not doing unexpected work during your timing phase.</p>

<p><strong>Rule 2.1:</strong> Print messages at the beginning and end of timing and warmup phases, so you can verify that there is no output from Rule 2 during the timing phase.</p>

<p><strong>Rule 3:</strong> Be aware of the difference between <code>-client</code> and <code>-server</code>, and OSR and regular compilations. The <code>-XX:+PrintCompilation</code> flag reports OSR compilations with an at-sign to denote the non-initial entry point, for example: <code>Trouble$1::run @ 2 (41 bytes)</code>. Prefer server to client, and regular to OSR, if you are after best performance.</p>

<p><strong>Rule 4:</strong> Be aware of initialization effects. Do not print for the first time during your timing phase, since printing loads and initializes classes. Do not load new classes outside of the warmup phase (or final reporting phase), unless you are testing class loading specifically (and in that case load only the test classes). Rule 2 is your first line of defense against such effects.</p>

<p><strong>Rule 5:</strong> Be aware of deoptimization and recompilation effects. Do not take any code path for the first time in the timing phase, because the compiler may junk and recompile the code, based on an earlier optimistic assumption that the path was not going to be used at all. Rule 2 is your first line of defense against such effects.</p>

<p><strong>Rule 6:</strong> Use appropriate tools to read the compiler's mind, and expect to be surprised by the code it produces. Inspect the code yourself before forming theories about what makes something faster or slower.</p>

<p><strong>Rule 7:</strong> Reduce noise in your measurements. Run your benchmark on a quiet machine, and run it several times, discarding outliers. Use <code>-Xbatch</code> to serialize the compiler with the application, and consider setting <code>-XX:CICompilerCount=1</code> to prevent the compiler from running in parallel with itself. Try your best to reduce GC overhead, set <code>Xmx</code>(large enough) equals <code>Xms</code> and use <a href=""http://openjdk.java.net/jeps/318"" rel=""noreferrer""><code>UseEpsilonGC</code></a> if it is available.</p>

<p><strong>Rule 8:</strong> Use a library for your benchmark as it is probably more efficient and was already debugged for this sole purpose. Such as <a href=""http://openjdk.java.net/projects/code-tools/jmh/"" rel=""noreferrer"">JMH</a>, <a href=""https://github.com/google/caliper"" rel=""noreferrer"">Caliper</a> or <a href=""http://cseweb.ucsd.edu/users/wgg/JavaProf/javaprof.html"" rel=""noreferrer"">Bill and Paul's Excellent UCSD Benchmarks for Java</a>.  </p>
"
25706217,"<h1>0. Is there any difference between these errors?</h1>
<p>Not really. &quot;Cannot find symbol&quot;, &quot;Cannot resolve symbol&quot; and &quot;Symbol not found&quot; all mean the same thing.  (Different Java compilers are written by different people, and different people use different phraseology to say the same thing.)</p>
<h1>1. What does a ""Cannot find symbol"" error mean?</h1>
<p>Firstly, it is a <em>compilation error</em><sup>1</sup>.  It means that <em>either</em> there is a problem in your Java source code, <em>or</em> there is a problem in the way that you are compiling it.</p>
<p>Your Java source code consists of the following things:</p>
<ul>
<li>Keywords: like <code>class</code>, <code>while</code>, and so on.</li>
<li>Literals: like <code>true</code>, <code>false</code>, <code>42</code>, <code>'X'</code> and <code>&quot;Hi mum!&quot;</code>.</li>
<li>Operators and other non-alphanumeric tokens: like <code>+</code>, <code>=</code>, <code>{</code>, and so on.</li>
<li>Identifiers: like <code>Reader</code>, <code>i</code>, <code>toString</code>, <code>processEquibalancedElephants</code>, and so on.</li>
<li>Comments and whitespace.</li>
</ul>
<p>A &quot;Cannot find symbol&quot; error is about the identifiers.  When your code is compiled, the compiler needs to work out what each and every identifier in your code means.</p>
<p>A &quot;Cannot find symbol&quot; error means that the compiler cannot do this.  Your code appears to be referring to something that the compiler doesn't understand.</p>
<h1>2. What can cause a ""Cannot find symbol"" error?</h1>
<p>As a first order, there is only one cause.  The compiler looked in all of the places where the identifier <em>should</em> be defined, and it couldn't find the definition.  This could be caused by a number of things.  The common ones are as follows:</p>
<ul>
<li><p>For identifiers in general:</p>
<ul>
<li>Perhaps you spelled the name incorrectly; i.e. <code>StringBiulder</code> instead of <code>StringBuilder</code>.  Java cannot and will not attempt to compensate for bad spelling or typing errors.</li>
<li>Perhaps you got the case wrong; i.e. <code>stringBuilder</code> instead of <code>StringBuilder</code>.  All Java identifiers are case sensitive.</li>
<li>Perhaps you used underscores inappropriately; i.e. <code>mystring</code> and <code>my_string</code> are different.  (If you stick to the Java style rules, you will be largely protected from this mistake ...)</li>
<li>Perhaps you are trying to use something that was declared &quot;somewhere else&quot;; i.e. in a different context to where you have implicitly told the compiler to look.  (A different class?  A different scope?  A different package?  A different code-base?)</li>
</ul>
</li>
<li><p>For identifiers that should refer to variables:</p>
<ul>
<li>Perhaps you forgot to declare the variable.</li>
<li>Perhaps the variable declaration is out of scope at the point you tried to use it.  (See example below)</li>
</ul>
</li>
<li><p>For identifiers that should be method or field names:</p>
<ul>
<li><p>Perhaps you are trying to refer to an inherited method or field that wasn't declared in the parent / ancestor classes or interfaces.</p>
</li>
<li><p>Perhaps you are trying to refer to a method or field that does not exist (i.e. has not been declared) in the type you are using; e.g. <code>&quot;rope&quot;.push()</code><sup>2</sup>.</p>
</li>
<li><p>Perhaps you are trying to use a method as a field, or vice versa; e.g. <code>&quot;rope&quot;.length</code> or <code>someArray.length()</code>.</p>
</li>
<li><p>Perhaps you are mistakenly operating on an array rather than array element; e.g.</p>
<pre><code>    String strings[] = ...
    if (strings.charAt(3)) { ... }
    // maybe that should be 'strings[0].charAt(3)'
</code></pre>
</li>
</ul>
</li>
<li><p>For identifiers that should be class names:</p>
<ul>
<li><p>Perhaps you forgot to import the class.</p>
</li>
<li><p>Perhaps you used &quot;star&quot; imports, but the class isn't defined in any of the packages that you imported.</p>
</li>
<li><p>Perhaps you forgot a <code>new</code> as in:</p>
<pre><code>    String s = String();  // should be 'new String()'
</code></pre>
</li>
<li><p>Perhaps you are trying to import or otherwise use a class that has been declared in the <em>default package</em>; i.e. the one where classes with no <code>package</code> statements go.</p>
<p>Hint: learn about packages.  You should only use the default package for simple applications that consist of one class ... or at a stretch, one Java source file.</p>
</li>
</ul>
</li>
<li><p>For cases where type or instance doesn't appear to have the member (e.g. method or field) you were expecting it to have:</p>
<ul>
<li>Perhaps you have declared a nested class or a generic parameter that <em>shadows</em> the type you were meaning to use.</li>
<li>Perhaps you are shadowing a static or instance variable.</li>
<li>Perhaps you imported the wrong type; e.g. due to IDE completion or auto-correction may have suggested <code>java.awt.List</code> rather than <code>java.util.List</code>.</li>
<li>Perhaps you are using (compiling against) the wrong version of an API.</li>
<li>Perhaps you forgot to cast your object to an appropriate subclass.</li>
<li>Perhaps you have declared the <em>variable's</em> type to be a supertype of the one with the member you are looking for.</li>
</ul>
</li>
</ul>
<p>The problem is often a combination of the above.  For example, maybe you &quot;star&quot; imported <code>java.io.*</code> and then tried to use the <code>Files</code> class ... which is in <code>java.nio</code> not <code>java.io</code>.  Or maybe you meant to write <code>File</code> ... which <em>is</em> a class in <code>java.io</code>.</p>
<hr />
<p>Here is an example of how incorrect variable scoping can lead to a &quot;Cannot find symbol&quot; error:</p>
<pre><code>List&lt;String&gt; strings = ...

for (int i = 0; i &lt; strings.size(); i++) {
    if (strings.get(i).equalsIgnoreCase(&quot;fnord&quot;)) {
        break;
    }
}
if (i &lt; strings.size()) {
    ...
}
</code></pre>
<p>This will give a &quot;Cannot find symbol&quot; error for <code>i</code> in the <code>if</code> statement.  Though we previously declared <code>i</code>, that declaration is only <em>in scope</em> for the <code>for</code> statement and its body.  The reference to <code>i</code> in the <code>if</code> statement <em>cannot see</em> that declaration of <code>i</code>.  It is <em>out of scope</em>.</p>
<p>(An appropriate correction here might be to move the <code>if</code> statement inside the loop, or to declare <code>i</code> before the start of the loop.)</p>
<hr />
<p>Here is an example that causes puzzlement where a typo leads to a seemingly inexplicable &quot;Cannot find symbol&quot; error:</p>
<pre><code>for (int i = 0; i &lt; 100; i++); {
    System.out.println(&quot;i is &quot; + i);
}
</code></pre>
<p>This will give you a compilation error in the <code>println</code> call saying that <code>i</code> cannot be found.  But (I hear you say) I did declare it!</p>
<p>The problem is the sneaky semicolon ( <code>;</code> ) before the <code>{</code>.  The Java language syntax defines a semicolon in that context to be an <em>empty statement</em>.  The empty statement then becomes the body of the <code>for</code> loop.  So that code actually means this:</p>
<pre><code>for (int i = 0; i &lt; 100; i++); 

// The previous and following are separate statements!!

{
    System.out.println(&quot;i is &quot; + i);
}
</code></pre>
<p>The <code>{ ... }</code> block is NOT the body of the <code>for</code> loop, and therefore the previous declaration of <code>i</code> in the <code>for</code> statement is <em>out of scope</em> in the block.</p>
<hr />
<p>Here is another example of &quot;Cannot find symbol&quot; error that is caused by a typo.</p>
<pre><code>int tmp = ...
int res = tmp(a + b);
</code></pre>
<p>Despite the previous declaration, the <code>tmp</code> in the <code>tmp(...)</code> expression is erroneous.  The compiler will look for a method called <code>tmp</code>, and won't find one.  The previously declared <code>tmp</code> is in the namespace for variables, not the namespace for methods.</p>
<p>In the example I came across, the programmer had actually left out an operator.  What he meant to write was this:</p>
<pre><code>int res = tmp * (a + b);
</code></pre>
<hr />
<p>There is another reason why the compiler might not find a symbol if you are compiling from the command line.  You might simply have forgotten to compile or recompile some other class.  For example, if you have classes <code>Foo</code> and <code>Bar</code> where <code>Foo</code> uses <code>Bar</code>.  If you have never compiled <code>Bar</code> and you run <code>javac Foo.java</code>, you are liable to find that the compiler can't find the symbol <code>Bar</code>.  The simple answer is to compile <code>Foo</code> and <code>Bar</code> together; e.g. <code>javac Foo.java Bar.java</code> or <code>javac *.java</code>.  Or better still use a Java build tool; e.g. Ant, Maven, Gradle and so on.</p>
<p>There are some other more obscure causes too ... which I will deal with below.</p>
<h1>3. How do I fix these errors ?</h1>
<p>Generally speaking, you start out by figuring out what <em>caused</em> the compilation error.</p>
<ul>
<li>Look at the line in the file indicated by the compilation error message.</li>
<li>Identify which symbol that the error message is talking about.</li>
<li>Figure out <em>why</em> the compiler is saying that it cannot find the symbol; see above!</li>
</ul>
<p>Then you <em>think</em> about what your code is supposed to be saying.  Then finally you work out what correction you need to make to your source code to do what you want.</p>
<p>Note that not every &quot;correction&quot; is correct. Consider this:</p>
<pre><code>for (int i = 1; i &lt; 10; i++) {
    for (j = 1; j &lt; 10; j++) {
        ...
    }
}
</code></pre>
<p>Suppose that the compiler says &quot;Cannot find symbol&quot; for <code>j</code>.  There are many ways I could &quot;fix&quot; that:</p>
<ul>
<li>I could change the inner <code>for</code> to <code>for (int j = 1; j &lt; 10; j++)</code> - probably correct.</li>
<li>I could add a declaration for <code>j</code> <em>before</em> the inner <code>for</code> loop, or the outer <code>for</code> loop - possibly correct.</li>
<li>I could change <code>j</code> to <code>i</code> in the inner <code>for</code> loop - probably wrong!</li>
<li>and so on.</li>
</ul>
<p>The point is that you <em>need</em> to understand what your code is trying to do in order to find the right fix.</p>
<h1>4.  Obscure causes</h1>
<p>Here are a couple of cases where the &quot;Cannot find symbol&quot; is seemingly inexplicable ... until you look closer.</p>
<ol>
<li><p><strong>Incorrect dependencies</strong>: If you are using an IDE or a build tool that manages the build path and project dependencies, you may have made a mistake with the dependencies; e.g. left out a dependency, or selected the wrong version.  If you are using a build tool (Ant, Maven, Gradle, etc), check the project's build file.  If you are using an IDE, check the project's build path configuration.</p>
</li>
<li><p><strong>Cannot find symbol 'var'</strong>: You are probably trying to compile source code that uses local variable type inference (i.e. a <code>var</code> declaration) with an older compiler or older <code>--source</code> level.  The <code>var</code> was introduced in Java 10.  Check your JDK version and your build files, and (if this occurs in an IDE), the IDE settings.</p>
</li>
<li><p><strong>You are not compiling / recompiling</strong>:  It sometimes happens that new Java programmers don't understand how the Java tool chain works, or haven't implemented a repeatable &quot;build process&quot;; e.g. using an IDE, Ant, Maven, Gradle and so on.  In such a situation, the programmer can end up chasing his tail looking for an illusory error that is <em>actually</em> caused by not recompiling the code properly, and the like.</p>
<p>Another example of this is when you use (Java 9+) <code>java SomeClass.java</code> to compile and run a class.  If the class depends on another class that you haven't compiled (or recompiled), you are liable to get &quot;Cannot resolve symbol&quot; errors referring to the 2nd class.  The other source file(s) are not automatically compiled.  The <code>java</code> command's new &quot;compile and run&quot; mode is not designed for running programs with multiple source code files.</p>
</li>
<li><p><strong>An earlier build problem</strong>:  It is possible that an earlier build failed in a way that gave a JAR file with missing classes.  Such a failure would typically be noticed if you were using a build tool.  However if you are getting JAR files from someone else, you are dependent on <em>them</em> building properly, and noticing errors.  If you suspect this, use <code>tar -tvf</code> to list the contents of the suspect JAR file.</p>
</li>
<li><p><strong>IDE issues</strong>: People have reported cases where their IDE gets confused and the compiler in the IDE cannot find a class that exists ... or the reverse situation.</p>
<ul>
<li><p>This could happen if the IDE has been configured with the wrong JDK version.</p>
</li>
<li><p>This could happen if the IDE's caches get out of sync with the file system.  There are IDE specific ways to fix that.</p>
</li>
<li><p>This could be an IDE bug.  For instance @Joel Costigliola described a scenario where Eclipse did not handle a Maven &quot;test&quot; tree correctly: <a href=""https://stackoverflow.com/a/37207223/139985""><strong>see this answer</strong></a>.  (Apparently that particular bug was been fixed a long time ago.)</p>
</li>
</ul>
</li>
<li><p><strong>Android issues</strong>: When you are programming for Android, and you have &quot;Cannot find symbol&quot; errors related to <code>R</code>, be aware that the <code>R</code> symbols are defined by the <code>context.xml</code> file.  Check that your <code>context.xml</code> file is correct and in the correct place, and that the corresponding <code>R</code> class file has been generated / compiled.  Note that the Java symbols are case sensitive, so the corresponding XML ids are be case sensitive too.</p>
<p>Other symbol errors on Android are likely to be due to previously mention reasons; e.g. missing or incorrect dependencies, incorrect package names, method or fields that don't exist in a particular API version, spelling / typing errors, and so on.</p>
</li>
<li><p><strong>Hiding system classes</strong>: I've seen cases where the compiler complains that <code>substring</code> is an unknown symbol in something like the following</p>
<pre><code>String s = ...
String s1 = s.substring(1);
</code></pre>
<p>It turned out that the programmer had created their own version of <code>String</code> and that his version of the class didn't define a <code>substring</code> methods.  I've seen people do this with <code>System</code>, <code>Scanner</code> and other classes.</p>
<p><em>Lesson:</em> Don't define your own classes with the same names as common library classes!</p>
<p>The problem can also be solved by using the fully qualified names.  For example, in the example above, the programmer <em>could</em> have written:</p>
<pre><code>java.lang.String s = ...
java.lang.String s1 = s.substring(1);
</code></pre>
</li>
<li><p><strong>Homoglyphs:</strong>  If you use UTF-8 encoding for your source files, it is possible to have identifiers that <em>look</em> the same, but are in fact different because they contain homoglyphs.   See <a href=""http://en.wikipedia.org/wiki/Homoglyph"" rel=""noreferrer"">this page</a> for more information.</p>
<p>You can avoid this by restricting yourself to ASCII or Latin-1 as the source file encoding, and using Java <code>\uxxxx</code> escapes for other characters.</p>
</li>
</ol>
<hr />
<p><sup>1 - If, perchance, you <em>do</em> see this in a runtime exception or error message, then either you have configured your IDE to run code with compilation errors, or your application is generating and compiling code .. at runtime.<br>
2 - The three basic principles of Civil Engineering: water doesn't flow uphill, a plank is stronger on its side, and <em>you can't push on a rope</em>.</sup></p>
"
3180202,"<p>The use of <em>scriptlets</em> (those <code>&lt;% %&gt;</code> things) in <a href=""https://stackoverflow.com/tags/jsp/info"">JSP</a> is indeed highly discouraged since the birth of <em>taglibs</em> (like <a href=""https://stackoverflow.com/tags/jstl/info"">JSTL</a>) and <a href=""https://stackoverflow.com/tags/el/info"">EL</a> (<a href=""https://stackoverflow.com/tags/el/info"">Expression Language</a>, those <code>${}</code> things) way back in 2001.</p>
<p>The major disadvantages of <em>scriptlets</em> are:</p>
<ol>
<li><strong>Reusability:</strong> you can't reuse scriptlets.</li>
<li><strong>Replaceability:</strong> you can't make scriptlets abstract.</li>
<li><strong>OO-ability:</strong> you can't make use of inheritance/composition.</li>
<li><strong>Debuggability:</strong> if scriptlet throws an exception halfway, all you get is a blank page.</li>
<li><strong>Testability:</strong> scriptlets are not unit-testable.</li>
<li><strong>Maintainability:</strong> per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</li>
</ol>
<p><strike>Sun</strike> Oracle itself also recommends in the <a href=""https://www.oracle.com/technical-resources/articles/javase/code-convention.html"" rel=""noreferrer"">JSP coding conventions</a> to avoid use of <em>scriptlets</em> whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</p>
<blockquote>
<p>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help <strong>reduce the need for JSP scriptlets</strong> in your pages. Pages that use JSTL are, in general, easier to read and maintain.</p>
<p>...</p>
<p>Where possible, <strong>avoid JSP scriptlets</strong> whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).</p>
<p>...</p>
<p>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, <strong>JSP scriptlets should not be used</strong> for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called &quot;value objects&quot;) returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</p>
</blockquote>
<hr />
<p><strong>How to replace <em>scriptlets</em> entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:</strong></p>
<ul>
<li><p>If you want to invoke the <strong>same</strong> Java code on <em>every</em> request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a <a href=""https://stackoverflow.com/tags/servlet-filters/info"">filter</a> and write code accordingly in <a href=""https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/filter#doFilter-jakarta.servlet.ServletRequest-jakarta.servlet.ServletResponse-jakarta.servlet.FilterChain-"" rel=""noreferrer""><code>doFilter()</code></a> method. E.g.:</p>
  <pre class=""lang-java prettyprint-override""><code>  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {
      if (((HttpServletRequest) request).getSession().getAttribute(&quot;user&quot;) == null) {
          ((HttpServletResponse) response).sendRedirect(&quot;login&quot;); // Not logged in, redirect to login page.
      } else {
          chain.doFilter(request, response); // Logged in, just continue request.
      }
  }
</code></pre>
<p>When mapped on an appropriate <code>&lt;url-pattern&gt;</code> covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>process a GET request</strong>, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a <a href=""https://stackoverflow.com/tags/servlets/info"">servlet</a> and write code accordingly in <a href=""https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/http/httpservlet#doGet-jakarta.servlet.http.HttpServletRequest-jakarta.servlet.http.HttpServletResponse-"" rel=""noreferrer""><code>doGet()</code></a> method. E.g.:</p>
  <pre class=""lang-java prettyprint-override""><code>  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      try {
          List&lt;Product&gt; products = productService.list(); // Obtain all products.
          request.setAttribute(&quot;products&quot;, products); // Store products in request scope.
          request.getRequestDispatcher(&quot;/WEB-INF/products.jsp&quot;).forward(request, response); // Forward to JSP page to display them in a HTML table.
      } catch (SQLException e) {
          throw new ServletException(&quot;Retrieving products failed!&quot;, e);
      }
  }
</code></pre>
<p>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an <code>&lt;error-page&gt;</code> in <code>web.xml</code>.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>process a POST request</strong>, such as gathering data from a submitted HTML form and doing some business stuff with it (conversion, validation, saving in DB, etcetera), then implement a <a href=""https://stackoverflow.com/tags/servlets/info"">servlet</a> and write code accordingly in <a href=""https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/http/httpservlet#doPost-jakarta.servlet.http.HttpServletRequest-jakarta.servlet.http.HttpServletResponse-"" rel=""noreferrer""><code>doPost()</code></a> method. E.g.:</p>
  <pre class=""lang-java prettyprint-override""><code>  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      String username = request.getParameter(&quot;username&quot;);
      String password = request.getParameter(&quot;password&quot;);
      User user = userService.find(username, password);

      if (user != null) {
          request.getSession().setAttribute(&quot;user&quot;, user); // Login user.
          response.sendRedirect(&quot;home&quot;); // Redirect to home page.
      } else {
          request.setAttribute(&quot;message&quot;, &quot;Unknown username/password. Please retry.&quot;); // Store error message in request scope.
          request.getRequestDispatcher(&quot;/WEB-INF/login.jsp&quot;).forward(request, response); // Forward to JSP page to redisplay login form with error.
      }
  }
</code></pre>
<p>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using <code>${message}</code> in <a href=""https://stackoverflow.com/tags/el/info"">EL</a>), or just taking to the desired target page in case of success.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>control</strong> the execution plan and/or the destination of the request and the response, then implement a <a href=""https://stackoverflow.com/tags/servlets/info"">servlet</a> according to the <a href=""https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297"">MVC's Front Controller Pattern</a>. E.g.:</p>
  <pre class=""lang-java prettyprint-override""><code>  protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      try {
          Action action = ActionFactory.getAction(request);
          String view = action.execute(request, response);

          if (view.equals(request.getPathInfo().substring(1)) {
              request.getRequestDispatcher(&quot;/WEB-INF/&quot; + view + &quot;.jsp&quot;).forward(request, response);
          } else {
              response.sendRedirect(view);
          }
      } catch (Exception e) {
          throw new ServletException(&quot;Executing action failed.&quot;, e);
      }
  }
</code></pre>
<p>Or just adopt an MVC framework like <a href=""https://stackoverflow.com/tags/jsf/info"">JSF</a>, <a href=""https://stackoverflow.com/tags/spring-mvc/info"">Spring MVC</a>, <a href=""https://stackoverflow.com/tags/wicket/info"">Wicket</a>, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>control the flow</strong> inside a JSP page, then you need to grab an (existing) flow control taglib like <a href=""https://jakarta.ee/specifications/tags/1.2/tagdocs/c/tld-summary.html"" rel=""noreferrer"">JSTL core</a>. E.g. displaying <code>List&lt;Product&gt;</code> in a table:</p>
  <pre class=""lang-html prettyprint-override""><code>  &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;
  ...
  &lt;table&gt;
      &lt;c:forEach items=&quot;${products}&quot; var=&quot;product&quot;&gt;
          &lt;tr&gt;
              &lt;td&gt;${product.name}&lt;/td&gt;
              &lt;td&gt;${product.description}&lt;/td&gt;
              &lt;td&gt;${product.price}&lt;/td&gt;
          &lt;/tr&gt;
      &lt;/c:forEach&gt;
  &lt;/table&gt;
</code></pre>
<p>With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (<em>&quot;Where the heck does this closing brace belong to?&quot;</em>). An easy aid is to configure your web application to throw an exception whenever <em>scriptlets</em> are still been used by adding the following piece to <code>web.xml</code>:</p>
  <pre class=""lang-xml prettyprint-override""><code>  &lt;jsp-config&gt;
      &lt;jsp-property-group&gt;
          &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;
          &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt;
      &lt;/jsp-property-group&gt;
  &lt;/jsp-config&gt;
</code></pre>
<p>In <a href=""https://stackoverflow.com/tags/facelets/info"">Facelets</a>, the successor of JSP, which is part of the Java EE provided MVC framework <a href=""https://stackoverflow.com/tags/jsf/info"">JSF</a>, it is already <strong>not</strong> possible to use <em>scriptlets</em>. This way you're automatically forced to do things &quot;the right way&quot;.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>access and display</strong> &quot;backend&quot; data inside a JSP page, then you need to use EL (Expression Language), those <code>${}</code> things. E.g. redisplaying submitted input values:</p>
  <pre class=""lang-html prettyprint-override""><code>  &lt;input type=&quot;text&quot; name=&quot;foo&quot; value=&quot;${param.foo}&quot; /&gt;
</code></pre>
<p>The <code>${param.foo}</code> displays the outcome of <code>request.getParameter(&quot;foo&quot;)</code>.</p>
<hr />
</li>
<li><p>If you want to invoke some <strong>utility</strong> Java code directly in the JSP page (typically <code>public static</code> methods), then you need to define them as EL functions. There's a standard <a href=""https://jakarta.ee/specifications/tags/1.2/tagdocs/fn/tld-summary.html"" rel=""noreferrer"">functions taglib</a> in JSTL, but <a href=""https://stackoverflow.com/questions/6395621/how-to-call-a-static-method-in-jsp-el"">you can also easily create functions yourself</a>. Here's an example how JSTL <code>fn:escapeXml</code> is useful to prevent <a href=""https://en.wikipedia.org/wiki/Cross-site_scripting"" rel=""noreferrer"">XSS attacks</a>.</p>
  <pre class=""lang-html prettyprint-override""><code>  &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; prefix=&quot;fn&quot; %&gt;
  ...
  &lt;input type=&quot;text&quot; name=&quot;foo&quot; value=&quot;${fn:escapeXml(param.foo)}&quot; /&gt;
</code></pre>
<p>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in <strong>every</strong> web application you develop. The problem of <em>scriptlets</em> is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</p>
</li>
</ul>
<h3>See also:</h3>
<ul>
<li><a href=""https://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp/2097732#2097732"">What's the difference between JSP, Servlet and JSF?</a></li>
<li><a href=""https://stackoverflow.com/questions/3106452/java-servlet-instantiation-and-session-variables/3106909#3106909"">How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</a></li>
<li><a href=""https://stackoverflow.com/questions/5003142/jsp-using-mvc-and-jdbc"">Basic MVC example with JSP, Servlet and JDBC</a></li>
<li><a href=""https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/"">Design patterns in Java web applications</a></li>
<li><a href=""https://balusc.omnifaces.org/2010/01/hidden-features-of-jspservlet.html"" rel=""noreferrer"">Hidden features of JSP/Servlet</a></li>
</ul>
"
7229519,"<ol>
<li><blockquote>
  <p>Should I completely avoid the use of those methods?</p>
</blockquote>

<p>Yes for application code.</p></li>
<li><blockquote>
  <p>The methods have been defined for a reason. So when should I use them? In which context? For what purposes?</p>
</blockquote>

<p>I don't know, personally I think of it as an API design accident. Slightly forced by compound components having special ideas about child sizes. ""Slightly"", because they should have implemented their needs with a custom LayoutManager.</p></li>
<li><blockquote>
  <p>What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution.)</p>
</blockquote>

<p>Some (incomplete, and unfortunately the links are broken due to migration of SwingLabs to java.net) technical reasons are for instance mentioned in the <a href=""http://web.archive.org/web/20110614145256/http://wiki.java.net/twiki/bin/view/Javadesktop/SwingLabsImperialRules?TWIKISID=e1a6667476691b56753dc9b0744828c6#Do_not_use_component_setXXSize"" rel=""noreferrer"">Rules (hehe)</a> or in the <a href=""http://web.archive.org/web/20100207211337/http://www.jguru.com/faq/view.jsp?EID=237070"" rel=""noreferrer"">link</a> @bendicott found in his/her comment to <a href=""https://stackoverflow.com/questions/7074514/images-in-jtable-cells-off-by-one-pixel"">my answer</a>. Socially, posing tons of work onto your unfortunate fellow who has to maintain the code and has to track down a broken layout.</p></li>
<li><blockquote>
  <p>I don't think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout?</p>
</blockquote>

<p>Yes, there are LayoutManagers powerful enough to satisfy a very good approximation to ""all layout needs"". The big three are JGoodies FormLayout, MigLayout, DesignGridLayout. So no, in practice, you rarely write LayoutManagers except for simple highly specialized environments.</p></li>
<li><blockquote>
  <p>If the answer to 4 is ""yes"", won't this lead to a proliferation of LayoutManager classes which will become difficult to maintain? </p>
</blockquote>

<p>(The answer to 4 is ""no"".)</p></li>
<li><blockquote>
  <p>In a situation where I need to define proportions between children of a Component (for example, child 1 should use 10% of space, child 2 40%, child 3 50%), is it possible to achieve that without implementing a custom LayoutManager?</p>
</blockquote>

<p>Any of the Big-Three can, can't even GridBag (never bothered to really master, too much trouble for too little power).</p></li>
</ol>
"
409795,"<p>Since Java 5 you can use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Arrays.html#toString(int%5B%5D)"" rel=""noreferrer""><code>Arrays.toString(arr)</code></a> or <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Arrays.html#deepToString(java.lang.Object%5B%5D)"" rel=""noreferrer""><code>Arrays.deepToString(arr)</code></a> for arrays within arrays. Note that the <code>Object[]</code> version calls <code>.toString()</code> on each object in the array. The output is even decorated in the exact way you're asking.</p>
<p>Examples:</p>
<ul>
<li><h3>Simple Array:</h3>
<pre><code>String[] array = new String[] {&quot;John&quot;, &quot;Mary&quot;, &quot;Bob&quot;};
System.out.println(Arrays.toString(array));
</code></pre>
<p>Output:</p>
<pre><code>[John, Mary, Bob]
</code></pre>
</li>
<li><h3>Nested Array:</h3>
<pre><code>String[][] deepArray = new String[][] {{&quot;John&quot;, &quot;Mary&quot;}, {&quot;Alice&quot;, &quot;Bob&quot;}};
// Gives undesired output:
System.out.println(Arrays.toString(deepArray));
// Gives the desired output:
System.out.println(Arrays.deepToString(deepArray));
</code></pre>
<p>Output:</p>
<pre><code>[[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]
[[John, Mary], [Alice, Bob]]
</code></pre>
</li>
<li><h3><code>double</code> Array:</h3>
<pre><code>double[] doubleArray = { 7.0, 9.0, 5.0, 1.0, 3.0 };
System.out.println(Arrays.toString(doubleArray));
</code></pre>
<p>Output:</p>
<pre><code>[7.0, 9.0, 5.0, 1.0, 3.0 ]
</code></pre>
</li>
<li><h3><code>int</code> Array:</h3>
<pre><code>int[] intArray = { 7, 9, 5, 1, 3 };
System.out.println(Arrays.toString(intArray));
</code></pre>
<p>Output:</p>
<pre><code>[7, 9, 5, 1, 3 ]
</code></pre>
</li>
</ul>
"
19896871,"<p>The field annotated <code>@Autowired</code> is <code>null</code> because Spring doesn't know about the copy of <code>MileageFeeCalculator</code> that you created with <code>new</code> and didn't know to autowire it.</p>

<p><a href=""http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html"">The Spring Inversion of Control (IoC) container</a> has three main logical components: a registry (called the <code>ApplicationContext</code>) of components (beans) that are available to be used by the application, a configurer system that injects objects' dependencies into them by matching up the dependencies with beans in the context, and a dependency solver that can look at a configuration of many different beans and determine how to instantiate and configure them in the necessary order.</p>

<p>The IoC container isn't magic, and it has no way of knowing about Java objects unless you somehow inform it of them. When you call <code>new</code>, the JVM instantiates a copy of the new object and hands it straight to you--it never goes through the configuration process. There are three ways that you can get your beans configured.</p>

<p>I have posted all of this code, using Spring Boot to launch, at <a href=""https://github.com/chrylis/spring_autowired_npe_example"">this GitHub project</a>; you can look at a full running project for each approach to see everything you need to make it work. <strong>Tag with the <code>NullPointerException</code>: <a href=""https://github.com/chrylis/spring_autowired_npe_example/tree/nonworking""><code>nonworking</code></a></strong></p>

<h2>Inject your beans</h2>

<p>The most preferable option is to let Spring autowire all of your beans; this requires the least amount of code and is the most maintainable. To make the autowiring work like you wanted, also autowire the <code>MileageFeeCalculator</code> like this:</p>

<pre><code>@Controller
public class MileageFeeController {

    @Autowired
    private MileageFeeCalculator calc;

    @RequestMapping(""/mileage/{miles}"")
    @ResponseBody
    public float mileageFee(@PathVariable int miles) {
        return calc.mileageCharge(miles);
    }
}
</code></pre>

<p>If you need to create a new instance of your service object for different requests, you can still use injection by using <a href=""http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-scopes"">the Spring bean scopes</a>.</p>

<p><strong>Tag that works by injecting the <code>@MileageFeeCalculator</code> service object: <a href=""https://github.com/chrylis/spring_autowired_npe_example/tree/working-inject-bean""><code>working-inject-bean</code></a></strong></p>

<h2>Use @Configurable</h2>

<p>If you really need objects created with <code>new</code> to be autowired, you can <a href=""http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-atconfigurable"">use the Spring <code>@Configurable</code> annotation along with AspectJ compile-time weaving</a> to inject your objects. This approach inserts code into your object's constructor that alerts Spring that it's being created so that Spring can configure the new instance. This requires a bit of configuration in your build (such as compiling with <code>ajc</code>) and turning on Spring's runtime configuration handlers (<code>@EnableSpringConfigured</code> with the JavaConfig syntax). This approach is used by the Roo Active Record system to allow <code>new</code> instances of your entities to get the necessary persistence information injected.</p>

<pre><code>@Service
@Configurable
public class MileageFeeCalculator {

    @Autowired
    private MileageRateService rateService;

    public float mileageCharge(final int miles) {
        return (miles * rateService.ratePerMile());
    }
}
</code></pre>

<p><strong>Tag that works by using <code>@Configurable</code> on the service object: <a href=""https://github.com/chrylis/spring_autowired_npe_example/tree/working-configurable""><code>working-configurable</code></a></strong></p>

<h2>Manual bean lookup: not recommended</h2>

<p>This approach is suitable only for interfacing with legacy code in special situations. It is nearly always preferable to create a singleton adapter class that Spring can autowire and the legacy code can call, but it is possible to directly ask the Spring application context for a bean.</p>

<p>To do this, you need a class to which Spring can give a reference to the <code>ApplicationContext</code> object:</p>

<pre><code>@Component
public class ApplicationContextHolder implements ApplicationContextAware {
    private static ApplicationContext context;

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        context = applicationContext;   
    }

    public static ApplicationContext getContext() {
        return context;
    }
}
</code></pre>

<p>Then your legacy code can call <code>getContext()</code> and retrieve the beans it needs:</p>

<pre><code>@Controller
public class MileageFeeController {    
    @RequestMapping(""/mileage/{miles}"")
    @ResponseBody
    public float mileageFee(@PathVariable int miles) {
        MileageFeeCalculator calc = ApplicationContextHolder.getContext().getBean(MileageFeeCalculator.class);
        return calc.mileageCharge(miles);
    }
}
</code></pre>

<p><strong>Tag that works by manually looking up the service object in the Spring context: <a href=""https://github.com/chrylis/spring_autowired_npe_example/tree/working-manual-lookup""><code>working-manual-lookup</code></a></strong></p>
"
29140403,"<h1>Background</h1>
<p>All Java objects have a <code>toString()</code> method, which is invoked when you try to print the object.</p>
<pre><code>System.out.println(myObject);  // invokes myObject.toString()
</code></pre>
<p>This method is defined in the <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html"" rel=""noreferrer""><code>Object</code></a> class (the superclass of all Java objects). The <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--"" rel=""noreferrer""><code>Object.toString()</code></a> method returns a fairly ugly looking string, composed of the name of the class, an <code>@</code> symbol and the <a href=""https://stackoverflow.com/questions/3563847/what-is-the-use-of-hashcode-in-java"">hashcode</a> of the object in hexadecimal. The code for this looks like:</p>
<pre><code>// Code of Object.toString()
public String toString() {
    return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());
}
</code></pre>
<p>A result such as <code>com.foo.MyType@2f92e0f4</code> can therefore be explained as:</p>
<ul>
<li><code>com.foo.MyType</code>  - the name of the class, i.e. the class is <code>MyType</code> in the package <code>com.foo</code>.</li>
<li><code>@</code> - joins the string together</li>
<li><code>2f92e0f4</code> the hashcode of the object.</li>
</ul>
<p>The name of array classes look a little different, which is explained well in the Javadocs for <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getName--"" rel=""noreferrer""><code>Class.getName()</code></a>. For instance, <code>[Ljava.lang.String</code> means:</p>
<ul>
<li><code>[</code> - an single-dimensional array (as opposed to <code>[[</code> or <code>[[[</code> etc.)</li>
<li><code>L</code> - the array contains a class or interface</li>
<li><code>java.lang.String</code> - the type of objects in the array</li>
</ul>
<hr />
<h1>Customizing the Output</h1>
<p>To print something different when you call <code>System.out.println(myObject)</code>, you must <a href=""https://docs.oracle.com/javase/tutorial/java/IandI/override.html"" rel=""noreferrer"">override</a> the <code>toString()</code> method in your own class. Here's a simple example:</p>
<pre><code>public class Person {

  private String name;
  
  // constructors and other methods omitted
  
  @Override
  public String toString() {
    return name;
  }
}
</code></pre>
<p>Now if we print a <code>Person</code>, we see their name rather than <code>com.foo.Person@12345678</code>.</p>
<p>Bear in mind that <code>toString()</code> is just <em>one</em> way for an object to be converted to a string. Typically this output should fully describe your object in a clear and concise manner. A better <code>toString()</code> for our <code>Person</code> class might be:</p>
<pre><code>@Override
public String toString() {
  return getClass().getSimpleName() + &quot;[name=&quot; + name + &quot;]&quot;;
}
</code></pre>
<p>Which would print, e.g., <code>Person[name=Henry]</code>. That's a really useful piece of data for debugging/testing.</p>
<p>If you want to focus on just one aspect of your object or include a lot of jazzy formatting, you might be better to define a separate method instead, e.g. <code>String toElegantReport() {...}</code>.</p>
<hr />
<h1>Auto-generating the Output</h1>
<p>Many <a href=""http://en.wikipedia.org/wiki/Integrated_development_environment"" rel=""noreferrer"">IDEs</a> offer support for auto-generating a <code>toString()</code> method, based on the fields in the class. See docs for <a href=""http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-dialog-tostring.htm"" rel=""noreferrer"">Eclipse</a> and <a href=""https://plugins.jetbrains.com/plugin/182?pr=idea"" rel=""noreferrer"">IntelliJ</a>, for example.</p>
<p>Several popular Java libraries offer this feature as well. Some examples include:</p>
<ul>
<li><p><a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/builder/ToStringBuilder.html"" rel=""noreferrer""><code>ToStringBuilder</code></a> from <a href=""http://commons.apache.org/proper/commons-lang/"" rel=""noreferrer"">Apache Commons Lang</a></p>
</li>
<li><p><a href=""https://google.github.io/guava/releases/19.0/api/docs/com/google/common/base/MoreObjects.ToStringHelper.html"" rel=""noreferrer""><code>MoreObjects.ToStringHelper</code></a> from <a href=""https://github.com/google/guava"" rel=""noreferrer"">Google Guava</a></p>
</li>
<li><p><a href=""http://projectlombok.org/features/ToString.html"" rel=""noreferrer""><code>@ToString</code></a> annotation from <a href=""http://projectlombok.org/"" rel=""noreferrer"">Project Lombok</a></p>
</li>
</ul>
<hr />
<h1>Printing groups of objects</h1>
<p>So you've created a nice <code>toString()</code> for your class. What happens if that class is placed into an array or a collection?</p>
<h2>Arrays</h2>
<p>If you have an array of objects, you can call <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#toString-java.lang.Object:A-"" rel=""noreferrer""><code>Arrays.toString()</code></a> to produce a simple representation of the contents of the array. For instance, consider this array of <code>Person</code> objects:</p>
<pre><code>Person[] people = { new Person(&quot;Fred&quot;), new Person(&quot;Mike&quot;) };
System.out.println(Arrays.toString(people));

// Prints: [Fred, Mike]
</code></pre>
<p>Note:  this is a call to a <em>static</em> method called <code>toString()</code> in the Arrays class, which is different to what we've been discussing above.</p>
<p>If you have a <strong>multi-dimensional array</strong>, you can use <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-"" rel=""noreferrer""><code>Arrays.deepToString()</code></a> to achieve the same sort of output.</p>
<h2>Collections</h2>
<p>Most collections will produce a pretty output based on calling <code>.toString()</code> on every element.</p>
<pre><code>List&lt;Person&gt; people = new ArrayList&lt;&gt;();
people.add(new Person(&quot;Alice&quot;));
people.add(new Person(&quot;Bob&quot;));    
System.out.println(people);

// Prints [Alice, Bob]
</code></pre>
<p>So you just need to ensure your list elements define a nice <code>toString()</code> as discussed above.</p>
"
3988794,"<p>In simple terms, a <strong>stack trace</strong> is a list of the method calls that the application was in the middle of when an Exception was thrown.</p>
<p><strong>Simple Example</strong></p>
<p>With the example given in the question, we can determine exactly where the exception was thrown in the application. Let's have a look at the stack trace:</p>
<pre><code>Exception in thread &quot;main&quot; java.lang.NullPointerException
        at com.example.myproject.Book.getTitle(Book.java:16)
        at com.example.myproject.Author.getBookTitles(Author.java:25)
        at com.example.myproject.Bootstrap.main(Bootstrap.java:14)
</code></pre>
<p>This is a very simple stack trace. If we start at the beginning of the list of &quot;at ...&quot;, we can tell where our error happened. What we're looking for is the <strong>topmost</strong> method call that is part of our application. In this case, it's:</p>
<pre><code>at com.example.myproject.Book.getTitle(Book.java:16)
</code></pre>
<p>To debug this, we can open up <code>Book.java</code> and look at line <code>16</code>, which is:</p>
<pre><code>15   public String getTitle() {
16      System.out.println(title.toString());
17      return title;
18   }
</code></pre>
<p>This would indicate that something (probably <code>title</code>) is <code>null</code> in the above code.</p>
<p><strong>Example with a chain of exceptions</strong></p>
<p>Sometimes applications will catch an Exception and re-throw it as the cause of another Exception.  This typically looks like:</p>
<pre><code>34   public void getBookIds(int id) {
35      try {
36         book.getId(id);    // this method it throws a NullPointerException on line 22
37      } catch (NullPointerException e) {
38         throw new IllegalStateException(&quot;A book has a null property&quot;, e)
39      }
40   }
</code></pre>
<p>This might give you a stack trace that looks like:</p>
<pre><code>Exception in thread &quot;main&quot; java.lang.IllegalStateException: A book has a null property
        at com.example.myproject.Author.getBookIds(Author.java:38)
        at com.example.myproject.Bootstrap.main(Bootstrap.java:14)
Caused by: java.lang.NullPointerException
        at com.example.myproject.Book.getId(Book.java:22)
        at com.example.myproject.Author.getBookIds(Author.java:36)
        ... 1 more
</code></pre>
<p>What's different about this one is the &quot;Caused by&quot;. Sometimes exceptions will have multiple &quot;Caused by&quot; sections. For these, you typically want to find the &quot;root cause&quot;, which will be one of the lowest &quot;Caused by&quot; sections in the stack trace. In our case, it's:</p>
<pre><code>Caused by: java.lang.NullPointerException &lt;-- root cause
        at com.example.myproject.Book.getId(Book.java:22) &lt;-- important line
</code></pre>
<p>Again, with this exception we'd want to look at line <code>22</code> of <code>Book.java</code> to see what might cause the <code>NullPointerException</code> here.</p>
<p><strong>More daunting example with library code</strong></p>
<p>Usually stack traces are much more complex than the two examples above. Here's an example (it's a long one, but demonstrates several levels of chained exceptions):</p>
<pre><code>javax.servlet.ServletException: Something bad happened
    at com.example.myproject.OpenSessionInViewFilter.doFilter(OpenSessionInViewFilter.java:60)
    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
    at com.example.myproject.ExceptionHandlerFilter.doFilter(ExceptionHandlerFilter.java:28)
    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
    at com.example.myproject.OutputBufferFilter.doFilter(OutputBufferFilter.java:33)
    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
    at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)
    at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
    at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
    at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
    at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)
    at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
    at org.mortbay.jetty.Server.handle(Server.java:326)
    at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
    at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:943)
    at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:756)
    at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
    at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
    at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)
    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
Caused by: com.example.myproject.MyProjectServletException
    at com.example.myproject.MyServlet.doPost(MyServlet.java:169)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
    at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)
    at com.example.myproject.OpenSessionInViewFilter.doFilter(OpenSessionInViewFilter.java:30)
    ... 27 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not insert: [com.example.myproject.MyEntity]
    at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:96)
    at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66)
    at org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:64)
    at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2329)
    at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2822)
    at org.hibernate.action.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:71)
    at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:268)
    at org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:321)
    at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:204)
    at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:130)
    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:210)
    at org.hibernate.event.def.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:56)
    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:195)
    at org.hibernate.event.def.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:50)
    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:93)
    at org.hibernate.impl.SessionImpl.fireSave(SessionImpl.java:705)
    at org.hibernate.impl.SessionImpl.save(SessionImpl.java:693)
    at org.hibernate.impl.SessionImpl.save(SessionImpl.java:689)
    at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.hibernate.context.ThreadLocalSessionContext$TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:344)
    at $Proxy19.save(Unknown Source)
    at com.example.myproject.MyEntityService.save(MyEntityService.java:59) &lt;-- relevant call (see notes below)
    at com.example.myproject.MyServlet.doPost(MyServlet.java:164)
    ... 32 more
Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]
    at org.hsqldb.jdbc.Util.throwError(Unknown Source)
    at org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate(Unknown Source)
    at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105)
    at org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:57)
    ... 54 more
</code></pre>
<p>In this example, there's a lot more. What we're mostly concerned about is looking for methods that are from <em>our code</em>, which would be anything in the <code>com.example.myproject</code> package. From the second example (above), we'd first want to look down for the root cause, which is:</p>
<pre><code>Caused by: java.sql.SQLException
</code></pre>
<p>However, all the method calls under that are library code. So we'll <strong>move up</strong> to the <strong>&quot;Caused by&quot; above</strong> it, and in that &quot;Caused by&quot; block, look for the <strong>first method call originating from our code</strong>, which is:</p>
<pre><code>at com.example.myproject.MyEntityService.save(MyEntityService.java:59)
</code></pre>
<p>Like in previous examples, we should look at <code>MyEntityService.java</code> on line <code>59</code>, because that's where this error originated (this one's a bit obvious what went wrong, since the SQLException states the error, but the debugging procedure is what we're after).</p>
"
17874718,"<p>There are a number of ways in a Swing GUI to provide a separation between components, and white space around components:</p>

<ul>
<li><code>JToolBar</code> has the methods <a href=""http://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#addSeparator--"" rel=""nofollow noreferrer""><code>addSeparator()</code></a> &amp; <a href=""http://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#addSeparator-java.awt.Dimension-"" rel=""nofollow noreferrer""><code>addSeparator(Dimension)</code></a>.</li>
<li><code>JMenu</code> uses a spacing component better suited to menus, available through <a href=""http://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#addSeparator--"" rel=""nofollow noreferrer""><code>addSeparator()</code></a>.  </li>
</ul>

<p>But more generally, look to:</p>

<ul>
<li>The spacing as can be defined in the layout constructors.</li>
<li>Borders.  </li>
</ul>

<p>Here is an example of using the layout separator <code>hGap</code> &amp; <code>vGap</code> values &amp; borders (specifically an <code>EmptyBorder</code>) to provide 'white' (actually shown as <strong>red</strong> to make it very obvious) space.  Adjust the spinners to see the result.</p>

<p><img src=""https://i.stack.imgur.com/lYyOZ.png"" alt=""With no GUI white space""></p>

<p><img src=""https://i.stack.imgur.com/NVtKI.png"" alt=""With GUI white space""></p>

<pre><code>import java.awt.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;

public class WhiteSpace {

    private JPanel gui = null;
    private BorderLayout mainLayout = 
        new BorderLayout(0, 0);
    private final FlowLayout buttonLayout = 
            new FlowLayout(FlowLayout.CENTER, 0, 0);
    private final JPanel buttonPanel = new JPanel(buttonLayout);
    private final SpinnerNumberModel hModel = 
            new SpinnerNumberModel(0, 0, 15, 1);
    private final SpinnerNumberModel vModel = 
            new SpinnerNumberModel(0, 0, 15, 1);
    private final SpinnerNumberModel hBorderModel = 
            new SpinnerNumberModel(0, 0, 15, 1);
    private final SpinnerNumberModel vBorderModel = 
            new SpinnerNumberModel(0, 0, 15, 1);
    private ChangeListener changeListener;

    public Container getGui() {
        if (gui == null) {
            gui = new JPanel(mainLayout);
            gui.setBackground(Color.RED);

            JTree tree = new JTree();
            tree.setVisibleRowCount(10);
            for (int ii = tree.getRowCount(); ii &gt; -1; ii--) {
                tree.expandRow(ii);
            }
            gui.add(new JScrollPane(
                    tree,
                    JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER),
                    BorderLayout.LINE_START);
            gui.add(new JScrollPane(new JTextArea(10, 30)));

            gui.add(buttonPanel, BorderLayout.PAGE_START);

            changeListener = (ChangeEvent e) -&gt; {
                int hGap = hModel.getNumber().intValue();
                int vGap = vModel.getNumber().intValue();
                int hBorder = hBorderModel.getNumber().intValue();
                int vBorder = vBorderModel.getNumber().intValue();
                adjustWhiteSpace(hGap, vGap, hBorder, vBorder);
            };

            addModel(""H Gap"", hModel);
            addModel(""V Gap"", vModel);
            addModel(""H Border"", hBorderModel);
            addModel(""V Border"", vBorderModel);
        }

        return gui;
    }

    private void addModel(String label, SpinnerNumberModel model) {
        buttonPanel.add(new JLabel(label));
        final JSpinner spinner = new JSpinner(model);
        spinner.addChangeListener(changeListener);
        buttonPanel.add(spinner);
    }

    private void adjustWhiteSpace(
            int hGap, int vGap, int hBorder, int vBorder) {
        mainLayout.setHgap(hGap);
        mainLayout.setVgap(vGap);
        buttonLayout.setHgap(hGap);
        gui.setBorder(new EmptyBorder
                (vBorder, hBorder, vBorder, hBorder));
        Container c = gui.getTopLevelAncestor();
        if (c instanceof Window) {
            Window w = (Window) c;
            w.pack();
        }
    }

    public static void main(String[] args) {
        Runnable r = () -&gt; {
            WhiteSpace ws = new WhiteSpace();
            Container gui1 = ws.getGui();
            JFrame f = new JFrame(""White (OK Red) Space"");
            f.add(gui1);
            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            f.setLocationByPlatform(true);
            f.setResizable(false);
            f.pack();
            f.setVisible(true);
        };
        SwingUtilities.invokeLater(r);
    }
}
</code></pre>
"
2745301,"<p>No, a <code>List&lt;Dog&gt;</code> is <em>not</em> a <code>List&lt;Animal&gt;</code>. Consider what you can do with a <code>List&lt;Animal&gt;</code> - you can add <em>any</em> animal to it... including a cat. Now, can you logically add a cat to a litter of puppies? Absolutely not.</p>

<pre><code>// Illegal code - because otherwise life would be Bad
List&lt;Dog&gt; dogs = new ArrayList&lt;Dog&gt;(); // ArrayList implements List
List&lt;Animal&gt; animals = dogs; // Awooga awooga
animals.add(new Cat());
Dog dog = dogs.get(0); // This should be safe, right?
</code></pre>

<p>Suddenly you have a <em>very</em> confused cat.</p>

<p>Now, you <em>can't</em> add a <code>Cat</code> to a <code>List&lt;? extends Animal&gt;</code> because you don't know it's a <code>List&lt;Cat&gt;</code>. You can retrieve a value and know that it will be an <code>Animal</code>, but you can't add arbitrary animals. The reverse is true for <code>List&lt;? super Animal&gt;</code> - in that case you can add an <code>Animal</code> to it safely, but you don't know anything about what might be retrieved from it, because it could be a <code>List&lt;Object&gt;</code>.</p>
"
11432195,"<p>The version number shown describes the version of the JRE the class file is compatible with.</p>
<p>The reported major numbers are:</p>
<pre class=""lang-none prettyprint-override""><code>Java SE 20 = 64,
Java SE 19 = 63,
Java SE 18 = 62,
Java SE 17 = 61,
Java SE 16 = 60, 
Java SE 15 = 59,
Java SE 14 = 58,
Java SE 13 = 57,
Java SE 12 = 56,
Java SE 11 = 55,
Java SE 10 = 54,
Java SE 9 = 53,
Java SE 8 = 52,
Java SE 7 = 51,
Java SE 6.0 = 50,
Java SE 5.0 = 49,
JDK 1.4 = 48,
JDK 1.3 = 47,
JDK 1.2 = 46,
JDK 1.1 = 45
</code></pre>
<p>(Source: <a href=""https://en.wikipedia.org/wiki/Java_class_file#General_layout"" rel=""nofollow noreferrer"">Wikipedia</a>)</p>
<p>To fix the actual problem you should try to either run the Java code with a newer version of Java JRE or specify the target parameter to the Java compiler to instruct the compiler to create code compatible with earlier Java versions.</p>
<p>For example, in order to generate class files compatible with Java 1.4, use the following command line:</p>
<pre class=""lang-none prettyprint-override""><code>javac -target 1.4 HelloWorld.java
</code></pre>
<p>With newer versions of the Java compiler you are likely to get a warning about the bootstrap class path not being set. More information about this error is available in a blog post <em><a href=""https://blogs.oracle.com/darcy/entry/bootclasspath_older_source"" rel=""nofollow noreferrer"">New javac warning for setting an older source without bootclasspath</a></em>.</p>
"
2723538,"<p><strong>tl;dr:</strong> &quot;PECS&quot; is from the collection's point of view. If you are <em>only</em> pulling items from a generic collection, it is a producer and you should use <code>extends</code>; if you are <em>only</em> stuffing items in, it is a consumer and you should use <code>super</code>. If you do both with the same collection, you shouldn't use either <code>extends</code> or <code>super</code>.</p>
<hr />
<p>Suppose you have a method that takes as its parameter a collection of things, but you want it to be more flexible than just accepting a <code>Collection&lt;Thing&gt;</code>.</p>
<p><strong>Case 1: You want to go through the collection and do things with each item.</strong><br />
Then the list is a <strong>producer</strong>, so you should use a <code>Collection&lt;? extends Thing&gt;</code>.</p>
<p>The reasoning is that a <code>Collection&lt;? extends Thing&gt;</code> could hold any subtype of <code>Thing</code>, and thus each element will behave as a <code>Thing</code> when you perform your operation. (You actually cannot add anything (except null) to a <code>Collection&lt;? extends Thing&gt;</code>, because you cannot know at runtime which <em>specific</em> subtype of <code>Thing</code> the collection holds.)</p>
<p><strong>Case 2: You want to add things to the collection.</strong><br />
Then the list is a <strong>consumer</strong>, so you should use a <code>Collection&lt;? super Thing&gt;</code>.</p>
<p>The reasoning here is that unlike <code>Collection&lt;? extends Thing&gt;</code>, <code>Collection&lt;? super Thing&gt;</code> can always hold a <code>Thing</code> no matter what the actual parameterized type is. Here you don't care what is already in the list as long as it will allow a <code>Thing</code> to be added; this is what <code>? super Thing</code> guarantees.</p>
"
2424824,"<h2>Introduction</h2>
<p>To browse and select a file for upload you need a HTML <code>&lt;input type=&quot;file&quot;&gt;</code> field in the form. As stated in the <a href=""http://www.w3.org/TR/html4/interact/forms.html"" rel=""noreferrer"">HTML specification</a> you have to use the <code>POST</code> method and the <code>enctype</code> attribute of the form has to be set to <code>&quot;multipart/form-data&quot;</code>.</p>
<pre class=""lang-html prettyprint-override""><code>&lt;form action=&quot;upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;description&quot; /&gt;
    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;
    &lt;input type=&quot;submit&quot; /&gt;
&lt;/form&gt;
</code></pre>
<p>After submitting such a form, the binary multipart form data is available in the request body in <a href=""https://stackoverflow.com/questions/13372775/servlet-handling-file-upload-why-bigger-than-the-original/13399437#13399437"">a different format</a> than when the <code>enctype</code> isn't set.</p>
<p>Before Servlet 3.0 (Dec 2009), the Servlet API didn't natively support <code>multipart/form-data</code>. It supports only the default form enctype of <code>application/x-www-form-urlencoded</code>. The <code>request.getParameter()</code> and consorts would all return <code>null</code> when using multipart form data. This is where the well known <a href=""http://commons.apache.org/fileupload"" rel=""noreferrer"">Apache Commons FileUpload</a> came into the picture.</p>
<h2>Don't manually parse it!</h2>
<p>You can in theory parse the request body yourself based on <a href=""http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getInputStream%28%29"" rel=""noreferrer""><code>ServletRequest#getInputStream()</code></a>. However, this is a precise and tedious work which requires precise knowledge of <a href=""http://www.faqs.org/rfcs/rfc2388.html"" rel=""noreferrer"">RFC2388</a>. You shouldn't try to do this on your own or copypaste some homegrown library-less code found elsewhere on the Internet. Many online sources have failed hard in this, such as roseindia.net. See also <a href=""https://stackoverflow.com/questions/5038798/uploading-of-pdf-file"">uploading of pdf file</a>. You should rather use a real library which is used (and implicitly tested!) by millions of users for years. Such a library has proven its robustness.</p>
<h2>When you're already on Servlet 3.0 or newer, use native API</h2>
<p>If you're using at least Servlet 3.0 (Tomcat 7, Jetty 9, JBoss AS 6, GlassFish 3, etc, they exist already since 2010), then you can just use standard API provided <a href=""http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getParts()"" rel=""noreferrer""><code>HttpServletRequest#getPart()</code></a> to collect the individual multipart form data items (most Servlet 3.0 implementations <em>actually</em> use Apache Commons FileUpload under the covers for this!). Also, normal form fields are available by <code>getParameter()</code> the usual way.</p>
<p>First annotate your servlet with <a href=""http://docs.oracle.com/javaee/6/api/javax/servlet/annotation/MultipartConfig.html"" rel=""noreferrer""><code>@MultipartConfig</code></a> in order to let it recognize and support <code>multipart/form-data</code> requests and thus get <code>getPart()</code> to work:</p>
<pre><code>@WebServlet(&quot;/upload&quot;)
@MultipartConfig
public class UploadServlet extends HttpServlet {
    // ...
}
</code></pre>
<p>Then, implement its <code>doPost()</code> as follows:</p>
<pre class=""lang-java prettyprint-override""><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String description = request.getParameter(&quot;description&quot;); // Retrieves &lt;input type=&quot;text&quot; name=&quot;description&quot;&gt;
    Part filePart = request.getPart(&quot;file&quot;); // Retrieves &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;
    String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString(); // MSIE fix.
    InputStream fileContent = filePart.getInputStream();
    // ... (do your job here)
}
</code></pre>
<p>Note the <code>Path#getFileName()</code>. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name.</p>
<p>In case you want to upload multiple files via either <code>multiple=&quot;true&quot;</code>,</p>
<pre class=""lang-html prettyprint-override""><code>&lt;input type=&quot;file&quot; name=&quot;files&quot; multiple=&quot;true&quot; /&gt;
</code></pre>
<p>or the old-fashioned way with multiple inputs,</p>
<pre class=""lang-html prettyprint-override""><code>&lt;input type=&quot;file&quot; name=&quot;files&quot; /&gt;
&lt;input type=&quot;file&quot; name=&quot;files&quot; /&gt;
&lt;input type=&quot;file&quot; name=&quot;files&quot; /&gt;
...
</code></pre>
<p>then you can collect them as below (unfortunately there is no such method as <code>request.getParts(&quot;files&quot;)</code>):</p>
<pre><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    // ...
    List&lt;Part&gt; fileParts = request.getParts().stream().filter(part -&gt; &quot;files&quot;.equals(part.getName()) &amp;&amp; part.getSize() &gt; 0).collect(Collectors.toList()); // Retrieves &lt;input type=&quot;file&quot; name=&quot;files&quot; multiple=&quot;true&quot;&gt;

    for (Part filePart : fileParts) {
        String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString(); // MSIE fix.
        InputStream fileContent = filePart.getInputStream();
        // ... (do your job here)
    }
}
</code></pre>
<h2>When you're not on Servlet 3.1 yet, manually get submitted file name</h2>
<p>Note that <a href=""https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName()"" rel=""noreferrer""><code>Part#getSubmittedFileName()</code></a> was introduced in Servlet 3.1 (Tomcat 8, Jetty 9, WildFly 8, GlassFish 4, etc, they exist since 2013 already). If you're not on Servlet 3.1 yet (really?), then you need an additional utility method to obtain the submitted file name.</p>
<pre><code>private static String getSubmittedFileName(Part part) {
    for (String cd : part.getHeader(&quot;content-disposition&quot;).split(&quot;;&quot;)) {
        if (cd.trim().startsWith(&quot;filename&quot;)) {
            String fileName = cd.substring(cd.indexOf('=') + 1).trim().replace(&quot;\&quot;&quot;, &quot;&quot;);
            return fileName.substring(fileName.lastIndexOf('/') + 1).substring(fileName.lastIndexOf('\\') + 1); // MSIE fix.
        }
    }
    return null;
}
</code></pre>

<pre><code>String fileName = getSubmittedFileName(filePart);
</code></pre>
<p>Note the MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name.</p>
<h2>When you're not on Servlet 3.0 yet, use Apache Commons FileUpload</h2>
<p>If you're not on Servlet 3.0 yet (isn't it about time to upgrade? it's released over a decade ago!), the common practice is to make use of <a href=""http://commons.apache.org/fileupload"" rel=""noreferrer"">Apache Commons FileUpload</a> to parse the multpart form data requests. It has an excellent <a href=""http://commons.apache.org/fileupload/using.html"" rel=""noreferrer"">User Guide</a> and <a href=""http://commons.apache.org/fileupload/faq.html"" rel=""noreferrer"">FAQ</a> (carefully go through both). There's also the O'Reilly (&quot;<a href=""http://www.servlets.com/cos/"" rel=""noreferrer"">cos</a>&quot;) <code>MultipartRequest</code>, but it has some (minor) bugs and isn't actively maintained anymore for years. I wouldn't recommend using it. Apache Commons FileUpload is still actively maintained and currently very mature.</p>
<p>In order to use Apache Commons FileUpload, you need to have at least the following files in your webapp's <code>/WEB-INF/lib</code>:</p>
<ul>
<li><a href=""http://commons.apache.org/proper/commons-fileupload/download_fileupload.cgi"" rel=""noreferrer""><code>commons-fileupload.jar</code></a></li>
<li><a href=""http://commons.apache.org/proper/commons-io/download_io.cgi"" rel=""noreferrer""><code>commons-io.jar</code></a></li>
</ul>
<p>Your initial attempt failed most likely because you forgot the commons IO.</p>
<p>Here's a kickoff example how the <code>doPost()</code> of your <code>UploadServlet</code> may look like when using Apache Commons FileUpload:</p>
<pre class=""lang-java prettyprint-override""><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    try {
        List&lt;FileItem&gt; items = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(request);
        for (FileItem item : items) {
            if (item.isFormField()) {
                // Process regular form field (input type=&quot;text|radio|checkbox|etc&quot;, select, etc).
                String fieldName = item.getFieldName();
                String fieldValue = item.getString();
                // ... (do your job here)
            } else {
                // Process form file field (input type=&quot;file&quot;).
                String fieldName = item.getFieldName();
                String fileName = FilenameUtils.getName(item.getName());
                InputStream fileContent = item.getInputStream();
                // ... (do your job here)
            }
        }
    } catch (FileUploadException e) {
        throw new ServletException(&quot;Cannot parse multipart request.&quot;, e);
    }

    // ...
}
</code></pre>
<p>It's very important that you don't call <code>getParameter()</code>, <code>getParameterMap()</code>, <code>getParameterValues()</code>, <code>getInputStream()</code>, <code>getReader()</code>, etc on the same request beforehand. Otherwise the servlet container will read and parse the request body and thus Apache Commons FileUpload will get an empty request body. See also a.o. <a href=""https://stackoverflow.com/questions/13881272/servletfileuploadparserequestrequest-returns-an-empty-list"">ServletFileUpload#parseRequest(request) returns an empty list</a>.</p>
<p>Note the <code>FilenameUtils#getName()</code>. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name.</p>
<p>Alternatively you can also wrap this all in a <code>Filter</code> which parses it all automagically and put the stuff back in the parametermap of the request so that you can continue using <code>request.getParameter()</code> the usual way and retrieve the uploaded file by <code>request.getAttribute()</code>. <a href=""http://balusc.blogspot.com/2007/11/multipartfilter.html"" rel=""noreferrer"">You can find an example in this blog article</a>.</p>
<h2>Workaround for GlassFish3 bug of <code>getParameter()</code> still returning <code>null</code></h2>
<p>Note that Glassfish versions older than 3.1.2 had <a href=""http://java.net/jira/browse/GLASSFISH-16740"" rel=""noreferrer"">a bug</a> wherein the <code>getParameter()</code> still returns <code>null</code>. If you are targeting such a container and can't upgrade it, then you need to extract the value from <code>getPart()</code> with help of this utility method:</p>
<pre><code>private static String getValue(Part part) throws IOException {
    BufferedReader reader = new BufferedReader(new InputStreamReader(part.getInputStream(), &quot;UTF-8&quot;));
    StringBuilder value = new StringBuilder();
    char[] buffer = new char[1024];
    for (int length = 0; (length = reader.read(buffer)) &gt; 0;) {
        value.append(buffer, 0, length);
    }
    return value.toString();
}
</code></pre>

<pre><code>String description = getValue(request.getPart(&quot;description&quot;)); // Retrieves &lt;input type=&quot;text&quot; name=&quot;description&quot;&gt;
    
</code></pre>
<h2>Saving uploaded file (don't use <code>getRealPath()</code> nor <code>part.write()</code>!)</h2>
<p>Head to the following answers for detail on properly saving the obtained <code>InputStream</code> (the <code>fileContent</code> variable as shown in the above code snippets) to disk or database:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/18664579/recommended-way-to-save-files-uploaded-to-a-tomcat-servlet/18664715#18664715"">Recommended way to save uploaded files in a servlet application</a></li>
<li><a href=""https://stackoverflow.com/questions/7033676/how-to-upload-an-image-and-save-it-in-database/7033945#7033945"">How to upload an image and save it in database?</a></li>
<li><a href=""https://stackoverflow.com/questions/19138706/how-to-convert-part-to-blob-so-i-can-store-it-in-mysql/19139125#19139125"">How to convert Part to Blob, so I can store it in MySQL?</a></li>
</ul>
<h2>Serving uploaded file</h2>
<p>Head to the following answers for detail on properly serving the saved file from disk or database back to the client:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/4543936/load-images-from-outside-of-webapps-webcontext-deploy-folder-using-hgraphi/4543951#4543951"">Load images from outside of webapps / webcontext / deploy folder using &lt;h:graphicImage&gt; or &lt;img&gt; tag</a></li>
<li><a href=""https://stackoverflow.com/questions/2340406/how-to-retrieve-and-display-images-from-a-database-in-a-jsp-page/2341322#2341322"">How to retrieve and display images from a database in a JSP page?</a></li>
<li><a href=""https://stackoverflow.com/questions/1812244/simplest-way-to-serve-static-data-from-outside-the-application-server-in-a-java/1812356#1812356"">Simplest way to serve static data from outside the application server in a Java web application</a></li>
<li><a href=""https://stackoverflow.com/questions/132052/servlet-for-serving-static-content/29991447#29991447"">Abstract template for static resource servlet supporting HTTP caching</a></li>
</ul>
<h2>Ajaxifying the form</h2>
<p>Head to the following answers how to upload using Ajax (and jQuery). Do note that the servlet code to collect the form data does not need to be changed for this! Only the way how you respond may be changed, but this is rather trivial (i.e. instead of forwarding to JSP, just print some JSON or XML or even plain text depending on whatever the script responsible for the Ajax call is expecting).</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/6914152/how-to-upload-files-to-server-using-jsp-servlet-and-ajax"">How can I upload files to a server using JSP/Servlet and Ajax?</a></li>
<li><a href=""https://stackoverflow.com/questions/9395911/sending-a-file-as-multipart-through-xmlhttprequest"">Send a file as multipart through XMLHttpRequest</a></li>
<li><a href=""https://stackoverflow.com/questions/7114087/html5-file-upload-to-java-servlet"">HTML5 drag and drop file upload to Java Servlet</a></li>
</ul>
<hr />
<p>Hope this all helps :)</p>
"
2839563,"<p><code>DriverManager</code> is a fairly old way of doing things. The better way is to get a <code>DataSource</code>, either by looking one up that your app server container already configured for you:</p>

<pre><code>Context context = new InitialContext();
DataSource dataSource = (DataSource) context.lookup(""java:comp/env/jdbc/myDB"");
</code></pre>

<p>or instantiating and configuring one from your database driver directly:</p>

<pre><code>MysqlDataSource dataSource = new MysqlDataSource();
dataSource.setUser(""scott"");
dataSource.setPassword(""tiger"");
dataSource.setServerName(""myDBHost.example.org"");
</code></pre>

<p>and then obtain connections from it, same as above:</p>

<pre><code>Connection conn = dataSource.getConnection();
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(""SELECT ID FROM USERS"");
...
rs.close();
stmt.close();
conn.close();
</code></pre>
"
11227902,"<p><strong>You are a victim of <a href=""https://en.wikipedia.org/wiki/Branch_predictor"" rel=""noreferrer"">branch prediction</a> fail.</strong></p>
<hr />
<h2>What is Branch Prediction?</h2>
<p>Consider a railroad junction:</p>
<p><a href=""https://commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/muxnt.jpg"" alt=""Image showing a railroad junction"" /></a>
<sub><a href=""https://commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG"" rel=""noreferrer"">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=""https://creativecommons.org/licenses/by-sa/3.0/deed.en"" rel=""noreferrer"">CC-By-SA 3.0</a> license.</sub></p>
<p>Now for the sake of argument, suppose this is back in the 1800s - before long-distance or radio communication.</p>
<p>You are a blind operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.</p>
<p><em>Trains are heavy and have a lot of inertia, so they take forever to start up and slow down.</em></p>
<p>Is there a better way? You guess which direction the train will go!</p>
<ul>
<li>If you guessed right, it continues on.</li>
<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>
</ul>
<p><strong>If you guess right every time</strong>, the train will never have to stop.<br />
<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>
<hr />
<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>
<p><img src=""https://i.stack.imgur.com/pyfwC.png"" alt=""Screenshot of compiled code containing an if statement"" /></p>
<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>
<p><em>Modern processors are complicated and have long pipelines. This means they take forever to &quot;warm up&quot; and &quot;slow down&quot;.</em></p>
<p>Is there a better way? You guess which direction the branch will go!</p>
<ul>
<li>If you guessed right, you continue executing.</li>
<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>
</ul>
<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br />
<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>
<hr />
<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>
<p>How would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...</p>
<p><em><strong>In other words, you try to identify a pattern and follow it.</strong></em> This is more or less how branch predictors work.</p>
<p>Most applications have well-behaved branches. Therefore, modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>
<p>Further reading: <a href=""https://en.wikipedia.org/wiki/Branch_predictor"" rel=""noreferrer"">&quot;Branch predictor&quot; article on Wikipedia</a>.</p>
<hr />
<h2>As hinted from above, the culprit is this if-statement:</h2>
<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>
<p>Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>
<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>
<p><strong>Quick visualization:</strong></p>
<pre class=""lang-none prettyprint-override""><code>T = branch taken
N = branch not taken

data[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...
branch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...

       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)
</code></pre>
<p>However, when the data is completely random, the branch predictor is rendered useless, because it can't predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).</p>
<pre class=""lang-none prettyprint-override""><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, ...
branch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T  ...

       = TTNTTTTNTNNTTT ...   (completely random - impossible to predict)
</code></pre>
<hr />
<p><strong>What can be done?</strong></p>
<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>
<p>Replace:</p>
<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>
<p>with:</p>
<pre><code>int t = (data[c] - 128) &gt;&gt; 31;
sum += ~t &amp; data[c];
</code></pre>
<p>This eliminates the branch and replaces it with some bitwise operations.</p>
<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>
<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>
<p>C++ - Visual Studio 2010 - x64 Release</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>11.777</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>2.352</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>2.564</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>2.587</td>
</tr>
</tbody>
</table>
</div>
<p>Java - NetBeans 7.1.1 JDK 7 - x64</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>10.93293813</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>5.643797077</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>3.113581453</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>3.186068823</td>
</tr>
</tbody>
</table>
</div>
<p>Observations:</p>
<ul>
<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>
<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>
<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>
</ul>
<p>A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).</p>
<hr />
<p><strong>Update:</strong></p>
<ul>
<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move, so there is no difference between the sorted and unsorted data - both are fast.</p>
<p>(Or somewhat fast: for the already-sorted case, <code>cmov</code> can be slower especially if GCC puts it on the critical path instead of just <code>add</code>, especially on Intel before Broadwell where <code>cmov</code> has 2 cycle latency: <a href=""https://stackoverflow.com/questions/28875325/gcc-optimization-flag-o3-makes-code-slower-than-o2"">gcc optimization flag -O3 makes code slower than -O2</a>)</p>
</li>
<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p>
</li>
<li><p><a href=""https://en.wikipedia.org/wiki/Intel_C++_Compiler"" rel=""noreferrer"">Intel C++ Compiler</a> (ICC) 11 does something miraculous. It <a href=""https://en.wikipedia.org/wiki/Loop_interchange"" rel=""noreferrer"">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. Not only is it immune to the mispredictions, it's also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p>
</li>
<li><p>If you give the Intel compiler the branchless code, it just outright vectorizes it... and is just as fast as with the branch (with the loop interchange).</p>
</li>
</ul>
<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>
"
4113258,"<p>Indeed, the keyword is &quot;Ajax&quot;: <em>Asynchronous JavaScript and XML</em>. However, last years it's more than often <em>Asynchronous JavaScript and JSON</em>. Basically, you let JavaScript execute an asynchronous HTTP request and update the HTML DOM tree based on the response data.</p>
<p>Since it's pretty <a href=""https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started"" rel=""nofollow noreferrer"">tedious work to make it to work</a> across all browsers (especially Internet Explorer versus others), there are plenty of JavaScript libraries out which simplifies this in single functions and covers as many as possible browser-specific bugs/quirks under the hoods, such as <a href=""https://jquery.com"" rel=""nofollow noreferrer"">jQuery</a>, <a href=""http://www.prototypejs.org"" rel=""nofollow noreferrer"">Prototype</a>, <a href=""https://mootools.net/"" rel=""nofollow noreferrer"">Mootools</a>. Since jQuery is most popular these days, I'll use it in the below examples.</p>
<h1>Kickoff example returning <code>String</code> as plain text</h1>
<p>Create a <code>/some.jsp</code> like below (note: the code snippets in this answer doesn't expect the JSP file being placed in a subfolder, if you do so, alter servlet URL accordingly from <code>&quot;someservlet&quot;</code> to <code>&quot;${pageContext.request.contextPath}/someservlet&quot;</code>; it's merely omitted from the code snippets for brevity):</p>
<pre class=""lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;title&gt;SO question 4112686&lt;/title&gt;
        &lt;script src=&quot;http://code.jquery.com/jquery-latest.min.js&quot;&gt;&lt;/script&gt;
        &lt;script&gt;
            $(document).on(&quot;click&quot;, &quot;#somebutton&quot;, function() { // When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...
                $.get(&quot;someservlet&quot;, function(responseText) {   // Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response text...
                    $(&quot;#somediv&quot;).text(responseText);           // Locate HTML DOM element with ID &quot;somediv&quot; and set its text content with the response text.
                });
            });
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;button id=&quot;somebutton&quot;&gt;press here&lt;/button&gt;
        &lt;div id=&quot;somediv&quot;&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Create a servlet with a <code>doGet()</code> method which look like this:</p>
<pre class=""lang-java prettyprint-override""><code>@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String text = &quot;some text&quot;;

    response.setContentType(&quot;text/plain&quot;);  // Set content type of the response so that jQuery knows what it can expect.
    response.setCharacterEncoding(&quot;UTF-8&quot;); // You want world domination, huh?
    response.getWriter().write(text);       // Write response body.
}
</code></pre>
<p>Map this servlet on an URL pattern of <code>/someservlet</code> or <code>/someservlet/*</code> as below (obviously, the URL pattern is free to your choice, but you'd need to alter the <code>someservlet</code> URL in JS code examples over all place accordingly):</p>
<pre class=""lang-java prettyprint-override""><code>package com.example;

@WebServlet(&quot;/someservlet/*&quot;)
public class SomeServlet extends HttpServlet {
    // ...
}
</code></pre>
<p>Or, when you're not on a <a href=""https://en.wikipedia.org/wiki/Jakarta_Servlet"" rel=""nofollow noreferrer"">Servlet</a> 3.0 compatible container yet (<a href=""https://en.wikipedia.org/wiki/Apache_Tomcat"" rel=""nofollow noreferrer"">Tomcat</a> 7, <a href=""https://en.wikipedia.org/wiki/GlassFish"" rel=""nofollow noreferrer"">GlassFish</a> 3, <a href=""https://en.wikipedia.org/wiki/JBoss"" rel=""nofollow noreferrer"">JBoss</a> AS 6, etc. or newer), then map it in <code>web.xml</code> the old fashioned way (see also <a href=""https://stackoverflow.com/tags/servlets/info"">our Servlets wiki page</a>):</p>
<pre class=""lang-xml prettyprint-override""><code>&lt;servlet&gt;
    &lt;servlet-name&gt;someservlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.example.SomeServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;someservlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/someservlet/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>
<p>Now open the http://localhost:8080/context/test.jsp in the browser and press the button. You'll see that the content of the div get updated with the servlet response.</p>
<h1>Returning <code>List&lt;String&gt;</code> as JSON</h1>
<p>With <a href=""https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON"" rel=""nofollow noreferrer"">JSON</a> instead of plaintext as response format you can even get some steps further. It allows for more dynamics. First, you'd like to have a tool to convert between Java objects and JSON strings. There are plenty of them as well (see the bottom of <a href=""https://json.org/"" rel=""nofollow noreferrer"">this page</a> for an overview). My personal favourite is <a href=""https://github.com/google/gson"" rel=""nofollow noreferrer"">Google Gson</a>. Download and put its JAR file in <code>/WEB-INF/lib</code> folder of your web application.</p>
<p>Here's an example which displays <code>List&lt;String&gt;</code> as <code>&lt;ul&gt;&lt;li&gt;</code>. The servlet:</p>
<pre class=""lang-java prettyprint-override""><code>@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    List&lt;String&gt; list = new ArrayList&lt;&gt;();
    list.add(&quot;item1&quot;);
    list.add(&quot;item2&quot;);
    list.add(&quot;item3&quot;);
    String json = new Gson().toJson(list);

    response.setContentType(&quot;application/json&quot;);
    response.setCharacterEncoding(&quot;UTF-8&quot;);
    response.getWriter().write(json);
}
</code></pre>
<p>The JavaScript code:</p>
<pre class=""lang-js prettyprint-override""><code>$(document).on(&quot;click&quot;, &quot;#somebutton&quot;, function() {  // When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...
    $.get(&quot;someservlet&quot;, function(responseJson) {    // Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response JSON...
        var $ul = $(&quot;&lt;ul&gt;&quot;).appendTo($(&quot;#somediv&quot;)); // Create HTML &lt;ul&gt; element and append it to HTML DOM element with ID &quot;somediv&quot;.
        $.each(responseJson, function(index, item) { // Iterate over the JSON array.
            $(&quot;&lt;li&gt;&quot;).text(item).appendTo($ul);      // Create HTML &lt;li&gt; element, set its text content with currently iterated item and append it to the &lt;ul&gt;.
        });
    });
});
</code></pre>
<p>Do note that jQuery automatically parses the response as JSON and gives you directly a JSON object (<code>responseJson</code>) as function argument when you set the response content type to <code>application/json</code>. If you forget to set it or rely on a default of <code>text/plain</code> or <code>text/html</code>, then the <code>responseJson</code> argument wouldn't give you a JSON object, but a plain vanilla string and you'd need to manually fiddle around with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"" rel=""nofollow noreferrer""><code>JSON.parse()</code></a> afterwards, which is thus totally unnecessary if you set the content type right in first place.</p>
<h1>Returning <code>Map&lt;String, String&gt;</code> as JSON</h1>
<p>Here's another example which displays <code>Map&lt;String, String&gt;</code> as <code>&lt;option&gt;</code>:</p>
<pre class=""lang-java prettyprint-override""><code>@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    Map&lt;String, String&gt; options = new LinkedHashMap&lt;&gt;();
    options.put(&quot;value1&quot;, &quot;label1&quot;);
    options.put(&quot;value2&quot;, &quot;label2&quot;);
    options.put(&quot;value3&quot;, &quot;label3&quot;);
    String json = new Gson().toJson(options);

    response.setContentType(&quot;application/json&quot;);
    response.setCharacterEncoding(&quot;UTF-8&quot;);
    response.getWriter().write(json);
}
</code></pre>
<p>And the JSP:</p>
<pre class=""lang-js prettyprint-override""><code>$(document).on(&quot;click&quot;, &quot;#somebutton&quot;, function() {               // When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...
    $.get(&quot;someservlet&quot;, function(responseJson) {                 // Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response JSON...
        var $select = $(&quot;#someselect&quot;);                           // Locate HTML DOM element with ID &quot;someselect&quot;.
        $select.find(&quot;option&quot;).remove();                          // Find all child elements with tag name &quot;option&quot; and remove them (just to prevent duplicate options when button is pressed again).
        $.each(responseJson, function(key, value) {               // Iterate over the JSON object.
            $(&quot;&lt;option&gt;&quot;).val(key).text(value).appendTo($select); // Create HTML &lt;option&gt; element, set its value with currently iterated key and its text content with currently iterated item and finally append it to the &lt;select&gt;.
        });
    });
});
</code></pre>
<p>with</p>
<pre class=""lang-html prettyprint-override""><code>&lt;select id=&quot;someselect&quot;&gt;&lt;/select&gt;
</code></pre>
<h1>Returning <code>List&lt;Entity&gt;</code> as JSON</h1>
<p>Here's an example which displays <code>List&lt;Product&gt;</code> in a <code>&lt;table&gt;</code> where the <code>Product</code> class has the properties <code>Long id</code>, <code>String name</code> and <code>BigDecimal price</code>. The servlet:</p>
<pre class=""lang-java prettyprint-override""><code>@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    List&lt;Product&gt; products = someProductService.list();
    String json = new Gson().toJson(products);

    response.setContentType(&quot;application/json&quot;);
    response.setCharacterEncoding(&quot;UTF-8&quot;);
    response.getWriter().write(json);
}
</code></pre>
<p>The JS code:</p>
<pre class=""lang-js prettyprint-override""><code>$(document).on(&quot;click&quot;, &quot;#somebutton&quot;, function() {        // When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...
    $.get(&quot;someservlet&quot;, function(responseJson) {          // Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response JSON...
        var $table = $(&quot;&lt;table&gt;&quot;).appendTo($(&quot;#somediv&quot;)); // Create HTML &lt;table&gt; element and append it to HTML DOM element with ID &quot;somediv&quot;.
        $.each(responseJson, function(index, product) {    // Iterate over the JSON array.
            $(&quot;&lt;tr&gt;&quot;).appendTo($table)                     // Create HTML &lt;tr&gt; element, set its text content with currently iterated item and append it to the &lt;table&gt;.
                .append($(&quot;&lt;td&gt;&quot;).text(product.id))        // Create HTML &lt;td&gt; element, set its text content with id of currently iterated product and append it to the &lt;tr&gt;.
                .append($(&quot;&lt;td&gt;&quot;).text(product.name))      // Create HTML &lt;td&gt; element, set its text content with name of currently iterated product and append it to the &lt;tr&gt;.
                .append($(&quot;&lt;td&gt;&quot;).text(product.price));    // Create HTML &lt;td&gt; element, set its text content with price of currently iterated product and append it to the &lt;tr&gt;.
        });
    });
});
</code></pre>
<h1>Returning <code>List&lt;Entity&gt;</code> as XML</h1>
<p>Here's an example which does effectively the same as previous example, but then with XML instead of JSON. When using JSP as XML output generator you'll see that it's less tedious to code the table and all. JSTL is this way much more helpful as you can actually use it to iterate over the results and perform server side data formatting. The servlet:</p>
<pre class=""lang-java prettyprint-override""><code>@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    List&lt;Product&gt; products = someProductService.list();

    request.setAttribute(&quot;products&quot;, products);
    request.getRequestDispatcher(&quot;/WEB-INF/xml/products.jsp&quot;).forward(request, response);
}
</code></pre>
<p>The JSP code (note: if you put the <code>&lt;table&gt;</code> in a <code>&lt;jsp:include&gt;</code>, it may be reusable elsewhere in a non-Ajax response):</p>
<pre class=""lang-xml prettyprint-override""><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;%@page contentType=&quot;application/xml&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
&lt;%@taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;
&lt;data&gt;
    &lt;table&gt;
        &lt;c:forEach items=&quot;${products}&quot; var=&quot;product&quot;&gt;
            &lt;tr&gt;
                &lt;td&gt;${product.id}&lt;/td&gt;
                &lt;td&gt;&lt;c:out value=&quot;${product.name}&quot; /&gt;&lt;/td&gt;
                &lt;td&gt;&lt;fmt:formatNumber value=&quot;${product.price}&quot; type=&quot;currency&quot; currencyCode=&quot;USD&quot; /&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/c:forEach&gt;
    &lt;/table&gt;
&lt;/data&gt;
</code></pre>
<p>The JavaScript code:</p>
<pre class=""lang-js prettyprint-override""><code>$(document).on(&quot;click&quot;, &quot;#somebutton&quot;, function() {             // When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...
    $.get(&quot;someservlet&quot;, function(responseXml) {                // Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response XML...
        $(&quot;#somediv&quot;).html($(responseXml).find(&quot;data&quot;).html()); // Parse XML, find &lt;data&gt; element and append its HTML to HTML DOM element with ID &quot;somediv&quot;.
    });
});
</code></pre>
<p>You'll by now probably realize why XML is so much more powerful than JSON for the particular purpose of updating a HTML document using Ajax. JSON is funny, but after all generally only useful for so-called &quot;public web services&quot;. MVC frameworks like <a href=""https://stackoverflow.com/tags/jsf/info"">JSF</a> use XML under the covers for their ajax magic.</p>
<h1>Ajaxifying an existing form</h1>
<p>You can use jQuery <a href=""https://api.jquery.com/serialize/"" rel=""nofollow noreferrer""><code>$.serialize()</code></a> to easily ajaxify existing POST forms without fiddling around with collecting and passing the individual form input parameters. Assuming an existing form which works perfectly fine without JavaScript/jQuery (and thus degrades gracefully when the end user has JavaScript disabled):</p>
<pre class=""lang-html prettyprint-override""><code>&lt;form id=&quot;someform&quot; action=&quot;someservlet&quot; method=&quot;post&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;foo&quot; /&gt;
    &lt;input type=&quot;text&quot; name=&quot;bar&quot; /&gt;
    &lt;input type=&quot;text&quot; name=&quot;baz&quot; /&gt;
    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
&lt;/form&gt;
</code></pre>
<p>You can progressively enhance it with Ajax as below:</p>
<pre class=""lang-js prettyprint-override""><code>$(document).on(&quot;submit&quot;, &quot;#someform&quot;, function(event) {
    var $form = $(this);

    $.post($form.attr(&quot;action&quot;), $form.serialize(), function(response) {
        // ...
    });

    event.preventDefault(); // Important! Prevents submitting the form.
});
</code></pre>
<p>You can in the servlet distinguish between normal requests and Ajax requests as below:</p>
<pre class=""lang-java prettyprint-override""><code>@Override
protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String foo = request.getParameter(&quot;foo&quot;);
    String bar = request.getParameter(&quot;bar&quot;);
    String baz = request.getParameter(&quot;baz&quot;);

    boolean ajax = &quot;XMLHttpRequest&quot;.equals(request.getHeader(&quot;X-Requested-With&quot;));

    // ...

    if (ajax) {
        // Handle Ajax (JSON or XML) response.
    } else {
        // Handle regular (JSP) response.
    }
}
</code></pre>
<p>The <a href=""https://malsup.com/jquery/form/"" rel=""nofollow noreferrer"">jQuery Form plugin</a> does less or more the same as above jQuery example, but it has additional transparent support for <code>multipart/form-data</code> forms as required by file uploads.</p>
<h1>Manually sending request parameters to servlet</h1>
<p>If you don't have a form at all, but just wanted to interact with the servlet &quot;in the background&quot; whereby you'd like to POST some data, then you can use jQuery <a href=""https://api.jquery.com/jquery.param/"" rel=""nofollow noreferrer""><code>$.param()</code></a> to easily convert a JSON object to an URL-encoded query string.</p>
<pre class=""lang-js prettyprint-override""><code>var params = {
    foo: &quot;fooValue&quot;,
    bar: &quot;barValue&quot;,
    baz: &quot;bazValue&quot;
};

$.post(&quot;someservlet&quot;, $.param(params), function(response) {
    // ...
});
</code></pre>
<p>The same <code>doPost()</code> method as shown here above can be reused. Do note that above syntax also works with <code>$.get()</code> in jQuery and <code>doGet()</code> in servlet.</p>
<h1>Manually sending JSON object to servlet</h1>
<p>If you however intend to send the JSON object as a whole instead of as individual request parameters for some reason, then you'd need to serialize it to a string using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"" rel=""nofollow noreferrer""><code>JSON.stringify()</code></a> (not part of jQuery) and instruct jQuery to set request content type to <code>application/json</code> instead of (default) <code>application/x-www-form-urlencoded</code>. This can't be done via <code>$.post()</code> convenience function, but needs to be done via <code>$.ajax()</code> as below.</p>
<pre class=""lang-js prettyprint-override""><code>var data = {
    foo: &quot;fooValue&quot;,
    bar: &quot;barValue&quot;,
    baz: &quot;bazValue&quot;
};

$.ajax({
    type: &quot;POST&quot;,
    url: &quot;someservlet&quot;,
    contentType: &quot;application/json&quot;, // NOT dataType!
    data: JSON.stringify(data),
    success: function(response) {
        // ...
    }
});
</code></pre>
<p>Do note that a lot of starters mix <code>contentType</code> with <code>dataType</code>. The <code>contentType</code> represents the type of the <strong>request</strong> body. The <code>dataType</code> represents the (expected) type of the <strong>response</strong> body, which is usually unnecessary as jQuery already autodetects it based on response's <code>Content-Type</code> header.</p>
<p>Then, in order to process the JSON object in the servlet which isn't being sent as individual request parameters but as a whole JSON string the above way, you only need to manually parse the request body using a JSON tool instead of using <code>getParameter()</code> the usual way. Namely, servlets don't support <code>application/json</code> formatted requests, but only <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code> formatted requests. Gson also supports parsing a JSON string into a JSON object.</p>
<pre class=""lang-java prettyprint-override""><code>JsonObject data = new Gson().fromJson(request.getReader(), JsonObject.class);
String foo = data.get(&quot;foo&quot;).getAsString();
String bar = data.get(&quot;bar&quot;).getAsString();
String baz = data.get(&quot;baz&quot;).getAsString();
// ...
</code></pre>
<p>Do note that this all is more clumsy than just using <code>$.param()</code>. Normally, you want to use <code>JSON.stringify()</code> only if the target service is e.g. a JAX-RS (RESTful) service which is for some reason only capable of consuming JSON strings and not regular request parameters.</p>
<h1>Sending a redirect from servlet</h1>
<p>Important to realize and understand is that any <code>sendRedirect()</code> and <code>forward()</code> call by the servlet on an ajax request would only forward or redirect <em>the Ajax request itself</em> and not the main document/window where the Ajax request originated. JavaScript/jQuery would in such case only retrieve the redirected/forwarded response as <code>responseText</code> variable in the callback function. If it represents a whole HTML page and not an Ajax-specific XML or JSON response, then all you could do is to replace the current document with it.</p>
<pre><code>document.open();
document.write(responseText);
document.close();
</code></pre>
<p>Note that this doesn't change the URL as end user sees in browser's address bar. So there are issues with bookmarkability. Therefore, it's much better to just return an &quot;instruction&quot; for JavaScript/jQuery to perform a redirect instead of returning the whole content of the redirected page. E.g., by returning a boolean, or a URL.</p>
<pre><code>String redirectURL = &quot;http://example.com&quot;;

Map&lt;String, String&gt; data = new HashMap&lt;&gt;();
data.put(&quot;redirect&quot;, redirectURL);
String json = new Gson().toJson(data);

response.setContentType(&quot;application/json&quot;);
response.setCharacterEncoding(&quot;UTF-8&quot;);
response.getWriter().write(json);
</code></pre>

<pre><code>function(responseJson) {
    if (responseJson.redirect) {
        window.location = responseJson.redirect;
        return;
    }

    // ...
}
</code></pre>
<h3>See also:</h3>
<ul>
<li><em><a href=""https://stackoverflow.com/questions/2132242/need-to-call-servlet-from-javascript-along-with-parameters"">Call Servlet and invoke Java code from JavaScript along with parameters</a></em></li>
<li><em><a href=""https://stackoverflow.com/questions/3832792/access-java-servlet-jsp-jstl-el-variables-in-javascript"">Access Java / Servlet / JSP / JSTL / EL variables in JavaScript</a></em></li>
<li><em><a href=""https://stackoverflow.com/questions/2600582/how-to-switch-easily-between-ajax-based-website-and-basic-html-website/"">How can I switch easily between an Ajax-based website and a basic HTML website?</a></em></li>
<li><em><a href=""https://stackoverflow.com/questions/6914152/how-to-upload-files-to-server-using-jsp-servlet-and-ajax"">How can I upload files to a server using JSP/Servlet and Ajax?</a></em></li>
</ul>
"
3481842,"<p>Use the appropriately named method <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#split(java.lang.String)"" rel=""noreferrer""><code>String#split()</code></a>.</p>
<pre><code>String string = &quot;004-034556&quot;;
String[] parts = string.split(&quot;-&quot;);
String part1 = parts[0]; // 004
String part2 = parts[1]; // 034556
</code></pre>
<p>Note that <code>split</code>'s argument is assumed to be a <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html#sum"" rel=""noreferrer"">regular expression</a>, so remember to escape <a href=""https://www.regular-expressions.info/characters.html"" rel=""noreferrer"">special characters</a> if necessary.</p>
<blockquote>
<p><a href=""https://www.regular-expressions.info/characters.html"" rel=""noreferrer"">there</a> are 12 characters with special meanings: the backslash <code>\</code>, the caret <code>^</code>, the dollar sign <code>$</code>, the period or dot <code>.</code>, the vertical bar or pipe symbol <code>|</code>, the question mark <code>?</code>, the asterisk or star <code>*</code>, the plus sign <code>+</code>, the opening parenthesis <code>(</code>, the closing parenthesis <code>)</code>, and the opening square bracket <code>[</code>, the opening curly brace <code>{</code>, These special characters are often called &quot;metacharacters&quot;.</p>
</blockquote>
<p>For instance, to split on a period/dot <code>.</code> (which means &quot;<a href=""https://www.regular-expressions.info/dot.html"" rel=""noreferrer"">any character</a>&quot; in regex), use either <a href=""https://www.regular-expressions.info/characters.html"" rel=""noreferrer"">backslash <code>\</code></a> to escape the individual special character like so <code>split(&quot;\\.&quot;)</code>, or use <a href=""https://www.regular-expressions.info/charclass.html"" rel=""noreferrer"">character class <code>[]</code></a> to represent literal character(s) like so <code>split(&quot;[.]&quot;)</code>, or use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html#quote(java.lang.String)"" rel=""noreferrer""><code>Pattern#quote()</code></a> to escape the entire string like so <code>split(Pattern.quote(&quot;.&quot;))</code>.</p>
<pre><code>String[] parts = string.split(Pattern.quote(&quot;.&quot;)); // Split on the exact string.
</code></pre>
<p>To test beforehand if the string contains certain character(s), just use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#contains(java.lang.CharSequence)"" rel=""noreferrer""><code>String#contains()</code></a>.</p>
<pre><code>if (string.contains(&quot;-&quot;)) {
    // Split it.
} else {
    throw new IllegalArgumentException(&quot;String &quot; + string + &quot; does not contain -&quot;);
}
</code></pre>
<p>Note, this does not take a regular expression. For that, use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#matches(java.lang.String)"" rel=""noreferrer""><code>String#matches()</code></a> instead.</p>
<p>If you'd like to retain the split character in the resulting parts, then make use of <a href=""https://www.regular-expressions.info/lookaround.html"" rel=""noreferrer"">positive lookaround</a>. In case you want to have the split character to end up in left hand side, use positive lookbehind by prefixing <code>?&lt;=</code> group on the pattern.</p>
<pre><code>String string = &quot;004-034556&quot;;
String[] parts = string.split(&quot;(?&lt;=-)&quot;);
String part1 = parts[0]; // 004-
String part2 = parts[1]; // 034556
</code></pre>
<p>In case you want to have the split character to end up in right hand side, use positive lookahead by prefixing <code>?=</code> group on the pattern.</p>
<pre><code>String string = &quot;004-034556&quot;;
String[] parts = string.split(&quot;(?=-)&quot;);
String part1 = parts[0]; // 004
String part2 = parts[1]; // -034556
</code></pre>
<p>If you'd like to limit the number of resulting parts, then you can supply the desired number as 2nd argument of <code>split()</code> method.</p>
<pre><code>String string = &quot;004-034556-42&quot;;
String[] parts = string.split(&quot;-&quot;, 2);
String part1 = parts[0]; // 004
String part2 = parts[1]; // 034556-42
</code></pre>
"
18093929,"<h2>The <code>java &lt;class-name&gt;</code> command syntax</h2>
<p>First of all, you need to understand the correct way to launch a program using the <code>java</code> (or <code>javaw</code>) command.</p>
<p>The normal syntax<sup>1</sup> is this:</p>
<pre><code>    java [ &lt;options&gt; ] &lt;class-name&gt; [&lt;arg&gt; ...]
</code></pre>
<p>where <code>&lt;option&gt;</code> is a command line option (starting with a &quot;-&quot; character), <code>&lt;class-name&gt;</code> is a fully qualified Java class name, and <code>&lt;arg&gt;</code> is an arbitrary command line argument that gets passed to your application.</p>
<hr />
<p><sup>1 - There are some other syntaxes which are described near the end of this answer.</sup></p>
<p>The fully qualified name (FQN) for the class is conventionally written as you would in Java source code; e.g.</p>
<pre><code>    packagename.packagename2.packagename3.ClassName
</code></pre>
<p>However some versions of the <code>java</code> command allow you to use slashes instead of periods; e.g.</p>
<pre><code>    packagename/packagename2/packagename3/ClassName
</code></pre>
<p>which (confusingly) looks like a file pathname, but isn't one.  Note that the term <em>fully qualified name</em> is standard Java terminology ... not something I just made up to confuse you :-)</p>
<p>Here is an example of what a <code>java</code> command should look like:</p>
<pre><code>    java -Xmx100m com.acme.example.ListUsers fred joe bert
</code></pre>
<p>The above is going to cause the <code>java</code> command to do the following:</p>
<ol>
<li>Search for the compiled version of the <code>com.acme.example.ListUsers</code> class.</li>
<li>Load the class.</li>
<li>Check that the class has a <code>main</code> method with <em>signature</em>, <em>return type</em> and <em>modifiers</em> given by <code>public static void main(String[])</code>.  (Note, the method argument's name is <strong>NOT</strong> part of the signature.)</li>
<li>Call that method passing it the command line arguments (&quot;fred&quot;, &quot;joe&quot;, &quot;bert&quot;) as a <code>String[]</code>.</li>
</ol>
<h2>Reasons why Java cannot find the class</h2>
<p>When you get the message &quot;Could not find or load main class ...&quot;, that means that the first step has failed.  The <code>java</code> command was not able to find the class.  And indeed, the &quot;...&quot; in the message will be the <em>fully qualified class name</em> that <code>java</code> is looking for.</p>
<p>So why might it be unable to find the class?</p>
<h2>Reason #1 - you made a mistake with the classname argument</h2>
<p>The first likely cause is that you may have provided the wrong class name.  (Or ... the right class name, but in the wrong form.)   Considering the example above, here are a variety of <strong>wrong ways</strong> to specify the class name:</p>
<ul>
<li><p>Example #1 - a simple class name:</p>
<pre><code>java ListUser
</code></pre>
<p>When the class is declared in a package such as <code>com.acme.example</code>, then you must use the full classname <em>including</em> the package name in the <code>java</code> command; e.g.</p>
<pre><code>java com.acme.example.ListUser
</code></pre>
</li>
<li><p>Example #2 - a filename or pathname rather than a class name:</p>
<pre><code>java ListUser.class
java com/acme/example/ListUser.class
</code></pre>
</li>
<li><p>Example #3 - a class name with the casing incorrect:</p>
<pre><code>java com.acme.example.listuser
</code></pre>
</li>
<li><p>Example #4 - a typo</p>
<pre><code>java com.acme.example.mistuser
</code></pre>
</li>
<li><p>Example #5 - a source filename (except for Java 11 or later; see below)</p>
<pre><code>java ListUser.java
</code></pre>
</li>
<li><p>Example #6 - you forgot the class name entirely</p>
<pre><code>java lots of arguments
</code></pre>
</li>
</ul>
<h2>Reason #2 - the application's classpath is incorrectly specified</h2>
<p>The second likely cause is that the class name is correct, but that the <code>java</code> command cannot find the class.  To understand this, you need to understand the concept of the &quot;classpath&quot;.  This is explained <em>well</em> by the Oracle documentation:</p>
<ul>
<li><a href=""http://docs.oracle.com/javase/7/docs/technotes/tools/windows/java.html"" rel=""noreferrer"">The <code>java</code> command documentation</a></li>
<li><a href=""http://docs.oracle.com/javase/7/docs/technotes/tools/windows/classpath.html"" rel=""noreferrer"">Setting the Classpath</a>.</li>
<li>The Java Tutorial - <a href=""http://docs.oracle.com/javase/tutorial/essential/environment/paths.html"" rel=""noreferrer"">PATH and CLASSPATH</a></li>
</ul>
<p>So ... if you have specified the class name correctly, the next thing to check is that you have specified the classpath correctly:</p>
<ol>
<li>Read the three documents linked above.  (Yes ... READ them!  It is important that a Java programmer <em>understands</em> at least the basics of how the Java classpath mechanisms works.)</li>
<li>Look at command line and / or the CLASSPATH environment variable that is in effect when you run the <code>java</code> command.  Check that the directory names and JAR file names are correct.</li>
<li>If there are <em>relative</em> pathnames in the classpath, check that they resolve correctly ... from the current directory that is in effect when you run the <code>java</code> command.</li>
<li>Check that the class (mentioned in the error message) can be located on the <em>effective</em> classpath.</li>
<li>Note that the classpath syntax is <em>different</em> for Windows versus Linux and Mac OS. (The classpath separator is <code>;</code> on Windows and <code>:</code> on the others.  If you use the wrong separator for your platform, you won't get an explicit error message.  Instead, you will get a nonexistent file or directory on the path that will be silently ignored.)</li>
</ol>
<h2>Reason #2a - the wrong directory is on the classpath</h2>
<p>When you put a directory on the classpath, it notionally corresponds to the root of the qualified name space.  Classes are located in the directory structure beneath that root, <em>by mapping the fully qualified name to a pathname</em>.  So for example, if &quot;/usr/local/acme/classes&quot; is on the class path, then when the JVM looks for a class called <code>com.acme.example.Foon</code>, it will look for a &quot;.class&quot; file with this pathname:</p>
<pre><code>  /usr/local/acme/classes/com/acme/example/Foon.class
</code></pre>
<p>If you had put &quot;/usr/local/acme/classes/com/acme/example&quot; on the classpath, then the JVM wouldn't be able to find the class.</p>
<h2>Reason #2b - the subdirectory path doesn't match the FQN</h2>
<p>If your classes FQN is <code>com.acme.example.Foon</code>, then the JVM is going to look for &quot;Foon.class&quot; in the directory &quot;com/acme/example&quot;:</p>
<ul>
<li><p>If your directory structure doesn't match the package naming as per the pattern above, the JVM won't find your class.</p>
</li>
<li><p>If you attempt <em>rename</em> a class by moving it, that will fail as well ... but the exception stacktrace will be different.  It is liable to say something like this:</p>
<pre><code>Caused by: java.lang.NoClassDefFoundError: &lt;path&gt; (wrong name: &lt;name&gt;)
</code></pre>
<p>because the FQN in the class file doesn't match what the class loader is expecting to find.</p>
</li>
</ul>
<p>To give a concrete example, supposing that:</p>
<ul>
<li>you want to run <code>com.acme.example.Foon</code> class,</li>
<li>the full file path is <code>/usr/local/acme/classes/com/acme/example/Foon.class</code>,</li>
<li>your current working directory is <code>/usr/local/acme/classes/com/acme/example/</code>,</li>
</ul>
<p>then:</p>
<pre class=""lang-bash prettyprint-override""><code># wrong, FQN is needed
java Foon

# wrong, there is no `com/acme/example` folder in the current working directory
java com.acme.example.Foon

# wrong, similar to above
java -classpath . com.acme.example.Foon

# fine; relative classpath set
java -classpath ../../.. com.acme.example.Foon

# fine; absolute classpath set
java -classpath /usr/local/acme/classes com.acme.example.Foon
</code></pre>
<p>Notes:</p>
<ul>
<li>The <code>-classpath</code> option can be shortened to <code>-cp</code> in most Java releases.  Check the respective manual entries for <code>java</code>, <code>javac</code> and so on.</li>
<li>Think carefully when choosing between absolute and relative pathnames in classpaths.  Remember that a relative pathname may &quot;break&quot; if the current directory changes.</li>
</ul>
<h2>Reason #2c - dependencies missing from the classpath</h2>
<p>The classpath needs to include all of the <em>other</em> (non-system) classes that your application depends on.  (The system classes are located automatically, and you rarely need to concern yourself with this.)  For the main class to load correctly, the JVM needs to find:</p>
<ul>
<li>the class itself.</li>
<li>all classes and interfaces in the superclass hierarchy (e.g. see <a href=""https://stackoverflow.com/questions/42880748"">Java class is present in classpath but startup fails with Error: Could not find or load main class</a>)</li>
<li>all classes and interfaces that are referred to by means of variable or variable declarations, or method call or field access expressions.</li>
</ul>
<p>(Note: the JLS and JVM specifications allow some scope for a JVM to load classes &quot;lazily&quot;, and this can affect when a classloader exception is thrown.)</p>
<h2>Reason #3 - the class has been declared in the wrong package</h2>
<p>It occasionally happens that someone puts a source code file into the
the wrong folder in their source code tree, or they leave out the <code>package</code> declaration.  If you do this in an IDE, the IDE's compiler will tell you about this immediately.  Similarly if you use a decent Java build tool, the tool will run <code>javac</code> in a way that will detect the problem.  However, if you build your Java code by hand, you can do it in such a way that the compiler doesn't notice the problem, and the resulting &quot;.class&quot; file is not in the place that you expect it to be.</p>
<h2>Still can't find the problem?</h2>
<p>There lots of things to check, and it is easy to miss something.  Try adding the <code>-Xdiag</code> option to the <code>java</code> command line (as the first thing after <code>java</code>).  It will output various things about class loading, and this may offer you clues as to what the real problem is.</p>
<p>Also, consider possible problems caused by copying and pasting invisible or non-ASCII characters from websites, documents and so on.  And consider &quot;homoglyphs&quot;, where two letters or symbols look the same ... but aren't.</p>
<p>You may run into this problem if you have invalid or incorrect signatures in <code>META-INF/*.SF</code>. You can try opening up the .jar in your favorite ZIP editor, and removing files from <code>META-INF</code> until all you have is your <code>MANIFEST.MF</code>.  However this is NOT RECOMMENDED in general.  (The invalid signature may be the result of someone having injected malware into the original signed JAR file.  If you erase the invalid signature, you are in infecting your application with the malware!)  The recommended approach is to get hold of JAR files with valid signatures, or rebuild them from the (authentic) original source code.</p>
<p>Finally, you can apparently run into this problem if there is a syntax error in the <code>MANIFEST.MF</code> file (see <a href=""https://stackoverflow.com/a/67145190/139985"">https://stackoverflow.com/a/67145190/139985</a>).</p>
<hr />
<h2>Alternative syntaxes for <code>java</code></h2>
<p>There are three alternative syntaxes for the launching Java programs using the <code>java command</code>.</p>
<ol>
<li><p>The syntax used for launching an &quot;executable&quot; JAR file is as follows:</p>
<pre><code>java [ &lt;options&gt; ] -jar &lt;jar-file-name&gt; [&lt;arg&gt; ...]
</code></pre>
<p>e.g.</p>
<pre><code>java -Xmx100m -jar /usr/local/acme-example/listuser.jar fred
</code></pre>
<p>The name of the entry-point class (i.e. <code>com.acme.example.ListUser</code>) and the classpath are specified in the MANIFEST of the JAR file.</p>
</li>
<li><p>The syntax for launching an application from a module (Java 9 and later) is as follows:</p>
<pre><code>java [ &lt;options&gt; ] --module &lt;module&gt;[/&lt;mainclass&gt;] [&lt;arg&gt; ...]
</code></pre>
<p>The name of the entrypoint class is either defined by the <code>&lt;module&gt;</code> itself, or is given by the optional <code>&lt;mainclass&gt;</code>.</p>
</li>
<li><p>From Java 11 onwards, you can use the <code>java</code> command to compile and run a single source code file using the following syntax:</p>
<pre><code>java [ &lt;options&gt; ] &lt;sourcefile&gt; [&lt;arg&gt; ...]
</code></pre>
<p>where <code>&lt;sourcefile&gt;</code> is (typically) a file with the suffix &quot;.java&quot;.</p>
</li>
</ol>
<p>For more details, please refer to the official documentation for the <code>java</code> command for the Java release that you are using.</p>
<hr />
<h2>IDEs</h2>
<p>A typical Java IDE has support for running Java applications in the IDE JVM itself or in a child JVM.  These are <em>generally</em> immune from this particular exception, because the IDE uses its own mechanisms to construct the runtime classpath, identify the main class and create the <code>java</code> command line.</p>
<p>However it is still possible for this exception to occur, if you do things behind the back of the IDE.  For example, if you have previously set up an Application Launcher for your Java app in Eclipse, and you then moved the JAR file containing the &quot;main&quot; class to a different place in the file system <em>without telling Eclipse</em>, Eclipse would unwittingly launch the JVM with an incorrect classpath.</p>
<p>In short, if you get this problem in an IDE, check for things like stale IDE state, broken project references or broken launcher configurations.</p>
<p>It is also possible for an IDE to simply get confused.  IDE's are hugely complicated pieces of software comprising many interacting parts.  Many of these parts adopt various caching strategies in order to make the IDE as a whole responsive.  These can sometimes go wrong, and one possible symptom is problems when launching applications.  If you suspect this could be happening, it is worth trying other things like restarting your IDE, rebuilding the project and so on.</p>
<hr />
<h2>Other References</h2>
<ul>
<li>From the Oracle Java Tutorials - <a href=""http://docs.oracle.com/javase/tutorial/getStarted/problems/index.html"" rel=""noreferrer"">Common Problems (and Their Solutions)</a></li>
</ul>
"
27609,"<h3>The theory (for the language lawyers and the mathematically inclined):</h3>

<p><code>equals()</code> (<a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)"" rel=""noreferrer"">javadoc</a>) must define an equivalence relation (it must be <em>reflexive</em>, <em>symmetric</em>, and <em>transitive</em>). In addition, it must be <em>consistent</em> (if the objects are not modified, then it must keep returning the same value). Furthermore, <code>o.equals(null)</code> must always return false.</p>

<p><code>hashCode()</code> (<a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()"" rel=""noreferrer"">javadoc</a>) must also be <em>consistent</em> (if the object is not modified in terms of <code>equals()</code>, it must keep returning the same value).</p>

<p>The <strong>relation</strong> between the two methods is:</p>

<blockquote>
  <p><em>Whenever <code>a.equals(b)</code>, then <code>a.hashCode()</code> must be same as <code>b.hashCode()</code>.</em></p>
</blockquote>

<h3>In practice:</h3>

<p>If you override one, then you should override the other.</p>

<p>Use the same set of fields that you use to compute <code>equals()</code> to compute <code>hashCode()</code>.</p>

<p>Use the excellent helper classes <a href=""http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html"" rel=""noreferrer"">EqualsBuilder</a> and <a href=""http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html"" rel=""noreferrer"">HashCodeBuilder</a> from the <a href=""http://commons.apache.org/lang/"" rel=""noreferrer"">Apache Commons Lang</a> library. An example:</p>

<pre><code>public class Person {
    private String name;
    private int age;
    // ...

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers
            // if deriving: appendSuper(super.hashCode()).
            append(name).
            append(age).
            toHashCode();
    }

    @Override
    public boolean equals(Object obj) {
       if (!(obj instanceof Person))
            return false;
        if (obj == this)
            return true;

        Person rhs = (Person) obj;
        return new EqualsBuilder().
            // if deriving: appendSuper(super.equals(obj)).
            append(name, rhs.name).
            append(age, rhs.age).
            isEquals();
    }
}
</code></pre>

<h3>Also remember:</h3>

<p>When using a hash-based <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/Collection.html"" rel=""noreferrer"">Collection</a> or <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/Map.html"" rel=""noreferrer"">Map</a> such as <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashSet.html"" rel=""noreferrer"">HashSet</a>, <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/LinkedHashSet.html"" rel=""noreferrer"">LinkedHashSet</a>, <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashMap.html"" rel=""noreferrer"">HashMap</a>, <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/Hashtable.html"" rel=""noreferrer"">Hashtable</a>, or <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/WeakHashMap.html"" rel=""noreferrer"">WeakHashMap</a>, make sure that the hashCode() of the key objects that you put into the collection never changes while the object is in the collection. The bulletproof way to ensure this is to make your keys immutable, <a href=""http://www.javapractices.com/topic/TopicAction.do?Id=29"" rel=""noreferrer"">which has also other benefits</a>.</p>
"
34419,"<p>This is caused when there is a class file that your code depends on and it is present at compile time but not found at runtime. Look for differences in your build time and runtime  classpaths. </p>
"
4216767,"<p>That's the hard way, and those <code>java.util.Date</code> setter methods have been deprecated since Java 1.1 (1997). Moreover, the whole <code>java.util.Date</code> class was de-facto deprecated (discommended) since introduction of <code>java.time</code> API in Java 8 (2014).</p>
<p>Simply format the date using <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html"" rel=""noreferrer""><code>DateTimeFormatter</code></a> with a pattern matching the input string (<a href=""https://docs.oracle.com/javase/tutorial/datetime/iso/format.html"" rel=""noreferrer"">the tutorial is available here</a>).</p>
<p>In your specific case of &quot;January 2, 2010&quot; as the input string:</p>
<ol>
<li>&quot;January&quot; is the full text month, so use the <code>MMMM</code> pattern for it</li>
<li>&quot;2&quot; is the short day-of-month, so use the <code>d</code> pattern for it.</li>
<li>&quot;2010&quot; is the 4-digit year, so use the <code>yyyy</code> pattern for it.</li>
</ol>

<pre><code>String string = &quot;January 2, 2010&quot;;
DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;MMMM d, yyyy&quot;, Locale.ENGLISH);
LocalDate date = LocalDate.parse(string, formatter);
System.out.println(date); // 2010-01-02
</code></pre>
<p>Note: if your format pattern happens to contain the time part as well, then use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/LocalDateTime.html#parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)"" rel=""noreferrer""><code>LocalDateTime#parse(text, formatter)</code></a> instead of <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/LocalDate.html#parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)"" rel=""noreferrer""><code>LocalDate#parse(text, formatter)</code></a>. And, if your format pattern happens to contain the time zone as well, then use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/ZonedDateDate.html#parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)"" rel=""noreferrer""><code>ZonedDateTime#parse(text, formatter)</code></a> instead.</p>
<p>Here's an extract of relevance from <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html"" rel=""noreferrer"">the javadoc</a>, listing all available format patterns:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Symbol</th>
<th>Meaning</th>
<th>Presentation</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>G</code></td>
<td>era</td>
<td>text</td>
<td>AD; Anno Domini; A</td>
</tr>
<tr>
<td><code>u</code></td>
<td>year</td>
<td>year</td>
<td>2004; 04</td>
</tr>
<tr>
<td><code>y</code></td>
<td>year-of-era</td>
<td>year</td>
<td>2004; 04</td>
</tr>
<tr>
<td><code>D</code></td>
<td>day-of-year</td>
<td>number</td>
<td>189</td>
</tr>
<tr>
<td><code>M</code>/<code>L</code></td>
<td>month-of-year</td>
<td>number/text</td>
<td>7; 07; Jul; July; J</td>
</tr>
<tr>
<td><code>d</code></td>
<td>day-of-month</td>
<td>number</td>
<td>10</td>
</tr>
<tr>
<td><code>Q</code>/<code>q</code></td>
<td>quarter-of-year</td>
<td>number/text</td>
<td>3; 03; Q3; 3rd quarter</td>
</tr>
<tr>
<td><code>Y</code></td>
<td>week-based-year</td>
<td>year</td>
<td>1996; 96</td>
</tr>
<tr>
<td><code>w</code></td>
<td>week-of-week-based-year</td>
<td>number</td>
<td>27</td>
</tr>
<tr>
<td><code>W</code></td>
<td>week-of-month</td>
<td>number</td>
<td>4</td>
</tr>
<tr>
<td><code>E</code></td>
<td>day-of-week</td>
<td>text</td>
<td>Tue; Tuesday; T</td>
</tr>
<tr>
<td><code>e</code>/<code>c</code></td>
<td>localized day-of-week</td>
<td>number/text</td>
<td>2; 02; Tue; Tuesday; T</td>
</tr>
<tr>
<td><code>F</code></td>
<td>week-of-month</td>
<td>number</td>
<td>3</td>
</tr>
<tr>
<td><code>a</code></td>
<td>am-pm-of-day</td>
<td>text</td>
<td>PM</td>
</tr>
<tr>
<td><code>h</code></td>
<td>clock-hour-of-am-pm (1-12)</td>
<td>number</td>
<td>12</td>
</tr>
<tr>
<td><code>K</code></td>
<td>hour-of-am-pm (0-11)</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td><code>k</code></td>
<td>clock-hour-of-am-pm (1-24)</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td><code>H</code></td>
<td>hour-of-day (0-23)</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td><code>m</code></td>
<td>minute-of-hour</td>
<td>number</td>
<td>30</td>
</tr>
<tr>
<td><code>s</code></td>
<td>second-of-minute</td>
<td>number</td>
<td>55</td>
</tr>
<tr>
<td><code>S</code></td>
<td>fraction-of-second</td>
<td>fraction</td>
<td>978</td>
</tr>
<tr>
<td><code>A</code></td>
<td>milli-of-day</td>
<td>number</td>
<td>1234</td>
</tr>
<tr>
<td><code>n</code></td>
<td>nano-of-second</td>
<td>number</td>
<td>987654321</td>
</tr>
<tr>
<td><code>N</code></td>
<td>nano-of-day</td>
<td>number</td>
<td>1234000000</td>
</tr>
<tr>
<td><code>V</code></td>
<td>time-zone ID</td>
<td>zone-id</td>
<td>America/Los_Angeles; Z; -08:30</td>
</tr>
<tr>
<td><code>z</code></td>
<td>time-zone name</td>
<td>zone-name</td>
<td>Pacific Standard Time; PST</td>
</tr>
<tr>
<td><code>O</code></td>
<td>localized zone-offset</td>
<td>offset-O</td>
<td>GMT+8; GMT+08:00; UTC-08:00;</td>
</tr>
<tr>
<td><code>X</code></td>
<td>zone-offset 'Z' for zero</td>
<td>offset-X</td>
<td>Z; -08; -0830; -08:30; -083015; -08:30:15;</td>
</tr>
<tr>
<td><code>x</code></td>
<td>zone-offset</td>
<td>offset-x</td>
<td>+0000; -08; -0830; -08:30; -083015; -08:30:15;</td>
</tr>
<tr>
<td><code>Z</code></td>
<td>zone-offset</td>
<td>offset-Z</td>
<td>+0000; -0800; -08:00;</td>
</tr>
</tbody>
</table>
</div>
<p>Do note that it has several <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#predefined"" rel=""noreferrer"">predefined formatters</a> for the more popular patterns. So instead of e.g. <code>DateTimeFormatter.ofPattern(&quot;EEE, d MMM yyyy HH:mm:ss Z&quot;, Locale.ENGLISH);</code>, you could use <code>DateTimeFormatter.RFC_1123_DATE_TIME</code>. This is possible because they are, on the contrary to <code>SimpleDateFormat</code>, thread safe. You could thus also define your own, if necessary.</p>
<p>For a particular input string format, you don't need to use an explicit <code>DateTimeFormatter</code>: a standard <a href=""https://en.wikipedia.org/wiki/ISO_8601"" rel=""noreferrer"">ISO 8601</a> date, like 2016-09-26T17:44:57Z, can be parsed directly with <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/LocalDateTime.html#parse(java.lang.CharSequence)"" rel=""noreferrer""><code>LocalDateTime#parse(text)</code></a> as it already uses the <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME"" rel=""noreferrer""><code>ISO_LOCAL_DATE_TIME</code></a> formatter. Similarly, <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/LocalDate.html#parse(java.lang.CharSequence)"" rel=""noreferrer""><code>LocalDate#parse(text)</code></a> parses an ISO date without the time component (see <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE"" rel=""noreferrer""><code>ISO_LOCAL_DATE</code></a>), and <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/ZonedDateTime.html#parse(java.lang.CharSequence)"" rel=""noreferrer""><code>ZonedDateTime#parse(text)</code></a> parses an ISO date with an offset and time zone added (see <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_ZONED_DATE_TIME"" rel=""noreferrer""><code>ISO_ZONED_DATE_TIME</code></a>).</p>
<hr />
<h2>Pre-Java 8</h2>
<p>In case you're not on Java 8 yet, or are forced to use <code>java.util.Date</code>, then format the date using <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/text/SimpleDateFormat.html"" rel=""noreferrer""><code>SimpleDateFormat</code></a> using a format pattern matching the input string.</p>

<pre><code>String string = &quot;January 2, 2010&quot;;
DateFormat format = new SimpleDateFormat(&quot;MMMM d, yyyy&quot;, Locale.ENGLISH);
Date date = format.parse(string);
System.out.println(date); // Sat Jan 02 00:00:00 GMT 2010
</code></pre>
<p>Note the importance of the explicit <code>Locale</code> argument. If you omit it, then it will use the <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Locale.html#getDefault()"" rel=""noreferrer"">default locale</a> which is not necessarily English as used in the month name of the input string. If the locale doesn't match with the input string, then you would confusingly get a <code>java.text.ParseException</code> even though when the format pattern seems valid.</p>
<p>Here's an extract of relevance from <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/text/SimpleDateFormat.html"" rel=""noreferrer"">the javadoc</a>, listing all available format patterns:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Letter</th>
<th>Date or Time Component</th>
<th>Presentation</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>G</code></td>
<td>Era designator</td>
<td>Text</td>
<td>AD</td>
</tr>
<tr>
<td><code>y</code></td>
<td>Year</td>
<td>Year</td>
<td>1996; 96</td>
</tr>
<tr>
<td><code>Y</code></td>
<td>Week year</td>
<td>Year</td>
<td>2009; 09</td>
</tr>
<tr>
<td><code>M</code>/<code>L</code></td>
<td>Month in year</td>
<td>Month</td>
<td>July; Jul; 07</td>
</tr>
<tr>
<td><code>w</code></td>
<td>Week in year</td>
<td>Number</td>
<td>27</td>
</tr>
<tr>
<td><code>W</code></td>
<td>Week in month</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td><code>D</code></td>
<td>Day in year</td>
<td>Number</td>
<td>189</td>
</tr>
<tr>
<td><code>d</code></td>
<td>Day in month</td>
<td>Number</td>
<td>10</td>
</tr>
<tr>
<td><code>F</code></td>
<td>Day of week in month</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td><code>E</code></td>
<td>Day in week</td>
<td>Text</td>
<td>Tuesday; Tue</td>
</tr>
<tr>
<td><code>u</code></td>
<td>Day number of week</td>
<td>Number</td>
<td>1</td>
</tr>
<tr>
<td><code>a</code></td>
<td>Am/pm marker</td>
<td>Text</td>
<td>PM</td>
</tr>
<tr>
<td><code>H</code></td>
<td>Hour in day (0-23)</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td><code>k</code></td>
<td>Hour in day (1-24)</td>
<td>Number</td>
<td>24</td>
</tr>
<tr>
<td><code>K</code></td>
<td>Hour in am/pm (0-11)</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td><code>h</code></td>
<td>Hour in am/pm (1-12)</td>
<td>Number</td>
<td>12</td>
</tr>
<tr>
<td><code>m</code></td>
<td>Minute in hour</td>
<td>Number</td>
<td>30</td>
</tr>
<tr>
<td><code>s</code></td>
<td>Second in minute</td>
<td>Number</td>
<td>55</td>
</tr>
<tr>
<td><code>S</code></td>
<td>Millisecond</td>
<td>Number</td>
<td>978</td>
</tr>
<tr>
<td><code>z</code></td>
<td>Time zone</td>
<td>General time zone</td>
<td>Pacific Standard Time; PST; GMT-08:00</td>
</tr>
<tr>
<td><code>Z</code></td>
<td>Time zone</td>
<td>RFC 822 time zone</td>
<td>-0800</td>
</tr>
<tr>
<td><code>X</code></td>
<td>Time zone</td>
<td>ISO 8601 time zone</td>
<td>-08; -0800; -08:00</td>
</tr>
</tbody>
</table>
</div>
<p>Note that the patterns are case sensitive and that text based patterns of four characters or more represent the full form; otherwise a short or abbreviated form is used if available. So e.g. <code>MMMMM</code> or more is unnecessary.</p>
<p>Here are some examples of valid <code>SimpleDateFormat</code> patterns to parse a given string to date:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Input string</th>
<th>Pattern</th>
</tr>
</thead>
<tbody>
<tr>
<td>2001.07.04 AD at 12:08:56 PDT</td>
<td><code>yyyy.MM.dd G 'at' HH:mm:ss z</code></td>
</tr>
<tr>
<td>Wed, Jul 4, '01</td>
<td><code>EEE, MMM d, ''yy</code></td>
</tr>
<tr>
<td>12:08 PM</td>
<td><code>h:mm a</code></td>
</tr>
<tr>
<td>12 o'clock PM, Pacific Daylight Time</td>
<td><code>hh 'o''clock' a, zzzz</code></td>
</tr>
<tr>
<td>0:08 PM, PDT</td>
<td><code>K:mm a, z</code></td>
</tr>
<tr>
<td>02001.July.04 AD 12:08 PM</td>
<td><code>yyyyy.MMMM.dd GGG hh:mm aaa</code></td>
</tr>
<tr>
<td>Wed, 4 Jul 2001 12:08:56 -0700</td>
<td><code>EEE, d MMM yyyy HH:mm:ss Z</code></td>
</tr>
<tr>
<td>010704120856-0700</td>
<td><code>yyMMddHHmmssZ</code></td>
</tr>
<tr>
<td>2001-07-04T12:08:56.235-0700</td>
<td><code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code></td>
</tr>
<tr>
<td>2001-07-04T12:08:56.235-07:00</td>
<td><code>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</code></td>
</tr>
<tr>
<td>2001-W27-3</td>
<td><code>YYYY-'W'ww-u</code></td>
</tr>
</tbody>
</table>
</div>
<p>An important note is that <code>SimpleDateFormat</code> is <strong>not</strong> thread safe. In other words, you should never declare and assign it as a static or instance variable and then reuse it from different methods/threads. You should always create it brand new within the method local scope.</p>
"
153785,"<p>Use <a href=""http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html#setRoundingMode(java.math.RoundingMode)"" rel=""noreferrer""><code>setRoundingMode</code></a>, set the <a href=""http://docs.oracle.com/javase/8/docs/api/java/math/RoundingMode.html"" rel=""noreferrer""><code>RoundingMode</code></a> explicitly to handle your issue with the half-even round, then use the format pattern for your required output.</p>

<p>Example:</p>

<pre><code>DecimalFormat df = new DecimalFormat(""#.####"");
df.setRoundingMode(RoundingMode.CEILING);
for (Number n : Arrays.asList(12, 123.12345, 0.23, 0.1, 2341234.212431324)) {
    Double d = n.doubleValue();
    System.out.println(df.format(d));
}
</code></pre>

<p>gives the output:</p>

<pre><code>12
123.1235
0.23
0.1
2341234.2125
</code></pre>

<hr>

<p><strong>EDIT</strong>: The original answer does not address the accuracy of the double values. That is fine if you don't care much whether it rounds up or down. But if you want accurate rounding, then you need to take the expected accuracy of the values into account. Floating point values have a binary representation internally. That means that a value like 2.7735 does not actually have that exact value internally. It can be slightly larger or slightly smaller. If the internal value is slightly smaller, then it will not round up to 2.7740. To remedy that situation, you need to be aware of the accuracy of the values that you are working with, and add or subtract that value before rounding. For example, when you know that your values are accurate up to 6 digits, then to round half-way values up, add that accuracy to the value:</p>

<pre><code>Double d = n.doubleValue() + 1e-6;
</code></pre>

<p>To round down, subtract the accuracy. </p>
"
574650,"
<pre class=""lang-xml prettyprint-override""><code>&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;archive&gt;
          &lt;manifest&gt;
            &lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;
          &lt;/manifest&gt;
        &lt;/archive&gt;
        &lt;descriptorRefs&gt;
          &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
        &lt;/descriptorRefs&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>and you run it with</p>
<pre class=""lang-xml prettyprint-override""><code>mvn clean compile assembly:single
</code></pre>
<p><em>Compile goal should be added before assembly:single or otherwise the code on your own project is not included.</em></p>
<p>See more details in comments.</p>
<hr />
<p>Commonly this goal is tied to a build phase to execute automatically. This ensures the JAR is built when executing <code>mvn install</code> or performing a deployment/release.</p>

<pre class=""lang-xml prettyprint-override""><code>&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;archive&gt;
          &lt;manifest&gt;
            &lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;
          &lt;/manifest&gt;
        &lt;/archive&gt;
        &lt;descriptorRefs&gt;
          &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
        &lt;/descriptorRefs&gt;
      &lt;/configuration&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;make-assembly&lt;/id&gt; &lt;!-- this is used for inheritance merges --&gt;
          &lt;phase&gt;package&lt;/phase&gt; &lt;!-- bind to the packaging phase --&gt;
          &lt;goals&gt;
            &lt;goal&gt;single&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
"
2793153,"<p><sup><em>First a disclaimer beforehand: the posted code snippets are all basic examples. You'll need to handle trivial <code>IOException</code>s and <code>RuntimeException</code>s like <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code> and consorts yourself.</em></sup></p>
<p><sup><em>In case you're developing for Android instead of Java, note also that since introduction of API level 28, cleartext HTTP requests are <a href=""https://developer.android.com/about/versions/pie/android-9.0-changes-28#tls-enabled"" rel=""noreferrer"">disabled by default</a>. You are encouraged to use <code>HttpsURLConnection</code>, but if it is really necessary, cleartext can be enabled in the Application Manifest.</em></sup></p>
<hr />
<h3>Preparing</h3>
<p>We first need to know at least the URL and the charset. The parameters are optional and depend on the functional requirements.</p>
<pre><code>String url = &quot;http://example.com&quot;;
String charset = &quot;UTF-8&quot;;  // Or in Java 7 and later, use the constant: java.nio.charset.StandardCharsets.UTF_8.name()
String param1 = &quot;value1&quot;;
String param2 = &quot;value2&quot;;
// ...

String query = String.format(&quot;param1=%s&amp;param2=%s&quot;,
    URLEncoder.encode(param1, charset),
    URLEncoder.encode(param2, charset));
</code></pre>
<p>The query parameters must be in <code>name=value</code> format and be concatenated by <code>&amp;</code>. You would normally also <a href=""http://en.wikipedia.org/wiki/Percent-encoding"" rel=""noreferrer"">URL-encode</a> the query parameters with the specified charset using <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html#encode-java.lang.String-java.lang.String-"" rel=""noreferrer""><code>URLEncoder#encode()</code></a>.</p>
<p><sup>The <code>String#format()</code> is just for convenience. I prefer it when I would need the String concatenation operator <code>+</code> more than twice.</sup></p>
<hr />
<h3>Firing an <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3"" rel=""noreferrer"">HTTP GET</a> request with (optionally) query parameters</h3>
<p>It's a trivial task. It's the default request method.</p>
<pre><code>URLConnection connection = new URL(url + &quot;?&quot; + query).openConnection();
connection.setRequestProperty(&quot;Accept-Charset&quot;, charset);
InputStream response = connection.getInputStream();
// ...
</code></pre>
<p>Any query string should be concatenated to the URL using <code>?</code>. The <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2"" rel=""noreferrer""><code>Accept-Charset</code></a> header may hint the server what encoding the parameters are in. If you don't send any query string, then you can leave the <code>Accept-Charset</code> header away. If you don't need to set any headers, then you can even use the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URL.html#openStream%28%29"" rel=""noreferrer""><code>URL#openStream()</code></a> shortcut method.</p>
<pre><code>InputStream response = new URL(url).openStream();
// ...
</code></pre>
<p>Either way, if the other side is an <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>HttpServlet</code></a>, then its <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29"" rel=""noreferrer""><code>doGet()</code></a> method will be called and the parameters will be available by <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29"" rel=""noreferrer""><code>HttpServletRequest#getParameter()</code></a>.</p>
<p>For testing purposes, you can print the response body to <a href=""https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29"" rel=""noreferrer"">standard output</a> as below:</p>
<pre><code>try (Scanner scanner = new Scanner(response)) {
    String responseBody = scanner.useDelimiter(&quot;\\A&quot;).next();
    System.out.println(responseBody);
}
</code></pre>
<hr />
<h3>Firing an <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5"" rel=""noreferrer"">HTTP POST</a> request with query parameters</h3>
<p>Setting the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29"" rel=""noreferrer""><code>URLConnection#setDoOutput()</code></a> to <code>true</code> implicitly sets the request method to POST. The standard HTTP POST as web forms do is of type <code>application/x-www-form-urlencoded</code> wherein the query string is written to the request body.</p>
<pre><code>URLConnection connection = new URL(url).openConnection();
connection.setDoOutput(true); // Triggers POST.
connection.setRequestProperty(&quot;Accept-Charset&quot;, charset);
connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded;charset=&quot; + charset);

try (OutputStream output = connection.getOutputStream()) {
    output.write(query.getBytes(charset));
}

InputStream response = connection.getInputStream();
// ...
</code></pre>
<p>Note: whenever you'd like to submit a HTML form programmatically, don't forget to take the <code>name=value</code> pairs of any <code>&lt;input type=&quot;hidden&quot;&gt;</code> elements into the query string and of course also the <code>name=value</code> pair of the <code>&lt;input type=&quot;submit&quot;&gt;</code> element which you'd like to &quot;press&quot; programmatically (because that's usually been used in the server side to distinguish if a button was pressed and if so, which one).</p>
<p>You can also cast the obtained <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html"" rel=""noreferrer""><code>URLConnection</code></a> to <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html"" rel=""noreferrer""><code>HttpURLConnection</code></a> and use its <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29"" rel=""noreferrer""><code>HttpURLConnection#setRequestMethod()</code></a> instead. But if you're trying to use the connection for output you still need to set <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29"" rel=""noreferrer""><code>URLConnection#setDoOutput()</code></a> to <code>true</code>.</p>
<pre><code>HttpURLConnection httpConnection = (HttpURLConnection) new URL(url).openConnection();
httpConnection.setRequestMethod(&quot;POST&quot;);
// ...
</code></pre>
<p>Either way, if the other side is an <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>HttpServlet</code></a>, then its <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29"" rel=""noreferrer""><code>doPost()</code></a> method will be called and the parameters will be available by <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29"" rel=""noreferrer""><code>HttpServletRequest#getParameter()</code></a>.</p>
<hr />
<h3>Actually firing the HTTP request</h3>
<p>You can fire the HTTP request explicitly with <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#connect%28%29"" rel=""noreferrer""><code>URLConnection#connect()</code></a>, but the request will automatically be fired on demand when you want to get any information about the HTTP response, such as the response body using <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#getInputStream%28%29"" rel=""noreferrer""><code>URLConnection#getInputStream()</code></a> and so on. The above examples does exactly that, so the <code>connect()</code> call is in fact superfluous.</p>
<hr />
<h3>Gathering HTTP response information</h3>
<ol>
<li><a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"" rel=""noreferrer"">HTTP response status</a>:</li>
</ol>
<p>You need an <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html"" rel=""noreferrer""><code>HttpURLConnection</code></a> here. Cast it first if necessary.</p>
<pre><code>    int status = httpConnection.getResponseCode();
</code></pre>
<ol start=""2"">
<li><p><a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"" rel=""noreferrer"">HTTP response headers</a>:</p>
<pre><code> for (Entry&lt;String, List&lt;String&gt;&gt; header : connection.getHeaderFields().entrySet()) {
     System.out.println(header.getKey() + &quot;=&quot; + header.getValue());
 }
</code></pre>
</li>
<li><p><a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17"" rel=""noreferrer"">HTTP response encoding</a>:</p>
</li>
</ol>
<p>When the <code>Content-Type</code> contains a <code>charset</code> parameter, then the response body is likely text based and we'd like to process the response body with the server-side specified character encoding then.</p>
<pre><code>    String contentType = connection.getHeaderField(&quot;Content-Type&quot;);
    String charset = null;

    for (String param : contentType.replace(&quot; &quot;, &quot;&quot;).split(&quot;;&quot;)) {
        if (param.startsWith(&quot;charset=&quot;)) {
            charset = param.split(&quot;=&quot;, 2)[1];
            break;
        }
    }

    if (charset != null) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(response, charset))) {
            for (String line; (line = reader.readLine()) != null;) {
                // ... System.out.println(line)?
            }
        }
    } else {
        // It's likely binary content, use InputStream/OutputStream.
    }
</code></pre>
<hr />
<h3>Maintaining the session</h3>
<p>The server side session is usually backed by a cookie. Some web forms require that you're logged in and/or are tracked by a session. You can use the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html"" rel=""noreferrer""><code>CookieHandler</code></a> API to maintain cookies. You need to prepare a <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html"" rel=""noreferrer""><code>CookieManager</code></a> with a <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html"" rel=""noreferrer""><code>CookiePolicy</code></a> of <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL"" rel=""noreferrer""><code>ACCEPT_ALL</code></a> before sending all HTTP requests.</p>
<pre><code>// First set the default cookie manager.
CookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));

// All the following subsequent URLConnections will use the same cookie manager.
URLConnection connection = new URL(url).openConnection();
// ...

connection = new URL(url).openConnection();
// ...

connection = new URL(url).openConnection();
// ...
</code></pre>
<p>Note that this is known to not always work properly in all circumstances. If it fails for you, then best is to manually gather and set the cookie headers. You basically need to grab all <code>Set-Cookie</code> headers from the response of the login or the first <code>GET</code> request and then pass this through the subsequent requests.</p>
<pre><code>// Gather all cookies on the first request.
URLConnection connection = new URL(url).openConnection();
List&lt;String&gt; cookies = connection.getHeaderFields().get(&quot;Set-Cookie&quot;);
// ...

// Then use the same cookies on all subsequent requests.
connection = new URL(url).openConnection();
for (String cookie : cookies) {
    connection.addRequestProperty(&quot;Cookie&quot;, cookie.split(&quot;;&quot;, 2)[0]);
}
// ...
</code></pre>
<p>The <code>split(&quot;;&quot;, 2)[0]</code> is there to get rid of cookie attributes which are irrelevant for the server side like <code>expires</code>, <code>path</code>, etc. Alternatively, you could also use <code>cookie.substring(0, cookie.indexOf(';'))</code> instead of <code>split()</code>.</p>
<hr />
<h3>Streaming mode</h3>
<p>The <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html"" rel=""noreferrer""><code>HttpURLConnection</code></a> will by default buffer the <em>entire</em> request body before actually sending it, regardless of whether you've set a fixed content length yourself using <code>connection.setRequestProperty(&quot;Content-Length&quot;, contentLength);</code>. This may cause <code>OutOfMemoryException</code>s whenever you concurrently send large POST requests (e.g. uploading files). To avoid this, you would like to set the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29"" rel=""noreferrer""><code>HttpURLConnection#setFixedLengthStreamingMode()</code></a>.</p>
<pre><code>httpConnection.setFixedLengthStreamingMode(contentLength);
</code></pre>
<p>But if the content length is really not known beforehand, then you can make use of chunked streaming mode by setting the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29"" rel=""noreferrer""><code>HttpURLConnection#setChunkedStreamingMode()</code></a> accordingly. This will set the HTTP <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41"" rel=""noreferrer""><code>Transfer-Encoding</code></a> header to <code>chunked</code> which will force the request body being sent in chunks. The below example will send the body in chunks of 1Â KB.</p>
<pre><code>httpConnection.setChunkedStreamingMode(1024);
</code></pre>
<hr />
<h3>User-Agent</h3>
<p>It can happen that <a href=""https://stackoverflow.com/questions/13670692/403-forbidden-with-java-but-not-web-browser"">a request returns an unexpected response, while it works fine with a real web browser</a>. The server side is probably blocking requests based on the <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43"" rel=""noreferrer""><code>User-Agent</code></a> request header. The <code>URLConnection</code> will by default set it to <code>Java/1.6.0_19</code> where the last part is obviously the JRE version. You can override this as follows:</p>
<pre><code>connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36&quot;); // Do as if you're using Chrome 41 on Windows 7.
</code></pre>
<p>Use the User-Agent string from a <a href=""http://www.useragentstring.com/pages/useragentstring.php"" rel=""noreferrer"">recent browser</a>.</p>
<hr />
<h3>Error handling</h3>
<p>If the HTTP response code is <code>4nn</code> (Client Error) or <code>5nn</code> (Server Error), then you may want to read the <code>HttpURLConnection#getErrorStream()</code> to see if the server has sent any useful error information.</p>
<pre><code>InputStream error = ((HttpURLConnection) connection).getErrorStream();
</code></pre>
<p>If the HTTP response code is -1, then something went wrong with connection and response handling. The <code>HttpURLConnection</code> implementation is in older JREs somewhat buggy with keeping connections alive. You may want to turn it off by setting the <code>http.keepAlive</code> system property to <code>false</code>. You can do this programmatically in the beginning of your application by:</p>
<pre><code>System.setProperty(&quot;http.keepAlive&quot;, &quot;false&quot;);
</code></pre>
<hr />
<h3>Uploading files</h3>
<p>You'd normally use <a href=""http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2"" rel=""noreferrer""><code>multipart/form-data</code></a> encoding for mixed POST content (binary and character data). The encoding is in more detail described in <a href=""http://www.faqs.org/rfcs/rfc2388.html"" rel=""noreferrer"">RFC2388</a>.</p>
<pre><code>String param = &quot;value&quot;;
File textFile = new File(&quot;/path/to/file.txt&quot;);
File binaryFile = new File(&quot;/path/to/file.bin&quot;);
String boundary = Long.toHexString(System.currentTimeMillis()); // Just generate some unique random value.
String CRLF = &quot;\r\n&quot;; // Line separator required by multipart/form-data.
URLConnection connection = new URL(url).openConnection();
connection.setDoOutput(true);
connection.setRequestProperty(&quot;Content-Type&quot;, &quot;multipart/form-data; boundary=&quot; + boundary);

try (
    OutputStream output = connection.getOutputStream();
    PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true);
) {
    // Send normal param.
    writer.append(&quot;--&quot; + boundary).append(CRLF);
    writer.append(&quot;Content-Disposition: form-data; name=\&quot;param\&quot;&quot;).append(CRLF);
    writer.append(&quot;Content-Type: text/plain; charset=&quot; + charset).append(CRLF);
    writer.append(CRLF).append(param).append(CRLF).flush();

    // Send text file.
    writer.append(&quot;--&quot; + boundary).append(CRLF);
    writer.append(&quot;Content-Disposition: form-data; name=\&quot;textFile\&quot;; filename=\&quot;&quot; + textFile.getName() + &quot;\&quot;&quot;).append(CRLF);
    writer.append(&quot;Content-Type: text/plain; charset=&quot; + charset).append(CRLF); // Text file itself must be saved in this charset!
    writer.append(CRLF).flush();
    Files.copy(textFile.toPath(), output);
    output.flush(); // Important before continuing with writer!
    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.

    // Send binary file.
    writer.append(&quot;--&quot; + boundary).append(CRLF);
    writer.append(&quot;Content-Disposition: form-data; name=\&quot;binaryFile\&quot;; filename=\&quot;&quot; + binaryFile.getName() + &quot;\&quot;&quot;).append(CRLF);
    writer.append(&quot;Content-Type: &quot; + URLConnection.guessContentTypeFromName(binaryFile.getName())).append(CRLF);
    writer.append(&quot;Content-Transfer-Encoding: binary&quot;).append(CRLF);
    writer.append(CRLF).flush();
    Files.copy(binaryFile.toPath(), output);
    output.flush(); // Important before continuing with writer!
    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.

    // End of multipart/form-data.
    writer.append(&quot;--&quot; + boundary + &quot;--&quot;).append(CRLF).flush();
}
</code></pre>
<p>If the other side is an <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>HttpServlet</code></a>, then its <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29"" rel=""noreferrer""><code>doPost()</code></a> method will be called and the parts will be available by <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29"" rel=""noreferrer""><code>HttpServletRequest#getPart()</code></a> (note, thus <strong>not</strong> <code>getParameter()</code> and so on!). The <code>getPart()</code> method is however relatively new, it's introduced in Servlet 3.0 (Glassfish 3, Tomcat 7, etc.). Prior to Servlet 3.0, your best choice is using <a href=""http://commons.apache.org/fileupload"" rel=""noreferrer"">Apache Commons FileUpload</a> to parse a <code>multipart/form-data</code> request. Also see <a href=""https://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824"">this answer</a> for examples of both the FileUpload and the Servelt 3.0 approaches.</p>
<hr />
<h3>Dealing with untrusted or misconfigured HTTPS sites</h3>
<p><sup><em>In case you're developing for Android instead of Java, <strong>be careful</strong>: the workaround below may save your day if you don't have correct certificates deployed during development. But you should not use it for production. These days (April 2021) Google will not allow your app be distributed on Play Store if they detect insecure hostname verifier, see <a href=""https://support.google.com/faqs/answer/7188426."" rel=""noreferrer"">https://support.google.com/faqs/answer/7188426.</a></em></sup></p>
<p>Sometimes you need to connect an HTTPS URL, perhaps because you're writing a web scraper. In that case, you may likely face a <code>javax.net.ssl.SSLException: Not trusted server certificate</code> on some HTTPS sites who doesn't keep their SSL certificates up to date, or a <code>java.security.cert.CertificateException: No subject alternative DNS name matching [hostname] found</code> or <code>javax.net.ssl.SSLProtocolException: handshake alert: unrecognized_name</code> on some misconfigured HTTPS sites.</p>
<p>The following one-time-run <code>static</code> initializer in your web scraper class should make <code>HttpsURLConnection</code> more lenient as to those HTTPS sites and thus not throw those exceptions anymore.</p>
<pre><code>static {
    TrustManager[] trustAllCertificates = new TrustManager[] {
        new X509TrustManager() {
            @Override
            public X509Certificate[] getAcceptedIssuers() {
                return null; // Not relevant.
            }
            @Override
            public void checkClientTrusted(X509Certificate[] certs, String authType) {
                // Do nothing. Just allow them all.
            }
            @Override
            public void checkServerTrusted(X509Certificate[] certs, String authType) {
                // Do nothing. Just allow them all.
            }
        }
    };

    HostnameVerifier trustAllHostnames = new HostnameVerifier() {
        @Override
        public boolean verify(String hostname, SSLSession session) {
            return true; // Just allow them all.
        }
    };

    try {
        System.setProperty(&quot;jsse.enableSNIExtension&quot;, &quot;false&quot;);
        SSLContext sc = SSLContext.getInstance(&quot;SSL&quot;);
        sc.init(null, trustAllCertificates, new SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        HttpsURLConnection.setDefaultHostnameVerifier(trustAllHostnames);
    }
    catch (GeneralSecurityException e) {
        throw new ExceptionInInitializerError(e);
    }
}
</code></pre>
<hr />
<h3>Last words</h3>
<p>The <a href=""http://hc.apache.org/httpcomponents-client-ga/"" rel=""noreferrer"">Apache HttpComponents HttpClient</a> is <em>much</em> more convenient in this all :)</p>
<ul>
<li><a href=""http://hc.apache.org/httpcomponents-client-ga/tutorial/html/"" rel=""noreferrer"">HttpClient Tutorial</a></li>
<li><a href=""http://hc.apache.org/httpcomponents-client-ga/examples.html"" rel=""noreferrer"">HttpClient Examples</a></li>
</ul>
<hr />
<h3>Parsing and extracting HTML</h3>
<p>If all you want is parsing and extracting data from HTML, then better use a HTML parser like <a href=""http://jsoup.org"" rel=""noreferrer"">Jsoup</a>.</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/3152138/what-are-the-pros-and-cons-of-the-leading-java-html-parsers/3154281#3154281"">What are the pros/cons of leading HTML parsers in Java</a></li>
<li><a href=""https://stackoverflow.com/questions/2835505/how-to-scan-a-website-or-page-for-info-and-bring-it-into-my-program/2835555#2835555"">How to scan and extract a webpage in Java</a></li>
</ul>
"
223929,"<p><a href=""https://docs.oracle.com/javase/9/docs/api/java/util/Iterator.html#remove--"" rel=""noreferrer""><code>Iterator.remove()</code></a> is safe, you can use it like this:</p>

<pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();

// This is a clever way to create the iterator and call iterator.hasNext() like
// you would do in a while-loop. It would be the same as doing:
//     Iterator&lt;String&gt; iterator = list.iterator();
//     while (iterator.hasNext()) {
for (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext();) {
    String string = iterator.next();
    if (string.isEmpty()) {
        // Remove the current element from the iterator and the list.
        iterator.remove();
    }
}
</code></pre>

<p>Note that <a href=""https://docs.oracle.com/javase/9/docs/api/java/util/Iterator.html#remove--"" rel=""noreferrer""><code>Iterator.remove()</code></a> is the only safe way to modify a collection during iteration; the behavior is unspecified if the underlying collection is modified <strong>in any other way</strong> while the iteration is in progress.</p>

<p>Source:<a href=""http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html"" rel=""noreferrer""> docs.oracle > The Collection Interface</a></p>

<hr>

<p>And similarly, if you have a <code>ListIterator</code> and want to <em>add</em> items, you can use <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html#add-E-"" rel=""noreferrer""><code>ListIterator#add</code></a>, for the same reason you can use <code>Iterator#remove</code>&nbsp;&mdash; it's designed to allow it.</p>

<hr>

<p>In your case you tried to remove from a list, but the same restriction applies if trying to <code>put</code> into a <code>Map</code> while iterating its content. </p>
"
1568230,"<p><strong>There are actually <em>many good reasons</em> to consider using accessors</strong> rather than directly exposing fields of a class - beyond just the argument of encapsulation and making future changes easier. </p>

<p><em>Here are the some of the reasons I am aware of:</em></p>

<ul>
<li>Encapsulation of behavior associated with getting or setting the property - this allows additional functionality (like validation) to be added more easily later.</li>
<li>Hiding the internal representation of the property while exposing a property using an alternative representation.</li>
<li>Insulating your public interface from change - allowing the public interface to remain constant while the implementation changes without affecting existing consumers.</li>
<li>Controlling the lifetime and memory management (disposal) semantics of the property - particularly important in non-managed memory environments (like C++ or Objective-C).</li>
<li>Providing a debugging interception point for when a property changes at runtime - debugging when and where a property changed to a particular value can be quite difficult without this in some languages.</li>
<li>Improved interoperability with libraries that are designed to operate against property getter/setters - Mocking, Serialization, and WPF come to mind.</li>
<li>Allowing inheritors to change the semantics of how the property behaves and is exposed by overriding the getter/setter methods.</li>
<li>Allowing the getter/setter to be passed around as lambda expressions rather than values.</li>
<li>Getters and setters can allow different access levels - for example the get may be public, but the set could be protected.</li>
</ul>
"
215505,"<p><a href=""http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"" rel=""noreferrer"">The official tutorial</a> may be of some use to you.</p>
<hr />
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th></th>
<th>Class</th>
<th>Package</th>
<th>Subclass<br/>(same pkg)</th>
<th>Subclass<br/>(diff pkg)</th>
<th>World</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public</code></td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
</tr>
<tr>
<td><code>protected</code></td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td><em>no modifier</em></td>
<td>+</td>
<td>+</td>
<td>+</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>private</code></td>
<td>+</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>+ : accessible<br/>
blank : not accessible</p>
"
47853774,"<p>This is a classic issue with asynchronous web APIs. You cannot return something now that hasn't been loaded yet. In other words, you cannot simply create a global variable and use it outside <code>onDataChange()</code> method because it will always be <code>null</code>. This is happening because <code>onDataChange()</code> method is called asynchronous. Depending on your connection speed and the state, it may take from a few hundred milliseconds to a few seconds before that data is available.</p>
<p>But not only Firebase Realtime Database loads data asynchronously, but almost all modern web APIs also do, since it may take some time. So instead of waiting for the data (which can lead to unresponsive application dialogs for your users), your main application code continues while the data is loaded on a secondary thread. Then when the data is available, your onDataChange() method is called, and can use the data. In other words, by the time <code>onDataChange()</code> method is called your data is not loaded yet.</p>
<p>Let's take an example, by placing a few log statements in the code, to see more clearly what's going on.</p>
<pre><code>private String getUserName(String uid) {
    Log.d(&quot;TAG&quot;, &quot;Before attaching the listener!&quot;);
    databaseReference.child(String.format(&quot;users/%s/name&quot;, uid)).addListenerForSingleValueEvent(new ValueEventListener() {
        @Override
        public void onDataChange(DataSnapshot dataSnapshot) {
            // How to return this value?
            dataSnapshot.getValue(String.class);
            Log.d(&quot;TAG&quot;, &quot;Inside onDataChange() method!&quot;);
        }

        @Override
        public void onCancelled(DatabaseError databaseError) {}
    });
    Log.d(&quot;TAG&quot;, &quot;After attaching the listener!&quot;);
}
</code></pre>
<p>If we run this code will, the output will be:</p>
<blockquote>
<p>Before attaching the listener!</p>
<p>After attaching the listener!</p>
<p>Inside onDataChange() method!</p>
</blockquote>
<p>This is probably not what you expected, but it explains precisely why your data is <code>null</code> when returning it.</p>
<p>The initial response for most developers is to try and &quot;fix&quot; this <code>asynchronous behavior</code>, which I personally recommend against this. The web is asynchronous, and the sooner you accept that the sooner you can learn how to become productive with modern web APIs.</p>
<p>I've found it easiest to reframe problems for this asynchronous paradigm. Instead of saying &quot;First get the data, then log it&quot;, I frame the problem as &quot;Start to get data. When the data is loaded, log it&quot;. This means that any code that requires the data must be inside <code>onDataChange()</code> method or called from inside there, like this:</p>
<pre><code>databaseReference.child(String.format(&quot;users/%s/name&quot;, uid)).addListenerForSingleValueEvent(new ValueEventListener() {
    @Override
    public void onDataChange(DataSnapshot dataSnapshot) {
        // How to return this value?
        if(dataSnapshot != null) {
            System.out.println(dataSnapshot.getValue(String.class));
        }
    }

    @Override
    public void onCancelled(DatabaseError databaseError) {}
});
</code></pre>
<p>If you want to use that outside, there is another approach. You need to create your own callback to wait for Firebase to return you the data. To achieve this, first, you need to create an <code>interface</code> like this:</p>
<pre><code>public interface MyCallback {
    void onCallback(String value);
}
</code></pre>
<p>Then you need to create a method that is actually getting the data from the database. This method should look like this:</p>
<pre><code>public void readData(MyCallback myCallback) {
    databaseReference.child(String.format(&quot;users/%s/name&quot;, uid)).addListenerForSingleValueEvent(new ValueEventListener() {
        @Override
        public void onDataChange(DataSnapshot dataSnapshot) {
            String value = dataSnapshot.getValue(String.class);
            myCallback.onCallback(value);
        }

        @Override
        public void onCancelled(DatabaseError databaseError) {}
    });
}
</code></pre>
<p>In the end just simply call <code>readData()</code> method and pass an instance of the <code>MyCallback</code> interface as an argument wherever you need it like this:</p>
<pre><code>readData(new MyCallback() {
    @Override
    public void onCallback(String value) {
        Log.d(&quot;TAG&quot;, value);
    }
});
</code></pre>
<p>This is the only way in which you can use that value outside <code>onDataChange()</code> method. For more information, you can take also a look at this <strong><a href=""https://www.youtube.com/watch?v=OvDZVV5CbQg"" rel=""noreferrer"">video</a></strong>.</p>
<p><strong>Edit:</strong> Feb 26th, 2021</p>
<p>For more info, you can check the following article:</p>
<ul>
<li><a href=""https://medium.com/firebase-tips-tricks/how-to-read-data-from-firebase-realtime-database-using-get-269ef3e179c5"" rel=""noreferrer"">How to read data from Firebase Realtime Database using get()?</a></li>
</ul>
<p>And the following video:</p>
<ul>
<li><a href=""https://youtu.be/mOB40wowo6Y"" rel=""noreferrer"">https://youtu.be/mOB40wowo6Y</a></li>
</ul>
"
4685468,"<p>The two operands (1 and 3) are integers, therefore integer arithmetic (division here) is used. Declaring the result variable as double just causes an implicit conversion to occur <em>after division</em>.</p>

<p>Integer division of course returns the true result of division rounded towards zero. The result of <code>0.333...</code> is thus rounded down to 0 here. (Note that the processor doesn't actually do any rounding, but you can think of it that way still.)</p>

<p>Also, note that if <em>both</em> operands (numbers) are given as floats; 3.0 and 1.0, or even just the <em>first</em>, then floating-point arithmetic is used, giving you <code>0.333...</code>.</p>
"
6255352,"<p>You're mis-interpreting the information given to you. You should avoid using Swing components with AWT <strong>components</strong>. It's OK to use Swing with the AWT listener structure, layout managers, etc. and in fact it's impossible not to.</p>
"
530289,"<p>I have to ask a question in return: is your <code>GenSet</code> ""checked"" or ""unchecked""?
What does that mean?</p>

<ul>
<li><p><strong>Checked</strong>: <em>strong typing</em>. <code>GenSet</code> knows explicitly what type of objects it contains (i.e. its constructor was explicitly called with a <code>Class&lt;E&gt;</code> argument, and methods will throw an exception when they are passed arguments that are not of type <code>E</code>. See <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29"" rel=""noreferrer""><code>Collections.checkedCollection</code></a>.</p>

<p>-> in that case, you should write:</p>

<pre><code>public class GenSet&lt;E&gt; {

    private E[] a;

    public GenSet(Class&lt;E&gt; c, int s) {
        // Use Array native method to create array
        // of a type only known at run time
        @SuppressWarnings(""unchecked"")
        final E[] a = (E[]) Array.newInstance(c, s);
        this.a = a;
    }

    E get(int i) {
        return a[i];
    }
}
</code></pre></li>
<li><p><strong>Unchecked</strong>: <em>weak typing</em>. No type checking is actually done on any of the objects passed as argument.</p>

<p>-> in that case, you should write</p>

<pre><code>public class GenSet&lt;E&gt; {

    private Object[] a;

    public GenSet(int s) {
        a = new Object[s];
    }

    E get(int i) {
        @SuppressWarnings(""unchecked"")
        final E e = (E) a[i];
        return e;
    }
}
</code></pre>

<p>Note that the component type of the array should be the <a href=""http://docs.oracle.com/javase/tutorial/java/generics/erasure.html"" rel=""noreferrer""><em>erasure</em></a> of the type parameter:</p>

<pre><code>public class GenSet&lt;E extends Foo&gt; { // E has an upper bound of Foo

    private Foo[] a; // E erases to Foo, so use Foo[]

    public GenSet(int s) {
        a = new Foo[s];
    }

    ...
}
</code></pre></li>
</ul>

<p>All of this results from a known, and deliberate, weakness of generics in Java: it was implemented using erasure, so ""generic"" classes don't know what type argument they were created with at run time, and therefore can not provide type-safety unless some explicit mechanism (type-checking) is implemented.</p>
"
3106909,"<h2><code>ServletContext</code></h2>
<p>When the servlet container (like <a href=""http://tomcat.apache.org"" rel=""noreferrer"">Apache Tomcat</a>) starts up, it will deploy and load all its web applications. When a web application is loaded, the servlet container creates the <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html"" rel=""noreferrer""><code>ServletContext</code></a> once and keeps it in the server's memory. The web app's <code>web.xml</code> and all of included <code>web-fragment.xml</code> files is parsed, and each <code>&lt;servlet&gt;</code>, <code>&lt;filter&gt;</code> and <code>&lt;listener&gt;</code> found (or each class annotated with <code>@WebServlet</code>, <code>@WebFilter</code> and <code>@WebListener</code> respectively) will be instantiated once and be kept in the server's memory as well, registred via the <code>ServletContext</code>. For each instantiated filter, its <code>init()</code> method is invoked with a new <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/FilterConfig.html"" rel=""noreferrer""><code>FilterConfig</code></a> argument which in turn contains the involved <code>ServletContext</code>.</p>
<p>When a <code>Servlet</code> has a <code>&lt;servlet&gt;&lt;load-on-startup&gt;</code> or <code>@WebServlet(loadOnStartup)</code> value greater than <code>0</code>, then its <code>init()</code> method is also invoked during startup with a new <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletConfig.html"" rel=""noreferrer""><code>ServletConfig</code></a> argument which in turn contains the involved <code>ServletContext</code>. Those servlets are initialized in the same order specified by that value (<code>1</code> is 1st, <code>2</code> is 2nd, etc). If the same value is specified for more than one servlet, then each of those servlets is loaded in the same order as they appear in the <code>web.xml</code>, <code>web-fragment.xml</code>, or <code>@WebServlet</code> classloading. In the event the &quot;load-on-startup&quot; value is absent, the <code>init()</code> method will be invoked whenever the <a href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_message"" rel=""noreferrer"">HTTP request</a> hits that servlet for the very first time.</p>
<p>When the servlet container is finished with all of the above described initialization steps, then the <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContextListener.html#contextInitialized-javax.servlet.ServletContextEvent-"" rel=""noreferrer""><code>ServletContextListener#contextInitialized()</code></a> will be invoked with a <code>ServletContextEvent</code> argument which in turn contains the involved <code>ServletContext</code>. This will allow the developer the opportunity to programmatically register yet another <code>Servlet</code>, <code>Filter</code> or <code>Listener</code>.</p>
<p>When the servlet container shuts down, it unloads all web applications, invokes the <code>destroy()</code> method of all its initialized servlets and filters, and all <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> instances registered via the <code>ServletContext</code> are trashed. Finally the <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContextListener.html#contextDestroyed-javax.servlet.ServletContextEvent-"" rel=""noreferrer""><code>ServletContextListener#contextDestroyed()</code></a> will be invoked and the <code>ServletContext</code> itself will be trashed.</p>
<h2><code>HttpServletRequest</code> and <code>HttpServletResponse</code></h2>
<p>The servlet container is attached to a web server that listens for HTTP requests on a certain port number (port 8080 is usually used during development and port 80 in production). When a client (e.g. user with a web browser, or <a href=""https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests"">programmatically using <code>URLConnection</code></a>) sends an HTTP request, the servlet container creates new <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletRequest.html"" rel=""noreferrer""><code>HttpServletRequest</code></a> and <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletResponse.html"" rel=""noreferrer""><code>HttpServletResponse</code></a> objects and passes them through any defined <code>Filter</code> in the chain and, eventually, the <code>Servlet</code> instance.</p>
<p>In the case of <a href=""https://stackoverflow.com/tags/servlet-filters/info"">filters</a>, the <code>doFilter()</code> method is invoked. When the servlet container's code calls <code>chain.doFilter(request, response)</code>, the request and response continue on to the next filter, or hit the servlet if there are no remaining filters.</p>
<p>In the case of <a href=""https://stackoverflow.com/tags/servlets/info"">servlets</a>, the <code>service()</code> method is invoked. By default, this method determines which one of the <code>doXxx()</code> methods to invoke based off of  <code>request.getMethod()</code>. If the determined method is absent from the servlet, then an HTTP 405 error is returned in the response.</p>
<p>The request object provides access to all of the information about the HTTP request, such as its <a href=""https://en.wikipedia.org/wiki/URL"" rel=""noreferrer"">URL</a>, <a href=""https://en.wikipedia.org/wiki/List_of_HTTP_header_fields"" rel=""noreferrer"">headers</a>, <a href=""https://en.wikipedia.org/wiki/Query_string"" rel=""noreferrer"">query string</a> and body. The response object provides the ability to control and send the HTTP response the way you want by, for instance, allowing you to set the headers and the body (usually with generated HTML content from a JSP file). When the HTTP response is committed and finished, both the request and response objects are recycled and made available for reuse.</p>
<h2><code>HttpSession</code></h2>
<p>When a client visits the webapp for the first time and/or the <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpSession.html"" rel=""noreferrer""><code>HttpSession</code></a> is obtained for the first time via <code>request.getSession()</code>, the servlet container creates a new <code>HttpSession</code> object, generates a long and unique ID (which you can get by <code>session.getId()</code>), and stores it in the server's memory. The servlet container also sets a <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/Cookie.html"" rel=""noreferrer""><code>Cookie</code></a> in the <code>Set-Cookie</code> header of the HTTP response with <code>JSESSIONID</code> as its name and the unique session ID as its value.</p>
<p>As per the <a href=""http://www.faqs.org/rfcs/rfc2965.html"" rel=""noreferrer"">HTTP cookie specification</a> (a contract any decent web browser and web server must adhere to), the client (the web browser) is required to send this <a href=""https://en.wikipedia.org/wiki/HTTP_cookie"" rel=""noreferrer"">cookie</a> back in subsequent requests in the <code>Cookie</code> header for as long as the cookie is valid (i.e. the unique ID must refer to an unexpired session and the domain and path are correct). Using your browser's built-in HTTP traffic monitor, you can verify that the cookie is valid (press F12 in Chrome / Firefox 23+ / IE9+, and check the <em>Net/Network</em> tab). The servlet container will check the <code>Cookie</code> header of every incoming HTTP request for the presence of the cookie with the name <code>JSESSIONID</code> and use its value (the session ID) to get the associated <code>HttpSession</code> from server's memory.</p>
<p>The <code>HttpSession</code> stays alive until it has been idle (i.e. not used in a request) for more than the timeout value specified in <code>&lt;session-timeout&gt;</code>, a setting in <code>web.xml</code>. The timeout value defaults to 30 minutes. So, when the client doesn't visit the web app for longer than the time specified, the servlet container trashes the <a href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#HTTP_session"" rel=""noreferrer"">session</a>. Every subsequent request, even with the cookie specified, will not have access to the same session anymore; the servlet container will create a new session.</p>
<p>On the client side, the session cookie stays alive for as long as the browser instance is running. So, if the client closes the browser instance (all tabs/windows), then the session is trashed on the client's side. In a new browser instance, the cookie associated with the session wouldn't exist, so it would no longer be sent. This causes an entirely new <code>HttpSession</code> to be created, with an entirely new session cookie being used.</p>
<h2>In a nutshell</h2>
<ul>
<li>The <code>ServletContext</code> lives for as long as the web app lives. It is shared among <em>all</em> requests in <em>all</em> sessions.</li>
<li>The <code>HttpSession</code> lives for as long as the client is interacting with the web app with the same browser instance, and the session hasn't timed out at the server side. It is shared among <em>all</em> requests in the <em>same</em> session.</li>
<li>The <code>HttpServletRequest</code> and <code>HttpServletResponse</code> live from the time the servlet receives an HTTP request from the client, until the complete response (the web page) has arrived. It is <em>not</em> shared elsewhere.</li>
<li>All <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> instances live as long as the web app lives. They are shared among <em>all</em> requests in <em>all</em> sessions.</li>
<li>Any <code>attribute</code> that is defined in <code>ServletContext</code>, <code>HttpServletRequest</code> and <code>HttpSession</code> will live as long as the object in question lives. The object itself represents the &quot;scope&quot; in bean management frameworks such as JSF, CDI, Spring, etc. Those frameworks store their scoped beans as an <code>attribute</code> of its closest matching scope.</li>
</ul>
<h2>Thread Safety</h2>
<p>That said, your major concern is possibly <a href=""https://en.wikipedia.org/wiki/Thread_safety"" rel=""noreferrer""><em>thread safety</em></a>. You should now know that servlets and filters are shared among all requests. That's the nice thing about Java, it's multithreaded and different threads (read: HTTP requests) can make use of the same instance. It would otherwise be too expensive to recreate, <code>init()</code> and <code>destroy()</code> them for every single request.</p>
<p>You should also realize that you should <strong>never</strong> assign any request or session scoped data as an <em>instance</em> variable of a servlet or filter. It will be shared among all other requests in other sessions. That's <strong>not</strong> thread-safe! The below example illustrates this:</p>
<pre><code>public class ExampleServlet extends HttpServlet {

    private Object thisIsNOTThreadSafe;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Object thisIsThreadSafe;

        thisIsNOTThreadSafe = request.getParameter(&quot;foo&quot;); // BAD!! Shared among all requests!
        thisIsThreadSafe = request.getParameter(&quot;foo&quot;); // OK, this is thread safe.
    } 
}
</code></pre>
<h3>See also:</h3>
<ul>
<li><a href=""https://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp"">What is the difference between JSF, Servlet and JSP?</a></li>
<li><a href=""https://stackoverflow.com/questions/1700390/best-option-for-session-management-in-java"">Best option for Session management in Java</a></li>
<li><a href=""https://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern"">Difference between / and /* in servlet mapping url pattern</a></li>
<li><a href=""https://stackoverflow.com/questions/2349633/doget-and-dopost-in-servlets"">doGet and doPost in Servlets</a></li>
<li><a href=""https://stackoverflow.com/questions/8011138/servlet-seems-to-handle-multiple-concurrent-requests-synchronously/"">Servlet seems to handle multiple concurrent browser requests synchronously</a></li>
<li><a href=""https://stackoverflow.com/questions/9555842/why-servlets-are-not-thread-safe/"">Why Servlets are not thread Safe?</a></li>
</ul>
"
767379,"<p>Use the <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-"" rel=""noreferrer""><code>string.equals(Object other)</code></a> function to compare strings, not the <code>==</code> operator.</p>

<p>The function checks the actual contents of the string, the <code>==</code> operator checks whether the references to the objects are equal.  Note that string constants are usually ""interned"" such that two constants with the same value can actually be compared with <code>==</code>, but it's better not to rely on that.</p>

<pre><code>if (usuario.equals(datos[0])) {
    ...
}
</code></pre>

<p>NB: the compare is done on 'usuario' because that's guaranteed non-null in your code, although you should still check that you've actually got some tokens in the <code>datos</code> array otherwise you'll get an array-out-of-bounds exception.</p>
"
19843507,"<p>This problem has two typical causes:</p>
<ul>
<li><p>Static fields used by the objects you stored in the list</p>
</li>
<li><p>Accidentally adding the <em>same</em> object to the list</p>
</li>
</ul>
<h2>Static Fields</h2>
<p>If the objects in your list store data in static fields, each object in your list will appear to be the same because they hold the same values. Consider the class below:</p>
<pre><code>public class Foo {
  private static int value; 
  //      ^^^^^^------------ - Here's the problem!
  
  public Foo(int value) {
    this.value = value;
  }
  
  public int getValue() {
    return value;
  }
}
</code></pre>
<p>In that example, there is only one <code>int value</code> which is shared between all instances of <code>Foo</code> because it is declared <code>static</code>. (See <a href=""https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html"" rel=""noreferrer""><em>&quot;Understanding Class Members&quot;</em></a> tutorial.)</p>
<p>If you add multiple <code>Foo</code> objects to a list using the code below, each instance will return <code>3</code> from a call to <code>getValue()</code>:</p>
<pre><code>for (int i = 0; i &lt; 4; i++) {      
  list.add(new Foo(i));
}
</code></pre>
<p>The solution is simple - don't use the <code>static</code> keywords for fields in your class unless you actually want the values shared between every instance of that class.</p>
<h2>Adding the Same Object</h2>
<p>If you add a temporary variable to a list, you must create a new instance of the object you are adding, each time you loop. Consider the following erroneous code snippet:</p>
<pre><code>List&lt;Foo&gt; list = new ArrayList&lt;Foo&gt;();    
Foo tmp = new Foo();

for (int i = 0; i &lt; 3; i++) {
  tmp.setValue(i);
  list.add(tmp);
}
</code></pre>
<p>Here, the <code>tmp</code> object was constructed outside the loop. As a result, the <em>same object instance</em> is being added to the list three times. The instance will hold the value <code>2</code>, because that was the value passed during the last call to <code>setValue()</code>.</p>
<p>To fix this, just move the object construction inside the loop:</p>
<pre><code>List&lt;Foo&gt; list = new ArrayList&lt;Foo&gt;();        

for (int i = 0; i &lt; 3; i++) {
  Foo tmp = new Foo(); // &lt;-- fresh instance!
  tmp.setValue(i);
  list.add(tmp);
}
</code></pre>
"
2784576,"<p>Since <a href=""//docs.oracle.com/javase/8/docs/api/java/util/Date.html"" rel=""noreferrer""><code>Date</code></a> implements <a href=""//docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html"" rel=""noreferrer""><code>Comparable</code></a>, it has a <code>compareTo</code> method just like <code>String</code> does.</p>
<p>So your custom <a href=""//docs.oracle.com/javase/8/docs/api/java/util/Comparator.html"" rel=""noreferrer""><code>Comparator</code></a> could look like this:</p>
<pre><code>public class CustomComparator implements Comparator&lt;MyObject&gt; {
    @Override
    public int compare(MyObject o1, MyObject o2) {
        return o1.getStartDate().compareTo(o2.getStartDate());
    }
}
</code></pre>
<p>The <code>compare()</code> method must return an <code>int</code>, so you couldn't directly return a <code>boolean</code> like you were planning to anyway.</p>
<p>Your sorting code would be just about like you wrote:</p>
<pre><code>Collections.sort(Database.arrayList, new CustomComparator());
</code></pre>
<p>A slightly shorter way to write all this, if you don't need to reuse your comparator, is to write it as an inline anonymous class:</p>
<pre><code>Collections.sort(Database.arrayList, new Comparator&lt;MyObject&gt;() {
    @Override
    public int compare(MyObject o1, MyObject o2) {
        return o1.getStartDate().compareTo(o2.getStartDate());
    }
});
</code></pre>
<hr />
<h1>Since <a href=""/questions/tagged/java-8"" class=""post-tag"" title=""show questions tagged &#39;java-8&#39;"" rel=""tag"">java-8</a></h1>
<p>You can now write the last example in a shorter form by using a <a href=""//docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"" rel=""noreferrer"">lambda expression</a> for the <code>Comparator</code>:</p>
<pre><code>Collections.sort(Database.arrayList, 
                        (o1, o2) -&gt; o1.getStartDate().compareTo(o2.getStartDate()));
</code></pre>
<p>And <code>List</code> has a <a href=""//docs.oracle.com/javase/8/docs/api/java/util/List.html#sort-java.util.Comparator-"" rel=""noreferrer""><code>sort(Comparator)</code></a> method, so you can shorten this even further:</p>
<pre><code>Database.arrayList.sort((o1, o2) -&gt; o1.getStartDate().compareTo(o2.getStartDate()));
</code></pre>
<p>This is such a common idiom that there's <a href=""//docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-"" rel=""noreferrer"">a built-in method</a> to generate a <code>Comparator</code> for a class with a <code>Comparable</code> key:</p>
<pre><code>Database.arrayList.sort(Comparator.comparing(MyObject::getStartDate));
</code></pre>
<p>All of these are equivalent forms.</p>
"
7520464,"<p>In general, the answer to  your question is ""yes"", but...</p>

<ul>
<li><code>.equals(...)</code> will only compare what it is written to compare, no more, no less.</li>
<li>If a class does not override the equals method, then it defaults to the <code>equals(Object o)</code> method of the closest parent class that has overridden this method. </li>
<li>If no parent classes have provided an override, then it defaults to the method from the ultimate parent class, Object, and so you're left with the <code>Object#equals(Object o)</code> method. Per the Object API this is the same as <code>==</code>; that is, it returns true <em>if and only if</em> both variables refer to the same object, if their references are one and the same. Thus you will be testing  for <strong>object equality</strong> and not <strong>functional equality</strong>.</li>
<li>Always remember to override <code>hashCode</code> if you override <code>equals</code> so as not to ""break the contract"". As per the API, the result returned from the <code>hashCode()</code> method for two objects <strong>must</strong> be the same if their <code>equals</code> methods show that they are equivalent. The converse is <em>not</em> necessarily true. </li>
</ul>
"
19209651,"<p>Here are some example images for common use, mostly from existing answers on SO.  </p>

<h1><strong>Icons</strong></h1>

<p><strong>Simple Geometric shapes</strong> generated using Java as originally seen in <a href=""https://stackoverflow.com/a/16052085/418556"">this answer</a>.  It includes a Java based interface that defines the URLs and makes them easy to access.</p>

<p><strong>Details:</strong> 32x32 pixel PNG (4 colors x 5 shapes) with partial transparency (along the edges).</p>

<p><strong>Categories:</strong> <a href=""/questions/tagged/png"" class=""post-tag"" title=""show questions tagged &#39;png&#39;"" rel=""tag"">png</a> <a href=""/questions/tagged/icons"" class=""post-tag"" title=""show questions tagged &#39;icons&#39;"" rel=""tag"">icons</a></p>

<blockquote>
  <p><img src=""https://i.stack.imgur.com/gJmeJ.png"" >
  <img src=""https://i.stack.imgur.com/L5DGx.png"" >
  <img src=""https://i.stack.imgur.com/in9g1.png"" >
  <img src=""https://i.stack.imgur.com/IucNt.png"" >
  <img src=""https://i.stack.imgur.com/yoKxT.png"" >&nbsp;&nbsp;
  <img src=""https://i.stack.imgur.com/T5uTa.png"" >
  <img src=""https://i.stack.imgur.com/gYxHm.png"" >
  <img src=""https://i.stack.imgur.com/1lgtq.png"" >
  <img src=""https://i.stack.imgur.com/yBOv3.png"" >
  <img src=""https://i.stack.imgur.com/zJ8am.png"" ><br>
  <img src=""https://i.stack.imgur.com/IHARa.png"" >
  <img src=""https://i.stack.imgur.com/8BGfi.png"" >
  <img src=""https://i.stack.imgur.com/6ZXhi.png"" >
  <img src=""https://i.stack.imgur.com/Lqkl0.png"" >
  <img src=""https://i.stack.imgur.com/c67nr.png"" >&nbsp;&nbsp;
  <img src=""https://i.stack.imgur.com/wCF8S.png"" >
  <img src=""https://i.stack.imgur.com/5v2TX.png"" >
  <img src=""https://i.stack.imgur.com/F0JHK.png"" >
  <img src=""https://i.stack.imgur.com/4EVv1.png"" >
  <img src=""https://i.stack.imgur.com/xj49g.png"" ><br></p>
</blockquote>

<h2>Sprite Sheets</h2>

<p><strong>Chess Pieces</strong> as originally seen on <a href=""https://stackoverflow.com/a/18686753/418556"">this answer</a> that includes 2 other sprite sets (same image in different colors).</p>

<p><strong>Details:</strong> 384x128 px (each sprite 64x64 px) PNG with partial transparency.</p>

<p><strong>Categories:</strong> <a href=""/questions/tagged/png"" class=""post-tag"" title=""show questions tagged &#39;png&#39;"" rel=""tag"">png</a> <a href=""/questions/tagged/sprite-sheet"" class=""post-tag"" title=""show questions tagged &#39;sprite-sheet&#39;"" rel=""tag"">sprite-sheet</a> <a href=""/questions/tagged/icons"" class=""post-tag"" title=""show questions tagged &#39;icons&#39;"" rel=""tag"">icons</a></p>

<blockquote>
  <p><img src=""https://i.stack.imgur.com/memI0.png"" ></p>
</blockquote>

<h2>Animated</h2>

<p>GIF is the only image format that supports animation.  Here are a few examples.</p>

<p><strong>Categories:</strong> <a href=""/questions/tagged/gif"" class=""post-tag"" title=""show questions tagged &#39;gif&#39;"" rel=""tag"">gif</a> <a href=""/questions/tagged/animated-gif"" class=""post-tag"" title=""show questions tagged &#39;animated-gif&#39;"" rel=""tag"">animated-gif</a> </p>

<h3>Solid BG</h3>

<p><strong>Animated dashed border</strong> as seen in <a href=""https://stackoverflow.com/a/9772978/418556"">this answer</a>.</p>

<p><strong>Details:</strong> 100x30 px with filled BG (no transparency)</p>

<blockquote>
  <p><img src=""https://i.stack.imgur.com/DnzXV.gif"" ></p>
</blockquote>

<p><strong>Zooming stars</strong> as seen in <a href=""https://stackoverflow.com/a/10836833/418556"">this answer</a>, originally developed as a 'screen-shot' of a screensaver.</p>

<p><strong>Details:</strong> 160x120 px with filled BG (no transparency)</p>

<blockquote>
  <p><img src=""https://i.stack.imgur.com/iQFxo.gif"" ></p>
</blockquote>

<p><strong>Animated Water</strong> as seen in <a href=""https://stackoverflow.com/a/17894012/418556"">this answer</a> to <a href=""https://stackoverflow.com/q/17893429/418556"">Animating Tiles In My Game</a>.</p>

<p><strong>Details:</strong> 60x60 px with filled BG (no transparency)</p>

<blockquote>
  <p><img src=""https://i.stack.imgur.com/HXCUV.gif""></p>
</blockquote>

<h3>Transparent BG</h3>

<p><strong>Orbital animation,</strong> originally developed for <a href=""http://1point1c.org/"" rel=""noreferrer"">1.1C</a>.  The orbits of the 'inner' planets (from Mercury to Jupiter, with an extra orbit shown in the thick of the asteroid belt).  Better on a dark BG.</p>

<p><strong>Details:</strong> 450x450 &amp; 150x150 px animated GIFs with transparency.  </p>

<blockquote>
  <p><img src=""https://i.stack.imgur.com/OtTIY.gif"" ><img src=""https://i.stack.imgur.com/z9rv7.gif"" ></p>
</blockquote>

<h2>Pictures</h2>

<p><strong>Sunrise &amp; moonset</strong> over the CBD of Sydney, Australia<br><strong>Sunset &amp; Venus over a telescope</strong> on Mt Stromlo, near Canberra, Australia.</p>

<p><strong>Categories:</strong> <a href=""/questions/tagged/jpeg"" class=""post-tag"" title=""show questions tagged &#39;jpeg&#39;"" rel=""tag"">jpeg</a> <a href=""/questions/tagged/slideshow"" class=""post-tag"" title=""show questions tagged &#39;slideshow&#39;"" rel=""tag"">slideshow</a> + Image Transitions</p>

<p><strong>Details:</strong> 480x320 px JPEGs x 4.  (Displayed here at 1/2 size.) </p>

<blockquote>
  <p><img src=""https://i.stack.imgur.com/XZ4V5.jpg"" width=""240"" height=""160"" ><img src=""https://i.stack.imgur.com/7bI1Y.jpg"" width=""240"" height=""160"" ><br>
  <img src=""https://i.stack.imgur.com/OVOg3.jpg"" width=""240"" height=""160"" ><img src=""https://i.stack.imgur.com/lxthA.jpg"" width=""240"" height=""160"" ></p>
</blockquote>

<p><strong>Panorama at Dawn</strong> across the South-Eastern Suburbs of Sydney.</p>

<p><strong>Categories:</strong> <a href=""/questions/tagged/jpg"" class=""post-tag"" title=""show questions tagged &#39;jpg&#39;"" rel=""tag"">jpg</a> <a href=""/questions/tagged/panoramas"" class=""post-tag"" title=""show questions tagged &#39;panoramas&#39;"" rel=""tag"">panoramas</a> <a href=""/questions/tagged/animation"" class=""post-tag"" title=""show questions tagged &#39;animation&#39;"" rel=""tag"">animation</a> (scrolling)</p>

<p><strong>Details:</strong> 1474x436 px JPEG. </p>

<blockquote>
  <p><a href=""https://i.stack.imgur.com/aH5zB.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/aH5zB.jpg"" alt=""Dawn Panorama""></a></p>
</blockquote>

<h2>Tiles</h2>

<p>This <strong>Mercator map of Earth</strong> can be tiled left/right.  Originally seen on <a href=""https://stackoverflow.com/a/18825844/418556"">this answer</a>.  The answer also includes a second version of the image that shows a semi-transparent line for the equator (which is not in the center, but significantly below it).</p>

<p><strong>Details:</strong> 640x316 px (add 44 px at bottom to center equator) PNG with transparent BG.  </p>

<p><strong>Categories:</strong> <a href=""/questions/tagged/png"" class=""post-tag"" title=""show questions tagged &#39;png&#39;"" rel=""tag"">png</a> <a href=""/questions/tagged/tile"" class=""post-tag"" title=""show questions tagged &#39;tile&#39;"" rel=""tag"">tile</a> <a href=""/questions/tagged/animation"" class=""post-tag"" title=""show questions tagged &#39;animation&#39;"" rel=""tag"">animation</a> (scrolling)</p>

<blockquote>
  <p><img src=""https://i.stack.imgur.com/P59NF.png""></p>
</blockquote>

<h2>Tip</h2>

<p>For getting the URLs of the images, you might 'context click' on the image as seen in the browser and either: </p>

<ul>
<li>Show the properties.  The URL can be copied from the dialog that appears.  </li>
<li>View image.  Copy the URL from the browser address bar.</li>
</ul>

<p>Alternately:</p>

<ul>
<li>Use the browser 'show source' and copy it from the HTML.</li>
<li>For those with enough rep. (100+, to edit a community Wiki answer), go to <a href=""https://stackoverflow.com/posts/19209651/edit"">edit the answer</a> and pull the URL from the text.</li>
</ul>

<h2>Code</h2>

<p>Below is a Java class which splits up the chess piece sprite sheet, suitable for pasting in to an MCVE:</p>

<pre><code>import java.awt.image.*;
import javax.imageio.*;
import java.net.*;
import java.io.*;
import java.util.*;

public final class ChessSprites {
    private ChessSprites() {}
    public static final int SIZE = 64;
    public static final BufferedImage SHEET;
    static {
        try {
            // see https://stackoverflow.com/a/19209651/2891664
            SHEET = ImageIO.read(new URL(""https://i.stack.imgur.com/memI0.png""));
        } catch (IOException x) {
            throw new UncheckedIOException(x);
        }
    }
    public static final BufferedImage GOLD_QUEEN    = SHEET.getSubimage(0 * SIZE, 0,    SIZE, SIZE);
    public static final BufferedImage SILVER_QUEEN  = SHEET.getSubimage(0 * SIZE, SIZE, SIZE, SIZE);
    public static final BufferedImage GOLD_KING     = SHEET.getSubimage(1 * SIZE, 0,    SIZE, SIZE);
    public static final BufferedImage SILVER_KING   = SHEET.getSubimage(1 * SIZE, SIZE, SIZE, SIZE);
    public static final BufferedImage GOLD_ROOK     = SHEET.getSubimage(2 * SIZE, 0,    SIZE, SIZE);
    public static final BufferedImage SILVER_ROOK   = SHEET.getSubimage(2 * SIZE, SIZE, SIZE, SIZE);
    public static final BufferedImage GOLD_KNIGHT   = SHEET.getSubimage(3 * SIZE, 0,    SIZE, SIZE);
    public static final BufferedImage SILVER_KNIGHT = SHEET.getSubimage(3 * SIZE, SIZE, SIZE, SIZE);
    public static final BufferedImage GOLD_BISHOP   = SHEET.getSubimage(4 * SIZE, 0,    SIZE, SIZE);
    public static final BufferedImage SILVER_BISHOP = SHEET.getSubimage(4 * SIZE, SIZE, SIZE, SIZE);
    public static final BufferedImage GOLD_PAWN     = SHEET.getSubimage(5 * SIZE, 0,    SIZE, SIZE);
    public static final BufferedImage SILVER_PAWN   = SHEET.getSubimage(5 * SIZE, SIZE, SIZE, SIZE);
    public static final List&lt;BufferedImage&gt; SPRITES =
        Collections.unmodifiableList(Arrays.asList(GOLD_QUEEN,  SILVER_QUEEN,
                                                   GOLD_KING,   SILVER_KING,
                                                   GOLD_ROOK,   SILVER_ROOK,
                                                   GOLD_KNIGHT, SILVER_KNIGHT,
                                                   GOLD_BISHOP, SILVER_BISHOP,
                                                   GOLD_PAWN,   SILVER_PAWN));
}
</code></pre>
"
32636039,"<p><sub>(the following is extracted from <a href=""https://commonsware.com/blog/2015/08/31/hey-where-did-my-permission-go.html"" rel=""noreferrer"">a blog post of mine about this</a>)</sub></p>
<p>The big reason for not getting your permission nowadays is because
your project has a <code>targetSdkVersion</code> of 23 or higher, and the permission
that you are requesting is &quot;dangerous&quot;. In Android 6.0, this includes:</p>
<ul>
<li><code>ACCEPT_HANDOVER</code></li>
<li><code>ACCESS_BACKGROUND_LOCATION</code></li>
<li><code>ACCESS_MEDIA_LOCATION</code></li>
<li><code>ACTIVITY_RECOGNITION</code></li>
<li><code>ANSWER_PHONE_CALLS</code></li>
<li><code>ACCESS_COARSE_LOCATION</code></li>
<li><code>ACCESS_FINE_LOCATION</code></li>
<li><code>ADD_VOICEMAIL</code></li>
<li><code>BODY_SENSORS</code></li>
<li><code>CALL_PHONE</code></li>
<li><code>CAMERA</code></li>
<li><code>GET_ACCOUNTS</code></li>
<li><code>PROCESS_OUTGOING_CALLS</code></li>
<li><code>READ_CALENDAR</code></li>
<li><code>READ_CALL_LOG</code></li>
<li><code>READ_CELL_BROADCASTS</code></li>
<li><code>READ_CONTACTS</code></li>
<li><code>READ_EXTERNAL_STORAGE</code></li>
<li><code>READ_PHONE_STATE</code></li>
<li><code>READ_SMS</code></li>
<li><code>RECEIVE_MMS</code></li>
<li><code>RECEIVE_SMS</code></li>
<li><code>RECEIVE_WAP_PUSH</code></li>
<li><code>RECORD_AUDIO</code></li>
<li><code>SEND_SMS</code></li>
<li><code>USE_SIP</code></li>
<li><code>WRITE_CALENDAR</code></li>
<li><code>WRITE_CALL_LOG</code></li>
<li><code>WRITE_CONTACTS</code></li>
<li><code>WRITE_EXTERNAL_STORAGE</code></li>
</ul>
<p>For these permissions, not only does your <code>targetSdkVersion</code> 23+ app
need to have the <code>&lt;uses-permission&gt;</code> element(s), but you also have
to ask for those permissions at runtime from the user on Android 6.0+
devices, using methods like <code>checkSelfPermission()</code> and
<code>requestPermissions()</code>.</p>
<p>As a temporary workaround, drop your <code>targetSdkVersion</code> below 23.</p>
<p>However, eventually, you will have some reason to want your
<code>targetSdkVersion</code> to be 23 or higher. At that time, you will need
to adjust your app to use the new runtime permission system.
The Android documentation has
<a href=""http://developer.android.com/training/permissions/requesting.html"" rel=""noreferrer"">a page dedicated to this topic</a>.</p>
"
3423360,"<p>With JDK1.6, you can use the built-in Javascript engine.</p>

<pre><code>import javax.script.ScriptEngineManager;
import javax.script.ScriptEngine;
import javax.script.ScriptException;

public class Test {
  public static void main(String[] args) throws ScriptException {
    ScriptEngineManager mgr = new ScriptEngineManager();
    ScriptEngine engine = mgr.getEngineByName(""JavaScript"");
    String foo = ""40+2"";
    System.out.println(engine.eval(foo));
    } 
}
</code></pre>
"
51634499,"<p><strong>tl;dr</strong> - A simple port forward from the container to the host will <em>not work</em>... Hosts files (e.g. <code>/etc/hosts</code> on *NIX systems) should not be modified to work around Kafka networking, as this solution is not portable.</p>
<p>1) What exact IP/hostname + port do you want to connect to? Make sure that value is set as <code>advertised.listeners</code> (not <code>advertised.host.name</code> and <code>advertised.port</code>, as these are deprecated) on the broker.</p>
<p>2) Make sure that the server(s) listed  as part of <code>bootstrap.servers</code> are actually resolvable. E.g <code>ping</code> an IP/hostname, use <code>netcat</code> to check ports... If your clients are in a container, you need to do this <em>from the container</em>, not only your host</p>
<p>3) To verify the ports are mapped correctly on the host, ensure that <code>docker ps</code> shows the kafka container is mapped from <code>0.0.0.0:&lt;host_port&gt; -&gt; &lt;advertised_listener_port&gt;/tcp</code>. The ports must match if trying to run a client from outside the Docker network.</p>
<hr />
<blockquote>
<p>The below answer uses <code>confluentinc</code> docker images to address the question that was asked, <strong>not</strong> <code>wurstmeister/kafka</code>. More specifically, the latter images are not well-maintained despite being the one of the most popular Kafka docker image. If you have <code>KAFKA_ADVERTISED_HOST_NAME</code> variable set, remove it (it's a deprecated property)</p>
</blockquote>
<p>The following sections try to aggregate all the details needed to use another image. For other, commonly used Kafka images,  <strong>it's all the same <em>Apache</em> Kafka</strong> running in a container.<br />
You're just dependent on <em>how it is configured</em>. And <em>which variables</em> make it so.</p>
<blockquote>
<h4><code>wurstmeister/kafka</code></h4>
<p>Refer their README section on <a href=""https://github.com/wurstmeister/kafka-docker/blob/master/README.md#listener-configuration"" rel=""nofollow noreferrer"">listener configuration</a>, Also <a href=""https://github.com/wurstmeister/kafka-docker/wiki/Connectivity"" rel=""nofollow noreferrer"">read their Connectivity wiki</a>.</p>
</blockquote>
<blockquote>
<h4><code>bitnami/kafka</code></h4>
<p>If you want a small container, try these. The images are much smaller than the Confluent ones and are much more well maintained than <code>wurstmeister</code>. <a href=""https://github.com/bitnami/containers/tree/main/bitnami/kafka#accessing-apache-kafka-with-internal-and-external-clients"" rel=""nofollow noreferrer"">Refer their README</a> for listener configuration.</p>
</blockquote>
<blockquote>
<h4><code>debezium/kafka</code></h4>
<p>Docs on it <a href=""https://debezium.io/documentation/faq/#how_to_connect_to_kafka_when_using_the_debezium_docker_images"" rel=""nofollow noreferrer"">are mentioned here</a>.</p>
<p><strong>Note</strong>: advertised host and port settings are deprecated. Advertised <strong><em>listeners</em></strong> covers both. Similar to the Confluent containers, Debezium can use <code>KAFKA_</code> prefixed broker settings to update its properties.</p>
</blockquote>
<blockquote>
<h4>Others</h4>
<p><code>spotify/kafka</code> is deprecated and outdated.<br />
<code>fast-data-dev</code> or <code>lensesio/box</code> are great for an all in one solution, but are bloated if you <strong>only</strong> want Kafka<br />
Your own <code>Dockerfile</code> - Why? Is something incomplete with these others? Start with a pull request, not starting from scratch.</p>
</blockquote>
<p>For supplemental reading, a <strong>fully-functional</strong> <code>docker-compose</code>, and network diagrams, see <a href=""https://confluent.io/blog/kafka-listeners-explained/"" rel=""nofollow noreferrer"">this blog by @rmoff</a></p>
<h1>Answer</h1>
<p><a href=""https://docs.confluent.io/current/quickstart/ce-docker-quickstart.html"" rel=""nofollow noreferrer"">The Confluent quickstart (Docker) document</a> assumes all produce and consume requests will be within the Docker network.</p>
<p>You could fix the problem of connecting to <code>kafka:9092</code> by running your Kafka client code within its own container as that uses the Docker network bridge, but otherwise you'll need to add some more environment variables for exposing the container externally, while still having it work within the Docker network.</p>
<p>First add a protocol mapping of <code>PLAINTEXT_HOST:PLAINTEXT</code> that will map the listener protocol to a Kafka protocol</p>
<p>Key: <code>KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</code><br />
Value: <code>PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</code></p>
<p>Then setup two advertised listeners on different ports. (<code>kafka</code> here refers to the docker container name; it might also be named <code>broker</code>, so double check your service + hostnames).</p>
<p>Key: <code>KAFKA_ADVERTISED_LISTENERS</code><br />
Value: <code>PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092</code></p>
<p><strong>Notice the protocols here match the left-side values of the protocol mapping setting above</strong></p>
<p>When running the container, add <code>-p 29092:29092</code> for the host port mapping, and advertised <code>PLAINTEXT_HOST</code> listener.</p>
<hr />
<p>So... (<strong>with the above settings</strong>)</p>
<blockquote>
<p>If something <strong>still</strong> doesn't work, <code>KAFKA_LISTENERS</code> can be set to include <code>&lt;PROTOCOL&gt;://0.0.0.0:&lt;PORT&gt;</code> where both options match the advertised setting and Docker-forwarded port</p>
</blockquote>
<h3>Client on same machine, not in a container</h3>
<p>Advertising localhost and the associated port will let you connect outside of the container, as you'd expect.</p>
<p>In other words, when running any Kafka Client <strong>outside</strong> the Docker network (including CLI tools you might have installed locally), use <code>localhost:29092</code> for bootstrap servers and <code>localhost:2181</code> for Zookeeper (requires Docker port forwarding)</p>
<h3>Client on another machine</h3>
<p>If trying to connect from an external server, you'll need to advertise the external hostname/ip (e.g. <code>192.168.x.y</code>) of the host <em><strong>as well as/in place of localhost</strong></em>.<br />
Simply advertising localhost with a port forward  will not work because Kafka protocol will still continue to advertise the listeners you've configured.</p>
<p>This setup requires Docker port forwarding <strong>and</strong> router port forwarding (and firewall / security group changes) if not in the same local network, for example, your container is running in the cloud and you want to interact with it from your local machine.</p>
<h3>Client (or another broker) in a container, on the same host</h3>
<p>This is the least error-prone configuration; you can use DNS service names directly.</p>
<p>When running an app <strong>in the Docker network</strong>, use <code>kafka:9092</code> (see advertised <code>PLAINTEXT</code> listener config above) for bootstrap servers and <code>zookeeper:2181</code> for Zookeeper, just like any other Docker service communication (doesn't require any port forwarding)</p>
<p>If you use separate <code>docker run</code> commands, or Compose files, you need to define a shared <code>network</code> manually</p>
<p><a href=""https://github.com/confluentinc/examples/blob/5.3.1-post/cp-all-in-one/docker-compose.yml"" rel=""nofollow noreferrer"">See the example Compose file for the full Confluent stack</a> or <a href=""https://github.com/conduktor/kafka-stack-docker-compose/blob/v6.2.1/zk-single-kafka-single.yml"" rel=""nofollow noreferrer"">more minimal one</a> for a single broker.</p>
<p>If using multiple brokers, then they need to use unique hostnames + advertised listeners. <a href=""https://github.com/conduktor/kafka-stack-docker-compose/blob/v6.2.1/zk-single-kafka-multiple.yml"" rel=""nofollow noreferrer"">See example</a></p>
<h1>Related question</h1>
<p><a href=""https://stackoverflow.com/q/68401788/2308683"">Connect to Kafka on host from Docker (ksqlDB)</a></p>
<h1>Appendix</h1>
<p>For anyone interested in <strong>Kubernetes</strong> deployments:</p>
<ul>
<li><a href=""https://strimzi.io/blog/2019/04/17/accessing-kafka-part-1"" rel=""nofollow noreferrer"">Accessing Kafka</a></li>
<li>Operators (recommended): <a href=""https://operatorhub.io/?keyword=Kafka"" rel=""nofollow noreferrer"">https://operatorhub.io/?keyword=Kafka</a></li>
<li>Helm Artifact Hub: <a href=""https://artifacthub.io/packages/search?ts_query_web=kafka&amp;sort=stars&amp;page=1"" rel=""nofollow noreferrer"">https://artifacthub.io/packages/search?ts_query_web=kafka&amp;sort=stars&amp;page=1</a></li>
</ul>
"
2033124,"<p>Send e-mail in Android using the JavaMail API using Gmail authentication.</p>
<h3>Steps to create a sample Project:</h3>
<p><strong>MailSenderActivity.java:</strong></p>
<pre><code>public class MailSenderActivity extends Activity {
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        final Button send = (Button) this.findViewById(R.id.send);
        send.setOnClickListener(new View.OnClickListener() {
            
            public void onClick(View v) {
                try {   
                    GMailSender sender = new GMailSender(&quot;username@gmail.com&quot;, &quot;password&quot;);
                    sender.sendMail(&quot;This is Subject&quot;,   
                            &quot;This is Body&quot;,   
                            &quot;user@gmail.com&quot;,   
                            &quot;user@yahoo.com&quot;);   
                } catch (Exception e) {   
                    Log.e(&quot;SendMail&quot;, e.getMessage(), e);   
                } 
                
            }
        });
        
    }
}
</code></pre>
<p><strong>GMailSender.java:</strong></p>
<pre><code>public class GMailSender extends javax.mail.Authenticator {   
    private String mailhost = &quot;smtp.gmail.com&quot;;   
    private String user;   
    private String password;   
    private Session session;   
  
    static {   
        Security.addProvider(new com.provider.JSSEProvider());   
    }  
  
    public GMailSender(String user, String password) {   
        this.user = user;   
        this.password = password;   
  
        Properties props = new Properties();   
        props.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);   
        props.setProperty(&quot;mail.host&quot;, mailhost);   
        props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);   
        props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);   
        props.put(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);   
        props.put(&quot;mail.smtp.socketFactory.class&quot;,   
                &quot;javax.net.ssl.SSLSocketFactory&quot;);   
        props.put(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;);   
        props.setProperty(&quot;mail.smtp.quitwait&quot;, &quot;false&quot;);   
  
        session = Session.getDefaultInstance(props, this);   
    }   
  
    protected PasswordAuthentication getPasswordAuthentication() {   
        return new PasswordAuthentication(user, password);   
    }   
  
    public synchronized void sendMail(String subject, String body, String sender, String recipients) throws Exception {   
        try{
        MimeMessage message = new MimeMessage(session);   
        DataHandler handler = new DataHandler(new ByteArrayDataSource(body.getBytes(), &quot;text/plain&quot;));   
        message.setSender(new InternetAddress(sender));   
        message.setSubject(subject);   
        message.setDataHandler(handler);   
        if (recipients.indexOf(',') &gt; 0)   
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipients));   
        else  
            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipients));   
        Transport.send(message);   
        }catch(Exception e){
            
        }
    }   
  
    public class ByteArrayDataSource implements DataSource {   
        private byte[] data;   
        private String type;   
  
        public ByteArrayDataSource(byte[] data, String type) {   
            super();   
            this.data = data;   
            this.type = type;   
        }   
  
        public ByteArrayDataSource(byte[] data) {   
            super();   
            this.data = data;   
        }   
  
        public void setType(String type) {   
            this.type = type;   
        }   
  
        public String getContentType() {   
            if (type == null)   
                return &quot;application/octet-stream&quot;;   
            else  
                return type;   
        }   
  
        public InputStream getInputStream() throws IOException {   
            return new ByteArrayInputStream(data);   
        }   
  
        public String getName() {   
            return &quot;ByteArrayDataSource&quot;;   
        }   
  
        public OutputStream getOutputStream() throws IOException {   
            throw new IOException(&quot;Not Supported&quot;);   
        }   
    }   
}  
</code></pre>
<p><strong>JSSEProvider.java:</strong></p>
<pre><code>/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the &quot;License&quot;); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * @author Alexander Y. Kleymenov
 * @version $Revision$
 */


import java.security.AccessController;
import java.security.Provider;

public final class JSSEProvider extends Provider {

    public JSSEProvider() {
        super(&quot;HarmonyJSSE&quot;, 1.0, &quot;Harmony JSSE Provider&quot;);
        AccessController.doPrivileged(new java.security.PrivilegedAction&lt;Void&gt;() {
            public Void run() {
                put(&quot;SSLContext.TLS&quot;,
                        &quot;org.apache.harmony.xnet.provider.jsse.SSLContextImpl&quot;);
                put(&quot;Alg.Alias.SSLContext.TLSv1&quot;, &quot;TLS&quot;);
                put(&quot;KeyManagerFactory.X509&quot;,
                        &quot;org.apache.harmony.xnet.provider.jsse.KeyManagerFactoryImpl&quot;);
                put(&quot;TrustManagerFactory.X509&quot;,
                        &quot;org.apache.harmony.xnet.provider.jsse.TrustManagerFactoryImpl&quot;);
                return null;
            }
        });
    }
}
</code></pre>
<p>Add the following three jars to your Android Project.</p>
<ul>
<li><a href=""https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/javamail-android/mail.jar"" rel=""nofollow noreferrer"">mail.jar</a></li>
<li><a href=""https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/javamail-android/activation.jar"" rel=""nofollow noreferrer"">activation.jar</a></li>
<li><a href=""https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/javamail-android/additionnal.jar"" rel=""nofollow noreferrer"">additional.jar</a></li>
</ul>
<p>Check <a href=""https://stackoverflow.com/a/6859020/28557"">this</a> post if you don't know how.</p>
<p>And don't forget to add the following line in your manifest:</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
</code></pre>
<p>Adjust your account access settings for less secure apps by visiting this link:</p>
<p><a href=""https://www.google.com/settings/security/lesssecureapps"" rel=""nofollow noreferrer"">https://www.google.com/settings/security/lesssecureapps</a>.</p>
<hr />
<p><strong>UPD 2023:</strong> Less Secure Apps has been deprecated. To access your account, you will need to enable Two Factor Authentication and use App Password with the settings provided in the image below:</p>
<p><a href=""https://i.stack.imgur.com/KxOgvm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KxOgvm.png"" alt=""How to create Temporary Password"" /></a></p>
<hr />
<p>Run the project and check your recipient mail account for the mail.</p>
<p>P.S.: Please keep in mind that performing network operations directly from an Activity in Android is not allowed. Hence, it is highly recommended to use <code>AsyncTask</code> or <code>IntentService</code> to avoid encountering a network on main thread exception.</p>
<p>Jar files: <a href=""https://code.google.com/archive/p/javamail-android/"" rel=""nofollow noreferrer"">https://code.google.com/archive/p/javamail-android/</a></p>
"
71399,"<p>Use an enum:</p>

<pre><code>public enum Foo {
    INSTANCE;
}
</code></pre>

<p>Joshua Bloch explained this approach in his <a href=""http://sites.google.com/site/io/effective-java-reloaded"" rel=""noreferrer"">Effective Java Reloaded</a> talk at Google I/O 2008: <a href=""http://www.youtube.com/watch?v=pi_I7oD_uGI#t=28m50s"" rel=""noreferrer"">link to video</a>. Also see slides 30-32 of his presentation (<a href=""https://14b1424d-a-62cb3a1a-s-sites.googlegroups.com/site/io/effective-java-reloaded/effective_java_reloaded.pdf?attachauth=ANoY7crKCOet2NEUGW7RV1XfM-Jn4z8YJhs0qJM11OhLRnFW_JbExkJtvJ3UJvTE40dhAciyWcRIeGJ-n3FLGnMOapHShHINh8IY05YViOJoZWzaohMtM-s4HCi5kjREagi8awWtcYD0_6G7GhKr2BndToeqLk5sBhZcQfcYIyAE5A4lGNosDCjODcBAkJn8EuO6572t2wU1LMSEUgjvqcf4I-Fp6VDhDvih_XUEmL9nuVJQynd2DRpxyuNH1SpJspEIdbLw-WWZ&amp;attredirects=0"" rel=""noreferrer"">effective_java_reloaded.pdf</a>):</p>

<blockquote>
  <h3>The Right Way to Implement a Serializable Singleton</h3>

<pre><code>public enum Elvis {
    INSTANCE;
    private final String[] favoriteSongs =
        { ""Hound Dog"", ""Heartbreak Hotel"" };
    public void printFavorites() {
        System.out.println(Arrays.toString(favoriteSongs));
    }
}
</code></pre>
</blockquote>

<p><strong>Edit:</strong> An <a href=""http://www.ddj.com/java/208403883?pgno=3"" rel=""noreferrer"">online portion of ""Effective Java""</a> says: </p>

<blockquote>
  <p>""This approach is functionally equivalent to the public field approach, except that it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. While this approach has yet to be widely adopted, <strong>a single-element enum type is the best way to implement a singleton</strong>.""</p>
</blockquote>
"
41577235,"<p>Your standard Spring MVC application will serve all requests through a <a href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-servlet"" rel=""noreferrer""><code>DispatcherServlet</code></a> that you've registered with your Servlet container.</p>
<p>The <code>DispatcherServlet</code> looks at its <code>ApplicationContext</code> and, if available, the <code>ApplicationContext</code> registered with a <code>ContextLoaderListener</code> for special beans it needs to setup its request serving logic. <a href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-servlet-special-bean-types"" rel=""noreferrer"">These beans are described in the documentation</a>.</p>
<p>Arguably the most important, beans of type <a href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-handlermapping"" rel=""noreferrer""><code>HandlerMapping</code></a> map</p>
<blockquote>
<p>incoming requests to handlers and a list of pre- and post-processors
(handler interceptors) based on some criteria the details of which
vary by <code>HandlerMapping</code> implementation. The most popular implementation
supports annotated controllers but other implementations exists as
well.</p>
</blockquote>
<p>The <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/HandlerMapping.html"" rel=""noreferrer"">javadoc of <code>HandlerMapping</code></a> further describes how implementations must behave.</p>
<p>The <code>DispatcherServlet</code> finds all beans of this type and registers them in some order (can be customized). While serving a request, the <code>DispatcherServlet</code> loops through these <code>HandlerMapping</code> objects and tests each of them with <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/HandlerMapping.html#getHandler-javax.servlet.http.HttpServletRequest-"" rel=""noreferrer""><code>getHandler</code></a> to find one that can handle the incoming request, represented as the standard <code>HttpServletRequest</code>. As of 4.3.x, <strong>if it doesn't find any</strong>, it <a href=""https://github.com/spring-projects/spring-framework/blob/4.3.x/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java#L1176"" rel=""noreferrer"">logs the warning</a> that you see</p>
<blockquote>
<p>No mapping found for HTTP request with URI <code>[/some/path]</code> in <code>DispatcherServlet</code> with name SomeName</p>
</blockquote>
<p>and <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html#setThrowExceptionIfNoHandlerFound-boolean-"" rel=""noreferrer"">either</a> throws a <a href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/NoHandlerFoundException.html"" rel=""noreferrer""><code>NoHandlerFoundException</code></a> or immediately commits the response with a 404 Not Found status code.</p>
<h1>Why didn't the <code>DispatcherServlet</code> find a <code>HandlerMapping</code> that could handle my request?</h1>
<p>The most common <code>HandlerMapping</code> implementation is <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.html"" rel=""noreferrer""><code>RequestMappingHandlerMapping</code></a>, which handles registering <code>@Controller</code> beans as handlers (really their <code>@RequestMapping</code> annotated methods). You can either declare a bean of this type yourself (with <code>@Bean</code> or <code>&lt;bean&gt;</code> or other mechanism) or you can use <a href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-config-enable"" rel=""noreferrer"">the built-in options</a>. These are:</p>
<ol>
<li>Annotate your <code>@Configuration</code> class with <code>@EnableWebMvc</code>.</li>
<li>Declare a <code>&lt;mvc:annotation-driven /&gt;</code> member in your XML configuration.</li>
</ol>
<p>As the link above describes, both of these will register a <code>RequestMappingHandlerMapping</code> bean (and a bunch of other stuff). However, a <code>HandlerMapping</code> isn't very useful without a handler. <code>RequestMappingHandlerMapping</code> expects some <code>@Controller</code> beans so you need to declare those too, through <code>@Bean</code> methods in a Java configuration or <code>&lt;bean&gt;</code> declarations in an XML configuration or through component scanning of <code>@Controller</code> annotated classes in either. <strong>Make sure these beans are present.</strong></p>
<p>If you're getting the warning message and a 404 and you've configured all of the above correctly, <strong>then you're sending your request to the wrong URI</strong>, one that isn't handled by a detected <code>@RequestMapping</code> annotated handler method.</p>
<p>The <code>spring-webmvc</code> library offers other built-in <code>HandlerMapping</code> implementations. For example, <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/handler/BeanNameUrlHandlerMapping.html"" rel=""noreferrer""><code>BeanNameUrlHandlerMapping</code></a> maps</p>
<blockquote>
<p>from URLs to beans with names that start with a slash (&quot;/&quot;)</p>
</blockquote>
<p>and you can always write your own. Obviously, <strong>you'll have to make sure the request you're sending matches at least one of the registered <code>HandlerMapping</code> object's handlers.</strong></p>
<p>If you don't implicitly or explicitly register any <code>HandlerMapping</code> beans (or if <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html#setDetectAllHandlerAdapters-boolean-"" rel=""noreferrer""><code>detectAllHandlerMappings</code></a> is <code>true</code>), the <code>DispatcherServlet</code> registers some <a href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-servlet-config"" rel=""noreferrer"">defaults</a>. These are defined in <a href=""https://github.com/spring-projects/spring-framework/blob/4.3.x/spring-webmvc/src/main/resources/org/springframework/web/servlet/DispatcherServlet.properties"" rel=""noreferrer""><code>DispatcherServlet.properties</code></a> in the same package as the <code>DispatcherServlet</code> class. They are <code>BeanNameUrlHandlerMapping</code> and <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.html"" rel=""noreferrer""><code>DefaultAnnotationHandlerMapping</code></a> (which is similar to <code>RequestMappingHandlerMapping</code> but deprecated).</p>
<h1>Debugging</h1>
<p>Spring MVC will log handlers registered through <code>RequestMappingHandlerMapping</code>. For example, a <code>@Controller</code> like</p>
<pre><code>@Controller
public class ExampleController {
    @RequestMapping(path = &quot;/example&quot;, method = RequestMethod.GET, headers = &quot;X-Custom&quot;)
    public String example() {
        return &quot;example-view-name&quot;;
    }
}
</code></pre>
<p>will log the following at INFO level</p>
<pre class=""lang-none prettyprint-override""><code>Mapped &quot;{[/example],methods=[GET],headers=[X-Custom]}&quot; onto public java.lang.String com.spring.servlet.ExampleController.example()
</code></pre>
<p>This describes the mapping registered. When you see the warning that no handler was found, compare the URI in the message to the mapping listed here. All the restrictions specified in the <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html"" rel=""noreferrer""><code>@RequestMapping</code></a> must match for Spring MVC to select the handler.</p>
<p>Other <code>HandlerMapping</code> implementations log their own statements that should hint to their mappings and their corresponding handlers.</p>
<p>Similarly, enable Spring logging at DEBUG level to see which beans Spring registers. It should report which annotated classes it finds, which packages it scans, and which beans it initializes. If the ones you expected aren't present, then review your <code>ApplicationContext</code> configuration.</p>
<h1>Other common mistakes</h1>
<p>A <code>DispatcherServlet</code> is just a typical Java EE <a href=""https://docs.oracle.com/javaee/7/api/javax/servlet/Servlet.html"" rel=""noreferrer""><code>Servlet</code></a>. You register it with your typical <code>&lt;web.xml&gt;</code> <code>&lt;servlet-class&gt;</code> and <code>&lt;servlet-mapping&gt;</code> declaration, or directly through <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html#addServlet-java.lang.String-java.lang.Class-"" rel=""noreferrer""><code>ServletContext#addServlet</code></a> in a <a href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/WebApplicationInitializer.html"" rel=""noreferrer""><code>WebApplicationInitializer</code></a>, or with whatever mechanism Spring boot uses. As such, you must rely on the <em>url mapping</em> logic specified in the <a href=""http://download.oracle.com/otndocs/jcp/servlet-3.0-fr-oth-JSpec/"" rel=""noreferrer"">Servlet specification</a>, see Chapter 12. See also</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/15385596/how-are-servlet-url-mappings-in-web-xml-used"">How are Servlet url mappings in web.xml used?</a></li>
</ul>
<p>With that in mind, a common mistake is to register the <code>DispatcherServlet</code> with a url mapping of <code>/*</code>, returning a view name from a <code>@RequestMapping</code> handler method, and expecting a JSP to be rendered. For example, consider a handler method like</p>
<pre><code>@RequestMapping(path = &quot;/example&quot;, method = RequestMethod.GET)
public String example() {
    return &quot;example-view-name&quot;;
}
</code></pre>
<p>with an <a href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/InternalResourceViewResolver.html"" rel=""noreferrer""><code>InternalResourceViewResolver</code></a></p>
<pre><code>@Bean
public InternalResourceViewResolver resolver() {
    InternalResourceViewResolver vr = new InternalResourceViewResolver();
    vr.setPrefix(&quot;/WEB-INF/jsps/&quot;);
    vr.setSuffix(&quot;.jsp&quot;);
    return vr;
}
</code></pre>
<p>you might expect the request to be <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/RequestDispatcher.html#forward-javax.servlet.ServletRequest-javax.servlet.ServletResponse-"" rel=""noreferrer"">forwarded</a> to a JSP resource at the path <code>/WEB-INF/jsps/example-view-name.jsp</code>. This won't happen. Instead, assuming a context name of <code>Example</code>, the <code>DisaptcherServlet</code> will report</p>
<blockquote>
<p>No mapping found for HTTP request with URI <code>[/Example/WEB-INF/jsps/example-view-name.jsp]</code> in <code>DispatcherServlet</code> with name 'dispatcher'</p>
</blockquote>
<p>Because the <code>DispatcherServlet</code> is mapped to <code>/*</code> and <code>/*</code> matches everything (except exact matches, which have higher priority), the <code>DispatcherServlet</code> would be chosen to handle the <code>forward</code> from the <a href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/JstlView.html"" rel=""noreferrer""><code>JstlView</code></a> (returned by the <code>InternalResourceViewResolver</code>). <strong>In almost every case, the <code>DispatcherServlet</code> will not be configured to handle such a request</strong>.</p>
<p>Instead, in this simplistic case, you should register the <code>DispatcherServlet</code> to <code>/</code>, marking it as the default servlet. The default servlet is the last match for a request. This will allow your typical servlet container to chose an internal Servlet implementation, mapped to <code>*.jsp</code>, to handle the JSP resource (for example, Tomcat has <a href=""https://tomcat.apache.org/tomcat-8.0-doc/api/org/apache/jasper/servlet/JspServlet.html"" rel=""noreferrer""><code>JspServlet</code></a>), before trying with the default servlet.</p>
<p>That's what you're seeing in your example.</p>
"
322742,"<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>. If you're not sureÂ â just start with <code>ArrayList</code>.</p>
<hr />
<p>TLDR, in <code>ArrayList</code> accessing an element takes constant time [O(1)] and adding an element takes O(n) time [worst case]. In <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p>
<p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface. <code>LinkedList</code> implements it with a doubly-linked list. <code>ArrayList</code> implements it with a dynamically re-sizing array.</p>
<p>As with standard linked list and array operations, the various methods will have different algorithmic runtimes.</p>
<p>For <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html"" rel=""noreferrer""><code>LinkedList&lt;E&gt;</code></a></p>
<ul>
<li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average), but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case, you can also use <code>getFirst()</code> and <code>getLast()</code>). <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>
<li><code>add(int index, E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average), but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case, you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>). <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>
<li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average), but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case, you can also use <code>removeFirst()</code> and <code>removeLast()</code>). <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>
<li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>
<li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>
</ul>
<p><sup>Note: Many of the operations need <em>n/4</em> steps on average, <em>constant</em> number of steps in the best case (e.g. index = 0), and <em>n/2</em> steps in worst case (middle of list)</sup></p>
<p>For <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html"" rel=""noreferrer""><code>ArrayList&lt;E&gt;</code></a></p>
<ul>
<li><code>get(int index)</code> is <em>O(1)</em>. <strong>Main benefit of</strong> <code>ArrayList&lt;E&gt;</code></li>
<li><code>add(E element)</code> is <em>O(1)</em> amortized, but <em>O(n)</em> worst-case since the array must be resized and copied</li>
<li><code>add(int index, E element)</code> is <em>O(n)</em> (with <em>n/2</em> steps on average)</li>
<li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/2</em> steps on average)</li>
<li><code>Iterator.remove()</code> is <em>O(n)</em> (with <em>n/2</em> steps on average)</li>
<li><code>ListIterator.add(E element)</code> is <em>O(n)</em> (with <em>n/2</em> steps on average)</li>
</ul>
<p><sup>Note: Many of the operations need <em>n/2</em> steps on average, <em>constant</em> number of steps in the best case (end of list), <em>n</em> steps in the worst case (start of list)</sup></p>
<p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>, but only sequential access of elements. In other words, you can walk the list forwards or backwards, but finding a position in the list takes time proportional to the size of the list. Javadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end, whichever is closer&quot;</em>, so those methods are <em>O(n)</em> (<em>n/4</em> steps) on average, though <em>O(1)</em> for <code>index = 0</code>.</p>
<p><code>ArrayList&lt;E&gt;</code>, on the other hand, allow fast random read access, so you can grab any element in constant time. But adding or removing from anywhere but the end requires shifting all the latter elements over, either to make an opening or fill the gap. Also, if you add more elements than the capacity of the underlying array, a new array (1.5 times the size) is allocated, and the old array is copied to the new one, so adding to an <code>ArrayList</code> is <em>O(n)</em> in the worst case but constant on average.</p>
<p>So depending on the operations you intend to do, you should choose the implementations accordingly. Iterating over either kind of List is practically equally cheap. (Iterating over an <code>ArrayList</code> is technically faster, but unless you're doing something really performance-sensitive, you shouldn't worry about this -- they're both constants.)</p>
<p>The main benefits of using a <code>LinkedList</code> arise when you re-use existing iterators to insert and remove elements. These operations can then be done in <em>O(1)</em> by changing the list locally only. In an array list, the remainder of the array needs to be <em>moved</em> (i.e. copied). On the other side, seeking in a <code>LinkedList</code> means following the links in <em>O(n)</em> (<em>n/2</em> steps) for worst case, whereas in an <code>ArrayList</code> the desired position can be computed mathematically and accessed in <em>O(1)</em>.</p>
<p>Another benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list, since those operations are <em>O(1)</em>, while they are <em>O(n)</em> for <code>ArrayList</code>. Note that <code>ArrayDeque</code> may be a good alternative to <code>LinkedList</code> for adding and removing from the head, but it is not a <code>List</code>.</p>
<p>Also, if you have large lists, keep in mind that memory usage is also different. Each element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored. <code>ArrayLists</code> don't have this overhead. However, <code>ArrayLists</code> take up as much memory as is allocated for the capacity, regardless of whether elements have actually been added.</p>
<p>The default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8). But since the underlying implementation is an array, the array must be resized if you add a lot of elements. To avoid the high cost of resizing when you know you're going to add a lot of elements, construct the <code>ArrayList</code> with a higher initial capacity.</p>
<p>If the data structures perspective is used to understand the two structures, a LinkedList is basically a sequential data structure which contains a head Node. The Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it. So, we can assert it is a recursive data structure (a Node contains another Node which has another Node and so on...). Addition of elements takes linear time in LinkedList as stated above.</p>
<p>An ArrayList is a growable array. It is just like a regular array. Under the hood, when an element is added, and the ArrayList is already full to capacity, it creates another array with a size which is greater than previous size. The elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>
"
26245463,"<p>Yes, it's possible. Just implement <a href=""https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#getItemViewType(int)"">getItemViewType()</a>, and take care of the <code>viewType</code> parameter in <code>onCreateViewHolder()</code>.</p>

<p>So you do something like:</p>

<pre><code>public class MyAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {
    class ViewHolder0 extends RecyclerView.ViewHolder {
        ...
        public ViewHolder0(View itemView){
        ...
        }
    }

    class ViewHolder2 extends RecyclerView.ViewHolder {
        ...
        public ViewHolder2(View itemView){
        ...
    }

    @Override
    public int getItemViewType(int position) {
        // Just as an example, return 0 or 2 depending on position
        // Note that unlike in ListView adapters, types don't have to be contiguous
        return position % 2 * 2;
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         switch (viewType) {
             case 0: return new ViewHolder0(...);
             case 2: return new ViewHolder2(...);
             ...
         }
    }

    @Override
    public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int position) {
        switch (holder.getItemViewType()) {
            case 0:
                ViewHolder0 viewHolder0 = (ViewHolder0)holder;
                ...
                break;

            case 2:
                ViewHolder2 viewHolder2 = (ViewHolder2)holder;
                ...
                break;
        }
    }
}
</code></pre>
"
2265637,"<p>Joshua Bloch says on Effective Java</p>
<blockquote>
<p>You must override hashCode() in every class that overrides equals(). Failure to do so will result in a violation of the general contract for Object.hashCode(), which will prevent your class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable.</p>
</blockquote>
<p>Let's try to understand it with an example of what would happen if we override <code>equals()</code> without overriding <code>hashCode()</code> and attempt to use a <code>Map</code>.</p>
<p>Say we have a class like this and that two objects of <code>MyClass</code> are equal if their <code>importantField</code> is equal (with <code>hashCode()</code> and <code>equals()</code> generated by eclipse)</p>
<pre><code>public class MyClass {
    private final String importantField;
    private final String anotherField;

    public MyClass(final String equalField, final String anotherField) {
        this.importantField = equalField;
        this.anotherField = anotherField;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((importantField == null) ? 0 : importantField.hashCode());
        return result;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final MyClass other = (MyClass) obj;
        if (importantField == null) {
            if (other.importantField != null)
                return false;
        } else if (!importantField.equals(other.importantField))
            return false;
        return true;
    }
}
</code></pre>
<hr />
<p>Imagine you have this</p>
<pre><code>MyClass first = new MyClass(&quot;a&quot;,&quot;first&quot;);
MyClass second = new MyClass(&quot;a&quot;,&quot;second&quot;);
</code></pre>
<p><strong>Override only <code>equals</code></strong></p>
<p>If only <code>equals</code> is overriden, then when you call <code>myMap.put(first,someValue)</code> first will hash to some bucket and when you call <code>myMap.put(second,someOtherValue)</code> it will hash to some other bucket (as they have a different <code>hashCode</code>). So, although they are equal, as they don't hash to the same bucket, the map can't realize it and both of them stay in the map.</p>
<hr />
<p>Although it is not necessary to override <code>equals()</code> if we override <code>hashCode()</code>, let's see what would happen in this particular case where we know that two objects of <code>MyClass</code> are equal if their <code>importantField</code> is equal but we do not override <code>equals()</code>.</p>
<p><strong>Override only <code>hashCode</code></strong></p>
<p>If you only override <code>hashCode</code> then when you call <code>myMap.put(first,someValue)</code> it takes first, calculates its <code>hashCode</code> and stores it in a given bucket. Then when you call <code>myMap.put(second,someOtherValue)</code> it should replace first with second  as per the <a href=""http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html#put%28java.lang.Object,%20java.lang.Object%29"" rel=""noreferrer"">Map Documentation</a> because they are equal (according to the business requirement).</p>
<p>But the problem is that equals was not redefined, so when the map hashes <code>second</code> and iterates through the bucket looking if there is an object <code>k</code> such that <code>second.equals(k)</code> is true it won't find any as <code>second.equals(first)</code> will be <code>false</code>.</p>
<p>Hope it was clear</p>
"
85206,"<pre><code>for (Iterator&lt;String&gt; i = someIterable.iterator(); i.hasNext();) {
    String item = i.next();
    System.out.println(item);
}
</code></pre>

<p>Note that if you need to use <code>i.remove();</code> in your loop, or access the actual iterator in some way, you cannot use the <code>for ( : )</code> idiom, since the actual iterator is merely inferred.</p>

<p>As was noted by Denis Bueno, this code works for any object that implements the <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html"" rel=""noreferrer""><code>Iterable</code> interface</a>.</p>

<p>Also, if the right-hand side of the <code>for (:)</code> idiom is an <code>array</code> rather than an <code>Iterable</code> object, the internal code uses an int index counter and checks against <code>array.length</code> instead. See the <a href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14.2"" rel=""noreferrer"">Java Language Specification</a>.</p>
"
214758,"<p>Parameters and local variables are allocated on the <strong>stack</strong> (with reference types, the object lives on the <strong>heap</strong> and a variable in the stack references that object on the heap). The stack typically lives at the <strong>upper</strong> end of your address space and as it is used up it heads towards the <strong>bottom</strong> of the address space (i.e. towards zero).</p>

<p>Your process also has a <strong>heap</strong>, which lives at the <strong>bottom</strong> end of your process. As you allocate memory, this heap can grow towards the upper end of your address space. As you can see, there is a potential for the heap to <strong>""collide""</strong> with the stack (a bit like tectonic plates!!!).</p>

<p>The common cause for a stack overflow is a <strong>bad recursive call</strong>. Typically, this is caused when your recursive functions doesn't have the correct termination condition, so it ends up calling itself forever. Or when the termination condition is fine, it can be caused by requiring too many recursive calls before fulfilling it.</p>

<p>However, with GUI programming, it's possible to generate <strong>indirect recursion</strong>. For example, your app may be handling paint messages, and, whilst processing them, it may call a function that causes the system to send another paint message. Here you've not explicitly called yourself, but the OS/VM has done it for you.</p>

<p>To deal with them, you'll need to examine your code. If you've got functions that call themselves then check that you've got a terminating condition. If you have, then check that when calling the function you have at least modified one of the arguments, otherwise there'll be no visible change for the recursively called function and the terminating condition is useless. Also mind that your stack space can run out of memory before reaching a valid terminating condition, thus make sure your method can handle input values requiring more recursive calls.</p>

<p>If you've got no obvious recursive functions then check to see if you're calling any library functions that <strong>indirectly</strong> will cause your function to be called (like the implicit case above).</p>
"
1625263,"<p>Are you doing this for logging purposes?  If so there are <a href=""http://en.wikipedia.org/wiki/Java_logging_framework"" rel=""noreferrer"">several libraries for this</a>. Two of the most popular are <a href=""http://logging.apache.org/log4j/"" rel=""noreferrer"">Log4j</a> and <a href=""http://logback.qos.ch/"" rel=""noreferrer"">Logback</a>.</p>
<h2>Java 7+</h2>
<p>For a one-time task, the <a href=""https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html"" rel=""noreferrer"">Files class</a> makes this easy:</p>
<pre><code>try {
    Files.write(Paths.get(&quot;myfile.txt&quot;), &quot;the text&quot;.getBytes(), StandardOpenOption.APPEND);
}catch (IOException e) {
    //exception handling left as an exercise for the reader
}
</code></pre>
<p><strong>Careful</strong>: The above approach will throw a <code>NoSuchFileException</code> if the file does not already exist. It also does not append a newline automatically (which you often want when appending to a text file). Another approach is to pass both <code>CREATE</code> and <code>APPEND</code> options, which will create the file first if it doesn't already exist:</p>
<pre><code>private void write(final String s) throws IOException {
    Files.writeString(
        Path.of(System.getProperty(&quot;java.io.tmpdir&quot;), &quot;filename.txt&quot;),
        s + System.lineSeparator(),
        CREATE, APPEND
    );
}
</code></pre>
<p>However, if you will be writing to the same file many times, the above snippets must open and close the file on the disk many times, which is a slow operation. In this case, a <code>BufferedWriter</code> is faster:</p>
<pre><code>try(FileWriter fw = new FileWriter(&quot;myfile.txt&quot;, true);
    BufferedWriter bw = new BufferedWriter(fw);
    PrintWriter out = new PrintWriter(bw))
{
    out.println(&quot;the text&quot;);
    //more code
    out.println(&quot;more text&quot;);
    //more code
} catch (IOException e) {
    //exception handling left as an exercise for the reader
}
</code></pre>
<p><strong>Notes:</strong></p>
<ul>
<li>The second parameter to the <code>FileWriter</code> constructor will tell it to append to the file, rather than writing a new file. (If the file does not exist, it will be created.)</li>
<li>Using a <code>BufferedWriter</code> is recommended for an expensive writer (such as <code>FileWriter</code>).</li>
<li>Using a <code>PrintWriter</code> gives you access to <code>println</code> syntax that you're probably used to from <code>System.out</code>.</li>
<li>But the <code>BufferedWriter</code> and <code>PrintWriter</code> wrappers are not strictly necessary.</li>
</ul>
<hr />
<h2>Older Java</h2>
<pre><code>try {
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(&quot;myfile.txt&quot;, true)));
    out.println(&quot;the text&quot;);
    out.close();
} catch (IOException e) {
    //exception handling left as an exercise for the reader
}
</code></pre>
<hr />
<h2>Exception Handling</h2>
<p>If you need robust exception handling for older Java, it gets very verbose:</p>
<pre><code>FileWriter fw = null;
BufferedWriter bw = null;
PrintWriter out = null;
try {
    fw = new FileWriter(&quot;myfile.txt&quot;, true);
    bw = new BufferedWriter(fw);
    out = new PrintWriter(bw);
    out.println(&quot;the text&quot;);
    out.close();
} catch (IOException e) {
    //exception handling left as an exercise for the reader
}
finally {
    try {
        if(out != null)
            out.close();
    } catch (IOException e) {
        //exception handling left as an exercise for the reader
    }
    try {
        if(bw != null)
            bw.close();
    } catch (IOException e) {
        //exception handling left as an exercise for the reader
    }
    try {
        if(fw != null)
            fw.close();
    } catch (IOException e) {
        //exception handling left as an exercise for the reader
    }
}
</code></pre>
"
43574427,"<p>The JAXB APIs are considered to be Java EE APIs and therefore are no longer contained on the default classpath in Java SE 9. In Java 11, they are completely removed from the JDK.</p>
<p>Java 9 introduces the concepts of modules, and by default, the <code>java.se</code> aggregate module is available on the classpath (or rather, module-path). As the name implies, the <code>java.se</code> aggregate module does <em>not</em> include the Java EE APIs that have been traditionally bundled with Java 6/7/8.</p>
<p>Fortunately, these Java EE APIs that were provided in JDK 6/7/8 are still in the JDK, but they just aren't on the classpath by default. The extra Java EE APIs are provided in the following modules:</p>
<pre><code>java.activation
java.corba
java.transaction
java.xml.bind  &lt;&lt; This one contains the JAXB APIs
java.xml.ws
java.xml.ws.annotation
</code></pre>
<p><strong>Quick and dirty solution: (JDK 9/10 only)</strong></p>
<p>To make the JAXB APIs available at runtime, specify the following command-line option:</p>
<p><code>--add-modules java.xml.bind</code></p>
<p><strong>But I still need this to work with Java 8!!!</strong></p>
<p>If you try specifying <code>--add-modules</code> with an older JDK, it will blow up because it's an unrecognized option. I suggest one of two options:</p>
<ol>
<li>You can set any Java 9+ only options using the <code>JDK_JAVA_OPTIONS</code> environment variable. This environment variable is <a href=""https://www.oracle.com/technetwork/java/javase/9-new-features-3745613.html#JDK-8170832"" rel=""noreferrer"">automatically read</a> by the <code>java</code> launcher for Java 9+.</li>
<li>You can add the <code>-XX:+IgnoreUnrecognizedVMOptions</code> to make the JVM silently ignore unrecognized options, instead of blowing up. But beware! Any other command-line arguments you use will no longer be validated for you by the JVM. This option works with Oracle/OpenJDK as well as IBM JDK (as of JDK 8sr4).</li>
</ol>
<hr />
<p><strong>Alternate quick solution: (JDK 9/10 only)</strong></p>
<p>Note that you can make all of the above Java EE modules available at run time by specifying the <code>--add-modules java.se.ee</code> option. The <code>java.se.ee</code> module is an aggregate module that includes <code>java.se.ee</code> as well as the above Java EE API modules. Note, this <strong>doesn't work on Java 11</strong> because <code>java.se.ee</code> was removed in Java 11.</p>
<hr />
<h2>Proper long-term solution: (JDK 9 and beyond)</h2>
<p>The Java EE API modules listed above are all marked <code>@Deprecated(forRemoval=true)</code> because they are <a href=""http://openjdk.java.net/jeps/320"" rel=""noreferrer"">scheduled for removal</a> in <a href=""http://openjdk.java.net/projects/jdk/11/"" rel=""noreferrer"">Java 11</a>. So the <code>--add-module</code> approach will no longer work in Java 11 out-of-the-box.</p>
<p>What you will need to do in Java 11 and forward is include your own copy of the Java EE APIs on the classpath or module path. For example, you can add the JAX-B APIs as a Maven dependency like this:</p>
<pre><code>&lt;!-- API, java.xml.bind module --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;jakarta.xml.bind&lt;/groupId&gt;
    &lt;artifactId&gt;jakarta.xml.bind-api&lt;/artifactId&gt;
    &lt;version&gt;2.3.2&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- Runtime, com.sun.xml.bind module --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;
    &lt;artifactId&gt;jaxb-runtime&lt;/artifactId&gt;
    &lt;version&gt;2.3.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>See the <a href=""https://eclipse-ee4j.github.io/jaxb-ri/"" rel=""noreferrer"">JAXB Reference Implementation page</a> for more details on JAXB.</p>
<p>For full details on Java modularity, see <a href=""http://openjdk.java.net/jeps/261"" rel=""noreferrer"">JEP 261: Module System</a></p>
<p>As of July 2022, the latest version of the bind-api and jaxb-runtime is 4.0.0.  So you can also use</p>
<pre><code>    &lt;version&gt;4.0.0&lt;/version&gt;
</code></pre>
<p>...within those dependency clauses. But if you do so, the package names have changed from <code>javax.xml.bind...</code> to <code>jakarta.xml.bind...</code>.  You will need to modify your source code to use these later versions of the JARs.</p>
<p><strong>For Gradle or Android Studio developer: (JDK 9 and beyond)</strong></p>
<p>Add the following dependencies to your <code>build.gradle</code> file:</p>
<pre><code>dependencies {
    // JAX-B dependencies for JDK 9+
    implementation &quot;jakarta.xml.bind:jakarta.xml.bind-api:2.3.2&quot;
    implementation &quot;org.glassfish.jaxb:jaxb-runtime:2.3.2&quot;
}
</code></pre>
"
70358,"<p>From the <a href=""http://java.sun.com/docs/books/tutorial/java/javaOO/nested.html"" rel=""noreferrer"">Java Tutorial</a>:</p>

<blockquote>
  <p>Nested classes are divided into two categories: static and non-static. Nested classes that are declared static are simply called static nested classes. Non-static nested classes are called inner classes. </p>
</blockquote>

<p>Static nested classes are accessed using the enclosing class name:</p>

<pre><code>OuterClass.StaticNestedClass
</code></pre>

<p>For example, to create an object for the static nested class, use this syntax:</p>

<pre><code>OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();
</code></pre>

<p>Objects that are instances of an inner class exist within an instance of the outer class. Consider the following classes:</p>

<pre><code>class OuterClass {
    ...
    class InnerClass {
        ...
    }
}
</code></pre>

<p>An instance of InnerClass can exist only within an instance of OuterClass and has direct access to the methods and fields of its enclosing instance.</p>

<p>To instantiate an inner class, you must first instantiate the outer class. Then, create the inner object within the outer object with this syntax:</p>

<pre><code>OuterClass outerObject = new OuterClass()
OuterClass.InnerClass innerObject = outerObject.new InnerClass();
</code></pre>

<p>see: <a href=""http://download.oracle.com/javase/tutorial/java/javaOO/nested.html"" rel=""noreferrer"">Java Tutorial - Nested Classes</a></p>

<p>For completeness note that there is also such a thing as an <a href=""https://stackoverflow.com/questions/20468856/is-it-true-that-every-inner-class-requires-an-enclosing-instance"">inner class <em>without</em> an enclosing instance</a>:</p>

<pre><code>class A {
  int t() { return 1; }
  static A a =  new A() { int t() { return 2; } };
}
</code></pre>

<p>Here, <code>new A() { ... }</code> is an <em>inner class defined in a static context</em> and does not have an enclosing instance.</p>
"
26446609,"<h2>Idiomatic Example:</h2>

<p>The following is how to properly use the <code>java.util.Scanner</code> class to interactively read user input from <code>System.in</code> correctly( sometimes referred to as <code>stdin</code>, especially in C, C++ and other languages as well as in Unix and Linux). It idiomatically demonstrates the most common things that are requested to be done.</p>

<pre><code>package com.stackoverflow.scanner;

import javax.annotation.Nonnull;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;
import java.util.regex.Pattern;

import static java.lang.String.format;

public class ScannerExample
{
    private static final Set&lt;String&gt; EXIT_COMMANDS;
    private static final Set&lt;String&gt; HELP_COMMANDS;
    private static final Pattern DATE_PATTERN;
    private static final String HELP_MESSAGE;

    static
    {
        final SortedSet&lt;String&gt; ecmds = new TreeSet&lt;String&gt;(String.CASE_INSENSITIVE_ORDER);
        ecmds.addAll(Arrays.asList(""exit"", ""done"", ""quit"", ""end"", ""fino""));
        EXIT_COMMANDS = Collections.unmodifiableSortedSet(ecmds);
        final SortedSet&lt;String&gt; hcmds = new TreeSet&lt;String&gt;(String.CASE_INSENSITIVE_ORDER);
        hcmds.addAll(Arrays.asList(""help"", ""helpi"", ""?""));
        HELP_COMMANDS = Collections.unmodifiableSet(hcmds);
        DATE_PATTERN = Pattern.compile(""\\d{4}([-\\/])\\d{2}\\1\\d{2}""); // http://regex101.com/r/xB8dR3/1
        HELP_MESSAGE = format(""Please enter some data or enter one of the following commands to exit %s"", EXIT_COMMANDS);
    }

    /**
     * Using exceptions to control execution flow is always bad.
     * That is why this is encapsulated in a method, this is done this
     * way specifically so as not to introduce any external libraries
     * so that this is a completely self contained example.
     * @param s possible url
     * @return true if s represents a valid url, false otherwise
     */
    private static boolean isValidURL(@Nonnull final String s)
    {
        try { new URL(s); return true; }
        catch (final MalformedURLException e) { return false; }
    }

    private static void output(@Nonnull final String format, @Nonnull final Object... args)
    {
        System.out.println(format(format, args));
    }

    public static void main(final String[] args)
    {
        final Scanner sis = new Scanner(System.in);
        output(HELP_MESSAGE);
        while (sis.hasNext())
        {
            if (sis.hasNextInt())
            {
                final int next = sis.nextInt();
                output(""You entered an Integer = %d"", next);
            }
            else if (sis.hasNextLong())
            {
                final long next = sis.nextLong();
                output(""You entered a Long = %d"", next);
            }
            else if (sis.hasNextDouble())
            {
                final double next = sis.nextDouble();
                output(""You entered a Double = %f"", next);
            }
            else if (sis.hasNext(""\\d+""))
            {
                final BigInteger next = sis.nextBigInteger();
                output(""You entered a BigInteger = %s"", next);
            }
            else if (sis.hasNextBoolean())
            {
                final boolean next = sis.nextBoolean();
                output(""You entered a Boolean representation = %s"", next);
            }
            else if (sis.hasNext(DATE_PATTERN))
            {
                final String next = sis.next(DATE_PATTERN);
                output(""You entered a Date representation = %s"", next);
            }
            else // unclassified
            {
                final String next = sis.next();
                if (isValidURL(next))
                {
                    output(""You entered a valid URL = %s"", next);
                }
                else
                {
                    if (EXIT_COMMANDS.contains(next))
                    {
                        output(""Exit command %s issued, exiting!"", next);
                        break;
                    }
                    else if (HELP_COMMANDS.contains(next)) { output(HELP_MESSAGE); }
                    else { output(""You entered an unclassified String = %s"", next); }
                }
            }
        }
        /*
           This will close the underlying InputStream, in this case System.in, and free those resources.
           WARNING: You will not be able to read from System.in anymore after you call .close().
           If you wanted to use System.in for something else, then don't close the Scanner.
        */
        sis.close();
        System.exit(0);
    }
}
</code></pre>

<h2>Notes:</h2>

<blockquote>
  <p>This may look like a lot of code, but it illustrates the minimum
  effort needed to use the <code>Scanner</code> class correctly and not have to
  deal with subtle bugs and side effects that plague those new to
  programming and this terribly implemented class called
  <code>java.util.Scanner</code>. It tries to illustrate what idiomatic Java code
  should look like and behave like.</p>
</blockquote>

<p><em>Below are some of the things I was thinking about when I wrote this example:</em></p>

<h3>JDK Version:</h3>

<p>I purposely kept this example compatible with JDK 6. If some scenario really demands a feature of JDK 7/8 I or someone else will post a new answer with specifics about how to modify this for that version JDK.</p>

<p>The majority of questions about this class come from students and they usually have restrictions on what they can use to solve a problem so I restricted this as much as I could to show how to do the common things without any other dependencies. <em>In the 22+ years I have been working with Java and consulting the majority of that time I have never encountered professional use of this class in the 10's of millions of lines source code I have seen.</em></p>

<h3>Processing commands:</h3>

<p>This shows exactly how to <a href=""http://en.wikipedia.org/wiki/Idiom_(language_structure)"" rel=""noreferrer"">idiomatically</a> read commands from the user interactively and dispatch those commands. The majority of questions about <code>java.util.Scanner</code> are of the <em>how can I get my program to quit when I enter some specific input</em> category. This shows that clearly.</p>

<h3>Naive Dispatcher</h3>

<p>The dispatch logic is intentionally naive so as to not complicate the solution for new readers. A dispatcher based on a <code>Strategy Pattern</code> or <code>Chain Of Responsibility</code> pattern would be more appropriate for real world problems that would be much more complex.</p>

<h3>Error Handling</h3>

<p>The code was deliberately structured as to require no <code>Exception</code> handling because there is no scenario where some data might not be correct.</p>

<h3><code>.hasNext()</code> and <code>.hasNextXxx()</code></h3>

<p>I rarely see anyone using the <code>.hasNext()</code> properly, by testing for the generic <code>.hasNext()</code> to control the event loop, and then using the <code>if(.hasNextXxx())</code> idiom lets you decide how and what to proceed with your code without having to worry about asking for an <code>int</code> when none is available, thus no exception handling code.</p>

<h3><code>.nextXXX()</code> vs <code>.nextLine()</code></h3>

<p>This is something that breaks everyone's code. It is a <a href=""https://stackoverflow.com/questions/13102045/scanner-is-skipping-nextline-after-using-next-or-nextfoo"">finicky detail</a> that should not have to be dealt with and has a very obfusated bug that is hard to reason about because of it breaks the <a href=""https://en.wikipedia.org/wiki/Principle_of_least_astonishment"" rel=""noreferrer"">Principal of Least Astonishment</a></p>

<p>The <code>.nextXXX()</code> methods do not consume the line ending. <code>.nextLine()</code> does.</p>

<p>That means that calling <code>.nextLine()</code> immediately after <code>.nextXXX()</code> will just return the line ending. You have to call it again to actually get the next line.</p>

<p>This is why many people advocate either use nothing but the <code>.nextXXX()</code> methods or only <code>.nextLine()</code> but not both at the same time so that this finicky behavior does not trip you up. Personally I think the type safe methods are much better than having to then test and parse and catch errors manually.</p>

<h3>Immutablity:</h3>

<p>Notice that there are no mutable variables used in the code, this is important to learn how to do, it eliminates four of the most major sources of runtime errors and subtle bugs.</p>

<ol>
<li><p>No <code>nulls</code> means no possibility of a  <code>NullPointerExceptions</code>!</p></li>
<li><p>No mutability means that you don't have to worry about method arguments changing or anything else changing. When you step debug through you never have to use <code>watch</code> to see what variables are change to what values, if they are changing. This makes the logic 100% deterministic when you read it.</p></li>
<li><p>No mutability means your code is automatically thread-safe.</p></li>
<li><p>No side effects. If nothing can change, the you don't have to worry about some subtle side effect of some edge case changing something unexpectedly!</p></li>
</ol>

<p><a href=""http://www.vertigrated.com/blog/2011/05/the-final-word-on-final/"" rel=""noreferrer"">Read this if you don't understand how to apply the <code>final</code> keyword in your own code.</a></p>

<h3>Using a Set instead of massive <code>switch</code> or <code>if/elseif</code> blocks:</h3>

<p>Notice how I use a <code>Set&lt;String&gt;</code> and use <code>.contains()</code> to classify the commands instead of a massive <code>switch</code> or <code>if/elseif</code> monstrosity that would bloat your code and more importantly make maintenance a nightmare! Adding a new overloaded command is as simple as adding a new <code>String</code> to the array in the constructor.</p>

<p>This also would work very well with <code>i18n</code> and <code>i10n</code> and the proper <code>ResourceBundles</code>.
A <code>Map&lt;Locale,Set&lt;String&gt;&gt;</code> would let you have multiple language support with very little overhead!</p>

<h3>@Nonnull</h3>

<p>I have decided that all my code should <a href=""https://stackoverflow.com/a/228305/177800"">explicitly</a> declare if something is <code>@Nonnull</code> or <code>@Nullable</code>. It lets your IDE help warn you about potential <code>NullPointerException</code> hazards and when you do not have to check.</p>

<p>Most importantly it documents the expectation for future readers that none of these method parameters should be <code>null</code>.</p>

<h3>Calling .close()</h3>

<p>Really think about this one before you do it.</p>

<p>What do you think will happen <code>System.in</code> if you were to call <code>sis.close()</code>? See the comments in the listing above.</p>

<h3>Please <a href=""https://gist.github.com/jarrodhroberson/c35130cb8ee107ab10e9#file-scannerexample-java"" rel=""noreferrer"">fork and send pull requests</a> and I will update this question and answer for other basic usage scenarios.</h3>
"
147233,"<h3><a href=""https://docs.oracle.com/javase/10/tools/javapackager.htm"" rel=""noreferrer"">javapackager</a></h3>
<blockquote>
<p>The Java Packager tool compiles, packages, and prepares Java and JavaFX applications for distribution. The javapackager command is the command-line version.</p>
<p>â Oracle's documentation</p>
</blockquote>
<p>The <code>javapackager</code> utility ships with the JDK. It can generate .exe files with the <code>-native exe</code> flag, among many other things.</p>
<h3><a href=""http://winrun4j.sourceforge.net/"" rel=""noreferrer"">WinRun4J</a></h3>
<blockquote>
<p>WinRun4j is a java launcher for windows. It is an alternative to javaw.exe and provides the following benefits:</p>
<ul>
<li>Uses an INI file for specifying classpath, main class, vm args, program args.</li>
<li>Custom executable name that appears in task manager.</li>
<li>Additional JVM args for more flexible memory use.</li>
<li>Built-in icon replacer for custom icon.</li>
<li><em>[more bullet points follow]</em></li>
</ul>
<p>â WinRun4J's webpage</p>
</blockquote>
<p>WinRun4J is an open source utility. It has <em>many</em> features.</p>
<h3><a href=""https://github.com/libgdx/packr"" rel=""noreferrer"">packr</a></h3>
<blockquote>
<p>Packages your JAR, assets and a JVM for distribution on Windows, Linux and Mac OS X, adding a native executable file to make it appear like a native app. Packr is most suitable for GUI applications.</p>
<p>â packr README</p>
</blockquote>
<p>packr is another open source tool.</p>
<h3><a href=""http://jsmooth.sourceforge.net/"" rel=""noreferrer"">JSmooth</a></h3>
<blockquote>
<p>JSmooth is a Java Executable Wrapper. It creates native Windows launchers (standard .exe) for your java applications. It makes java deployment much smoother and user-friendly, as it is able to find any installed Java VM by itself.</p>
<p>â JSmooth's website</p>
</blockquote>
<p>JSmooth is open source and has features, but it is very old. The last release was in 2007.</p>
<h3><a href=""https://www.duckware.com/jexepack/index.html"" rel=""noreferrer"">JexePack</a></h3>
<blockquote>
<p><em>JexePack</em> is a command line tool (great for automated scripting) that allows you to package your Java application (class files), optionally along with its resources (like GIF/JPG/TXT/etc), into a single <em>compressed</em> 32-bit Windows EXE, which runs using Sun's Java Runtime Environment. Both console and windowed applications are supported.</p>
<p>â JexePack's website</p>
</blockquote>
<p>JexePack is trialware. Payment is required for production use, and exe files created with this tool will display &quot;reminders&quot; without payment. Also, the last release was in 2013.</p>
<h3><a href=""https://www.flexera.com/products/installation/installanywhere.html"" rel=""noreferrer"">InstallAnywhere</a></h3>
<blockquote>
<p>InstallAnywhere makes it easy for developers to create professional installation software for any platform. With InstallAnywhere, youâll adapt to industry changes quickly, get to market faster and deliver an engaging customer experience. And know the vulnerability of your projectâs OSS components before you ship.</p>
<p>â InstallAnywhere's website</p>
</blockquote>
<p>InstallAnywhere is a commercial/enterprise package that generates installers for Java-based programs. It's probably capable of creating .exe files.</p>
<h3>Executable JAR files</h3>
<p>As an alternative to .exe files, you can create a JAR file that automatically runs when double-clicked, by <a href=""https://docs.oracle.com/javase/tutorial/deployment/jar/appman.html"" rel=""noreferrer"">adding an entry point to the JAR manifest</a>.</p>
<hr />
<h1>For more information</h1>
<p>An excellent source of information on this topic is Excelsior's article &quot;<a href=""https://www.excelsior-usa.com/articles/java-to-exe.html"" rel=""noreferrer"">Convert Java to EXE â Why, When, When Not and How</a>&quot;.</p>
<p>See also the companion article &quot;<a href=""https://www.excelsior-usa.com/articles/best-jar-to-exe-conversion-tools-free-commercial.html"" rel=""noreferrer"">Best JAR to EXE Conversion Tools, Free and Commercial</a>&quot;.</p>
"
413904,"<p><code>static</code> members belong to the class instead of a specific instance.</p>

<p>It means that <b>only one instance of a <code>static</code> field exists</b><sup>[1]</sup> even if you create a million instances of the class or you don't create any. It will be shared by all instances.</p>

<p>Since <code>static</code> methods also do not belong to a specific instance, they can't refer to instance members. In the example given, <code>main</code> does not know which instance of the <code>Hello</code> class (and therefore which instance of the <code>Clock</code> class) it should refer to. <code>static</code> members can only refer to <code>static</code> members. Instance members can, of course access <code>static</code> members.</p>

<p><i>Side note:</i> Of course, <code>static</code> members can access instance members <b>through an object reference</b>.</p>

<p>Example:</p>

<pre><code>public class Example {
    private static boolean staticField;
    private boolean instanceField;
    public static void main(String[] args) {
        // a static method can access static fields
        staticField = true;

        // a static method can access instance fields through an object reference
        Example instance = new Example();
        instance.instanceField = true;
    }
</code></pre>

<p>[1]: Depending on the runtime characteristics, it can be one per ClassLoader or AppDomain or thread, but that is beside the point.</p>
"
2985169,"<p>So, you have a </p>

<blockquote>
  <p>com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure<br>
  java.net.ConnectException: Connection refused</p>
</blockquote>

<p>I'm quoting from <a href=""https://stackoverflow.com/questions/2839321/java-connectivity-with-mysql/2840358#2840358"">this answer</a> which also contains a step-by-step MySQL+JDBC tutorial:</p>

<blockquote>
  <p>If you get a <code>SQLException: Connection refused</code> or <code>Connection timed out</code> or a MySQL specific <code>CommunicationsException: 
  Communications link failure</code>, then it means that the DB isn't reachable at all. This can have one or more of the following causes:</p>
  
  <ol>
  <li>IP address or hostname in JDBC URL is wrong.</li>
  <li>Hostname in JDBC URL is not recognized by local DNS server.</li>
  <li>Port number is missing or wrong in JDBC URL.</li>
  <li>DB server is down.</li>
  <li>DB server doesn't accept TCP/IP connections.</li>
  <li>DB server has run out of connections.</li>
  <li>Something in between Java and DB is blocking connections, e.g. a firewall or proxy.
  <br><br></li>
  </ol>
  
  <p>To solve the one or the other, follow the following advices:</p>
  
  <ol>
  <li>Verify and test them with <code>ping</code>.</li>
  <li>Refresh DNS or use IP address in JDBC URL instead.</li>
  <li>Verify it based on <code>my.cnf</code> of MySQL DB.</li>
  <li>Start the DB.</li>
  <li>Verify if mysqld is started without the <code>--skip-networking option</code>.</li>
  <li>Restart the DB and fix your code accordingly that it closes connections in <code>finally</code>.</li>
  <li>Disable firewall and/or configure firewall/proxy to allow/forward the port.
  <br><br></li>
  </ol>
</blockquote>

<h3>See also:</h3>

<ul>
<li><a href=""https://stackoverflow.com/questions/2299469/how-should-i-connect-to-jdbc-database-datasource-in-a-servlet-based-applicatio"">How should I connect to JDBC database / datasource in a servlet based application?</a></li>
<li><a href=""https://stackoverflow.com/questions/9428573/is-it-safe-to-use-a-static-java-sql-connection-instance-in-a-multithreaded-syste"">Is it safe to use a static java.sql.Connection instance in a multithreaded system?</a></li>
</ul>
"
48500679,"<p>You cannot return something now that hasn't been loaded yet. Firestore loads data <code>asynchronously</code>, since it may take some time for this. Depending on your connection speed and the state, it may take from a few hundred milliseconds to a few seconds before that data is available. If you want to pass <code>settings</code> object to another method, just call that method inside <code>onSuccess()</code> method and pass that object as an argument. So a quick fix would be this:</p>

<pre><code>@Override
public void onSuccess(DocumentSnapshot documentSnapshot) {
    UserAccountSettings settings = documentSnapshot.toObject(UserAccountSettings.class);
    yourMethod(settings);
}
</code></pre>

<blockquote>
  <p>One more thing to mention is that you don't need to set the those values to object that already have them. You are already getting the data from the database as an object.</p>
</blockquote>

<p>So remember, <code>onSuccess()</code> method has an asynchronous behaviour, which means that is called even before you are getting the data from your database. If you want to use the <code>settings</code> object outside that method, you need to create your own <code>callback</code>. To achieve this, first you need to create an interface like this:</p>

<pre><code>public interface MyCallback {
    void onCallback(UserAccountSettings settings);
}
</code></pre>

<p>Then you need to create a method that is actually getting the data from the database. This method should look like this:</p>

<pre><code>public void readData(MyCallback myCallback) {
    DocumentReference mSettings = mFirebaseFirestore.collection(""user_account_settings"").document(userID);
    mSettings.get().addOnSuccessListener(new OnSuccessListener&lt;DocumentSnapshot&gt;() {
        @Override
        public void onSuccess(DocumentSnapshot documentSnapshot) {
            UserAccountSettings settings = documentSnapshot.toObject(UserAccountSettings.class);
            myCallback.onCallback(settings);

        }
    });
}
</code></pre>

<p>In the end just simply call <code>readData()</code> method and pass an instance of the <code>MyCallback</code> interface as an argument wherever you need it like this:</p>

<pre><code>readData(new MyCallback() {
    @Override
    public void onCallback(UserAccountSettings settings) {
        Log.d(""TAG"", settings.getDisplay_name());
    }
});
</code></pre>

<p>This is the only way in which you can use that object of <code>UserAccountSettings</code> class outside <code>onSuccess()</code> method. For more informations, you can take also a look at this <strong><a href=""https://www.youtube.com/watch?v=0ofkvm97i0s"" rel=""noreferrer"">video</a></strong>.</p>
"
290911,"<p>You can't call something that doesn't exist.  Since you haven't created an object, the non-static method doesn't exist yet.  A static method (by definition) always exists.</p>
"
34658,"<p>If you have somewhat of a legacy <strong>Java</strong> application, and you're not allowed to change the visibility of your methods, the best way to test private methods is to use <a href=""http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29"" rel=""noreferrer"">reflection</a>.</p>
<p>Internally we're using helpers to get/set <code>private</code> and <code>private static</code> variables as well as invoke <code>private</code> and <code>private static</code> methods. The following patterns will let you do pretty much anything related to the private methods and fields. Of course, you can't change <code>private static final</code> variables through reflection.</p>
<pre><code>Method method = TargetClass.getDeclaredMethod(methodName, argClasses);
method.setAccessible(true);
return method.invoke(targetObject, argObjects);
</code></pre>
<p>And for fields:</p>
<pre><code>Field field = TargetClass.getDeclaredField(fieldName);
field.setAccessible(true);
field.set(object, value);
</code></pre>
<hr />
<blockquote>
<p><strong>Notes:</strong></p>
<ol>
<li><code>TargetClass.getDeclaredMethod(methodName, argClasses)</code> lets you look into <code>private</code> methods. The same thing applies for
<code>getDeclaredField</code>.</li>
<li>The <code>setAccessible(true)</code> is required to play around with privates.</li>
</ol>
</blockquote>
"
10862262,"<ol>
<li>Use a 3x3 <code>GridLayout</code></li>
<li>For each of the 9 cells get a subimage:</li>
</ol>
<ul>
<li>For every second component, add a label with the subimage.</li>
<li>For every other component, add a <code>JButton</code> from which the space is removed.  Use the subimage as icon, but you'll need alternate icons to indicate focus, activation etc.  This example puts a red border around the 'pressed' icon.</li>
</ul>
<p><img src=""https://i.stack.imgur.com/9Sdk6.png"" alt=""Compass Buttons"" /></p>
<pre><code>import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.swing.*;
import java.net.URL;
import javax.imageio.ImageIO;

public class CompassButtons {

    public CompassButtons(BufferedImage bi) {
        int w = bi.getWidth();
        int h = bi.getHeight();
        int step = w / 3;
        JPanel p = new JPanel(new GridLayout(3, 3));
        p.setBackground(Color.BLACK);
        int count = 0;
        for (int ii = 0; ii &lt; w; ii += step) {
            for (int jj = 0; jj &lt; h; jj += step) {
                // This is it - GET THE SUB IMAGE
                Image icon = bi.getSubimage(jj, ii, step, step);
                if (count % 2 == 1) {
                    JButton button = new JButton(new ImageIcon(icon));

                    // make it transparent
                    button.setContentAreaFilled(false);

                    // remove border, indicate press using different icon
                    button.setBorder(null);

                    // make a 'pressed' icon..
                    BufferedImage iconPressed = new BufferedImage(
                            step, step, BufferedImage.TYPE_INT_ARGB);
                    Graphics g = iconPressed.getGraphics();
                    g.drawImage(icon, 0, 0, p);
                    g.setColor(Color.RED);
                    g.drawRoundRect(
                            0, 0,
                            iconPressed.getWidth(p) - 1, 
                            iconPressed.getHeight(p) - 1,
                            12, 12);
                    g.dispose();
                    button.setPressedIcon(new ImageIcon(iconPressed));

                    button.setActionCommand(&quot;&quot; + count);
                    button.addActionListener((ActionEvent ae) -&gt; {
                        System.out.println(ae.getActionCommand());
                    });

                    p.add(button);
                } else {
                    JLabel label = new JLabel(new ImageIcon(icon));
                    p.add(label);
                }
                count++;
            }
        }
        JPanel center = new JPanel(new GridBagLayout());
        center.setBackground(Color.BLACK);
        center.add(p);
        JOptionPane.showMessageDialog(null, center);
    }

    public static void main(String[] args) throws Exception {
        URL url = new URL(&quot;http://i.stack.imgur.com/SNN04.png&quot;);
        final BufferedImage bi = ImageIO.read(url);
        SwingUtilities.invokeLater(() -&gt; {
            new CompassButtons(bi);
        });
    }
}
</code></pre>
"
1200646,"<p>You can either use array declaration or array literal (but only when you declare and affect the variable right away, array literals cannot be used for re-assigning an array).</p>
<p>For primitive types:</p>
<pre><code>int[] myIntArray = new int[3]; // each element of the array is initialised to 0
int[] myIntArray = {1, 2, 3};
int[] myIntArray = new int[]{1, 2, 3};

// Since Java 8. Doc of IntStream: https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html

int [] myIntArray = IntStream.range(0, 100).toArray(); // From 0 to 99
int [] myIntArray = IntStream.rangeClosed(0, 100).toArray(); // From 0 to 100
int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).toArray(); // The order is preserved.
int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).sorted().toArray(); // Sort 
</code></pre>
<p>For classes, for example <code>String</code>, it's the same:</p>
<pre><code>String[] myStringArray = new String[3]; // each element is initialised to null
String[] myStringArray = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
String[] myStringArray = new String[]{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
</code></pre>
<p>The third way of initializing is useful when you declare an array first and then initialize it, pass an array as a function argument, or return an array. The explicit type is required.</p>
<pre><code>String[] myStringArray;
myStringArray = new String[]{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
</code></pre>
"
5585800,"<pre><code>String myString = &quot;1234&quot;;
int foo = Integer.parseInt(myString);
</code></pre>
<p>If you look at the <a href=""https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Integer.html#parseInt(java.lang.String)"" rel=""noreferrer"">Java documentation</a> you'll notice the &quot;catch&quot; is that this function can throw a <code>NumberFormatException</code>, which you can handle:</p>
<pre class=""lang-java prettyprint-override""><code>int foo;
try {
   foo = Integer.parseInt(myString);
}
catch (NumberFormatException e) {
   foo = 0;
}
</code></pre>
<p>(This treatment defaults a malformed number to <code>0</code>, but you can do something else if you like.)</p>
<p>Alternatively, you can use an <code>Ints</code> method from the Guava library, which in combination with Java 8's <code>Optional</code>, makes for a powerful and concise way to convert a string into an int:</p>
<pre><code>import com.google.common.primitives.Ints;

int foo = Optional.ofNullable(myString)
 .map(Ints::tryParse)
 .orElse(0)
</code></pre>
"
4716521,"<p>ASCII is a TEXT file so you would use <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/Reader.html"" rel=""noreferrer""><code>Readers</code></a> for reading. Java also supports reading from a binary file using <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html"" rel=""noreferrer""><code>InputStreams</code></a>. If the files being read are huge then you would want to use a <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/BufferedReader.html"" rel=""noreferrer""><code>BufferedReader</code></a> on top of a <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/FileReader.html"" rel=""noreferrer""><code>FileReader</code></a> to improve read performance.</p>

<p>Go through <a href=""http://www.javapractices.com/topic/TopicAction.do?Id=42"" rel=""noreferrer"">this article</a> on how to use a <code>Reader</code></p>

<p>I'd also recommend you download and read this wonderful (yet free) book called <a href=""https://www.mindviewllc.com/quicklinks/#java"" rel=""noreferrer""><strong>Thinking In Java</strong></a></p>

<p><strong>In Java 7</strong>:</p>

<pre><code>new String(Files.readAllBytes(...))
</code></pre>

<p><a href=""http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllBytes%28java.nio.file.Path%29"" rel=""noreferrer"">(docs)</a> 
or</p>

<pre><code>Files.readAllLines(...)
</code></pre>

<p><a href=""http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29"" rel=""noreferrer"">(docs)</a></p>

<p><strong>In Java 8</strong>:</p>

<pre><code>Files.lines(..).forEach(...)
</code></pre>

<p><a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#lines-java.nio.file.Path-"" rel=""noreferrer"">(docs)</a></p>
"
3028660,"<p>There are many ways to download files. Following I will post most common ways; it is up to you to decide which method is better for your app.</p>
<ol>
<li>Use <code>AsyncTask</code> and show the download progress in a dialog
=============================================================</li>
</ol>
<p>This method will allow you to execute some background processes and update the UI at the same time (in this case, we'll update a progress bar).</p>
<p>Imports:</p>
<pre><code>import android.os.PowerManager;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.net.HttpURLConnection;
</code></pre>
<p>This is an example code:</p>
<pre><code>// declare the dialog as a member field of your activity
ProgressDialog mProgressDialog;

// instantiate it within the onCreate method
mProgressDialog = new ProgressDialog(YourActivity.this);
mProgressDialog.setMessage(&quot;A message&quot;);
mProgressDialog.setIndeterminate(true);
mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
mProgressDialog.setCancelable(true);

// execute this when the downloader must be fired
final DownloadTask downloadTask = new DownloadTask(YourActivity.this);
downloadTask.execute(&quot;the url to the file you want to download&quot;);

mProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {

    @Override
    public void onCancel(DialogInterface dialog) {
        downloadTask.cancel(true); //cancel the task
    }
});
</code></pre>
<p>The <code>AsyncTask</code> will look like this:</p>
<pre><code>// usually, subclasses of AsyncTask are declared inside the activity class.
// that way, you can easily modify the UI thread from here
private class DownloadTask extends AsyncTask&lt;String, Integer, String&gt; {

    private Context context;
    private PowerManager.WakeLock mWakeLock;

    public DownloadTask(Context context) {
        this.context = context;
    }

    @Override
    protected String doInBackground(String... sUrl) {
        InputStream input = null;
        OutputStream output = null;
        HttpURLConnection connection = null;
        try {
            URL url = new URL(sUrl[0]);
            connection = (HttpURLConnection) url.openConnection();
            connection.connect();

            // expect HTTP 200 OK, so we don't mistakenly save error report
            // instead of the file
            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                return &quot;Server returned HTTP &quot; + connection.getResponseCode()
                        + &quot; &quot; + connection.getResponseMessage();
            }

            // this will be useful to display download percentage
            // might be -1: server did not report the length
            int fileLength = connection.getContentLength();

            // download the file
            input = connection.getInputStream();
            output = new FileOutputStream(&quot;/sdcard/file_name.extension&quot;);

            byte data[] = new byte[4096];
            long total = 0;
            int count;
            while ((count = input.read(data)) != -1) {
                // allow canceling with back button
                if (isCancelled()) {
                    input.close();
                    return null;
                }
                total += count;
                // publishing the progress....
                if (fileLength &gt; 0) // only if total length is known
                    publishProgress((int) (total * 100 / fileLength));
                output.write(data, 0, count);
            }
        } catch (Exception e) {
            return e.toString();
        } finally {
            try {
                if (output != null)
                    output.close();
                if (input != null)
                    input.close();
            } catch (IOException ignored) {
            }

            if (connection != null)
                connection.disconnect();
        }
        return null;
    }
</code></pre>
<p>The method above (<code>doInBackground</code>) runs always on a background thread. You shouldn't do any UI tasks there. On the other hand, the <code>onProgressUpdate</code> and <code>onPreExecute</code> run on the UI thread, so there you can change the progress bar:</p>
<pre><code>    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        // take CPU lock to prevent CPU from going off if the user 
        // presses the power button during download
        PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
             getClass().getName());
        mWakeLock.acquire();
        mProgressDialog.show();
    }
    
    @Override
    protected void onProgressUpdate(Integer... progress) {
        super.onProgressUpdate(progress);
        // if we get here, length is known, now set indeterminate to false
        mProgressDialog.setIndeterminate(false);
        mProgressDialog.setMax(100);
        mProgressDialog.setProgress(progress[0]);
    }

    @Override
    protected void onPostExecute(String result) {
        mWakeLock.release();
        mProgressDialog.dismiss();
        if (result != null)
            Toast.makeText(context,&quot;Download error: &quot;+result, Toast.LENGTH_LONG).show();
        else
            Toast.makeText(context,&quot;File downloaded&quot;, Toast.LENGTH_SHORT).show();
    }
}
</code></pre>
<p>For this to run, you need the WAKE_LOCK permission.</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;
</code></pre>
<ol start=""2"">
<li>Download from Service
========================</li>
</ol>
<p>The big question here is: <em>how do I update my activity from a service?</em>. In the next example we are going to use two classes you may not be aware of: <code>ResultReceiver</code> and <code>IntentService</code>. <code>ResultReceiver</code> is the one that will allow us to update our thread from a service; <code>IntentService</code> is a subclass of <code>Service</code> which spawns a thread to do background work from there (you should know that a <code>Service</code> runs actually in the same thread of your app; when you extends <code>Service</code>, you must manually spawn new threads to run CPU blocking operations).</p>
<p>Download service can look like this:</p>
<pre><code>public class DownloadService extends IntentService {
    public static final int UPDATE_PROGRESS = 8344;

    public DownloadService() {
        super(&quot;DownloadService&quot;);
    }
    @Override
    protected void onHandleIntent(Intent intent) {

        String urlToDownload = intent.getStringExtra(&quot;url&quot;);
        ResultReceiver receiver = (ResultReceiver) intent.getParcelableExtra(&quot;receiver&quot;);
        try {
            
            //create url and connect
            URL url = new URL(urlToDownload);
            URLConnection connection = url.openConnection();
            connection.connect();

            // this will be useful so that you can show a typical 0-100% progress bar
            int fileLength = connection.getContentLength();

            // download the file
            InputStream input = new BufferedInputStream(connection.getInputStream());

            String path = &quot;/sdcard/BarcodeScanner-debug.apk&quot; ;
            OutputStream output = new FileOutputStream(path);

            byte data[] = new byte[1024];
            long total = 0;
            int count;
            while ((count = input.read(data)) != -1) {
                total += count;

                // publishing the progress....
                Bundle resultData = new Bundle();
                resultData.putInt(&quot;progress&quot; ,(int) (total * 100 / fileLength));
                receiver.send(UPDATE_PROGRESS, resultData);
                output.write(data, 0, count);
            }

            // close streams 
            output.flush();
            output.close();
            input.close();

        } catch (IOException e) {
            e.printStackTrace();
        }

        Bundle resultData = new Bundle();
        resultData.putInt(&quot;progress&quot; ,100);

        receiver.send(UPDATE_PROGRESS, resultData);
    }
}
</code></pre>
<p>Add the service to your manifest:</p>
<pre><code>&lt;service android:name=&quot;.DownloadService&quot;/&gt;
</code></pre>
<p>And the activity will look like this:</p>
<pre><code>// initialize the progress dialog like in the first example

// this is how you fire the downloader
mProgressDialog.show();
Intent intent = new Intent(this, DownloadService.class);
intent.putExtra(&quot;url&quot;, &quot;url of the file to download&quot;);
intent.putExtra(&quot;receiver&quot;, new DownloadReceiver(new Handler()));
startService(intent);
</code></pre>
<p>Here is were <code>ResultReceiver</code> comes to play:</p>
<pre><code>private class DownloadReceiver extends ResultReceiver{

    public DownloadReceiver(Handler handler) {
        super(handler);
    }

    @Override
    protected void onReceiveResult(int resultCode, Bundle resultData) {

        super.onReceiveResult(resultCode, resultData);

        if (resultCode == DownloadService.UPDATE_PROGRESS) {

            int progress = resultData.getInt(&quot;progress&quot;); //get the progress
            dialog.setProgress(progress);

            if (progress == 100) {
                dialog.dismiss();
            }
        }
    }
}
</code></pre>
<h2>2.1 Use Groundy library</h2>
<p><a href=""http://github.com/casidiablo/groundy"" rel=""noreferrer""><strong>Groundy</strong></a> is a library that basically helps you run pieces of code in a background service, and it is based on the <code>ResultReceiver</code> concept shown above. This library is <strong>deprecated</strong> at the moment. This is how the <strong>whole</strong> code would look like:</p>
<p>The activity where you are showing the dialog...</p>
<pre><code>public class MainActivity extends Activity {

    private ProgressDialog mProgressDialog;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        findViewById(R.id.btn_download).setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                String url = ((EditText) findViewById(R.id.edit_url)).getText().toString().trim();
                Bundle extras = new Bundler().add(DownloadTask.PARAM_URL, url).build();
                Groundy.create(DownloadExample.this, DownloadTask.class)
                        .receiver(mReceiver)
                        .params(extras)
                        .queue();

                mProgressDialog = new ProgressDialog(MainActivity.this);
                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
                mProgressDialog.setCancelable(false);
                mProgressDialog.show();
            }
        });
    }

    private ResultReceiver mReceiver = new ResultReceiver(new Handler()) {
        @Override
        protected void onReceiveResult(int resultCode, Bundle resultData) {
            super.onReceiveResult(resultCode, resultData);
            switch (resultCode) {
                case Groundy.STATUS_PROGRESS:
                    mProgressDialog.setProgress(resultData.getInt(Groundy.KEY_PROGRESS));
                    break;
                case Groundy.STATUS_FINISHED:
                    Toast.makeText(DownloadExample.this, R.string.file_downloaded, Toast.LENGTH_LONG);
                    mProgressDialog.dismiss();
                    break;
                case Groundy.STATUS_ERROR:
                    Toast.makeText(DownloadExample.this, resultData.getString(Groundy.KEY_ERROR), Toast.LENGTH_LONG).show();
                    mProgressDialog.dismiss();
                    break;
            }
        }
    };
}
</code></pre>
<p>A <code>GroundyTask</code> implementation used by <strong>Groundy</strong> to download the file and show the progress:</p>
<pre><code>public class DownloadTask extends GroundyTask {    
    public static final String PARAM_URL = &quot;com.groundy.sample.param.url&quot;;

    @Override
    protected boolean doInBackground() {
        try {
            String url = getParameters().getString(PARAM_URL);
            File dest = new File(getContext().getFilesDir(), new File(url).getName());
            DownloadUtils.downloadFile(getContext(), url, dest, DownloadUtils.getDownloadListenerForTask(this));
            return true;
        } catch (Exception pokemon) {
            return false;
        }
    }
}
</code></pre>
<p>And just add this to the manifest:</p>
<pre><code>&lt;service android:name=&quot;com.codeslap.groundy.GroundyService&quot;/&gt;
</code></pre>
<p>It couldn't be easier I think. Just grab the latest jar <a href=""https://github.com/casidiablo/groundy/downloads"" rel=""noreferrer"">from Github</a> and you are ready to go. Keep in mind that <strong>Groundy</strong>'s main purpose is to make calls to external REST apis in a background service and post results to the UI with easily. If you are doing something like that in your app, it could be really useful.</p>
<h2>2.2 Use <a href=""https://github.com/koush/ion"" rel=""noreferrer"">https://github.com/koush/ion</a></h2>
<ol start=""3"">
<li>Use <code>DownloadManager</code> class (<code>GingerBread</code> and newer only)
=============================================================</li>
</ol>
<p>GingerBread brought a new feature, <code>DownloadManager</code>, which allows you to download files easily and delegate the hard work of handling threads, streams, etc. to the system.</p>
<p>First, let's see a utility method:</p>
<pre><code>/**
 * @param context used to check the device version and DownloadManager information
 * @return true if the download manager is available
 */
public static boolean isDownloadManagerAvailable(Context context) {

    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.GINGERBREAD) {
        return true;
    }
    return false;
}
</code></pre>
<p>Method's name explains it all. Once you are sure <code>DownloadManager</code> is available, you can do something like this:</p>
<pre><code>String url = &quot;url you want to download&quot;;
DownloadManager.Request request = new DownloadManager.Request(Uri.parse(url));
request.setDescription(&quot;Some descrition&quot;);
request.setTitle(&quot;Some title&quot;);
// in order for this if to run, you must use the android 3.2 to compile your app
if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {
    request.allowScanningByMediaScanner();
    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
}
request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, &quot;name-of-the-file.ext&quot;);

// get download service and enqueue file
DownloadManager manager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);
manager.enqueue(request);
</code></pre>
<p>Download progress will be showing in the notification bar.</p>
<h1>Final thoughts</h1>
<p>First and second methods are just the tip of the iceberg. There are lots of things you have to keep in mind if you want your app to be robust. Here is a brief list:</p>
<ul>
<li>You must check whether user has an internet connection available</li>
<li>Make sure you have the right permissions (<code>INTERNET</code> and <code>WRITE_EXTERNAL_STORAGE</code>); also <code>ACCESS_NETWORK_STATE</code> if you want to check internet availability.</li>
<li>Make sure the directory were you are going to download files exist and has write permissions.</li>
<li>If download is too big you may want to implement a way to resume the download if previous attempts failed.</li>
<li>Users will be grateful if you allow them to interrupt the download.</li>
</ul>
<p>Unless you need detailed control of the download process, then consider using <code>DownloadManager</code> (3) because it already handles most of the items listed above.</p>
<p>But also consider that your needs may change. For example, <code>DownloadManager</code> <a href=""https://stackoverflow.com/questions/35191718"">does no response caching</a>. It will blindly download the same big file multiple times. There's no easy way to fix it after the fact. Where if you start with a basic <code>HttpURLConnection</code> (1, 2), then all you need is to add an <code>HttpResponseCache</code>. So the initial effort of learning the basic, standard tools can be a good investment.</p>
<blockquote>
<p>This class was deprecated in API level 26. ProgressDialog is a modal
dialog, which prevents the user from interacting with the app. Instead
of using this class, you should use a progress indicator like
ProgressBar, which can be embedded in your app's UI. Alternatively,
you can use a notification to inform the user of the task's progress. For more details <a href=""https://developer.android.com/reference/android/app/ProgressDialog"" rel=""noreferrer"">Link</a></p>
</blockquote>
"
6116020,"<p>Many people say that checked exceptions (i.e. these that you should explicitly catch or rethrow) should not be used at all. They were eliminated in C# for example, and most languages don't have them. So you can always throw a subclass of <code>RuntimeException</code> (unchecked exception)</p>

<p>However, I think checked exceptions are useful - they are used when you want to force the user of your API to think how to handle the exceptional situation (if it is recoverable). It's just that checked exceptions are overused in the Java platform, which makes people hate them.</p>

<p><a href=""http://techblog.bozho.net/?p=316"" rel=""noreferrer"">Here's my extended view on the topic</a>.</p>

<p>As for the particular questions:</p>

<ol>
<li><p><strong>Is the <code>NumberFormatException</code> consider a checked exception?</strong><br>
No. <code>NumberFormatException</code> is unchecked (= is subclass of <code>RuntimeException</code>). Why? I don't know. (but there should have been a method <code>isValidInteger(..)</code>)</p></li>
<li><p><strong>Is <code>RuntimeException</code> an unchecked exception?</strong><br>
Yes, exactly.</p></li>
<li><p><strong>What should I do here?</strong><br>
It depends on where this code is and what you want to happen. If it is in the UI layer - catch it and show a warning; if it's in the service layer - don't catch it at all - let it bubble. Just don't swallow the exception. If an exception occurs in most of the cases you should choose one of these:</p>

<ul>
<li>log it and return</li>
<li>rethrow it (declare it to be thrown by the method)</li>
<li>construct a new exception by passing the current one in constructor  </li>
</ul></li>
<li><p><strong>Now, couldn't the above code also be a checked exception? I can try to recover the situation like this? Can I?</strong><br>
It could've been. But nothing stops you from catching the unchecked exception as well</p></li>
<li><p><strong>Why do people add class <code>Exception</code> in the throws clause?</strong><br>
Most often because people are lazy to consider what to catch and what to rethrow. Throwing <code>Exception</code> is a bad practice and should be avoided.</p></li>
</ol>

<p>Alas, there is no single rule to let you determine when to catch, when to rethrow, when to use checked and when to use unchecked exceptions. I agree this causes much confusion and a lot of bad code. The general principle is stated by Bloch (you quoted a part of it). And the general principle is to rethrow an exception to the layer where you can handle it.</p>
"
5785816,"<p>In order to answer <strong>How to call the Frame methods from the PApplet?</strong>, I have modified your code snippet to bare minimum. In this modified version when the user click mouse button a <code>System.out</code> is fired.</p>

<p>Now there are two ways in which you can access your <code>Frame</code> object. But before that let me state these two points:</p>

<ul>
<li>When you create a PApplet like <code>new ExampleFrame(new Menu());</code> and add it in your <code>JFrame</code> like this <code>add(app, BorderLayout.CENTER);</code> then a complex hierarchy of windows/panels are created. </li>
</ul>

<p><strong>Like this:</strong></p>

<pre><code>javax.swing.JPanel
    javax.swing.JLayeredPane
        javax.swing.JRootPane
            test.ExampleFrame
</code></pre>

<ul>
<li><code>PApplet</code> provides a public field for setting and accessing your frame object. And amazingly it is called <code>frame</code> :). You can set it before calling <code>app.init();</code></li>
</ul>

<p><strong>>>Code</strong></p>

<p>** Checkout the comments in the code**</p>

<p><strong>Modified ExampleFrame.java</strong></p>

<pre><code>import java.awt.BorderLayout;    
import javax.swing.JFrame;    
import processing.core.PApplet;

public class ExampleFrame extends JFrame
{
    private static final long serialVersionUID = 4792534036194728580L;
    PApplet app;

    public ExampleFrame(PApplet emApp)
    {
        super(""Ball Maze Game"");
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocation(200, 200);

        app = emApp;
        setSize(615,438);
        setVisible(true);

        setLayout(new BorderLayout());

        add(app, BorderLayout.CENTER);

        // Setting my frame object
        app.frame = this;       
        app.init();
    }

    // Sample Method
    public void sampleMethod(String msg)
    {
        System.out.println(""I think '""+ msg +""' called me !!"");
    }
}
</code></pre>

<p><strong>Modified Menu.java</strong></p>

<pre><code>import java.awt.Container;

import processing.core.PApplet;
import processing.core.PImage;

public class Menu extends PApplet
{
    private static final long serialVersionUID = -6557167654705489372L;

    PImage background;
    static String tab = """";

    //simple constructor
    public Menu()
    {

    }

    public void setup()
    {
        size(600, 400);
        smooth();

        background = loadImage(""C:/temp/background.jpg"");
    }

    public void draw()
    {
        image(background, 0, 0);
    }

    public void mousePressed()
    {
        Container p = getParent();
        tab = """";

        // FIRST WAY OF ACCESSING PARENT FRAME
        while(p != null)
        {
            //printParentTree(p);
            if(p instanceof ExampleFrame)
            {
                ExampleFrame myframe = (ExampleFrame)p;
                myframe.sampleMethod(""First Way"");
                break;
            }
            p = p.getParent();
        }

        // SECOND WAY OF ACCESSING PARENT FRAME     
        if(frame != null &amp;&amp; (frame instanceof ExampleFrame))
        {
            ExampleFrame myframe = (ExampleFrame)p;
            myframe.sampleMethod(""Second Way"");
        }
    }

    void printParentTree(Container p) 
    {
        System.out.println(tab+p.getClass().getName());
        tab +='\t';
    }
}
</code></pre>

<p>Checkout the <code>public void mousePressed()</code> method.</p>

<p>For completeness, I am also including Main.java.</p>

<pre><code>public class Main {
    public static void main(String[] args){
        new ExampleFrame(new Menu());
    }
}
</code></pre>

<p>Now to answer <strong>Remove all PApplets contents and load another PApplet in</strong></p>

<p>Well I have not tested it. But you can add a <code>JPanel</code> to your <code>JApplet</code> and do all your drawing on that i.e creating child controls etc. When feel like redrawing then call <code>JPanel.removeAll()</code>. Which as per javadoc: </p>

<blockquote>
  <p>Removes all the components from this
  container. This method also notifies
  the layout manager to remove the
  components from this container's
  layout via the removeLayoutComponent
  method.</p>
</blockquote>

<p>After this call <code>repaint</code> on the <code>JPanel</code>. Try it out, it might work :).</p>
"
4076706,"<h1>Ensure you've the right Eclipse and Server version</h1>
<p>Ensure that you're using at least <a href=""https://www.eclipse.org/downloads/packages/"" rel=""nofollow noreferrer"">Eclipse IDE for <strong>Enterprise</strong> Java (and Web) developers</a> (with the <strong>Enterprise</strong>). It contains development tools to create dynamic web projects and easily integrate servletcontainers (those tools are part of Web Tools Platform, WTP). In case you already had Eclipse IDE for Java (without Enterprise), and manually installed some related plugins, then chances are that it wasn't done properly. You'd best trash it and grab the real Eclipse IDE for Enterprise Java one.</p>
<p>You also need to ensure that you already have a servletcontainer installed on your machine which implements at least the same Servlet API version as the servletcontainer in the production environment, for example <a href=""https://tomcat.apache.org/"" rel=""nofollow noreferrer"">Apache Tomcat</a>, <a href=""https://wildfly.org"" rel=""nofollow noreferrer"">RedHat WildFly</a>, <a href=""https://glassfish.org/"" rel=""nofollow noreferrer"">Eclipse GlassFish</a>, etc. Usually, just downloading the ZIP file and extracting it is sufficient. In case of Tomcat, do <em>not</em> download the EXE format, that's only for Windows based production environments. See also a.o. <a href=""https://stackoverflow.com/questions/5064733"">Several ports (8005, 8080, 8009) required by Tomcat Server at localhost are already in use</a>.</p>
<p>A servletcontainer is a concrete implementation of the Servlet API. Also note that for example WildFly and GlassFish are <em>more</em> than just a servletcontainer, they also support JSF (Faces), EJB (Enterprise Beans), JPA (Persistence) and all other Jakarta EE fanciness. See also a.o. <a href=""https://stackoverflow.com/questions/7295096"">What exactly is Java EE?</a></p>
<h1>Ensure that you're using the right Servlet package</h1>
<p>The <code>javax.*</code> package has been renamed to <code>jakarta.*</code> package since Servlet API version 5.0 which is part of Jakarta EE 9 (Tomcat 10, TomEE 9, WildFly 22 Preview, GlassFish 6, Payara 6, Liberty 22, etc). So if you're targeting these server versions or newer, then you need to replace</p>
<pre class=""lang-java prettyprint-override""><code>import javax.servlet.*;
import javax.servlet.http.*;
</code></pre>
<p>by</p>
<pre class=""lang-java prettyprint-override""><code>import jakarta.servlet.*;
import jakarta.servlet.http.*;
</code></pre>
<p>in order to get it to compile, else you might risk to face this build error</p>
<blockquote>
<p>The superclass &quot;javax.servlet.http.HttpServlet&quot; was not found on the Java Build Path</p>
</blockquote>
<h1>Integrate Server in Eclipse and associate it with Project</h1>
<p>Once having installed both Eclipse for Enterprise Java and a servletcontainer on your machine, do the following steps in Eclipse:</p>
<ol>
<li><p><strong>Integrate servletcontainer in Eclipse</strong></p>
<p>a. <strong>Via Servers view</strong></p>
<ul>
<li><p>Open the <em>Servers</em> view in the bottom box.</p>
</li>
<li><p>Rightclick there and choose <em>New &gt; Server</em>.</p>
</li>
<li><p>Pick the appropriate servletcontainer make and version and walk through the wizard.</p>
<p><a href=""https://i.stack.imgur.com/99Li8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/99Li8m.png"" alt=""enter image description here"" /></a></p>
</li>
</ul>
<p>b. <strong>Or, via Eclipse preferences</strong></p>
<ul>
<li><p>Open <em>Window &gt; Preferences &gt; Server &gt; Runtime Environments</em>.</p>
</li>
<li><p>You can <em>Add</em>, <em>Edit</em> and <em>Remove</em> servers here.</p>
<p><a href=""https://i.stack.imgur.com/hf9Go.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hf9Gom.png"" alt=""enter image description here"" /></a></p>
</li>
</ul>
</li>
<li><p><strong>Associate server with project</strong></p>
<p>a. <strong>In new project</strong></p>
<ul>
<li><p>Open the <em>Project Navigator/Explorer</em> on the left hand side.</p>
</li>
<li><p>Rightclick there and choose <em>New &gt; Project</em> and then in menu <em>Web &gt; Dynamic Web Project</em>.</p>
</li>
<li><p>In the wizard, set the <em>Target Runtime</em> to the integrated server.</p>
<p><a href=""https://i.stack.imgur.com/M259E.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/M259Em.png"" alt=""enter image description here"" /></a></p>
</li>
</ul>
<p>b. <strong>Or, in existing project</strong></p>
<ul>
<li><p>Rightclick project and choose <em>Properties</em>.</p>
</li>
<li><p>In <em>Targeted Runtimes</em> section, select the integrated server.</p>
<p><a href=""https://i.stack.imgur.com/jcY3M.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jcY3Mm.png"" alt=""enter image description here"" /></a></p>
</li>
</ul>
<p>Either way, Eclipse will then automatically take the servletcontainer's libraries in the build path. This way you'll be able to import and use the Servlet API.</p>
</li>
</ol>
<h1>Never carry around loose server-specific JAR files</h1>
<p>You should in any case not have the need to fiddle around in the <em>Build Path</em> property of the project. You should above all <strong>never</strong> manually copy/download/move/include the individual servletcontainer-specific libraries like <code>servlet-api.jar</code>, <code>jsp-api.jar</code>, <code>el-api.jar</code>, <code>j2ee.jar</code>, <code>javaee.jar</code>, etc. It would only lead to future portability, compatibility, classpath and maintainability troubles, because your webapp would not work when it's deployed to a servletcontainer of a different make/version than where those libraries are originally obtained from.</p>
<p>In case you're using Maven, you need to make absolutely sure that servletcontainer-specific libraries which are already provided by the target runtime are marked as <code>&lt;scope&gt;provided&lt;/scope&gt;</code>. You can find examples of proper <code>pom.xml</code> dependency declarations for Tomcat 10+, Tomcat 9-, JEE 9+ and JEE 8- in this answer: <a href=""https://stackoverflow.com/questions/65703840/tomcat-9-casting-servlets-to-javax-servlet-servlet-instead-of-jakarta-servlet-ht/65704617#65704617"">How to properly configure Jakarta EE libraries in Maven pom.xml for Tomcat?</a></p>
<p>Here are some typical exceptions which you can get when you litter the <code>/WEB-INF/lib</code> or even <code>/JRE/lib</code>, <code>/JRE/lib/ext</code>, etc with servletcontainer-specific libraries in a careless attempt to fix the compilation errors:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/4886196/spring-mvc-jsp-and-nullpointerexception"">java.lang.NullPointerException at org.apache.jsp.index_jsp._jspInit</a></li>
<li><a href=""https://stackoverflow.com/questions/6360121/java-lang-noclassdeffounderror-javax-el-elresolver-when-running-simplehellobyent"">java.lang.NoClassDefFoundError: javax/el/ELResolver</a></li>
<li><a href=""https://stackoverflow.com/questions/4214826/error-java-lang-nosuchfielderror-is-dir-while-starting-apache-tomcat-from-ecli"">java.lang.NoSuchFieldError: IS_DIR</a></li>
<li><a href=""https://stackoverflow.com/questions/7274675/getting-error-while-accessing-the-map-from-spring-controller-to-jsp-using-jstl/7274928#7274928"">java.lang.NoSuchMethodError: javax.servlet.jsp.PageContext.getELContext()Ljavax/el/ELContext;</a></li>
<li><a href=""https://stackoverflow.com/questions/6998747/tomcat-6-http-authentication"">java.lang.AbstractMethodError: javax.servlet.jsp.JspFactory.getJspApplicationContext(Ljavax/servlet/ServletContext;)Ljavax/servlet/jsp/JspApplicationContext;</a></li>
<li><a href=""https://stackoverflow.com/questions/2327118/howto-solve-jasper-exception-problem"">org.apache.jasper.JasperException: The method getJspApplicationContext(ServletContext) is undefined for the type JspFactory</a></li>
<li><a href=""https://stackoverflow.com/questions/7310968/web-app-working-in-eclipse-gives-verify-el-error-org-apache-catalina-core-standar"">java.lang.VerifyError: (class: org/apache/jasper/runtime/JspApplicationContextImpl, method: createELResolver signature: ()Ljavax/el/ELResolver;) Incompatible argument to function</a></li>
<li><a href=""https://stackoverflow.com/questions/2641338/how-to-resolve-error-listenerstart-when-deploying-web-app-in-tomcat-5-5"">jar not loaded. See Servlet Spec 2.3, section 9.7.2. Offending class: javax/servlet/Servlet.class</a></li>
</ul>
"
7220685,"<p>Converting the <em>output</em> is too late; the calculation has already taken place in integer arithmetic.  You need to convert the <em>inputs</em> to <code>double</code>:</p>

<pre><code>System.out.println((double)completed/(double)total);
</code></pre>

<p>Note that you don't actually need to convert <em>both</em> of the inputs. So long as one of them is <code>double</code>, the other will be implicitly converted.  But I prefer to do both, for symmetry.</p>
"
2885224,"<p><em>Note that each of the code samples below may throw <code>IOException</code>. Try/catch/finally blocks have been omitted for brevity. See <a href=""https://docs.oracle.com/javase/tutorial/essential/exceptions/handling.html"" rel=""noreferrer"">this tutorial</a> for information about exception handling.</em></p>

<p><em>Note that each of the code samples below will overwrite the file if it already exists</em></p>

<p>Creating a text file:</p>

<pre><code>PrintWriter writer = new PrintWriter(""the-file-name.txt"", ""UTF-8"");
writer.println(""The first line"");
writer.println(""The second line"");
writer.close();
</code></pre>

<p>Creating a binary file:</p>

<pre><code>byte data[] = ...
FileOutputStream out = new FileOutputStream(""the-file-name"");
out.write(data);
out.close();
</code></pre>

<p><strong>Java 7+</strong> users can use the <a href=""http://docs.oracle.com/javase/7/docs/api/index.html?java/nio/file/Files.html"" rel=""noreferrer""><code>Files</code></a> class to write to files:</p>

<p>Creating a text file:</p>

<pre><code>List&lt;String&gt; lines = Arrays.asList(""The first line"", ""The second line"");
Path file = Paths.get(""the-file-name.txt"");
Files.write(file, lines, StandardCharsets.UTF_8);
//Files.write(file, lines, StandardCharsets.UTF_8, StandardOpenOption.APPEND);
</code></pre>

<p>Creating a binary file:</p>

<pre><code>byte data[] = ...
Path file = Paths.get(""the-file-name"");
Files.write(file, data);
//Files.write(file, data, StandardOpenOption.APPEND);
</code></pre>
"
1555307,"<p>The JDK <code>Date</code> API is horribly broken unfortunately.  I recommend using <a href=""https://www.joda.org/joda-time/"" rel=""noreferrer"">Joda Time library</a>.</p>

<p>Joda Time has a concept of time <a href=""https://www.joda.org/joda-time/key_interval.html"" rel=""noreferrer"">Interval</a>:</p>

<pre><code>Interval interval = new Interval(oldTime, new Instant());
</code></pre>

<p>EDIT: By the way, Joda has two concepts: <code>Interval</code> for representing an interval of time between two time instants (represent time between 8am and 10am), and a <code>Duration</code> that represents a length of time without the actual time boundaries (e.g. represent two hours!)</p>

<p>If you only care about time comparisions, most <code>Date</code> implementations (including the JDK one) implements <code>Comparable</code> interface which allows you to use the <a href=""http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html#compareTo(T)"" rel=""noreferrer""><code>Comparable.compareTo()</code></a></p>
"
24471410,"<p>As the API's have radically changed, It wouldn't surprise me if you were to create an <code>OnClickListener</code> for each item. It isn't that much of a hassle though. In your implementation of <code>RecyclerView.Adapter&lt;MyViewHolder&gt;</code>, you should have: </p>

<pre><code>private final OnClickListener mOnClickListener = new MyOnClickListener();

@Override
public MyViewHolder onCreateViewHolder(final ViewGroup parent, final int viewType) {
    View view = LayoutInflater.from(mContext).inflate(R.layout.myview, parent, false);
    view.setOnClickListener(mOnClickListener);
    return new MyViewHolder(view);
}
</code></pre>

<p>The <code>onClick</code> method:</p>

<pre><code>@Override
public void onClick(final View view) {
    int itemPosition = mRecyclerView.getChildLayoutPosition(view);
    String item = mList.get(itemPosition);
    Toast.makeText(mContext, item, Toast.LENGTH_LONG).show();
}
</code></pre>
"
48080871,"<h2>ChromeDriver driver = new ChromeDriver();</h2>

<p>If you use <code>ChromeDriver driver = new ChromeDriver();</code> the <em>ChromeDriver</em> instance which will get created through that we will be only able to invoke and act on the methods implemented by <em>ChromeDriver</em> and supported by <em>Chrome Browser</em> only. To act with other browsers we have to specifically create individual objects as below :</p>

<ul>
<li><code>FirefoxDriver driver =  new FirefoxDriver();</code></li>
<li><code>InternetExplorerDriver driver = new InternetExplorerDriver();</code></li>
</ul>

<hr>

<h2>WebDriver Interface</h2>

<p>From <em>Selenium</em> perspective, the <strong>WebDriver Interface</strong> is similar like a agreement which the 3rd party <em>Browser Vendors</em> like <em>Mozilla</em>, <em>Chrome</em>, <em>Internet Explorer</em>, <em>Safari</em>, etc have to adhere and implement the same. This would in-turn help the end-users to use the exposed APIs to write a common code and implement the functionalities across all the available browsers without any change.</p>

<hr>

<h2>WebDriver driver = new ChromeDriver();</h2>

<p>Through <code>WebDriver driver = new ChromeDriver();</code> we are creating an instance of the <em>WebDriver</em> interface and <strong>casting</strong> it to <em>ChromeDriver</em> class. All the browser drivers like:</p>

<ul>
<li><a href=""https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/firefox/FirefoxDriver.html"" rel=""noreferrer"">FirefoxDriver</a></li>
<li><a href=""https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/chrome/ChromeDriver.html"" rel=""noreferrer"">ChromeDriver</a></li>
<li><a href=""https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/ie/InternetExplorerDriver.html"" rel=""noreferrer"">InternetExplorerDriver</a></li>
<li><a href=""http://phantomjs.org/"" rel=""noreferrer"">PhantomJSDriver</a></li>
<li><a href=""https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/safari/SafariDriver.html"" rel=""noreferrer"">SafariDriver</a> etc </li>
</ul>

<p>implemented the <a href=""https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebDriver.html"" rel=""noreferrer"">WebDriver</a> interface (actually the <a href=""https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/remote/RemoteWebDriver.html"" rel=""noreferrer"">RemoteWebDriver</a> class implements <em>WebDriver Interface</em> and the <em>Browser Drivers</em> extends <strong>RemoteWebDriver</strong>). So if we use <code>WebDriver driver</code>, then we can use the already initialized <em>driver</em> (as common object variable) for all browsers we want to automate e.g. Mozilla, Chrome, InternetExplorer, Edge, Opera, Safari as follows:</p>

<pre><code>WebDriver driver = new FirefoxDriver();
// or
WebDriver driver = new ChromeDriver();
// or
WebDriver driver = new InternetExplorerDriver();
// or
WebDriver driver = new EdgeDriver();
// or
WebDriver driver = new OperaDriver();
// or
WebDriver driver = new SafariDriver();
</code></pre>

<hr>

<h2>Trivia</h2>

<p>As per current scenario, we have to instantiate the implementations of <strong>WebDriver Interface</strong> directly. As per the current practice we write our <em>Automated Test Script</em> against this interface so that in future we may <strong>swap in</strong> a more fully featured <em>Browser</em> when there is a requirement for one.</p>
"
309448,"<p>A nice way to do this is using <a href=""http://commons.apache.org/"" rel=""noreferrer"">Apache Commons</a> <code><a href=""https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html"" rel=""noreferrer"">IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>... Something like</p>
<pre><code>StringWriter writer = new StringWriter();
IOUtils.copy(inputStream, writer, encoding);
String theString = writer.toString();
</code></pre>
<p>or even</p>
<pre><code>// NB: does not close inputStream, you'll have to use try-with-resources for that
String theString = IOUtils.toString(inputStream, encoding);
</code></pre>
<p>Alternatively, you could use <code>ByteArrayOutputStream</code> if you don't want to mix your Streams and Writers.</p>
"
541506,"<p>Yes: implements <code>Runnable</code> is the preferred way to do it, IMO. You're not really specialising the thread's behaviour.  You're just giving it something to run. That means <a href=""http://en.wikipedia.org/wiki/Object_composition"" rel=""noreferrer"">composition</a> is the <em>philosophically</em> &quot;purer&quot; way to go.</p>
<p>In <em>practical</em> terms, it means you can implement <code>Runnable</code> and extend from another class as well... and you can also implement <code>Runnable</code> via a lambda expression as of Java 8.</p>
"
9866659,"<p>First of all, change this line : </p>

<pre><code>image = ImageIO.read(getClass().getClassLoader().getResource(""resources/icon.gif""));
</code></pre>

<p>to this : </p>

<pre><code>image = ImageIO.read(getClass().getResource(""/resources/icon.gif""));
</code></pre>

<p><strong>More info</strong>, on as to where lies the difference between the two approaches, can be found on this thread - <a href=""https://stackoverflow.com/a/676273/1057230""><strong>Different ways of loading a Resource</strong></a></p>

<p><strong>For Eclipse:</strong> </p>

<ul>
<li><a href=""https://stackoverflow.com/questions/8960381/runnable-jars-missing-buttons/9278270#9278270""><strong>How to add Images to your Resource Folder in the Project</strong></a></li>
</ul>

<p><strong>For NetBeans:</strong> </p>

<ul>
<li><a href=""http://netbeans.org/kb/docs/java/gui-image-display.html"" rel=""noreferrer""><strong>Handling Images in a Java GUI Application</strong></a></li>
<li><a href=""https://stackoverflow.com/a/24821738/1057230""><strong>How to add Images to the Project</strong></a></li>
</ul>

<p><strong>For IntelliJ IDEA:</strong></p>

<ul>
<li><strong>Right-Click</strong> the <strong>src</strong> Folder of the Project. Select <strong>New -> Package</strong></li>
<li>Under <strong>New Package Dialog</strong>, type name of the package, say <strong><em>resources</em></strong>. Click OK</li>
<li>Right <strong>Click resources package</strong>. Select <strong>New -> Package</strong></li>
<li>Under <strong>New Package Dialog</strong>, type name of the package, say <strong><em>images</em></strong>. Click OK</li>
<li>Now select the image that you want to add to the project, copy it. <strong>Right click resources.images package</strong>, inside the <strong>IDE</strong>, and <strong>select Paste</strong></li>
<li><p>Use the last link to check how to access this file now in Java code. Though for this example, one would be using </p>

<p><code>getClass().getResource(""/resources/images/myImage.imageExtension"");</code></p></li>
<li><p>Press <kbd>Shift</kbd> + <kbd>F10</kbd>, to make and run the project. The <strong>resources and images</strong> folders, will be created automatically inside the <strong>out</strong> folder.</p></li>
</ul>

<p><strong>If you are doing it manually :</strong> </p>

<ul>
<li><a href=""https://stackoverflow.com/a/9613766/1057230""><strong>How to add Images to your Project</strong></a></li>
<li><a href=""http://docs.oracle.com/javase/tutorial/uiswing/components/icon.html"" rel=""noreferrer""><strong>How to Use Icons</strong></a></li>
<li><a href=""https://stackoverflow.com/a/11372350/1057230""><strong>A Little extra clarification</strong></a>, as given in this answer's first
code example.</li>
</ul>

<p><strong>QUICK REFERENCE CODE EXAMPLE(though for more detail consider, A little extra clarification link):</strong></p>

<pre><code>package swingtest;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 * Created with IntelliJ IDEA.
 * User: Gagandeep Bali
 * Date: 7/1/14
 * Time: 9:44 AM
 * To change this template use File | Settings | File Templates.
 */
public class ImageExample {

    private MyPanel contentPane;

    private void displayGUI() {
        JFrame frame = new JFrame(""Image Example"");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        contentPane = new MyPanel();

        frame.setContentPane(contentPane);
        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }

    private class MyPanel extends JPanel {

        private BufferedImage image;

        public MyPanel() {
            try {
                image = ImageIO.read(MyPanel.class.getResource(""/resources/images/planetbackground.jpg""));
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }

        @Override
        public Dimension getPreferredSize() {
            return image == null ? new Dimension(400, 300): new Dimension(image.getWidth(), image.getHeight());
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(image, 0, 0, this);
        }
    }

    public static void main(String[] args) {
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                new ImageExample().displayGUI();
            }
        };
        EventQueue.invokeLater(runnable);
    }
}
</code></pre>
"
2202300,"<p>Unfortunately, the time zone formats available to <a href=""http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"" rel=""noreferrer"">SimpleDateFormat</a> (Java 6 and earlier) are not <a href=""https://en.wikipedia.org/wiki/ISO_8601"" rel=""noreferrer"">ISO 8601</a> compliant. SimpleDateFormat understands time zone strings like &quot;GMT+01:00&quot; or &quot;+0100&quot;, the latter according to <a href=""http://www.ietf.org/rfc/rfc0822.txt"" rel=""noreferrer"" title=""STANDARD FOR THE FORMAT OF ARPA INTERNET TEXT MESSAGES"">RFC # 822</a>.</p>
<p>Even if Java 7 added support for time zone descriptors according to ISO 8601, SimpleDateFormat is still not able to properly parse a complete date string, as it has no support for optional parts.</p>
<p>Reformatting your input string using regexp is certainly one possibility, but the replacement rules are not as simple as in your question:</p>
<ul>
<li>Some time zones are not full hours off <a href=""https://en.wikipedia.org/wiki/Coordinated_Universal_Time"" rel=""noreferrer"">UTC</a>, so the string does not necessarily end with &quot;:00&quot;.</li>
<li>ISO8601 allows only the number of hours to be included in the time zone, so &quot;+01&quot; is equivalent to &quot;+01:00&quot;</li>
<li>ISO8601 allows the usage of &quot;Z&quot; to indicate UTC instead of &quot;+00:00&quot;.</li>
</ul>
<p>The easier solution is possibly to use the data type converter in JAXB, since JAXB must be able to parse ISO8601 date string according to the XML Schema specification. <code>javax.xml.bind.DatatypeConverter.parseDateTime(&quot;2010-01-01T12:00:00Z&quot;)</code> will give you a <code>Calendar</code> object and you can simply use getTime() on it, if you need a <code>Date</code> object.</p>
<p>You could probably use <a href=""http://www.joda.org/joda-time/"" rel=""noreferrer"">Joda-Time</a> as well, but I don't know why you should bother with that (Update 2022; maybe because the entire <code>javax.xml.bind</code> section is missing from Android's <code>javax.xml</code> package).</p>
"
44765546,"<p>That &quot;XML&quot; is worse than <em>invalid</em> â it's <em>not well-formed</em>; see <em><strong><a href=""https://stackoverflow.com/a/25830482/290085"">Well Formed vs Valid XML</a></strong></em>.</p>
<p>An informal assessment of the predictability of the transgressions does not help.  That textual data is not XML.  No conformant XML tools or libraries can help you process it.</p>
<h2>Options, most desirable first:</h2>
<ol>
<li><p>Have the provider fix the problem on their end.  <strong>Demand well-formed XML.</strong> (Technically the phrase <em>well-formed XML</em> is redundant but may be useful for emphasis.)</p>
</li>
<li><p>Use a <strong>tolerant markup parser</strong> to cleanup the problem ahead of parsing as XML:</p>
<ul>
<li><p><strong>Standalone:</strong> <a href=""http://xmlstar.sourceforge.net/docs.php"" rel=""nofollow noreferrer"">xmlstarlet</a> has robust recovering and repair capabilities<sup><sub> credit: <a href=""https://stackoverflow.com/a/47285050/290085"">RomanPerekhrest</a></sub></sup></p>
<pre><code>xmlstarlet fo -o -R -H -D bad.xml 2&gt;/dev/null
</code></pre>
</li>
<li><p><strong>Standalone and C/C++:</strong> <a href=""http://www.html-tidy.org/"" rel=""nofollow noreferrer"">HTML Tidy</a> works with XML too.  <a href=""https://www.jezuk.co.uk/blog/2008/01/taggle-and-there-it-is-.html"" rel=""nofollow noreferrer"">Taggle</a> is a port of TagSoup to C++.</p>
</li>
<li><p><strong>Python:</strong> <a href=""https://www.crummy.com/software/BeautifulSoup/bs4/doc/"" rel=""nofollow noreferrer"">Beautiful Soup</a> is Python-based. See notes in the <a href=""https://www.crummy.com/software/BeautifulSoup/bs4/doc/#differences-between-parsers"" rel=""nofollow noreferrer"">Differences between parsers</a> section.  See also <a href=""https://stackoverflow.com/questions/2352840/parsing-broken-xml-with-lxml-etree-iterparse"">answers to this question</a> for more
suggestions for dealing with not-well-formed markup in Python,
including especially <a href=""https://lxml.de/parsing.html#parser-options"" rel=""nofollow noreferrer"">lxml's <code>recover=True</code> option</a>.
See also <a href=""https://stackoverflow.com/a/11400514/290085"">this answer</a> for how to use <code>codecs.EncodedFile()</code> to cleanup illegal characters.</p>
</li>
<li><p><strong>Java:</strong> <a href=""http://vrici.lojban.org/%7Ecowan/XML/tagsoup/"" rel=""nofollow noreferrer"">TagSoup</a> and <a href=""https://jsoup.org/"" rel=""nofollow noreferrer"">JSoup</a> focus on HTML.  <a href=""https://docs.oracle.com/javase/7/docs/api/java/io/FilterInputStream.html"" rel=""nofollow noreferrer""><code>FilterInputStream</code></a> can be used for <a href=""https://stackoverflow.com/a/8007565/290085"">preprocessing cleanup</a>.</p>
</li>
<li><p><strong>.NET:</strong></p>
<ul>
<li><a href=""https://msdn.microsoft.com/en-us/library/system.xml.xmlreadersettings.checkcharacters.aspx"" rel=""nofollow noreferrer"">XmlReaderSettings.CheckCharacters</a> can
be disabled to get past illegal XML character problems.</li>
<li><a href=""https://stackoverflow.com/questions/56010744/how-to-add-extra-root-to-loaded-xml-file-c-sharp/56010903#comment98670389_56010903"">@jdweng notes</a> that <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlreadersettings.conformancelevel?view=netframework-4.8"" rel=""nofollow noreferrer""><code>XmlReaderSettings.ConformanceLevel</code></a> can be set to
<a href=""https://learn.microsoft.com/en-us/dotnet/api/system.xml.conformancelevel?view=netframework-4.8#System_Xml_ConformanceLevel_Fragment"" rel=""nofollow noreferrer""><code>ConformanceLevel.Fragment</code></a> so that <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlreader?view=netframework-4.8"" rel=""nofollow noreferrer""><code>XmlReader</code></a> can read <a href=""https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities"" rel=""nofollow noreferrer"">XML Well-Formed Parsed Entities</a> lacking a root element.</li>
<li><a href=""https://stackoverflow.com/a/46221333/290085"">@jdweng also reports</a> that <a href=""https://msdn.microsoft.com/en-us/library/system.xml.xmlreader.readtofollowing(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>XmlReader.ReadToFollowing()</code></a> can sometimes
be used to <a href=""https://stackoverflow.com/a/46221333/290085"">work-around XML syntactical issues</a>, but note
rule-breaking warning in #3 below.</li>
<li><a href=""https://github.com/KirillOsenkov/XmlParser"" rel=""nofollow noreferrer""><code>Microsoft.Language.Xml.XMLParser</code></a> is said to be âerror-tolerantâ.</li>
</ul>
</li>
<li><p><strong>Go:</strong> Set <a href=""https://pkg.go.dev/encoding/xml#Decoder"" rel=""nofollow noreferrer""><code>Decoder.Strict</code></a> to <code>false</code> as shown in this <a href=""https://stackoverflow.com/a/72120398/290085"">example</a> by <a href=""https://stackoverflow.com/users/373815/chuckx"">@chuckx</a>.</p>
</li>
<li><p><strong>PHP:</strong> See <a href=""http://php.net/manual/en/class.domdocument.php#domdocument.props.recover"" rel=""nofollow noreferrer"">DOMDocument::$recover</a> and <a href=""http://php.net/libxml_use_internal_errors"" rel=""nofollow noreferrer"">libxml_use_internal_errors(true)</a>.  See nice example <a href=""https://stackoverflow.com/a/42370773/290085"">here</a>.</p>
</li>
<li><p><strong>Ruby:</strong> Nokogiri supports â<a href=""http://www.nokogiri.org/tutorials/ensuring_well_formed_markup.html#gentle_well_formedness"" rel=""nofollow noreferrer"">Gentle Well-Formedness</a>â.</p>
</li>
<li><p><strong>R:</strong> See <a href=""http://web.mit.edu/%7Er/current/arch/i386_linux26/lib/R/library/XML/html/xmlTreeParse.html"" rel=""nofollow noreferrer"">htmlTreeParse()</a> for fault-tolerant markup parsing in R.</p>
</li>
<li><p><strong>Perl:</strong> See <a href=""https://metacpan.org/pod/XML::Liberal"" rel=""nofollow noreferrer"">XML::Liberal</a>, a &quot;super liberal XML parser that parses broken XML.&quot;</p>
</li>
</ul>
</li>
<li><p><strong>Process the data as text</strong> manually using a text editor or
programmatically using character/string functions.  Doing this
programmatically can range from <strong>tricky to impossible</strong> as
what appears to be
predictable often is not -- <strong>rule breaking is rarely bound by rules</strong>.</p>
<ul>
<li><p>For <strong>invalid character errors</strong>, use regex to remove/replace invalid characters:</p>
<ul>
<li><a href=""https://stackoverflow.com/a/12265956/290085"">PHP:</a> <code>preg_replace('/[^\x{0009}\x{000a}\x{000d}\x{0020}-\x{D7FF}\x{E000}-\x{FFFD}]+/u', ' ', $s);</code></li>
<li><a href=""https://stackoverflow.com/questions/12229572/php-generated-xml-shows-invalid-char-value-27-message#comment68534118_12265956"">Ruby:</a> <code>string.tr(&quot;^\u{0009}\u{000a}\u{000d}\u{0020}-\u{D7FF}\u{E000ââ}-\u{FFFD}&quot;, ' ')</code></li>
<li><a href=""https://stackoverflow.com/questions/12229572/php-generated-xml-shows-invalid-char-value-27-message#comment68534118_12265956"">JavaScript:</a> <code>inputStr.replace(/[^\x09\x0A\x0D\x20-\xFF\x85\xA0-\uD7FF\uE000-\uFDCF\uFDE0-\uFFFD]/gm, '')</code></li>
</ul>
</li>
<li><p>For <strong>ampersands</strong>, use regex to replace matches with <code>&amp;amp;</code>:<sup><sub> credit: <a href=""https://stackoverflow.com/a/52951144/290085"">blhsin</a>, <a href=""https://regex101.com/r/3MTLY9/2"" rel=""nofollow noreferrer"">demo</a></sub></sup></p>
<pre><code>&amp;(?!(?:#\d+|#x[0-9a-f]+|\w+);)
</code></pre>
</li>
</ul>
</li>
</ol>
<p>Note that the above regular expressions won't take comments or CDATA
sections into account.</p>
"
6729645,"<p>This is not how you do things in Java.   There are no dynamic variables in Java.  Java variables have to be declared in the source code<sup>1</sup>.</p>

<p>Depending on what you are trying to achieve, you should use an array, a <code>List</code> or a <code>Map</code>; e.g.</p>

<pre><code>int n[] = new int[3];
for (int i = 0; i &lt; 3; i++) {
    n[i] = 5;
}

List&lt;Integer&gt; n = new ArrayList&lt;Integer&gt;();
for (int i = 1; i &lt; 4; i++) {
    n.add(5);
}

Map&lt;String, Integer&gt; n = new HashMap&lt;String, Integer&gt;();
for (int i = 1; i &lt; 4; i++) {
    n.put(""n"" + i, 5);
}
</code></pre>

<hr>

<p>It is possible to use reflection to dynamically <em>refer to</em> variables that have been declared in the source code.  However, this <strong>only</strong> works for variables that are class members (i.e. static and instance fields).  It doesn't work for local variables.  See @fyr's ""quick and dirty"" example.</p>

<p>However doing this kind of thing unnecessarily in Java is a bad idea.  It is inefficient, the code is more complicated, and since you are relying on runtime checking it is more fragile.  And this is not ""variables with dynamic names"".  It is better described as dynamic access to variables with static names.</p>

<hr>

<p><sup>1 - That statement is slightly inaccurate.  If you use BCEL or ASM, you can ""declare"" the variables in the bytecode file.  But don't do it!  That way lies madness!</sup></p>
"
285809,"<p>The docs for <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html"" rel=""noreferrer""><code>java.io.Serializable</code></a> are probably about as good an explanation as you'll get:</p>
<blockquote>
<p>The serialization runtime associates with each serializable class a version number, called a <code>serialVersionUID</code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different <code>serialVersionUID</code> than that of the corresponding sender's class, then deserialization will result in an
<a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/InvalidClassException.html"" rel=""noreferrer""><code>InvalidClassException</code></a>. A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that must be static, final, and of type <code>long</code>:</p>
</blockquote>
<blockquote>
<pre><code>ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;
</code></pre>
</blockquote>
<blockquote>
<p>If a serializable class does not explicitly declare a <code>serialVersionUID</code>, then the serialization runtime will calculate a default <code>serialVersionUID</code> value for that class based on various aspects of the class, as described in the Java(TM) Object Serialization Specification. However, it is <em>strongly recommended</em> that all serializable classes explicitly declare <code>serialVersionUID</code> values, since the default <code>serialVersionUID</code> computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected <code>InvalidClassExceptions</code> during deserialization. Therefore, to guarantee a consistent <code>serialVersionUID</code> value across different java compiler implementations, a serializable class must declare an explicit <code>serialVersionUID</code> value. It is also strongly advised that explicit <code>serialVersionUID</code> declarations use the private modifier where possible, since such declarations apply only to the immediately declaring class â <code>serialVersionUID</code> fields are not useful as inherited members.</p>
</blockquote>
"
326440,"<h2>Read all text from a file</h2>
<p>Java 11 added the <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#readString(java.nio.file.Path,java.nio.charset.Charset)"" rel=""noreferrer"">readString()</a> method to read small files as a <code>String</code>, preserving line terminators:</p>
<pre><code>String content = Files.readString(path, encoding);
</code></pre>
<p>For versions between Java 7 and 11, here's a compact, robust idiom, wrapped up in a utility method:</p>
<pre><code>static String readFile(String path, Charset encoding)
  throws IOException
{
  byte[] encoded = Files.readAllBytes(Paths.get(path));
  return new String(encoded, encoding);
}
</code></pre>
<h2>Read lines of text from a file</h2>
<p>Java 7 added a <a href=""https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29"" rel=""noreferrer"">convenience method to read a file as lines of text,</a> represented as a <code>List&lt;String&gt;</code>. This approach is &quot;lossy&quot; because the line separators are stripped from the end of each line.</p>
<pre><code>List&lt;String&gt; lines = Files.readAllLines(Paths.get(path), encoding);
</code></pre>
<p>Java 8 added the <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#lines-java.nio.file.Path-java.nio.charset.Charset-"" rel=""noreferrer""><code>Files.lines()</code></a> method to produce a <code>Stream&lt;String&gt;</code>. Again, this method is lossy because line separators are stripped. If an <code>IOException</code> is encountered while reading the file, it is wrapped in an <a href=""https://docs.oracle.com/javase/8/docs/api/java/io/UncheckedIOException.html"" rel=""noreferrer""><code>UncheckedIOException</code></a>, since <code>Stream</code> doesn't accept lambdas that throw checked exceptions.</p>
<pre><code>try (Stream&lt;String&gt; lines = Files.lines(path, encoding)) {
  lines.forEach(System.out::println);
}
</code></pre>
<p>This <code>Stream</code> does need a <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#close--"" rel=""noreferrer""><code>close()</code></a> call; this is poorly documented on the API, and I suspect many people don't even notice <code>Stream</code> has a <code>close()</code> method. Be sure to use an ARM-block as shown.</p>
<p>If you are working with a source other than a file, you can use the <a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html#lines--"" rel=""noreferrer""><code>lines()</code></a> method in <code>BufferedReader</code> instead.</p>
<h2>Memory utilization</h2>
<p>If your file is small enough relative to your available memory, reading the entire file at once might work fine. However, if your file is too large, reading one line at a time, processing it, and then discarding it before moving on to the next could be a better approach. Stream processing in this way can eliminate the total file size as a factor in your memory requirement.</p>
<h2>Character encoding</h2>
<p>One thing that is missing from the sample in the original post is the character encoding. This encoding generally can't be determined from the file itself, and requires meta-data such as an HTTP header to convey this important information.</p>
<p>The <a href=""https://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html"" rel=""noreferrer""><code>StandardCharsets</code></a> class defines some constants for the encodings required of all Java runtimes:</p>
<pre><code>String content = readFile(&quot;test.txt&quot;, StandardCharsets.UTF_8);
</code></pre>
<p>The platform default is available from <a href=""https://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29"" rel=""noreferrer"">the <code>Charset</code> class</a> itself:</p>
<pre><code>String content = readFile(&quot;test.txt&quot;, Charset.defaultCharset());
</code></pre>
<p>There are some special cases where the platform default is what you want, but they are rare. You should be able justify your choice, because the platform default is not portable. One example where it might be correct is when reading standard input or writing standard output.</p>
<hr />
<p>Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the &quot;edited&quot; link on this answer.</p>
"
4955695,"<p>Install the JAR into your local Maven repository (typically <code>.m2</code> in your home folder) as follows:</p>
<pre><code>mvn install:install-file \
   -Dfile=&lt;path-to-file&gt; \
   -DgroupId=&lt;group-id&gt; \
   -DartifactId=&lt;artifact-id&gt; \
   -Dversion=&lt;version&gt; \
   -Dpackaging=&lt;packaging&gt; \
   -DgeneratePom=true
</code></pre>
<p>Where each refers to:</p>
<p><code>&lt;path-to-file&gt;</code>: the path to the file to load e.g â <code>c:\kaptcha-2.3.jar</code></p>
<p><code>&lt;group-id&gt;</code>: the group that the file should be registered under e.g â <code>com.google.code</code></p>
<p><code>&lt;artifact-id&gt;</code>: the artifact name for the file e.g â <code>kaptcha</code></p>
<p><code>&lt;version&gt;</code>: the version of the file e.g â <code>2.3</code></p>
<p><code>&lt;packaging&gt;</code>: the packaging of the file e.g. â <code>jar</code></p>
<p><strong>Reference</strong></p>
<ul>
<li>Maven FAQ: <a href=""http://maven.apache.org/general.html#importing-jars"" rel=""noreferrer"">I have a jar that I want to put into my local repository. How can I copy it in?</a></li>
<li>Maven Install Plugin Usage: <a href=""https://maven.apache.org/plugins/maven-install-plugin/usage.html#The_install:install-file_goal"" rel=""noreferrer"">The <code>install:install-file</code> goal</a></li>
</ul>
"
271874,"<p>This to me sounds like a reasonably common problem that junior to intermediate developers tend to face at some point: they either don't know or don't trust the contracts they are participating in and defensively overcheck for nulls.  Additionally, when writing their own code, they tend to rely on returning nulls to indicate something thus requiring the caller to check for nulls.</p>
<p>To put this another way, there are two instances where null checking comes up:</p>
<ol>
<li><p>Where null is a valid response in terms of the contract; and</p>
</li>
<li><p>Where it isn't a valid response.</p>
</li>
</ol>
<p>(2) is easy.  As of Java 1.7 you can use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Objects.html#requireNonNull(T)"" rel=""noreferrer""><code>Objects.requireNonNull(foo)</code></a>. (If you are stuck with a previous version then <a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html"" rel=""noreferrer""><code>assert</code>ions</a> may be a good alternative.)</p>
<p>&quot;Proper&quot; usage of this method would be like below. The method returns the object passed into it and throws a <code>NullPointerException</code> if the object is null. This means that the returned value is always non-null. The method is primarily intended for validating parameters.</p>
<pre><code>public Foo(Bar bar) {
    this.bar = Objects.requireNonNull(bar);
}
</code></pre>
<p>It can also be used like an <code>assert</code>ion though since it throws an exception if the object is null. In both uses, a message can be added which will be shown in the exception. Below is using it like an assertion and providing a message.</p>
<pre><code>Objects.requireNonNull(someobject, &quot;if someobject is null then something is wrong&quot;);
someobject.doCalc();
</code></pre>
<p>Generally throwing a specific exception like <code>NullPointerException</code> when a value is null but shouldn't be is favorable to throwing a more general exception like <code>AssertionError</code>. This is the approach the Java library takes; favoring <code>NullPointerException</code> over <code>IllegalArgumentException</code> when an argument is not allowed to be null.</p>
<p>(1) is a little harder.  If you have no control over the code you're calling then you're stuck.  If null is a valid response, you have to check for it.</p>
<p>If it's code that you do control, however (and this is often the case), then it's a different story.  Avoid using nulls as a response.  With methods that return collections, it's easy: return empty collections (or arrays) instead of nulls pretty much all the time.</p>
<p>With non-collections it might be harder.  Consider this as an example: if you have these interfaces:</p>
<pre><code>public interface Action {
  void doSomething();
}

public interface Parser {
  Action findAction(String userInput);
}
</code></pre>
<p>where Parser takes raw user input and finds something to do, perhaps if you're implementing a command line interface for something.  Now you might make the contract that it returns null if there's no appropriate action.  That leads the null checking you're talking about.</p>
<p>An alternative solution is to never return null and instead use the <a href=""https://en.wikipedia.org/wiki/Null_Object_pattern"" rel=""noreferrer"">Null Object pattern</a>:</p>
<pre><code>public class MyParser implements Parser {
  private static Action DO_NOTHING = new Action() {
    public void doSomething() { /* do nothing */ }
  };

  public Action findAction(String userInput) {
    // ...
    if ( /* we can't find any actions */ ) {
      return DO_NOTHING;
    }
  }
}
</code></pre>
<p>Compare:</p>
<pre><code>Parser parser = ParserFactory.getParser();
if (parser == null) {
  // now what?
  // this would be an example of where null isn't (or shouldn't be) a valid response
}
Action action = parser.findAction(someInput);
if (action == null) {
  // do nothing
} else {
  action.doSomething();
}
</code></pre>
<p>to</p>
<pre><code>ParserFactory.getParser().findAction(someInput).doSomething();
</code></pre>
<p>which is a much better design because it leads to more concise code.</p>
<p>That said, perhaps it is entirely appropriate for the findAction() method to throw an Exception with a meaningful error message -- especially in this case where you are relying on user input.  It would be much better for the findAction method to throw an Exception than for the calling method to blow up with a simple NullPointerException with no explanation.</p>
<pre><code>try {
    ParserFactory.getParser().findAction(someInput).doSomething();
} catch(ActionNotFoundException anfe) {
    userConsole.err(anfe.getMessage());
}
</code></pre>
<p>Or if you think the try/catch mechanism is too ugly, rather than Do Nothing your default action should provide feedback to the user.</p>
<pre><code>public Action findAction(final String userInput) {
    /* Code to return requested Action if found */
    return new Action() {
        public void doSomething() {
            userConsole.err(&quot;Action not found: &quot; + userInput);
        }
    }
}
</code></pre>
"
2371150,"<p>Does this help?</p>

<pre><code>a = 5;
i=++a + ++a + a++; =&gt;
i=6 + 7 + 7; (a=8)

a = 5;
i=a++ + ++a + ++a; =&gt;
i=5 + 7 + 8; (a=8)
</code></pre>

<p>The main point is that <code>++a</code> increments the value and immediately returns it. </p>

<p><code>a++</code> also increments the value (in the background) but returns unchanged value of the variable - what looks like it is executed later.  </p>
"
140861,"<p>Update (2021) - <strong>Java 17</strong> now includes <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/HexFormat.html"" rel=""noreferrer""><code>java.util.HexFormat</code></a> (only took 25 years):</p>
<p><code>HexFormat.of().parseHex(s)</code></p>
<hr>
For older versions of Java:
<p>Here's a solution that I think is better than any posted so far:</p>
<pre><code>/* s must be an even-length string. */
public static byte[] hexStringToByteArray(String s) {
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i &lt; len; i += 2) {
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
                             + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}
</code></pre>
<p>Reasons why it is an improvement:</p>
<ul>
<li><p>Safe with leading zeros (unlike BigInteger) and with negative byte values (unlike Byte.parseByte)</p>
</li>
<li><p>Doesn't convert the String into a <code>char[]</code>, or create StringBuilder and String objects for every single byte.</p>
</li>
<li><p>No library dependencies that may not be available</p>
</li>
</ul>
<p>Feel free to add argument checking via <code>assert</code> or exceptions if the argument is not known to be safe.</p>
"
9109728,"<p><strong>NOTE:</strong>
Before trying this code, please find this line in the below code:</p>

<pre><code>private static String DB_NAME =""YourDbName""; // Database name
</code></pre>

<p>DB_NAME here is the name of your database. It is assumed that you have a copy of the database in the assets folder, so for example, if your database name is ordersDB, then the value of DB_NAME will be ordersDB,</p>

<pre><code>private static String DB_NAME =""ordersDB"";
</code></pre>

<hr>

<p>Keep the database in <strong>assets folder</strong> and then follow the below:</p>

<p>DataHelper class:</p>

<pre><code>import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.content.Context;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class DataBaseHelper extends SQLiteOpenHelper {

    private static String TAG = ""DataBaseHelper""; // Tag just for the LogCat window
    private static String DB_NAME =""YourDbName""; // Database name
    private static int DB_VERSION = 1; // Database version
    private final File DB_FILE;
    private SQLiteDatabase mDataBase;
    private final Context mContext;

    public DataBaseHelper(Context context) {
        super(context, DB_NAME, null, DB_VERSION);
        DB_FILE = context.getDatabasePath(DB_NAME);
        this.mContext = context;
    }

    public void createDataBase() throws IOException {
        // If the database does not exist, copy it from the assets.
        boolean mDataBaseExist = checkDataBase();
        if(!mDataBaseExist) {
            this.getReadableDatabase();
            this.close();
            try {
                // Copy the database from assests
                copyDataBase();
                Log.e(TAG, ""createDatabase database created"");
            } catch (IOException mIOException) {
                throw new Error(""ErrorCopyingDataBase"");
            }
        }
    }

    // Check that the database file exists in databases folder
    private boolean checkDataBase() {
        return DB_FILE.exists();
    }

    // Copy the database from assets
    private void copyDataBase() throws IOException {
        InputStream mInput = mContext.getAssets().open(DB_NAME);
        OutputStream mOutput = new FileOutputStream(DB_FILE);
        byte[] mBuffer = new byte[1024];
        int mLength;
        while ((mLength = mInput.read(mBuffer)) &gt; 0) {
            mOutput.write(mBuffer, 0, mLength);
        }
        mOutput.flush();
        mOutput.close();
        mInput.close();
    }

    // Open the database, so we can query it
    public boolean openDataBase() throws SQLException {
        // Log.v(""DB_PATH"", DB_FILE.getAbsolutePath());
        mDataBase = SQLiteDatabase.openDatabase(DB_FILE, null, SQLiteDatabase.CREATE_IF_NECESSARY);
        // mDataBase = SQLiteDatabase.openDatabase(DB_FILE, null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
        return mDataBase != null;
    }

    @Override
    public synchronized void close() {
        if(mDataBase != null) {
            mDataBase.close();
        }
        super.close();
    }

}
</code></pre>

<p><strong>Write a DataAdapter class like:</strong></p>

<pre><code>import java.io.IOException;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

public class TestAdapter {

    protected static final String TAG = ""DataAdapter"";

    private final Context mContext;
    private SQLiteDatabase mDb;
    private DataBaseHelper mDbHelper;

    public TestAdapter(Context context) {
        this.mContext = context;
        mDbHelper = new DataBaseHelper(mContext);
    }

    public TestAdapter createDatabase() throws SQLException {
        try {
            mDbHelper.createDataBase();
        } catch (IOException mIOException) {
            Log.e(TAG, mIOException.toString() + ""  UnableToCreateDatabase"");
            throw new Error(""UnableToCreateDatabase"");
        }
        return this;
    }

    public TestAdapter open() throws SQLException {
        try {
            mDbHelper.openDataBase();
            mDbHelper.close();
            mDb = mDbHelper.getReadableDatabase();
        } catch (SQLException mSQLException) {
            Log.e(TAG, ""open &gt;&gt;""+ mSQLException.toString());
            throw mSQLException;
        }
        return this;
    }

    public void close() {
        mDbHelper.close();
    }

     public Cursor getTestData() {
         try {
             String sql =""SELECT * FROM myTable"";
             Cursor mCur = mDb.rawQuery(sql, null);
             if (mCur != null) {
                mCur.moveToNext();
             }
             return mCur;
         } catch (SQLException mSQLException) {
             Log.e(TAG, ""getTestData &gt;&gt;""+ mSQLException.toString());
             throw mSQLException;
         }
     }
}
</code></pre>

<p><strong>Now you can use it like:</strong></p>

<pre><code>TestAdapter mDbHelper = new TestAdapter(urContext);
mDbHelper.createDatabase();
mDbHelper.open();

Cursor testdata = mDbHelper.getTestData();

mDbHelper.close();
</code></pre>

<p><strong>EDIT: Thanks to JDx</strong></p>

<p>For <a href=""https://en.wikipedia.org/wiki/Android_version_history#Android_4.1_Jelly_Bean_.28API_level_16.29"" rel=""noreferrer"">Android&nbsp;4.1</a> (Jelly Bean), change:</p>

<pre><code>DB_PATH = ""/data/data/"" + context.getPackageName() + ""/databases/"";
</code></pre>

<p>to:</p>

<pre><code>DB_PATH = context.getApplicationInfo().dataDir + ""/databases/"";
</code></pre>

<p>in the DataHelper class, this code will work on Jelly Bean 4.2 multi-users.</p>

<p><strong>EDIT: Instead of using hardcoded path, we can use</strong></p>

<pre><code>DB_PATH = context.getDatabasePath(DB_NAME).getAbsolutePath();
</code></pre>

<p>which will give us the full path to the database file and works on all Android versions</p>
"
1520212,"<p>Using Collections to shuffle an array of primitive types is a bit of an overkill...</p>

<p>It is simple enough to implement the function yourself, using for example the <a href=""http://en.wikipedia.org/wiki/Fisher-Yates_shuffle"" rel=""noreferrer"">FisherâYates shuffle</a>:</p>

<pre><code>import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

class Test
{
  public static void main(String args[])
  {
    int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };

    shuffleArray(solutionArray);
    for (int i = 0; i &lt; solutionArray.length; i++)
    {
      System.out.print(solutionArray[i] + "" "");
    }
    System.out.println();
  }

  // Implementing FisherâYates shuffle
  static void shuffleArray(int[] ar)
  {
    // If running on Java 6 or older, use `new Random()` on RHS here
    Random rnd = ThreadLocalRandom.current();
    for (int i = ar.length - 1; i &gt; 0; i--)
    {
      int index = rnd.nextInt(i + 1);
      // Simple swap
      int a = ar[index];
      ar[index] = ar[i];
      ar[i] = a;
    }
  }
}
</code></pre>
"
1969651,"<p>Ah, the Java <code>Date</code> class. Perhaps one of the best examples of how not to do something in any language, anywhere. Where do I begin?</p>
<p>Reading the JavaDoc might lead one to think that the developers have actually got some good ideas. It goes on about the difference between <a href=""http://en.wikipedia.org/wiki/Coordinated_Universal_Time"" rel=""noreferrer"">UTC</a> and <a href=""http://en.wikipedia.org/wiki/Greenwich_Mean_Time"" rel=""noreferrer"">GMT</a> at length, despite the fact that the difference between the two is basically leap seconds (which happen <a href=""http://alblue.blogspot.com/2008/12/109876543211happy-new-year.html"" rel=""noreferrer"">pretty</a> <a href=""http://alblue.blogspot.com/2005/12/have-one-new-year-get-second-free.html"" rel=""noreferrer"">rarely</a>).</p>
<p>However, the design decisions really lay to waste any thought of being a well designed API. Here are some of the favourite mistakes:</p>
<ul>
<li>Despite being designed in the last decade of the millennium, it rates years as two digits since 1900. There are literally millions of workarounds doing 1900+ (or 1900-) in the Java world as a result of this banal decision.</li>
<li>Months are zero indexed, to cater for the spectacularly unusual case of having an array-of-months and not living with a thirteen element array, the first of which containing a <code>null</code>. As a result, we have 0..11 (and today being month 11 of the year 109). There are a similar number of ++ and -- on the months in order to convert to a string.</li>
<li>They're <a href=""https://stackoverflow.com/q/279507/1429387"">mutable</a>. As a result, any time you want to give a date back (say, as an instance structure) you need to return a clone of that date instead of the date object itself (since otherwise, people can mutate your structure).</li>
<li>The <code>Calendar</code>, designed to 'fix' this, actually makes the same mistakes. They're still mutable.</li>
<li><code>Date</code> represents a <code>DateTime</code>, but in order to defer to those in SQL land, there's another subclass <code>java.sql.Date</code>, which represents a single day (though without a timezone associated with it).</li>
<li>There are no <code>TimeZone</code>s associated with a <code>Date</code>, and so ranges (such as a 'whole day') are often represented as a midnight-midnight (often in some arbitrary timezone)</li>
</ul>
<p>Finally, it's worth noting that leap seconds generally correct themselves against a good system clock which is updated with ntp within an hour (see links above). The chance of a system being still up and running in the introduction of two leap seconds (every six months minimum, every few years practically) is pretty unlikely, especially considering the fact that you have to redeploy new versions of your code from time to time. Even using a dynamic language which regenerates classes or something like a WAR engine will pollute the class space and run out of permgen eventually.</p>
"
25425131,"<p>The JVM is allowed to assume that other threads do not change the <code>pizzaArrived</code> variable during the loop. In other words, it can hoist the <code>pizzaArrived == false</code> test outside the loop, optimizing this:</p>

<pre><code>while (pizzaArrived == false) {}
</code></pre>

<p>into this:</p>

<pre><code>if (pizzaArrived == false) while (true) {}
</code></pre>

<p>which is an infinite loop.</p>

<p>To ensure that changes made by one thread are visible to other threads you must always add some <strong>synchronization</strong> between the threads. The simplest way to do this is to make the shared variable <code>volatile</code>:</p>

<pre><code>volatile boolean pizzaArrived = false;
</code></pre>

<p>Making a variable <code>volatile</code> guarantees that different threads will see the effects of each other's changes to it. This prevents the JVM from caching the value of <code>pizzaArrived</code> or hoisting the test outside the loop. Instead, it must read the value of the real variable every time.</p>

<p>(More formally, <code>volatile</code> creates a <em>happens-before</em> relationship between accesses to the variable. This means that <a href=""https://stackoverflow.com/questions/19738651/volatile-variable-explanation-in-java-docs"">all other work a thread did</a> before delivering the pizza is also visible to the thread receiving the pizza, even if those other changes are not to <code>volatile</code> variables.)</p>

<p><a href=""http://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html"">Synchronized methods</a> are used principally to implement mutual exclusion (preventing two things happening at the same time), but they also have all the same side-effects that <code>volatile</code> has. Using them when reading and writing a variable is another way to make the changes visible to other threads:</p>

<pre><code>class MyHouse {
    boolean pizzaArrived = false;

    void eatPizza() {
        while (getPizzaArrived() == false) {}
        System.out.println(""That was delicious!"");
    }

    synchronized boolean getPizzaArrived() {
        return pizzaArrived;
    }

    synchronized void deliverPizza() {
        pizzaArrived = true;
    }
}
</code></pre>

<hr>

<h2>The effect of a print statement</h2>

<p><code>System.out</code> is a <code>PrintStream</code> object. The methods of <code>PrintStream</code> are synchronized like this:</p>

<pre><code>public void println(String x) {
    synchronized (this) {
        print(x);
        newLine();
    }
}
</code></pre>

<p>The synchronization prevents <code>pizzaArrived</code> being cached during the loop. <em>Strictly speaking, <strong>both</strong> threads must synchronize on the same object</em> to guarantee that changes to the variable are visible. (For example, calling <code>println</code> after setting <code>pizzaArrived</code> and calling it again before reading <code>pizzaArrived</code> would be correct.) If only one thread synchronizes on a particular object, the JVM is allowed to ignore it. In practice, the JVM is not smart enough to prove that other threads won't call <code>println</code> after setting <code>pizzaArrived</code>, so it assumes that they might. Therefore, it cannot cache the variable during the loop if you call <code>System.out.println</code>. That's why loops like this work when they have a print statement, although it is not a correct fix.</p>

<p>Using <code>System.out</code> is not the only way to cause this effect, but it is the one people discover most often, when they are trying to debug why their loop doesn't work!</p>

<hr>

<h2>The bigger problem</h2>

<p><code>while (pizzaArrived == false) {}</code> is a busy-wait loop. That's bad! While it waits, it hogs the CPU, which slows down other applications, and increases the power usage, temperature, and fan speed of the system. Ideally, we would like the loop thread to sleep while it waits, so it does not hog the CPU.</p>

<p>Here are some ways to do that:</p>

<h3>Using wait/notify</h3>

<p>A low-level solution is to <a href=""https://stackoverflow.com/questions/2536692/a-simple-scenario-using-wait-and-notify-in-java"">use the wait/notify methods of <code>Object</code></a>:</p>

<pre><code>class MyHouse {
    boolean pizzaArrived = false;

    void eatPizza() {
        synchronized (this) {
            while (!pizzaArrived) {
                try {
                    this.wait();
                } catch (InterruptedException e) {}
            }
        }

        System.out.println(""That was delicious!"");
    }

    void deliverPizza() {
        synchronized (this) {
            pizzaArrived = true;
            this.notifyAll();
        }
    }
}
</code></pre>

<p>In this version of the code, the loop thread calls <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--""><code>wait()</code></a>, which puts the thread the sleep. It will not use any CPU cycles while sleeping. After the second thread sets the variable, it calls <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--""><code>notifyAll()</code></a> to wake up any/all threads which were waiting on that object. This is like having the pizza guy ring the doorbell, so you can sit down and rest while waiting, instead of standing awkwardly at the door.</p>

<p>When calling wait/notify on an object you must hold the synchronization lock of that object, which is what the above code does. You can use any object you like so long as both threads use the same object: here I used <code>this</code> (the instance of <code>MyHouse</code>). Usually, two threads would not be able to enter synchronized blocks of the same object simultaneously (which is part of the purpose of synchronization) but it works here because a thread temporarily releases the synchronization lock when it is inside the <code>wait()</code> method.</p>

<h3>BlockingQueue</h3>

<p>A <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html""><code>BlockingQueue</code></a> is used to implement producer-consumer queues. ""Consumers"" take items from the front of the queue, and ""producers"" push items on at the back. An example:</p>

<pre><code>class MyHouse {
    final BlockingQueue&lt;Object&gt; queue = new LinkedBlockingQueue&lt;&gt;();

    void eatFood() throws InterruptedException {
        // take next item from the queue (sleeps while waiting)
        Object food = queue.take();
        // and do something with it
        System.out.println(""Eating: "" + food);
    }

    void deliverPizza() throws InterruptedException {
        // in producer threads, we push items on to the queue.
        // if there is space in the queue we can return immediately;
        // the consumer thread(s) will get to it later
        queue.put(""A delicious pizza"");
    }
}
</code></pre>

<p>Note: The <code>put</code> and <code>take</code> methods of <code>BlockingQueue</code> can throw <code>InterruptedException</code>s, which are checked exceptions which must be handled. In the above code, for simplicity, the exceptions are rethrown. You might prefer to catch the exceptions in the methods and retry the put or take call to be sure it succeeds. Apart from that one point of ugliness, <code>BlockingQueue</code> is very easy to use.</p>

<p>No other synchronization is needed here because a <code>BlockingQueue</code> makes sure that everything threads did before putting items in the queue is visible to the threads taking those items out.</p>

<h3>Executors</h3>

<p><code>Executor</code>s are like ready-made <code>BlockingQueue</code>s which execute tasks. Example:</p>

<pre><code>// A ""SingleThreadExecutor"" has one work thread and an unlimited queue
ExecutorService executor = Executors.newSingleThreadExecutor();

Runnable eatPizza = () -&gt; { System.out.println(""Eating a delicious pizza""); };
Runnable cleanUp = () -&gt; { System.out.println(""Cleaning up the house""); };

// we submit tasks which will be executed on the work thread
executor.execute(eatPizza);
executor.execute(cleanUp);
// we continue immediately without needing to wait for the tasks to finish
</code></pre>

<p>For details see the doc for <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html""><code>Executor</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html""><code>ExecutorService</code></a>, and <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html""><code>Executors</code></a>.</p>

<h3>Event handling</h3>

<p>Looping while waiting for the user to click something in a UI is wrong. Instead, use the event handling features of the UI toolkit. <a href=""http://docs.oracle.com/javase/tutorial/uiswing/events/index.html"">In Swing</a>, for example:</p>

<pre><code>JLabel label = new JLabel();
JButton button = new JButton(""Click me"");
button.addActionListener((ActionEvent e) -&gt; {
    // This event listener is run when the button is clicked.
    // We don't need to loop while waiting.
    label.setText(""Button was clicked"");
});
</code></pre>

<p>Because the event handler runs on the event dispatch thread, doing long work in the event handler blocks other interaction with the UI until the work is finished. Slow operations can be started on a new thread, or dispatched to a waiting thread using one of the above techniques (wait/notify, a <code>BlockingQueue</code>, or <code>Executor</code>). You can also use a <a href=""http://docs.oracle.com/javase/tutorial/uiswing/concurrency/worker.html""><code>SwingWorker</code></a>, which is designed exactly for this, and automatically supplies a background worker thread:</p>

<pre><code>JLabel label = new JLabel();
JButton button = new JButton(""Calculate answer"");

// Add a click listener for the button
button.addActionListener((ActionEvent e) -&gt; {

    // Defines MyWorker as a SwingWorker whose result type is String:
    class MyWorker extends SwingWorker&lt;String,Void&gt; {
        @Override
        public String doInBackground() throws Exception {
            // This method is called on a background thread.
            // You can do long work here without blocking the UI.
            // This is just an example:
            Thread.sleep(5000);
            return ""Answer is 42"";
        }

        @Override
        protected void done() {
            // This method is called on the Swing thread once the work is done
            String result;
            try {
                result = get();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            label.setText(result); // will display ""Answer is 42""
        }
    }

    // Start the worker
    new MyWorker().execute();
});
</code></pre>

<h3>Timers</h3>

<p>To perform periodic actions, you can use a <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Timer.html""><code>java.util.Timer</code></a>. It is easier to use than writing your own timing loop, and easier to start and stop. This demo prints the current time once per second:</p>

<pre><code>Timer timer = new Timer();
TimerTask task = new TimerTask() {
    @Override
    public void run() {
        System.out.println(System.currentTimeMillis());
    }
};
timer.scheduleAtFixedRate(task, 0, 1000);
</code></pre>

<p>Each <code>java.util.Timer</code> has its own background thread which is used to execute its scheduled <code>TimerTask</code>s. Naturally, the thread sleeps between tasks, so it does not hog the CPU.</p>

<p>In Swing code, there is also a <a href=""http://docs.oracle.com/javase/tutorial/uiswing/misc/timer.html""><code>javax.swing.Timer</code></a>, which is similar, but it executes the listener on the Swing thread, so you can safely interact with Swing components without needing to manually switch threads:</p>

<pre><code>JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
Timer timer = new Timer(1000, (ActionEvent e) -&gt; {
    frame.setTitle(String.valueOf(System.currentTimeMillis()));
});
timer.setRepeats(true);
timer.start();
frame.setVisible(true);
</code></pre>

<h3>Other ways</h3>

<p>If you are writing multithreaded code, it is worth exploring the classes in these packages to see what is available:</p>

<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html"">java.util.concurrent</a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html"">java.util.concurrent.atomic</a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/package-summary.html"">java.util.concurrent.locks</a></li>
</ul>

<p>And also see the <a href=""http://docs.oracle.com/javase/tutorial/essential/concurrency/index.html"">Concurrency section</a> of the Java tutorials. Multithreading is complicated, but there is lots of help available!</p>
"
9855338,"<p>From the discussion <a href=""https://stackoverflow.com/q/332079/1284661"">here</a>, and especially <a href=""https://stackoverflow.com/a/2197650/1284661"">this</a> answer, this is the function I currently use:</p>
<pre><code>private static final char[] HEX_ARRAY = &quot;0123456789ABCDEF&quot;.toCharArray();
public static String bytesToHex(byte[] bytes) {
    char[] hexChars = new char[bytes.length * 2];
    for (int j = 0; j &lt; bytes.length; j++) {
        int v = bytes[j] &amp; 0xFF;
        hexChars[j * 2] = HEX_ARRAY[v &gt;&gt;&gt; 4];
        hexChars[j * 2 + 1] = HEX_ARRAY[v &amp; 0x0F];
    }
    return new String(hexChars);
}
</code></pre>
<p>My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)</p>
<p>2k20 version, with respect to Java 9 compact strings:</p>
<pre><code>private static final byte[] HEX_ARRAY = &quot;0123456789ABCDEF&quot;.getBytes(StandardCharsets.US_ASCII);
public static String bytesToHex(byte[] bytes) {
    byte[] hexChars = new byte[bytes.length * 2];
    for (int j = 0; j &lt; bytes.length; j++) {
        int v = bytes[j] &amp; 0xFF;
        hexChars[j * 2] = HEX_ARRAY[v &gt;&gt;&gt; 4];
        hexChars[j * 2 + 1] = HEX_ARRAY[v &amp; 0x0F];
    }
    return new String(hexChars, StandardCharsets.UTF_8);
}
</code></pre>
"
245068,"<p>Java and Javascript are similar like Car and Carpet are similar.</p>
"
10370497,"<p>You are reading the socket until <code>read()</code> returns -1. This is the end-of-stream condition (EOS). EOS happens when the peer closes the connection. Not when it finishes writing one file.</p>

<p>You need to send the file size ahead of each file. You're already doing a similar thing with the file count. Then make sure you read exactly that many bytes for that file:</p>

<pre><code>String filename = dis.readUTF();
long fileSize = dis.readLong();
FileOutputStream fos = new FileOutputStream(filename);
while (fileSize &gt; 0 &amp;&amp; (n = dis.read(buf, 0, (int)Math.min(buf.length, fileSize))) != -1)
{
  fos.write(buf,0,n);
  fileSize -= n;
}
fos.close();
</code></pre>

<p>You can enclose all this in a loop that terminates when <code>readUTF()</code> throws <code>EOFException</code>. Conversely of course you have to call <code>writeUTF(filename)</code> and <code>writeLong(filesize)</code> at the sender, before sending the data.</p>
"
46908,"<pre class=""lang-java prettyprint-override""><code>Map&lt;String, String&gt; map = ...
for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {
    System.out.println(entry.getKey() + &quot;/&quot; + entry.getValue());
}
</code></pre>
<p>On Java 10+:</p>
<pre class=""lang-java prettyprint-override""><code>for (var entry : map.entrySet()) {
    System.out.println(entry.getKey() + &quot;/&quot; + entry.getValue());
}
</code></pre>
"
1386288,"<p><code>Vector</code> synchronizes on each individual operation. That's almost never what you want to do.</p>

<p>Generally you want to synchronize a <em>whole sequence</em> of operations. Synchronizing individual operations is both less safe (if you iterate over a <code>Vector</code>, for instance, you still need to take out a lock to avoid anyone else changing the collection at the same time, which would cause a <code>ConcurrentModificationException</code> in the iterating thread) but also slower (why take out a lock repeatedly when once will be enough)?</p>

<p>Of course, it also has the overhead of locking even when you don't need to.</p>

<p>Basically, it's a very flawed approach to synchronization in most situations. As <strong>Mr Brian Henk</strong> pointed out, you can decorate a collection using the calls such as <a href=""http://java.sun.com/javase/6/docs/api/java/util/Collections.html#synchronizedList(java.util.List)"" rel=""noreferrer""><code>Collections.synchronizedList</code></a> - the fact that <code>Vector</code> combines both the ""resized array"" collection implementation with the ""synchronize every operation"" bit is another example of poor design; the decoration approach gives cleaner separation of concerns.</p>

<p>As for a <code>Stack</code> equivalent - I'd look at <code>Deque</code>/<code>ArrayDeque</code> to start with.</p>
"
4732617,"<p>As noted in comments, some of this becomes irrelevant in Java 8, where <code>final</code> can be implicit. Only an <em>effectively</em> final variable can be used in an anonymous inner class or lambda expression though.</p>

<hr>

<p>It's basically due to the way Java manages <a href=""http://en.wikipedia.org/wiki/Closure_%28computer_science%29"" rel=""noreferrer"">closures</a>.</p>

<p>When you create an instance of an anonymous inner class, any variables which are used within that class have their <em>values</em> copied in via the autogenerated constructor. This avoids the compiler having to autogenerate various extra types to hold the logical state of the ""local variables"", as for example the C# compiler does... (When C# captures a variable in an anonymous function, it really captures the variable - the closure can update the variable in a way which is seen by the main body of the method, and vice versa.)</p>

<p>As the value has been copied into the instance of the anonymous inner class, it would look odd if the variable could be modified by the rest of the method - you could have code which appeared to be working with an out-of-date variable (because that's effectively what <em>would</em> be happening... you'd be working with a copy taken at a different time). Likewise if you could make changes within the anonymous inner class, developers might expect those changes to be visible within the body of the enclosing method.</p>

<p>Making the variable final removes all these possibilities - as the value can't be changed  at all, you don't need to worry about whether such changes will be visible. The only ways to allow the method and the anonymous inner class see each other's changes is to use a mutable type of some description. This could be the enclosing class itself, an array, a mutable wrapper type... anything like that. Basically it's a bit like communicating between one method and another: changes made to the <em>parameters</em> of one method aren't seen by its caller, but changes made to the objects <em>referred to</em> by the parameters are seen.</p>

<p>If you're interested in a more detailed comparison between Java and C# closures, I have an <a href=""http://csharpindepth.com/Articles/Chapter5/Closures.aspx"" rel=""noreferrer"">article</a> which goes into it further. I wanted to focus on the Java side in this answer :)</p>
"
2736612,"<p>One option could be letting your custom class implement the <code>Serializable</code> interface and then you can pass object instances in the intent extra using the <code>putExtra(Serializable..)</code> variant of the <code>Intent#putExtra()</code> method.</p>
<p><strong>Actual Code</strong>:</p>
<p>In Your Custom Model/Object Class:</p>
<pre><code>public class YourClass implements Serializable {
</code></pre>
<p>At other class where using the Custom Model/Class:</p>
<pre><code>//To pass:
intent.putExtra(&quot;KEY_NAME&quot;, myObject);
</code></pre>
<p>myObject is of type &quot;YourClass&quot;.
Then to retrieve from another activity, use getSerializableExtra
get the object using same Key name. And typecast to YourClass is needed:</p>
<pre><code>// To retrieve object in second Activity
myObject = (YourClass) getIntent().getSerializableExtra(&quot;KEY_NAME&quot;);
</code></pre>
<p>Note: Make sure each nested class of your main custom class has implemented Serializable interface to avoid any serialization exceptions. For example:</p>
<pre><code>class MainClass implements Serializable {
    
    public MainClass() {}

    public static class ChildClass implements Serializable {
         
        public ChildClass() {}
    }
}
</code></pre>
"
37349,"<p>Ultimately you always have a finite max of heap to use no matter what platform you are running on. In Windows 32 bit this is around <code>2GB</code> (not specifically heap but total amount of memory per process). It just happens that Java chooses to make the default smaller (presumably so that the programmer can't create programs that have runaway memory allocation without running into this problem and having to examine exactly what they are doing).</p>

<p>So this given there are several approaches you could take to either determine what amount of memory you need or to reduce the amount of memory you are using. One common mistake with garbage collected languages such as Java or C# is to keep around references to objects that you <strong>no longer</strong> are using, or allocating many objects when you could <strong>reuse</strong> them instead. As long as objects have a reference to them they will continue to use heap space as the garbage collector will not delete them.</p>

<p>In this case you can use a Java memory profiler to determine what methods in your program are allocating large number of objects and then determine if there is a way to make sure they are no longer referenced, or to not allocate them in the first place. One option which I have used in the past is ""JMP"" <a href=""http://www.khelekore.org/jmp/"" rel=""noreferrer"">http://www.khelekore.org/jmp/</a>.</p>

<p>If you determine that you are allocating these objects for a reason and you need to keep around references (depending on what you are doing this might be the case), you will just need to increase the max heap size when you start the program. However, once you do the memory profiling and understand how your objects are getting allocated you should have a better idea about how much memory you need. </p>

<p>In general if you can't guarantee that your program will run in some finite amount of memory (perhaps depending on input size) you will always run into this problem. Only after exhausting all of this will you need to look into caching objects out to disk etc. At this point you should have a very good reason to say ""I need Xgb of memory"" for something and you can't work around it by improving your algorithms or memory allocation patterns. Generally this will only usually be the case for algorithms operating on large datasets (like a database or some scientific analysis program) and then techniques like caching and memory mapped IO become useful.</p>
"
37632,"<p>The name reflection is used to describe code which is able to inspect other code in the same system (or itself).</p>

<p>For example, say you have an object of an unknown type in Java, and you would like to call a 'doSomething' method on it if one exists. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, but using reflection, your code can look at the object and find out if it has a method called 'doSomething' and then call it if you want to.</p>

<p>So, to give you a code example of this in Java (imagine the object in question is foo) :</p>

<pre><code>Method method = foo.getClass().getMethod(""doSomething"", null);
method.invoke(foo, null);
</code></pre>

<p>One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to look through your classes for methods tagged with the @Test annotation, and will then call them when running the unit test.</p>

<p>There are some good reflection examples to get you started at <a href=""http://docs.oracle.com/javase/tutorial/reflect/index.html"" rel=""noreferrer"">http://docs.oracle.com/javase/tutorial/reflect/index.html</a></p>

<p>And finally, yes, the concepts are pretty much similar in other statically typed languages which support reflection (like C#). In dynamically typed languages, the use case described above is less necessary (since the compiler will allow any method to be called on any object, failing at runtime if it does not exist), but the second case of looking for methods which are marked or work in a certain way is still common.</p>

<p><strong>Update from a comment:</strong></p>

<blockquote>
  <p>The ability to inspect the code in the system and see object types is
  not reflection, but rather Type Introspection. Reflection is then the
  ability to make modifications at runtime by making use of
  introspection. The distinction is necessary here as some languages
  support introspection, but do not support reflection. One such example
  is C++</p>
</blockquote>
"
35210,"<p>Without any more information it is difficult to pinpoint the problem, but the root cause is that you most likely have compiled a class against a different version of the class that is missing a method, than the one you are using when running it.</p>

<p>Look at the stack trace ... If the exception appears when calling a method on an object in a library, you are most likely using separate versions of the library when compiling and running. Make sure you have the right version both places.</p>

<p>If the exception appears when calling a method on objects instantiated by classes <em>you</em> made, then your build process seems to be faulty. Make sure the class files that you are actually running are updated when you compile.</p>
"
32343342,"<p>There are many different variations of this pattern. In particular, &quot;MVC&quot; in the context of a web application is interpreted somewhat differently to &quot;MVC&quot; in the context of a thick client (e.g. desktop) application (because a web application has to sit atop the request-response cycle). This is just one approach to implementing MVC in the context of a thick client application, using JavaFX.</p>
<p>Your <code>Person</code> class is not really the model, unless you have a very simple application: this is typically what we call a domain object, and the model will contain references to it, along with other data. In a narrow context, such as when you are <em>just</em> thinking about the <code>ListView</code>, you can think of the <code>Person</code> as your data model (it models the data in each element of the <code>ListView</code>), but in the wider context of the application, there is more data and state to consider.</p>
<p>If you are displaying a <code>ListView&lt;Person&gt;</code> the data you need, as a minimum, is an <code>ObservableList&lt;Person&gt;</code>. You might also want a property such as <code>currentPerson</code>, that might represent the selected item in the list.</p>
<p>If the <em>only</em> view you have is the <code>ListView</code>, then creating a separate class to store this would be overkill, but any real application will usually end up with multiple views. At this point, having the data shared in a model becomes a very useful way for different controllers to communicate with each other.</p>
<p>So, for example, you might have something like this:</p>
<pre><code>public class DataModel {

    private final ObservableList&lt;Person&gt; personList = FXCollections.observableArrayList();
    
    private final ObjectProperty&lt;Person&gt; currentPerson = new SimpleObjectPropery&lt;&gt;(null);

    public ObjectProperty&lt;Person&gt; currentPersonProperty() {
        return currentPerson ;
    }

    public final Person getCurrentPerson() {
        return currentPerson().get();
    }

    public final void setCurrentPerson(Person person) {
        currentPerson().set(person);
    }

    public ObservableList&lt;Person&gt; getPersonList() {
        return personList ;
    }
}
</code></pre>
<p>Now you might have a controller for the <code>ListView</code> display that looks like this:</p>
<pre><code>public class ListController {

    @FXML
    private ListView&lt;Person&gt; listView ;

    private DataModel model ;

    public void initModel(DataModel model) {
        // ensure model is only set once:
        if (this.model != null) {
            throw new IllegalStateException(&quot;Model can only be initialized once&quot;);
        }

        this.model = model ;
        listView.setItems(model.getPersonList());

        listView.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; 
            model.setCurrentPerson(newSelection));

        model.currentPersonProperty().addListener((obs, oldPerson, newPerson) -&gt; {
            if (newPerson == null) {
                listView.getSelectionModel().clearSelection();
            } else {
                listView.getSelectionModel().select(newPerson);
            }
        });
    }
}
</code></pre>
<p>This controller essentially just binds the data displayed in the list to the data in the model, and ensures the model's <code>currentPerson</code> is always the selected item in the list view.</p>
<p>Now you might have another view, say an editor, with three text fields for the <code>firstName</code>, <code>lastName</code>, and <code>email</code> properties of a person. It's controller might look like:</p>
<pre><code>public class EditorController {

    @FXML
    private TextField firstNameField ;
    @FXML
    private TextField lastNameField ;
    @FXML
    private TextField emailField ;

    private DataModel model ;

    public void initModel(DataModel model) {
        if (this.model != null) {
            throw new IllegalStateException(&quot;Model can only be initialized once&quot;);
        }
        this.model = model ;
        model.currentPersonProperty().addListener((obs, oldPerson, newPerson) -&gt; {
            if (oldPerson != null) {
                firstNameField.textProperty().unbindBidirectional(oldPerson.firstNameProperty());
                lastNameField.textProperty().unbindBidirectional(oldPerson.lastNameProperty());
                emailField.textProperty().unbindBidirectional(oldPerson.emailProperty());
            }
            if (newPerson == null) {
                firstNameField.setText(&quot;&quot;);
                lastNameField.setText(&quot;&quot;);
                emailField.setText(&quot;&quot;);
            } else {
                firstNameField.textProperty().bindBidirectional(newPerson.firstNameProperty());
                lastNameField.textProperty().bindBidirectional(newPerson.lastNameProperty());
                emailField.textProperty().bindBidirectional(newPerson.emailProperty());
            }
        });
    }
}
</code></pre>
<p>Now if you set things up so both these controllers are sharing the same model, the editor will edit the currently selected item in the list.</p>
<p>Loading and saving data should be done via the model. Sometimes you will even factor this out into a separate class to which the model has a reference (allowing you to easily switch between a file-based data loader and a database data loader, or an implementation that accesses a web service, for example). In the simple case you might do</p>
<pre><code>public class DataModel {

    // other code as before...

    public void loadData(File file) throws IOException {

        // load data from file and store in personList...

    }

    public void saveData(File file) throws IOException {
 
        // save contents of personList to file ...
    }
}
</code></pre>
<p>Then you might have a controller that provides access to this functionality:</p>
<pre><code>public class MenuController {

    private DataModel model ;

    @FXML
    private MenuBar menuBar ;

    public void initModel(DataModel model) {
        if (this.model != null) {
            throw new IllegalStateException(&quot;Model can only be initialized once&quot;);
        }
        this.model = model ;
    }

    @FXML
    public void load() {
        FileChooser chooser = new FileChooser();
        File file = chooser.showOpenDialog(menuBar.getScene().getWindow());
        if (file != null) {
            try {
                model.loadData(file);
            } catch (IOException exc) {
                // handle exception...
            }
        }
    }

    @FXML
    public void save() {

        // similar to load...

    }
}
</code></pre>
<p>Now you can easily assemble an application:</p>
<pre><code>public class ContactApp extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {

        BorderPane root = new BorderPane();
        FXMLLoader listLoader = new FXMLLoader(getClass().getResource(&quot;list.fxml&quot;));
        root.setCenter(listLoader.load());
        ListController listController = listLoader.getController();

        FXMLLoader editorLoader = new FXMLLoader(getClass().getResource(&quot;editor.fxml&quot;));
        root.setRight(editorLoader.load());
        EditorController editorController = editorLoader.getController();

        FXMLLoader menuLoader = new FXMLLoader(getClass().getResource(&quot;menu.fxml&quot;));
        root.setTop(menuLoader.load());
        MenuController menuController = menuLoader.getController();

        DataModel model = new DataModel();
        listController.initModel(model);
        editorController.initModel(model);
        menuController.initModel(model);

        Scene scene = new Scene(root, 800, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}
</code></pre>
<p>As I said, there are many variations of this pattern (and this is probably more a model-view-presenter, or &quot;passive view&quot; variation), but that's one approach (one I basically favor). It's a bit more natural to provide the model to the controllers via their constructor, but then it's a lot harder to define the controller class with a <code>fx:controller</code> attribute. This pattern also lends itself strongly to dependency injection frameworks.</p>
<p><strong>Update:</strong> full code for this example is <a href=""https://github.com/james-d/SimpleMVP"" rel=""noreferrer"">here</a>.</p>
<p>If you are interested in a tutorial on MVC in JavaFX, see:</p>
<ul>
<li>The Eden Coding tutorial: <a href=""https://edencoding.com/mvc-in-javafx/"" rel=""noreferrer"">How to apply MVC in JavaFX</a></li>
</ul>
"
20389418,"<p>Rather than trying to address the resource as a <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/File.html"" rel=""noreferrer"">File</a> just ask the <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html"" rel=""noreferrer"">ClassLoader</a> to return an <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html"" rel=""noreferrer"">InputStream</a> for the resource instead via <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getResourceAsStream%28java.lang.String%29"" rel=""noreferrer"">getResourceAsStream</a>:</p>
<pre class=""lang-java prettyprint-override""><code>try (InputStream in = getClass().getResourceAsStream(&quot;/file.txt&quot;);
    BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {
    // Use resource
}
</code></pre>
<p>As long as the <code>file.txt</code> resource is available on the classpath then this approach will work the same way regardless of whether the <code>file.txt</code> resource is in a <code>classes/</code> directory or inside a <code>jar</code>.</p>
<p>The <code>URI is not hierarchical</code> occurs because the URI for a resource within a jar file is going to look something like this: <code>file:/example.jar!/file.txt</code>. You cannot read the entries within a <code>jar</code> (a <code>zip</code> file) like it was a plain old <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/File.html"" rel=""noreferrer"">File</a>.</p>
<p>This is explained well by the answers to:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/403256/how-do-i-read-a-resource-file-from-a-java-jar-file?rq=1"">How do I read a resource file from a Java jar file?</a></li>
<li><a href=""https://stackoverflow.com/questions/10144210/java-jar-file-use-resource-errors-uri-is-not-hierarchical"">Java Jar file: use resource errors: URI is not hierarchical</a></li>
</ul>
"
1532499,"<p>Version 1 is preferable because it is shorter and <a href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.18.1"" rel=""noreferrer"">the compiler will in fact turn it into version 2</a> - no performance difference whatsoever.</p>

<blockquote>
  <p>More importantly given we have only 3
  properties it might not make a
  difference, but at what point do you
  switch from concat to builder?</p>
</blockquote>

<p>At the point where you're concatenating in a loop - that's usually when the compiler can't substitute <code>StringBuilder</code> by itself.</p>
"
23653779,"<p>The tutorial is probably outdated, attempting to create an activity-based UI instead of the fragment-based UI preferred by wizard-generated code.</p>

<p>The view is in the fragment layout (<code>fragment_main.xml</code>)  and not in the activity layout (<code>activity_main.xml</code>). <code>onCreate()</code> is too early in the lifecycle to find it in the activity view hierarchy, and a <code>null</code> is returned. Invoking a method on <code>null</code> causes the NPE.</p>

<p>The preferred solution is to move the code to the fragment <code>onCreateView()</code>, calling <code>findViewById()</code> on the inflated fragment layout <code>rootView</code>:</p>

<pre><code>@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
    Bundle savedInstanceState) {
  View rootView = inflater.inflate(R.layout.fragment_main, container,
      false);

  View something = rootView.findViewById(R.id.something); // not activity findViewById()
  something.setOnClickListener(new View.OnClickListener() { ... });

  return rootView;
}
</code></pre>

<p>As a side note, the fragment layout will eventually be a part of the activity view hierarchy and discoverable with activity <code>findViewById()</code> but only after the fragment transaction has been run. Pending fragment transactions get executed in <code>super.onStart()</code> after <code>onCreate()</code>.</p>
"
8881376,"<p><strong>Strings are immutable</strong>. That means once you've created the <code>String</code>, if another process can dump memory, there's no way (aside from <a href=""https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29"" rel=""noreferrer"">reflection</a>) you can get rid of the data before <a href=""https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29"" rel=""noreferrer"">garbage collection</a> kicks in.</p>

<p>With an array, you can explicitly wipe the data after you're done with it. You can overwrite the array with anything you like, and the password won't be present anywhere in the system, even before garbage collection.</p>

<p>So yes, this <em>is</em> a security concern - but even using <code>char[]</code> only reduces the window of opportunity for an attacker, and it's only for this specific type of attack.</p>

<p>As noted in the comments, it's possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the garbage collector <em>may</em> clear all memory as it goes, to avoid this sort of thing. Even if it does, there's still the time during which the <code>char[]</code> contains the actual characters as an attack window.</p>
"
52682,"<p>You can use the <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html"" rel=""noreferrer""><code>java.lang.instrument</code> package</a>.</p>
<p>Compile and put this class in a JAR:</p>
<pre><code>import java.lang.instrument.Instrumentation;

public class ObjectSizeFetcher {
    private static Instrumentation instrumentation;

    public static void premain(String args, Instrumentation inst) {
        instrumentation = inst;
    }

    public static long getObjectSize(Object o) {
        return instrumentation.getObjectSize(o);
    }
}
</code></pre>
<p>Add the following to your <code>MANIFEST.MF</code>:</p>
<pre><code>Premain-Class: ObjectSizeFetcher
</code></pre>
<p>Use the <code>getObjectSize()</code> method:</p>
<pre><code>public class C {
    private int x;
    private int y;

    public static void main(String [] args) {
        System.out.println(ObjectSizeFetcher.getObjectSize(new C()));
    }
}
</code></pre>
<p>Invoke with:</p>
<pre><code>java -javaagent:ObjectSizeFetcherAgent.jar C
</code></pre>
"
21955257,"<p><a href=""http://ucanaccess.sourceforge.net/site.html"" rel=""noreferrer"">UCanAccess</a> is a pure Java JDBC driver that allows us to read from and write to Access databases without using ODBC. It uses two other packages, <a href=""http://jackcess.sourceforge.net/"" rel=""noreferrer"">Jackcess</a> and <a href=""http://hsqldb.org/"" rel=""noreferrer"">HSQLDB</a>, to perform these tasks. The following is a brief overview of how to get it set up.</p>

<p>&nbsp;</p>

<h2>Option 1: Using Maven</h2>

<p>If your project uses <a href=""https://maven.apache.org/index.html"" rel=""noreferrer"">Maven</a> you can simply include UCanAccess via the following coordinates:</p>

<p><strong>groupId:</strong> net.sf.ucanaccess<br>
<strong>artifactId:</strong> ucanaccess</p>

<p>The following is an excerpt from <code>pom.xml</code>, you may need to update the <code>&lt;version&gt;</code> to get the most recent release:</p>

<pre class=""lang-xml prettyprint-override""><code>  &lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;net.sf.ucanaccess&lt;/groupId&gt;
        &lt;artifactId&gt;ucanaccess&lt;/artifactId&gt;
        &lt;version&gt;4.0.4&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
</code></pre>

<p>&nbsp;</p>

<h2>Option 2: Manually adding the JARs to your project</h2>

<p>As mentioned above, UCanAccess requires Jackcess and HSQLDB. Jackcess in turn has its own <a href=""http://jackcess.sourceforge.net/dependencies.html"" rel=""noreferrer"">dependencies</a>. So to use UCanAccess you will need to include the following components:</p>

<p><a href=""http://ucanaccess.sourceforge.net/site.html"" rel=""noreferrer"">UCanAccess</a> (ucanaccess-x.x.x.jar)<br>
<a href=""http://hsqldb.org/"" rel=""noreferrer"">HSQLDB</a> (hsqldb.jar, version 2.2.5 or newer)<br>
<a href=""http://jackcess.sourceforge.net/"" rel=""noreferrer"">Jackcess</a> (jackcess-2.x.x.jar)<br>
<a href=""http://commons.apache.org/proper/commons-lang/"" rel=""noreferrer"">commons-lang</a> (commons-lang-2.6.jar, or newer <strong>2.x version</strong>)<br>
<a href=""http://commons.apache.org/proper/commons-logging/"" rel=""noreferrer"">commons-logging</a> (commons-logging-1.1.1.jar, or newer <strong>1.x version</strong>)</p>

<p>Fortunately, UCanAccess includes all of the required JAR files in its distribution file. When you unzip it you will see something like</p>

<pre class=""lang-none prettyprint-override""><code>ucanaccess-4.0.1.jar  
  /lib/
    commons-lang-2.6.jar  
    commons-logging-1.1.1.jar  
    hsqldb.jar  
    jackcess-2.1.6.jar
</code></pre>

<p>All you need to do is add all <strong>five (5)</strong> JARs to your project.</p>

<blockquote>
  <p>NOTE: Do <strong>not</strong> add <code>loader/ucanload.jar</code> to your build path if you are adding the other five (5) JAR files. The <code>UcanloadDriver</code> class is only used in special circumstances and requires a different setup. See the related answer <a href=""https://stackoverflow.com/a/34469789/2144390"">here</a> for details.</p>
</blockquote>

<p><strong>Eclipse:</strong> Right-click the project in Package Explorer and choose <code>Build Path &gt; Configure Build Path...</code>. Click the ""Add External JARs..."" button to add each of the five (5) JARs. When you are finished your Java Build Path should look something like this</p>

<p><a href=""https://i.stack.imgur.com/uZOjj.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/uZOjj.png"" alt=""BuildPath.png""></a></p>

<p><strong>NetBeans:</strong> Expand the tree view for your project, right-click the ""Libraries"" folder and choose ""Add JAR/Folder..."", then browse to the JAR file. </p>

<p><img src=""https://i.stack.imgur.com/dVN3d.png"" alt=""nbAddJar.png""></p>

<p>After adding all five (5) JAR files the ""Libraries"" folder should look something like this:</p>

<p><img src=""https://i.stack.imgur.com/e5FKa.png"" alt=""nbLibraries.png""></p>

<p><strong>IntelliJ IDEA:</strong> Choose <code>File &gt; Project Structure...</code> from the main menu. In the ""Libraries"" pane click the ""Add"" (<code>+</code>) button and add the five (5) JAR files. Once that is done the project should look something like this:</p>

<p><a href=""https://i.stack.imgur.com/AnOp5.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/AnOp5.png"" alt=""IntelliJ.png""></a></p>

<p>&nbsp;</p>

<h2>That's it!</h2>

<p>Now ""U Can Access"" data in .accdb and .mdb files using code like this</p>

<pre class=""lang-java prettyprint-override""><code>// assumes...
//     import java.sql.*;
Connection conn=DriverManager.getConnection(
        ""jdbc:ucanaccess://C:/__tmp/test/zzz.accdb"");
Statement s = conn.createStatement();
ResultSet rs = s.executeQuery(""SELECT [LastName] FROM [Clients]"");
while (rs.next()) {
    System.out.println(rs.getString(1));
}
</code></pre>

<p>&nbsp;</p>

<h2>Disclosure</h2>

<p>At the time of writing this Q&amp;A I had no involvement in or affiliation with the UCanAccess project; I just used it. I have since become a contributor to the project.</p>
"
27312494,"<h1>Network connection / Internet access</h1>
<ul>
<li><code>isConnectedOrConnecting()</code> (used in most answers) checks for any <strong>network</strong> connection</li>
<li>To know whether any of those networks have <strong>internet</strong> access, use one of the following</li>
</ul>
<h3>A) Ping a Server (easy)</h3>
<pre><code>// ICMP 
public boolean isOnline() {
    Runtime runtime = Runtime.getRuntime();
    try {
        Process ipProcess = runtime.exec(&quot;/system/bin/ping -c 1 8.8.8.8&quot;);
        int     exitValue = ipProcess.waitFor();
        return (exitValue == 0);
    }
    catch (IOException e)          { e.printStackTrace(); }
    catch (InterruptedException e) { e.printStackTrace(); }

    return false;
}
</code></pre>
<p><code>+</code> could run on main thread</p>
<p><code>-</code> does not work on some old devices (Galays S3, etc.), it blocks a while if no internet is available.</p>
<h3>B) Connect to a Socket on the Internet (advanced)</h3>
<pre><code>// TCP/HTTP/DNS (depending on the port, 53=DNS, 80=HTTP, etc.)
public boolean isOnline() {
    try {
        int timeoutMs = 1500;
        Socket sock = new Socket();
        SocketAddress sockaddr = new InetSocketAddress(&quot;8.8.8.8&quot;, 53);

        sock.connect(sockaddr, timeoutMs);
        sock.close();

        return true;
    } catch (IOException e) { return false; }
}
</code></pre>
<p><code>+</code> very fast (either way), works on all devices, <em>very</em> reliable</p>
<p><code>-</code> can't run on the UI thread</p>
<p>This works very reliably, on every device, and is very fast. It needs to run in a separate task though (e.g. <code>ScheduledExecutorService</code> or <code>AsyncTask</code>).</p>
<h3>Possible Questions</h3>
<ul>
<li><p>Is it really fast enough?</p>
<p><em>Yes, very fast ;-)</em></p>
</li>
<li><p>Is there no reliable way to check internet, other than testing something on the internet?</p>
<p><em>Not as far as I know, but let me know, and I will edit my answer.</em></p>
</li>
<li><p>What if the DNS is down?</p>
<p><em>Google DNS (e.g. <code>8.8.8.8</code>) is the largest public DNS in the world. As of 2018 it handled over a trillion queries a day [<a href=""https://security.googleblog.com/2018/08/google-public-dns-turns-8888-years-old.html"" rel=""noreferrer"">1</a>]. Let 's just say, your app would probably not be the talk of the day.</em></p>
</li>
<li><p>Which permissions are required?</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
</code></pre>
<p><em>Just internet access - surprise ^^ (Btw have you ever thought about, how some of the methods suggested here could even have a remote glue about internet access, without this permission?)</em></p>
</li>
</ul>
<p>Â </p>
<h3>Extra: One-shot <code>RxJava/RxAndroid</code> Example (Kotlin)</h3>
<pre><code>fun hasInternetConnection(): Single&lt;Boolean&gt; {
  return Single.fromCallable {
    try {
      // Connect to Google DNS to check for connection
      val timeoutMs = 1500
      val socket = Socket()
      val socketAddress = InetSocketAddress(&quot;8.8.8.8&quot;, 53)
    
      socket.connect(socketAddress, timeoutMs)
      socket.close()
  
      true
    } catch (e: IOException) {
      false
    }
  }
  .subscribeOn(Schedulers.io())
  .observeOn(AndroidSchedulers.mainThread())
}

///////////////////////////////////////////////////////////////////////////////////
// Usage

    hasInternetConnection().subscribe { hasInternet -&gt; /* do something */}
</code></pre>
<h3>Extra: One-shot <code>RxJava/RxAndroid</code> Example (Java)</h3>
<pre><code>public static Single&lt;Boolean&gt; hasInternetConnection() {
    return Single.fromCallable(() -&gt; {
        try {
            // Connect to Google DNS to check for connection
            int timeoutMs = 1500;
            Socket socket = new Socket();
            InetSocketAddress socketAddress = new InetSocketAddress(&quot;8.8.8.8&quot;, 53);

            socket.connect(socketAddress, timeoutMs);
            socket.close();

            return true;
        } catch (IOException e) {
            return false;
        }
    }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());
}

///////////////////////////////////////////////////////////////////////////////////
// Usage

    hasInternetConnection().subscribe((hasInternet) -&gt; {
        if(hasInternet) {

        }else {

        }
    });
</code></pre>
<h3>Extra: One-shot <code>AsyncTask</code> Example</h3>
<p><em>Caution:</em> This shows another example of how to do the request. However, since <code>AsyncTask</code> is deprecated, it should be replaced by your App's thread scheduling,  Kotlin Coroutines, Rx, ...</p>
<pre><code>class InternetCheck extends AsyncTask&lt;Void,Void,Boolean&gt; {

    private Consumer mConsumer;
    public  interface Consumer { void accept(Boolean internet); }

    public  InternetCheck(Consumer consumer) { mConsumer = consumer; execute(); }

    @Override protected Boolean doInBackground(Void... voids) { try {
        Socket sock = new Socket();
        sock.connect(new InetSocketAddress(&quot;8.8.8.8&quot;, 53), 1500);
        sock.close();
        return true;
    } catch (IOException e) { return false; } }

    @Override protected void onPostExecute(Boolean internet) { mConsumer.accept(internet); }
}

///////////////////////////////////////////////////////////////////////////////////
// Usage

    new InternetCheck(internet -&gt; { /* do something with boolean response */ });
</code></pre>
"
3404369,"<h3>On invoking overridable method from constructors</h3>

<p>Simply put, this is wrong because it unnecessarily opens up possibilities to <em>MANY</em> bugs. When the <code>@Override</code> is invoked, the state of the object may be inconsistent and/or incomplete.</p>

<p>A quote from <em>Effective Java 2nd Edition, Item 17: Design and document for inheritance, or else prohibit it</em>:</p>

<blockquote>
  <p>There are a few more restrictions that a class must obey to allow inheritance. <strong>Constructors must not invoke overridable methods</strong>, directly or indirectly. If you violate this rule, program failure will result. The superclass constructor runs before the subclass constructor, so the overriding method in the subclass will be invoked before the subclass constructor has run. If the overriding method depends on any initialization performed by the subclass constructor, the method will not behave as expected.</p>
</blockquote>

<p>Here's an example to illustrate:</p>

<pre><code>public class ConstructorCallsOverride {
    public static void main(String[] args) {

        abstract class Base {
            Base() {
                overrideMe();
            }
            abstract void overrideMe(); 
        }

        class Child extends Base {

            final int x;

            Child(int x) {
                this.x = x;
            }

            @Override
            void overrideMe() {
                System.out.println(x);
            }
        }
        new Child(42); // prints ""0""
    }
}
</code></pre>

<p>Here, when <code>Base</code> constructor calls <code>overrideMe</code>, <code>Child</code> has not finished initializing the <code>final int x</code>, and the method gets the wrong value. This will almost certainly lead to bugs and errors.</p>

<h3>Related questions</h3>

<ul>
<li><a href=""https://stackoverflow.com/questions/2898422/calling-an-overridden-method-from-a-parent-class-constructor"">Calling an Overridden Method from a Parent-Class Constructor</a></li>
<li><a href=""https://stackoverflow.com/questions/3330390/state-of-derived-class-object-when-base-class-constructor-calls-overridden-method"">State of Derived class object when Base class constructor calls overridden method in Java</a></li>
<li><a href=""https://stackoverflow.com/questions/3342784/using-abstract-init-function-in-abstract-classs-constructor"">Using abstract init() function in abstract classâs constructor</a></li>
</ul>

<h3>See also</h3>

<ul>
<li><a href=""http://findbugs.sourceforge.net/bugDescriptions.html#UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR"" rel=""noreferrer"">FindBugs - Uninitialized read of field method called from constructor of superclass </a></li>
</ul>

<hr>

<h3>On object construction with many parameters</h3>

<p>Constructors with many parameters can lead to poor readability, and better alternatives exist.</p>

<p>Here's a quote from <em>Effective Java 2nd Edition, Item 2: Consider a builder pattern when faced with many constructor parameters</em>:</p>

<blockquote>
  <p>Traditionally, programmers have used the <em>telescoping constructor</em> pattern, in which you provide a constructor with only the required parameters, another with a single optional parameters, a third with two optional parameters, and so on...</p>
</blockquote>

<p>The telescoping constructor pattern is essentially something like this:</p>

<pre><code>public class Telescope {
    final String name;
    final int levels;
    final boolean isAdjustable;

    public Telescope(String name) {
        this(name, 5);
    }
    public Telescope(String name, int levels) {
        this(name, levels, false);
    }
    public Telescope(String name, int levels, boolean isAdjustable) {       
        this.name = name;
        this.levels = levels;
        this.isAdjustable = isAdjustable;
    }
}
</code></pre>

<p>And now you can do any of the following:</p>

<pre><code>new Telescope(""X/1999"");
new Telescope(""X/1999"", 13);
new Telescope(""X/1999"", 13, true);
</code></pre>

<p>You can't, however, currently set only the <code>name</code> and <code>isAdjustable</code>, and leaving <code>levels</code> at default. You can provide more constructor overloads, but obviously the number would explode as the number of parameters grow, and you may even have multiple <code>boolean</code> and <code>int</code> arguments, which would really make a mess out of things.</p>

<p>As you can see, this isn't a pleasant pattern to write, and even less pleasant to use (What does ""true"" mean here? What's 13?).</p>

<p>Bloch recommends using a builder pattern, which would allow you to write something like this instead:</p>

<pre><code>Telescope telly = new Telescope.Builder(""X/1999"").setAdjustable(true).build();
</code></pre>

<p>Note that now the parameters are named, and you can set them in any order you want, and you can skip the ones that you want to keep at default values. This is certainly much better than telescoping constructors, especially when there's a huge number of parameters that belong to many of the same types.</p>

<h3>See also</h3>

<ul>
<li><a href=""http://en.wikipedia.org/wiki/Builder_pattern"" rel=""noreferrer"">Wikipedia/Builder pattern</a></li>
<li><em>Effective Java 2nd Edition, Item 2: Consider a builder pattern when faced with many constructor parameters</em> (<a href=""http://www.codeproject.com/KB/books/EffectiveJava.aspx"" rel=""noreferrer"">excerpt online</a>)</li>
</ul>

<h3>Related questions</h3>

<ul>
<li><a href=""https://stackoverflow.com/questions/328496/when-would-you-use-the-builder-pattern"">When would you use the Builder Pattern?</a></li>
<li><a href=""https://stackoverflow.com/questions/2637268/is-this-a-well-known-design-pattern-what-is-its-name/"">Is this a well known design pattern? What is its name?</a></li>
</ul>
"
13042296,"<p><strong>This has really puzzled me for a while but this is what I found in the end.</strong></p>

<p>When you call, <code>sc.close()</code> in first method, it not only closes your scanner but closes your <code>System.in</code> input stream as well. You can verify it by printing its status at very top of the second method as :</p>

<pre><code>    System.out.println(System.in.available());
</code></pre>

<p>So, now when you re-instantiate, <code>Scanner</code> in second method, it doesn't find any open <code>System.in</code> stream and hence the exception.</p>

<p>I doubt if there is any way out to reopen <code>System.in</code> because:</p>

<p><code>public void close() throws IOException --&gt; Closes this input stream and releases any system resources associated with this stream. The general contract of close is that it closes the input stream. A closed stream cannot perform input operations and **cannot be reopened.**</code></p>

<p>The only good solution for your problem is to initiate the <code>Scanner</code> in your main method, pass that as argument in your two methods, and close it again in your main method e.g.:</p>

<p><code>main</code> method related code block:</p>

<pre><code>Scanner scanner = new Scanner(System.in);  

// Ask users for quantities 
PromptCustomerQty(customer, ProductList, scanner );

// Ask user for payment method
PromptCustomerPayment(customer, scanner );

//close the scanner 
scanner.close();
</code></pre>

<p>Your Methods:</p>

<pre><code> public static void PromptCustomerQty(Customer customer, 
                             ArrayList&lt;Product&gt; ProductList, Scanner scanner) {

    // no more scanner instantiation
    ...
    // no more scanner close
 }


 public static void PromptCustomerPayment (Customer customer, Scanner sc) {

    // no more scanner instantiation
    ...
    // no more scanner close
 }
</code></pre>

<p>Hope this gives you some insight about the failure and possible resolution.</p>
"
4969191,"<p>Since <code>getText()</code> is non-static you cannot call it from a static method.</p>

<p>To understand why, you have to understand the difference between the two.</p>

<p>Instance (non-static) methods work on objects that are of a particular type (the class). These are created with the new like this:</p>

<pre><code>SomeClass myObject = new SomeClass();
</code></pre>

<p>To call an instance method, you call it on the instance (<code>myObject</code>):</p>

<pre><code>myObject.getText(...)
</code></pre>

<p><s>However a static method/field can be called <strong>only</strong> on the type directly, say like this:</s>
<em>The previous statement is not correct. <a href=""http://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html"" rel=""noreferrer"">One can also refer to static fields with an object reference like</a> <code>myObject.staticMethod()</code> but this is discouraged because it does not make it clear that they are class variables.</em> </p>

<pre><code>... = SomeClass.final
</code></pre>

<p>And the two cannot work together as they operate on different data spaces (instance data and class data)</p>

<p>Let me try and explain. Consider this class (psuedocode):</p>

<pre><code>class Test {
     string somedata = ""99"";
     string getText() { return somedata; } 
     static string TTT = ""0"";
}
</code></pre>

<p>Now I have the following use case:</p>

<pre><code>Test item1 = new Test();
 item1.somedata = ""200"";

 Test item2 = new Test();

 Test.TTT = ""1"";
</code></pre>

<p>What are the values?</p>

<p>Well</p>

<pre><code>in item1 TTT = 1 and somedata = 200
in item2 TTT = 1 and somedata = 99
</code></pre>

<p>In other words, <code>TTT</code> is a datum that is shared by all the instances of the type. So it make no sense to say </p>

<pre><code>class Test {
         string somedata = ""99"";
         string getText() { return somedata; } 
  static string TTT = getText(); // error there is is no somedata at this point 
}
</code></pre>

<p><strong>So the question is why is <em>TTT</em> static or why is getText() not static?</strong> </p>

<p>Remove the <code>static</code> and it should get past this error - but without understanding what your type does it's only a sticking plaster till the next error. What are the requirements of <code>getText()</code> that require it to be non-static?</p>
"
17408827,"<p>Your classpath is broken (which is a <em>very</em> common problem in the Java world).  </p>

<p>Depending on how you start your application, you need to revise the argument to <code>-cp</code>, your Class-Path entry in MANIFEST.MF or your disk layout.</p>
"
36427118,"<ol>
<li>Go to URL in your browser:</li>
</ol>
<ul>
<li>firefox -  click on HTTPS certificate chain (the lock icon right next to URL address). Click <code>&quot;more info&quot; &gt; &quot;security&quot; &gt; &quot;show certificate&quot; &gt; &quot;details&quot; &gt; &quot;export..&quot;</code>. Pickup the name and choose file type example.cer</li>
<li>chrome - click on site icon left to address in address bar, select &quot;Certificate&quot; -&gt; &quot;Details&quot; -&gt; &quot;Export&quot; and save in format &quot;Der-encoded binary, single certificate&quot;.</li>
</ul>
<ol start=""2"">
<li><p>Now you have file with keystore and you have to add it to your JVM. Determine location of cacerts files, eg.
<code>C:\Program Files (x86)\Java\jre1.6.0_22\lib\security\cacerts. </code></p>
</li>
<li><p>Next import the <code>example.cer</code> file into cacerts in command line (may need administrator command prompt):</p>
</li>
</ol>
<p><code>keytool -import -alias example -keystore  &quot;C:\Program Files (x86)\Java\jre1.6.0_22\lib\security\cacerts&quot; -file example.cer</code></p>
<p>You will be asked for password which default is <code>changeit</code></p>
<p>Restart your JVM/PC.</p>
<p>source:
<a href=""http://magicmonster.com/kb/prg/java/ssl/pkix_path_building_failed.html"" rel=""noreferrer"">http://magicmonster.com/kb/prg/java/ssl/pkix_path_building_failed.html</a></p>
"
33204705,"<p>Firebase loads and synchronizes data <strong>asynchronously</strong>. So your <code>loadModelWithDataFromFirebase()</code> doesn't wait for the loading to finish, it just <strong>starts</strong> loading the data from the database. By the time your <code>loadModelWithDataFromFirebase()</code> function returns, the loading hasn't finished yet.</p>
<p>You can easily test this for yourself with some well-placed log statements:</p>
<pre><code>public void loadModelWithDataFromFirebase(){
    Firebase db = new Firebase(//url);
    Firebase bookmarksRef = fb.child(//access correct child);

    Log.v(&quot;Async101&quot;, &quot;Start loading bookmarks&quot;);
    final ArrayList&lt;Bookmark&gt; loadedBookmarks = new ArrayList&lt;Bookmark&gt;();
    bookmarksRef.addListenerForSingleValueEvent(new ValueEventListener() {
        @Override
        public void onDataChange(DataSnapshot dataSnapshot) {
            Log.v(&quot;Async101&quot;, &quot;Done loading bookmarks&quot;);
            //getting all properties from firebase...
            Bookmark bookmark = new Bookmark(//properties here);
            loadedBookmarks.add(bookmark);
        }

        @Override
        public void onCancelled(FirebaseError error) { throw error.toException(); }
    });
    Log.v(&quot;Async101&quot;, &quot;Returning loaded bookmarks&quot;);
    setBookmarks(loadedBookmarks);
}
</code></pre>
<p>Contrary to what you likely expect, the order of the log statements will be:</p>
<pre><code>Start loading bookmarks
Returning loaded bookmarks
Done loading bookmarks
</code></pre>
<p>You have two choice for dealing with the asynchronous nature of this loading:</p>
<ol>
<li><p>squash the asynchronous bug (usually accompanied by muttering of phrases like: &quot;it was a mistake, these people don't know what they're doing&quot;)</p>
</li>
<li><p>embrace the asynchronous beast (usually accompanied by quite some hours of cursing, but after a while by peace and better behaved applications)</p>
</li>
</ol>
<h2>Take the blue pill - make the asynchronous call behave synchronously</h2>
<p>If you feel like picking the first option, a well placed synchronization primitive will do the trick:</p>
<pre><code>public void loadModelWithDataFromFirebase() throws InterruptedException {
    Firebase db = new Firebase(//url);
    Firebase bookmarksRef = fb.child(//access correct child);

    Semaphore semaphore = new Semaphore(0);

    final ArrayList&lt;Bookmark&gt; loadedBookmarks = new ArrayList&lt;Bookmark&gt;();
    bookmarksRef.addListenerForSingleValueEvent(new ValueEventListener() {
        @Override
        public void onDataChange(DataSnapshot dataSnapshot) {
            Bookmark bookmark = new Bookmark(//properties here);
            loadedBookmarks.add(bookmark);
            semaphore.release();
        }

        @Override
        public void onCancelled(FirebaseError error) { throw error.toException(); }
    });
    semaphore.acquire();
    setBookmarks(loadedBookmarks);
}
</code></pre>
<p><strong>Update (20160303)</strong>: when I just tested this on Android, it blocked my app. It works on a regular JVM fine, but Android is more finicky when it comes to threading. Feel free to try and make it work... or</p>
<h2>Take the red pill - deal with the asynchronous nature of data synchronization in Firebase</h2>
<p>If you instead choose to embrace asynchronous programming, you should rethink your application's logic.</p>
<p>You currently have &quot;First load the bookmarks. Then load the sample data. And then load even more.&quot;</p>
<p>With an asynchronous loading model, you should think like &quot;Whenever the bookmarks have loaded, I want to load the sample data. Whenever the sample data has loaded, I want to load even more.&quot;</p>
<p>The bonus of thinking this way is that it also works when the data may be constantly changing and thus synchronized multiple times: &quot;Whenever the bookmarks change, I want to also load the sample data. Whenever the sample data changes, I want to load even more.&quot;</p>
<p>In code, this leads to nested calls or event chains:</p>
<pre><code>public void synchronizeBookmarks(){
    Firebase db = new Firebase(//url);
    Firebase bookmarksRef = fb.child(//access correct child);

    final ArrayList&lt;Bookmark&gt; loadedBookmarks = new ArrayList&lt;Bookmark&gt;();
    bookmarksRef.addValueEventListener(new ValueEventListener() {
        @Override
        public void onDataChange(DataSnapshot dataSnapshot) {
            Bookmark bookmark = new Bookmark(//properties here);
            loadedBookmarks.add(bookmark);
            setBookmarks(loadedBookmarks);
            loadSampleData();
        }

        @Override
        public void onCancelled(FirebaseError error) { throw error.toException(); }
    });
}
</code></pre>
<p>In the above code we don't just wait for a single value event, we instead deal with all of them. This means that whenever the bookmarks are changed, the <code>onDataChange</code> is executed and we (re)load the sample data (or whatever other action fits your application's needs).</p>
<p>To make the code more reusable, you may want to define your own callback interface, instead of calling the precise code in <code>onDataChange</code>. Have a look at <a href=""https://stackoverflow.com/a/50435519"">this answer</a> for a good example of that.</p>
"
1128728,"<pre><code>Arrays.asList(yourArray).contains(yourValue)
</code></pre>

<p>Warning: this doesn't work for arrays of primitives (see the comments).</p>

<hr>

<h2>Since <a href=""/questions/tagged/java-8"" class=""post-tag"" title=""show questions tagged &#39;java-8&#39;"" rel=""tag"">java-8</a> you can now use Streams.</h2>

<pre><code>String[] values = {""AB"",""BC"",""CD"",""AE""};
boolean contains = Arrays.stream(values).anyMatch(""s""::equals);
</code></pre>

<p>To check whether an array of <code>int</code>, <code>double</code> or <code>long</code> contains a value use <code>IntStream</code>, <code>DoubleStream</code> or <code>LongStream</code> respectively.</p>

<h2>Example</h2>

<pre><code>int[] a = {1,2,3,4};
boolean contains = IntStream.of(a).anyMatch(x -&gt; x == 4);
</code></pre>
"
3052456,"<p><code>new String(""text"");</code>
explicitly creates a new and referentially distinct instance of a <code>String</code> object; <code>String s = ""text"";</code> may reuse an instance from the <strong>string constant pool</strong> if one is available.</p>

<p>You <em>very rarely</em> would ever want to use the <code>new String(anotherString)</code> constructor. From the API:</p>

<blockquote>
  <p><a href=""http://java.sun.com/javase/6/docs/api/java/lang/String.html#String%28java.lang.String%29"" rel=""noreferrer""><code>String(String original)</code></a> : Initializes a <em>newly created</em> <code>String</code> object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string. Unless an explicit copy of original is needed, use of this constructor is unnecessary since strings are immutable. </p>
</blockquote>

<h3>Related questions</h3>

<ul>
<li><a href=""https://stackoverflow.com/questions/334518/java-strings-string-s-new-stringsilly""> Java Strings: âString s = new String(âsillyâ);â </a></li>
<li><a href=""https://stackoverflow.com/questions/2009228/strings-are-objects-in-java-so-why-dont-we-use-new-to-create-them""> Strings are objects in Java, so why donât we use ânewâ to create them? </a></li>
</ul>

<hr>

<h3>What referential distinction means</h3>

<p>Examine the following snippet:</p>

<pre><code>    String s1 = ""foobar"";
    String s2 = ""foobar"";

    System.out.println(s1 == s2);      // true

    s2 = new String(""foobar"");
    System.out.println(s1 == s2);      // false
    System.out.println(s1.equals(s2)); // true
</code></pre>

<p><code>==</code> on two reference types is a reference identity comparison. Two objects that are <code>equals</code> are not necessarily <code>==</code>. It is usually wrong to use <code>==</code> on reference types; most of the time <code>equals</code> need to be used instead.</p>

<p>Nonetheless, if for whatever reason you need to create two <code>equals</code> but not <code>==</code> string, you <em>can</em> use the <code>new String(anotherString)</code> constructor. It needs to be said again, however, that this is <em>very</em> peculiar, and is rarely the intention.</p>

<h3>References</h3>

<ul>
<li><a href=""http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.21.3"" rel=""noreferrer"">JLS 15.21.3 Reference Equality Operators == and !=</a></li>
<li><a href=""http://java.sun.com/javase/6/docs/api/java/lang/Object.html#equals%28java.lang.Object%29"" rel=""noreferrer""><code>class Object</code> - <code>boolean Object(equals)</code></a></li>
</ul>

<h3>Related issues</h3>

<ul>
<li><a href=""https://stackoverflow.com/questions/767372/java-string-equals-versus""> Java String.equals versus == </a></li>
<li><a href=""https://stackoverflow.com/questions/513832/how-do-i-compare-strings-in-java"">How do I compare strings in Java?</a></li>
</ul>
"
94411,"<p>Use it every time you override a method for two benefits.  Do it so that you can take advantage of the compiler checking to make sure you actually are overriding a method when you think you are.  This way, if you make a common mistake of misspelling a method name or not correctly matching the parameters, you will be warned that you method does not actually override as you think it does.  Secondly, it makes your code easier to understand because it is more obvious when methods are overwritten.</p>

<p>Additionally, in Java 1.6 you can use it to mark when a method implements an interface for the same benefits.  I think it would be better to have a separate annotation (like <code>@Implements</code>), but it's better than nothing.</p>
"
869078,"<p>Create a copy constructor:</p>

<pre><code>class DummyBean {
  private String dummy;

  public DummyBean(DummyBean another) {
    this.dummy = another.dummy; // you can access  
  }
}
</code></pre>

<p>Every object has also a clone method which can be used to copy the object, but don't use it. It's way too easy to create a class and do improper clone method. If you are going to do that, read at least what Joshua Bloch has to say about it in <em><a href=""http://books.google.com/books?id=ka2VUBqHiWkC&amp;pg=PA55&amp;lpg=PA55&amp;dq=effective+java+clone&amp;source=bl&amp;ots=yXGhLnv4O4&amp;sig=zvEip5tp5KGgwqO1sCWgtGyJ1Ns&amp;hl=en&amp;ei=CYANSqygK8jktgfM-JGcCA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=3#PPA54,M1"" rel=""noreferrer"">Effective Java</a></em>.</p>
"
32568266,"<h2>What is java.lang.ArrayIndexOutOfBoundsException / java.lang.IndexOutOfBoundsException?</h2>
<p>The <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/ArrayIndexOutOfBoundsException.html"" rel=""nofollow noreferrer"">JavaDoc</a> curtly states:</p>
<blockquote>
<p>Thrown to indicate that an array has been accessed with an illegal
index. The index is either negative or greater than or equal to the
size of the array.</p>
</blockquote>
<h2>What causes it to happen?</h2>
<blockquote>
<p>This exception means that you have tried to access an index in an
array or array backed list and that index does not exist.</p>
<p>Java uses <code>0</code> based indexes. That means all indexes start with <code>0</code> as
the index of the first element if it contains any elements.</p>
</blockquote>
<p>The <code>IndexOutOfBoundsException</code> message is very explicit, and it usually takes the form of:</p>
<p><code>java.lang.IndexOutOfBoundsException: Index: 1, Size: 1</code></p>
<p>Where <code>Index</code> is the index that you requested that does not exist and <code>Size</code> is the length of the structure you were indexing into.</p>
<p>As you can see a <code>Size: 1</code> means the only valid index is <code>0</code> and you were asking for what was at index <code>1</code>.</p>
<blockquote>
<p>For example, if you have an raw <code>Array</code> of objects or primitive types
the valid indexes are <code>0</code> to <code>.length - 1</code>, in the following example the valid indexes would be <code>0, 1, 2, 3,</code>.</p>
</blockquote>
<pre><code>final String days[] { &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot; }
System.out.println(days.length); // 3
System.out.println(days[0]); // Sunday
System.out.println(days[1]); // Monday
System.out.println(days[2]); // Tuesday
System.out.println(days[3]); // java.lang.ArrayIndexOutOfBoundsException
</code></pre>
<p>This also applies to <code>ArrayList</code> as well as any other <code>Collection</code> classes that may be backed by an <code>Array</code> and allow direct access to the the index.</p>
<h2>How to avoid the <code>java.lang.ArrayIndexOutOfBoundsException</code> / <code>java.lang.IndexOutOfBoundsException</code>?</h2>
<h3>When accessing directly by index:</h3>
<blockquote>
<p>This uses <a href=""https://code.google.com/p/guava-libraries/"" rel=""nofollow noreferrer"">Guava</a> to convert the raw primitive <code>int[]</code> array to an
<a href=""http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableList.html"" rel=""nofollow noreferrer""><code>ImmutableList&lt;Integer&gt;</code></a>. Then it uses the <code>Iterables</code> class to safely
get the value at a particular index and provides a default value when
that index does not exist. Here I chose <code>-1</code> to indicate an invalid
index value.</p>
</blockquote>
<pre><code>final List&lt;Integer&gt; toTen = ImmutableList.copyOf(Ints.asList(ints));
System.out.println(Iterables.get(toTen, 0, -1));
System.out.println(Iterables.get(toTen, 100, -1));
</code></pre>
<p>If you can't use Guava for some reason it is easy to roll your own function to do this same thing.</p>
<pre><code>private static &lt;T&gt; T get(@Nonnull final Iterable&lt;T&gt; iterable, final int index, @Nonnull final T missing)
{
    if (index &lt; 0) { return missing; }
    if (iterable instanceof List)
    {
        final List&lt;T&gt; l = List.class.cast(iterable);
        return l.size() &lt;= index ? l.get(index) : missing;
    }
    else
    {
        final Iterator&lt;T&gt; iterator = iterable.iterator();
        for (int i = 0; iterator.hasNext(); i++)
        {
            final T o = iterator.next();
            if (i == index) { return o; }
        }
        return missing;
    }
}
</code></pre>
<h3>When iterating:</h3>
<blockquote>
<p>Here is the idiomatic ways to iterate over a raw <code>Array</code> if you need
to know the index and the value:</p>
<p>This is susceptible to <em>one off errors</em> which are the primary causes
of an <code>java.lang.ArrayIndexOutOfBoundsException</code>:</p>
</blockquote>
<h4>Using a traditional <em>for</em>-<em>next</em> loop:</h4>
<pre><code>final int ints[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
for (int i = 0; i &lt; ints.length; i++)
{
    System.out.format(&quot;index %d = %d&quot;, i, ints[i]);
}
</code></pre>
<h3>Using an enhanced <em>for-each</em> loop:</h3>
<blockquote>
<p>Here is the idiomatic way to iterate over a raw <code>Array</code> with the
<em>enhanced for loop</em> if you do not need to know the actual index:</p>
</blockquote>
<pre><code>for (final int i : ints)
{
    System.out.format(&quot;%d&quot;, i);
    System.out.println();
}
</code></pre>
<h2>Using a type safe Iterator&lt;T&gt;:</h2>
<blockquote>
<p>Here is the safe way to iterate over a raw <code>Array</code> with the <em>enhanced
for loop</em> and track the current index and avoids the possibility of
encountering an <code>java.lang.ArrayIndexOutOfBoundsException</code>.</p>
<p>This uses Guava to easily convert the <code>int[]</code> to something <code>Iterable</code>
every project should include it.</p>
</blockquote>
<pre><code>final Iterator&lt;Integer&gt; it = Ints.asList(ints).iterator();
for (int i = 0; it.hasNext(); i++)
{
    System.out.format(&quot;index %d = %d&quot;, i, it.next());
}
</code></pre>
<p>If you can not use Guava or your <code>int[]</code> is huge you can roll your own <code>ImmutableIntArrayIterator</code> as such:</p>
<pre><code>public class ImmutableIntArrayIterator implements Iterator&lt;Integer&gt;
{
    private final int[] ba;
    private int currentIndex;

    public ImmutableIntArrayIterator(@Nonnull final int[] ba)
    {
        this.ba = ba;
        if (this.ba.length &gt; 0) { this.currentIndex = 0; }
        else { currentIndex = -1; }
    }

    @Override
    public boolean hasNext() { return this.currentIndex &gt;= 0 &amp;&amp; this.currentIndex + 1 &lt; this.ba.length; }

    @Override
    public Integer next()
    {
        this.currentIndex++;
        return this.ba[this.currentIndex];
    }

    @Override
    public void remove() { throw new UnsupportedOperationException(); }
}
</code></pre>
<p>And use the same code as you would with Guava.</p>
<p>If you absolutely <strong>must have the ordinal</strong> of the item the following is the safest way to do it.</p>
<pre><code>// Assume 'los' is a list of Strings
final Iterator&lt;String&gt; it = los.iterator();
for (int i = 0; it.hasNext(); i++)
{
    System.out.format(&quot;index %d = %s&quot;, i, it.next());
}
</code></pre>
<p>This technique works for all <em>Iterables</em>. It is not an <em>index</em> parse, but it does give you the current position in the iteration even for things that do not have a native <em>index</em>.</p>
<h3>The safest way:</h3>
<blockquote>
<p>The best way is to always use <a href=""http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableList.html"" rel=""nofollow noreferrer"">ImmutableLists</a>/<a href=""http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableSet.html"" rel=""nofollow noreferrer"">Set</a>/<a href=""http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableMap.html"" rel=""nofollow noreferrer"">Maps</a> from Guava as
well:</p>
</blockquote>
<pre><code>final List&lt;Integer&gt; ili = ImmutableList.copyOf(Ints.asList(ints));
final Iterator&lt;Integer&gt; iit = ili.iterator();
for (int i = 0; iit.hasNext(); i++)
{
    System.out.format(&quot;index %d = %d&quot;, i, iit.next());
}
</code></pre>
<h2>Summary:</h2>
<ol>
<li><p>Using raw arrays are difficult to work with and should be avoided in most cases. They are susceptible to sometimes subtle <a href=""https://en.wikipedia.org/wiki/Off-by-one_error"" rel=""nofollow noreferrer""><em>one-off errors</em></a> which have plague new programmers even back to the days of <a href=""https://en.wikipedia.org/wiki/BASIC"" rel=""nofollow noreferrer"">BASIC</a></p>
</li>
<li><p>Modern Java idioms use proper type safe <em>collections</em> and avoid using raw <em>array</em> structures if at all possible.</p>
</li>
<li><p>Immutable types are preferred in almost all cases now.</p>
</li>
<li><p>Guava is an indispensable toolkit for modern Java development.</p>
</li>
</ol>
"
4343547,"<h3><code>extends</code></h3>

<p>The wildcard declaration of <code>List&lt;? extends Number&gt; foo3</code> means that any of these are legal assignments:</p>

<pre><code>List&lt;? extends Number&gt; foo3 = new ArrayList&lt;Number&gt;();  // Number ""extends"" Number (in this context)
List&lt;? extends Number&gt; foo3 = new ArrayList&lt;Integer&gt;(); // Integer extends Number
List&lt;? extends Number&gt; foo3 = new ArrayList&lt;Double&gt;();  // Double extends Number
</code></pre>

<ol>
<li><p><strong>Reading</strong> - Given the above possible assignments, what type of object are you guaranteed to read from <code>List foo3</code>:</p>

<ul>
<li>You can read a <strong><code>Number</code></strong> because any of the lists that could be assigned to <code>foo3</code> contain a <code>Number</code> or a subclass of <code>Number</code>.</li>
<li>You can't read an <code>Integer</code> because <code>foo3</code> could be pointing at a <code>List&lt;Double&gt;</code>.</li>
<li>You can't read a <code>Double</code> because <code>foo3</code> could be pointing at a <code>List&lt;Integer&gt;</code>.</li>
</ul></li>
<li><p><strong>Writing</strong> - Given the above possible assignments, what type of object could you add to <code>List foo3</code> that would be legal for <strong>all</strong> the above possible <code>ArrayList</code> assignments:</p>

<ul>
<li>You can't add an <code>Integer</code> because <code>foo3</code> could be pointing at a <code>List&lt;Double&gt;</code>.</li>
<li>You can't add a <code>Double</code> because <code>foo3</code> could be pointing at a <code>List&lt;Integer&gt;</code>.</li>
<li>You can't add a <code>Number</code> because <code>foo3</code> could be pointing at a <code>List&lt;Integer&gt;</code>.</li>
</ul></li>
</ol>

<p><em>You can't add any object to <code>List&lt;? extends T&gt;</code> because you can't guarantee what kind of <code>List</code> it is really pointing to, so you can't guarantee that the object is allowed in that <code>List</code>. The only ""guarantee"" is that you can only read from it and you'll get a <code>T</code> or subclass of  <code>T</code>.</em></p>

<h3><code>super</code></h3>

<p>Now consider <code>List &lt;? super T&gt;</code>.</p>

<p>The wildcard declaration of <code>List&lt;? super Integer&gt; foo3</code> means that any of these are legal assignments:</p>

<pre><code>List&lt;? super Integer&gt; foo3 = new ArrayList&lt;Integer&gt;();  // Integer is a ""superclass"" of Integer (in this context)
List&lt;? super Integer&gt; foo3 = new ArrayList&lt;Number&gt;();   // Number is a superclass of Integer
List&lt;? super Integer&gt; foo3 = new ArrayList&lt;Object&gt;();   // Object is a superclass of Integer
</code></pre>

<ol>
<li><p><strong>Reading</strong> - Given the above possible assignments, what type of object are you guaranteed to receive when you read from <code>List foo3</code>:</p>

<ul>
<li>You aren't guaranteed an <code>Integer</code> because <code>foo3</code> could be pointing at a <code>List&lt;Number&gt;</code> or <code>List&lt;Object&gt;</code>.</li>
<li>You aren't guaranteed a <code>Number</code> because <code>foo3</code> could be pointing at a <code>List&lt;Object&gt;</code>.</li>
<li>The <strong>only</strong> guarantee is that you will get an instance of an <strong><code>Object</code></strong> or subclass of <code>Object</code> (but you don't know what subclass).</li>
</ul></li>
<li><p><strong>Writing</strong> - Given the above possible assignments, what type of object could you add to <code>List foo3</code> that would be legal for <strong>all</strong> the above possible <code>ArrayList</code> assignments:</p>

<ul>
<li>You can add an <code>Integer</code> because an <code>Integer</code> is allowed in any of above lists.</li>
<li>You can add an instance of a subclass of <code>Integer</code> because an instance of a subclass of <code>Integer</code> is allowed in any of the above lists.</li>
<li>You can't add a <code>Double</code> because <code>foo3</code> could be pointing at an <code>ArrayList&lt;Integer&gt;</code>.</li>
<li>You can't add a <code>Number</code> because <code>foo3</code> could be pointing at an <code>ArrayList&lt;Integer&gt;</code>.</li>
<li>You can't add an <code>Object</code> because <code>foo3</code> could be pointing at an <code>ArrayList&lt;Integer&gt;</code>.</li>
</ul></li>
</ol>

<h3>PECS</h3>

<p>Remember <em>PECS</em>: <strong>""Producer Extends, Consumer Super""</strong>.</p>

<ul>
<li><p><strong>""Producer Extends""</strong> - If you need a <code>List</code> to produce <code>T</code> values (you want to read <code>T</code>s from the list), you need to declare it with <code>? extends T</code>, e.g. <code>List&lt;? extends Integer&gt;</code>. But you cannot add to this list.</p></li>
<li><p><strong>""Consumer Super""</strong> - If you need a <code>List</code> to consume <code>T</code> values (you want to write <code>T</code>s into the list), you need to declare it with <code>? super T</code>, e.g. <code>List&lt;? super Integer&gt;</code>. But there are no guarantees what type of object you may read from this list.</p></li>
<li><p>If you need to both read from and write to a list, you need to declare it exactly with no wildcards, e.g. <code>List&lt;Integer&gt;</code>.</p></li>
</ul>

<h3>Example</h3>

<p>Note <a href=""http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeArguments.html#FAQ103"" rel=""noreferrer"">this example from the Java Generics FAQ</a>. Note how the source list <code>src</code> (the producing list) uses <code>extends</code>, and the destination list <code>dest</code> (the consuming list) uses <code>super</code>:</p>

<pre><code>public class Collections { 
  public static &lt;T&gt; void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src) {
      for (int i = 0; i &lt; src.size(); i++) 
        dest.set(i, src.get(i)); 
  } 
}
</code></pre>

<p>Also see 
<a href=""https://stackoverflow.com/questions/2776975/how-can-i-add-to-list-extends-number-data-structures/2777297#2777297"">How can I add to List&lt;? extends Number&gt; data structures?</a></p>
"
161005,"<p>Coding from the hip, it would be something like:</p>

<pre><code>java.lang.reflect.Method method;
try {
  method = obj.getClass().getMethod(methodName, param1.class, param2.class, ..);
} catch (SecurityException e) { ... }
  catch (NoSuchMethodException e) { ... }
</code></pre>

<p>The parameters identify the very specific method you need (if there are several overloaded available, if the method has no arguments, only give <code>methodName</code>).</p>

<p>Then you invoke that method by calling</p>

<pre><code>try {
  method.invoke(obj, arg1, arg2,...);
} catch (IllegalArgumentException e) { ... }
  catch (IllegalAccessException e) { ... }
  catch (InvocationTargetException e) { ... }
</code></pre>

<p>Again, leave out the arguments in <code>.invoke</code>, if you don't have any. But yeah. Read about <a href=""http://java.sun.com/docs/books/tutorial/reflect/index.html"" rel=""noreferrer"">Java Reflection</a></p>
"
6592493,"<p>If you layer the layout managers correctly the screen will re-flow to different sizes for you, the idea is to use a single set of layout managers on ALL screen sizes.</p>

<p>If you use null you will have to do each screen size yourself.  Not only that but if the app can be windowed you have to support every possible size they might scroll to.</p>

<p>That's kind of difficult to do, but the layout mangers are designed to do just that.</p>

<p>There are some common tricks.  BorderLayout is a great layout to start with.  Sometimes you might use it at multiple levels--often with just 2 or 3 components in it.  That's because it's really good at giving all but one area the minimum required area and giving everything else to the CENTER.</p>

<p>FlowLayout can be useful but it's tricky if your components are different sizes.</p>

<p>I wouldn't try GridBagLayout unless you are planning to write code to feed your layout manager (an excellent solution at that!).  </p>

<p>I also wouldn't use GUI builders, they don't know the overall way you want to reflow your layout.</p>
"
2671636,"<p>One rule-of-thumb: ask yourself &quot;Does it make sense to call this method, even if no object has been constructed yet?&quot;  If so, it should definitely be static.</p>
<p>So in a class <code>Car</code> you might have a method:</p>
<pre><code>double convertMpgToKpl(double mpg)
</code></pre>
<p>...which would be static, because one might want to know what 35mpg converts to, even if nobody has ever built a <code>Car</code>.  But this method (which sets the efficiency of one particular <code>Car</code>):</p>
<pre><code>void setMileage(double mpg)
</code></pre>
<p>...can't be static since it's inconceivable to call the method before any <code>Car</code> has been constructed.</p>
<p>(By the way, the converse isn't always true: you might sometimes have a method which involves two <code>Car</code> objects, and still want it to be static.  E.g.:</p>
<pre><code>Car theMoreEfficientOf(Car c1, Car c2)
</code></pre>
<p>Although this could be converted to a non-static version, some would argue that since there isn't a &quot;privileged&quot; choice of which <code>Car</code> is more important, you shouldn't force a caller to choose one <code>Car</code> as the object you'll invoke the method on.  This situation accounts for a fairly small fraction of all static methods, though.</p>
"
9619478,"<p>You need to add the certificate for <strong>App2</strong> to the truststore file of the used <strong>JVM</strong> located at <code>$JAVA_HOME\lib\security\cacerts</code>.</p>
<p>First you can check if your certificate is already in the truststore by running the following command:
<code>keytool -list -keystore &quot;$JAVA_HOME/jre/lib/security/cacerts&quot;</code> (you don't need to provide a password)</p>
<p>If your certificate is missing, you can get it by downloading it with your browser and add it to the truststore with the following command:</p>
<pre><code>keytool -import -noprompt -trustcacerts -alias &lt;AliasName&gt; -file   &lt;certificate&gt; -keystore &lt;KeystoreFile&gt; -storepass &lt;Password&gt;
</code></pre>
<p><strong>Example:</strong></p>
<pre><code>keytool -import -noprompt -trustcacerts -alias myFancyAlias -file /path/to/my/cert/myCert.cer -keystore /path/to/my/jdk/jre/lib/security/cacerts/keystore.jks -storepass changeit
</code></pre>
<p>After import you can run the first command again to check if your certificate was added.</p>
<p>Sun/Oracle information can be found <a href=""http://docs.oracle.com/javase/tutorial/security/toolsign/rstep2.html"" rel=""noreferrer"">here</a>.</p>
"
4167148,"<p>The issue with</p>

<pre><code>List&lt;String&gt; list = new LinkedList();
</code></pre>

<p>is that on the left hand side, you are using the <em>generic</em> type <code>List&lt;String&gt;</code> where on the right side you are using the <em>raw</em> type <code>LinkedList</code>. Raw types in Java effectively only exist for compatibility with pre-generics code and should never be used in new code unless 
you absolutely have to.</p>

<p>Now, if Java had generics from the beginning and didn't have types, such as <code>LinkedList</code>, that were originally created before it had generics, it probably could have made it so that the constructor for a generic type automatically infers its type parameters from the left-hand side of the assignment if possible. But it didn't, and it must treat raw types and generic types differently for backwards compatibility. That leaves them needing to make a <em>slightly different</em>, but equally convenient, way of declaring a new instance of a generic object without having to repeat its type parameters... the diamond operator.</p>

<p>As far as your original example of <code>List&lt;String&gt; list = new LinkedList()</code>, the compiler generates a warning for that assignment because it must. Consider this:</p>

<pre><code>List&lt;String&gt; strings = ... // some list that contains some strings

// Totally legal since you used the raw type and lost all type checking!
List&lt;Integer&gt; integers = new LinkedList(strings);
</code></pre>

<p>Generics exist to provide compile-time protection against doing the wrong thing. In the above example, using the raw type means you don't get this protection and will get an error at runtime. This is why you should not use raw types.</p>

<pre><code>// Not legal since the right side is actually generic!
List&lt;Integer&gt; integers = new LinkedList&lt;&gt;(strings);
</code></pre>

<p>The diamond operator, however, allows the right hand side of the assignment to be defined as a true generic instance with the same type parameters as the left side... without having to type those parameters again. It allows you to keep the safety of generics with <em>almost</em> the same effort as using the raw type.</p>

<p>I think the key thing to understand is that raw types (with no <code>&lt;&gt;</code>) cannot be treated the same as generic types. When you declare a raw type, you get none of the benefits and type checking of generics. You also have to keep in mind that <em>generics are a general purpose part of the Java language</em>... they don't just apply to the no-arg constructors of <code>Collection</code>s!</p>
"
4837230,"<p><strong>Note: Do not implement this in production code you are ever going to use on a network you do not entirely trust. Especially anything going over the public internet.</strong> </p>

<p>Your question is just what I want to know. After I did some searches, the conclusion is as follows.</p>

<p>In HttpClient way, you should create a custom class from org.apache.http.conn.ssl.SSLSocketFactory, not the one org.apache.http.conn.ssl.SSLSocketFactory
 itself. Some clues can be found in this post <a href=""https://stackoverflow.com/questions/2899079/custom-ssl-handling-stopped-working-on-android-2-2-froyo"">Custom SSL handling stopped working on Android 2.2 FroYo</a>.</p>

<p>An example is like  ...</p>

<pre><code>import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.conn.ssl.SSLSocketFactory;
public class MySSLSocketFactory extends SSLSocketFactory {
    SSLContext sslContext = SSLContext.getInstance(""TLS"");

    public MySSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {
        super(truststore);

        TrustManager tm = new X509TrustManager() {
            public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            }

            public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            }

            public X509Certificate[] getAcceptedIssuers() {
                return null;
            }
        };

        sslContext.init(null, new TrustManager[] { tm }, null);
    }

    @Override
    public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {
        return sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);
    }

    @Override
    public Socket createSocket() throws IOException {
        return sslContext.getSocketFactory().createSocket();
    }
}
</code></pre>

<p>and use this class while creating instance of HttpClient.</p>

<pre><code>public HttpClient getNewHttpClient() {
    try {
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(null, null);

        MySSLSocketFactory sf = new MySSLSocketFactory(trustStore);
        sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

        HttpParams params = new BasicHttpParams();
        HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
        HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);

        SchemeRegistry registry = new SchemeRegistry();
        registry.register(new Scheme(""http"", PlainSocketFactory.getSocketFactory(), 80));
        registry.register(new Scheme(""https"", sf, 443));

        ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);

        return new DefaultHttpClient(ccm, params);
    } catch (Exception e) {
        return new DefaultHttpClient();
    }
}
</code></pre>

<p>BTW, the link below is for someone who is looking for HttpURLConnection solution.
<a href=""https://stackoverflow.com/questions/995514/https-connection-android/1000205#1000205"">Https Connection Android</a></p>

<p>I have tested the above two kinds of solutions on froyo, and they all work like a charm in my cases. Finally, using HttpURLConnection may face the redirect problems, but this is beyond the topic.</p>

<p>Note: Before you decide to trust all certificates, you probably should know the site full well and won't be harmful of it to end-user.</p>

<p>Indeed, the risk you take should be considered carefully, including the effect of hacker's mock site mentioned in the following comments that I deeply appreciated. In some situation, although it might be hard to take care of all certificates, you'd better know the implicit drawbacks to trust all of them.</p>
"
44724688,"<p><code>Element ... is not clickable at point (x, y). Other element would receive the click""</code> can be caused for different factors. You can address them by either of the following procedures:</p>

<ol>
<li>Element not getting clicked due to JavaScript or AJAX calls present</li>
</ol>

<p>Try to use <code>Actions</code> Class:</p>

<pre><code>WebElement element = driver.findElement(By.id(""id1""));
Actions actions = new Actions(driver);
actions.moveToElement(element).click().build().perform();
</code></pre>

<ol start=""2"">
<li>Element not getting clicked as it is not within <a href=""https://www.w3schools.com/css/css_rwd_viewport.asp"" rel=""noreferrer"">Viewport</a></li>
</ol>

<p>Try to use <code>JavascriptExecutor</code> to bring the element within Viewport:</p>

<pre><code>JavascriptExecutor jse1 = (JavascriptExecutor)driver;
jse1.executeScript(""scroll(250, 0)""); // if the element is on top.
jse1.executeScript(""scroll(0, 250)""); // if the element is at bottom.
</code></pre>

<p>Or</p>

<pre><code>WebElement myelement = driver.findElement(By.id(""id1""));
JavascriptExecutor jse2 = (JavascriptExecutor)driver;
jse2.executeScript(""arguments[0].scrollIntoView()"", myelement); 
</code></pre>

<ol start=""3"">
<li>The page is getting refreshed before the element gets clickable.</li>
</ol>

<p>In this case induce some <code>wait</code>.</p>

<ol start=""4"">
<li>Element is present in the DOM but not clickable.</li>
</ol>

<p>In this case add some <code>ExplicitWait</code> for the element to be clickable.</p>

<pre><code>WebDriverWait wait2 = new WebDriverWait(driver, 10);
wait2.until(ExpectedConditions.elementToBeClickable(By.id(""id1"")));
</code></pre>

<ol start=""5"">
<li>Element is present but having temporary Overlay.</li>
</ol>

<p>In this case induce <strong><code>ExplicitWait</code></strong> with  <strong><code>ExpectedConditions</code></strong> set to <strong><code>invisibilityOfElementLocated</code></strong> for the Overlay to be invisible.</p>

<pre><code>WebDriverWait wait3 = new WebDriverWait(driver, 10);
wait3.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(""ele_to_inv"")));
</code></pre>

<ol start=""6"">
<li>Element is present but having permanent Overlay.</li>
</ol>

<p>Use <code>JavascriptExecutor</code> to send the click directly on the element.</p>

<pre><code>WebElement ele = driver.findElement(By.xpath(""element_xpath""));
JavascriptExecutor executor = (JavascriptExecutor)driver;
executor.executeScript(""arguments[0].click();"", ele);
</code></pre>
"
320595,"<pre><code>return new File(MyClass.class.getProtectionDomain().getCodeSource().getLocation()
    .toURI()).getPath();
</code></pre>

<p>Replace ""MyClass"" with the name of your class.</p>

<p>Obviously, this will do odd things if your class was loaded from a non-file location.</p>
"
3144617,"<pre><code>double num = 5;
</code></pre>

<p>That avoids a cast.  But you'll find that the cast conversions are well-defined.  You don't have to guess, just check the <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/index.html"" rel=""noreferrer"">JLS</a>.  int to double is a widening conversion.  From <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2"" rel=""noreferrer"">Â§5.1.2</a>:</p>

<blockquote>
  <p>Widening primitive conversions do not
  lose information about the overall
  magnitude of a numeric value.</p>
  
  <p>[...]</p>
  
  <p>Conversion of an int or a long value
  to float, or of a long value to
  double, may result in loss of
  precision-that is, the result may lose
  some of the least significant bits of
  the value. In this case, the resulting
  floating-point value will be a
  correctly rounded version of the
  integer value, using IEEE 754
  round-to-nearest mode <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.4"" rel=""noreferrer"">(Â§4.2.4)</a>.</p>
</blockquote>

<p>5 can be expressed exactly as a double.</p>
"
8710685,"<p>As always with these questions, the JLS holds the answer. In this case <a href=""http://docs.oracle.com/javase/specs/jls/se14/html/jls-15.html#jls-15.26.2"" rel=""noreferrer"">Â§15.26.2 Compound Assignment Operators</a>. An extract:</p>

<blockquote>
  <p>A compound assignment expression of the form <code>E1&nbsp;op=&nbsp;E2</code> is equivalent to <code>E1&nbsp;=&nbsp;(T)((E1)&nbsp;op&nbsp;(E2))</code>, where <code>T</code> is the type of <code>E1</code>, except that <code>E1</code> is evaluated only once.</p>
</blockquote>

<p>An example cited from <a href=""http://docs.oracle.com/javase/specs/jls/se14/html/jls-15.html#jls-15.26.2"" rel=""noreferrer"">Â§15.26.2</a></p>

<blockquote>
  <p>[...] the following code is correct:</p>

<pre><code>short x = 3;
x += 4.6;
</code></pre>
  
  <p>and results in x having the value 7 because it is equivalent to:</p>

<pre><code>short x = 3;
x = (short)(x + 4.6);
</code></pre>
</blockquote>

<p>In other words, your assumption is correct.</p>
"
2448857,"<p>You <em>declared</em> them, but you didn't initialize them. Initializing them is setting them equal to a value:</p>

<pre><code>int a;        // This is a declaration
a = 0;        // This is an initialization
int b = 1;    // This is a declaration and initialization
</code></pre>

<p>You get the error because you haven't initialized the variables, but you increment them (e.g., <code>a++</code>) in the <code>for</code> loop.</p>

<p>Java primitives have default values but as one user commented below</p>

<blockquote>
  <p>Their default value is zero when declared as class members. Local variables don't have default values</p>
</blockquote>
"
1393503,"<p>This message means that for some reason the garbage collector is taking an excessive amount of time (by default 98% of all CPU time of the process) and recovers very little memory in each run (by default 2% of the heap).</p>

<p>This effectively means that your program stops doing any progress and is busy running only the garbage collection at all time.</p>

<p>To prevent your application from soaking up CPU time without getting anything done, the JVM throws this <code>Error</code> so that you have a chance of diagnosing the problem.</p>

<p>The rare cases where I've seen this happen is where some code was creating tons of temporary objects and tons of weakly-referenced objects in an already very memory-constrained environment.</p>

<p>Check out the Java GC tuning guide, which is available for various Java versions and contains sections about this specific problem:</p>

<ul>
<li><a href=""https://docs.oracle.com/en/java/javase/11/gctuning/"" rel=""noreferrer"">Java 11 tuning guide</a> has dedicated sections on excessive GC for different garbage collectors:

<ul>
<li>for the <a href=""https://docs.oracle.com/en/java/javase/11/gctuning/parallel-collector1.html#GUID-31F3D722-5F93-41D6-817A-C6B91C095B6F"" rel=""noreferrer"">Parallel Collector</a></li>
<li>for the <a href=""https://docs.oracle.com/en/java/javase/11/gctuning/concurrent-mark-sweep-cms-collector.html#GUID-8A7DC9B6-0448-4AC5-8F6D-41C83B6C618E"" rel=""noreferrer"">Concurrent Mark Sweep (CMS) Collector</a></li>
<li>there is no mention of this specific error condition for the Garbage First (G1) collector.</li>
</ul></li>
<li><a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html"" rel=""noreferrer"">Java 8 tuning guide</a> and its <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/parallel.html#parallel_collector_excessive_gc"" rel=""noreferrer"">Excessive GC section</a></li>
<li><a href=""http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html"" rel=""noreferrer"">Java 6 tuning guide</a> and its <a href=""http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html#par_gc.oom"" rel=""noreferrer"">Excessive GC section</a>.</li>
</ul>
"
106787,"<p><code>volatile</code> has semantics for memory visibility. Basically, the value of a <code>volatile</code> field becomes visible to all readers (other threads in particular) after a write operation completes on it. Without <code>volatile</code>, readers could see some non-updated value.</p>

<p>To answer your question: Yes, I use a <code>volatile</code> variable to control whether some code continues a loop. The loop tests the <code>volatile</code> value and continues if it is <code>true</code>. The condition can be set to <code>false</code> by calling a ""stop"" method. The loop sees <code>false</code> and terminates when it tests the value after the stop method completes execution.</p>

<p>The book ""<a href=""http://jcip.net"" rel=""noreferrer"">Java Concurrency in Practice</a>,"" which I highly recommend, gives a good explanation of <code>volatile</code>. This book is written by the same person who wrote the IBM article that is referenced in the question (in fact, he cites his book at the bottom of that article). My use of <code>volatile</code> is what his article calls the ""pattern 1 status flag.""</p>

<p>If you want to learn more about how <a href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3.1.4"" rel=""noreferrer""><code>volatile</code></a> works under the hood, read up on <a href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html"" rel=""noreferrer"">the Java memory model</a>. If you want to go beyond that level, check out a good computer architecture book like <a href=""https://www.elsevier.com/books/computer-architecture/hennessy/978-0-12-383872-8"" rel=""noreferrer"">Hennessy &amp; Patterson</a> and read about cache coherence and cache consistency.</p>
"
921400,"<p>Give <a href=""http://en.wikipedia.org/wiki/New_I/O"" rel=""noreferrer"">Java NIO</a> a try:</p>

<pre><code>URL website = new URL(""http://www.website.com/information.asp"");
ReadableByteChannel rbc = Channels.newChannel(website.openStream());
FileOutputStream fos = new FileOutputStream(""information.html"");
fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
</code></pre>

<p>Using <code>transferFrom()</code> is <strong>potentially</strong> much more efficient than a simple loop that reads from the source channel and writes to this channel. Many operating systems can transfer bytes directly from the source channel into the filesystem cache without actually copying them.</p>

<p>Check more about it <a href=""http://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileChannel.html"" rel=""noreferrer"">here</a>.</p>

<p><strong>Note</strong>: The third parameter in transferFrom is the maximum number of bytes to transfer.  <code>Integer.MAX_VALUE</code> will transfer at most 2^31 bytes, <code>Long.MAX_VALUE</code> will allow at most 2^63 bytes (larger than any file in existence). </p>
"
189399,"<p>An analysis of the various options available, and the pros and cons of each is available in Jeanne Boyarsky's <em><a href=""http://www.javaranch.com/journal/200510/Journal200510.jsp#a2"" rel=""noreferrer"">Batching Select Statements in JDBC</a></em> entry on JavaRanch Journal.</p>
<p>The suggested options are:</p>
<ul>
<li>Prepare <code>SELECT my_column FROM my_table WHERE search_column = ?</code>, execute it for each value and UNION the results client-side. Requires only one prepared statement. Slow and painful.</li>
<li>Prepare <code>SELECT my_column FROM my_table WHERE search_column IN (?,?,?)</code> and execute it. Requires one prepared statement per size-of-IN-list. Fast and obvious.</li>
<li>Prepare <code>SELECT my_column FROM my_table WHERE search_column = ? ; SELECT my_column FROM my_table WHERE search_column = ? ; ...</code> and execute it. [Or use <code>UNION ALL</code> in place of those semicolons. --ed] Requires one prepared statement per size-of-IN-list. Stupidly slow, strictly worse than <code>WHERE search_column IN (?,?,?)</code>, so I don't know why the blogger even suggested it.</li>
<li>Use a stored procedure to construct the result set.</li>
<li>Prepare N different size-of-IN-list queries; say, with 2, 10, and 50 values. To search for an IN-list with 6 different values, populate the size-10 query so that it looks like <code>SELECT my_column FROM my_table WHERE search_column IN (1,2,3,4,5,6,6,6,6,6)</code>. Any decent server will optimize out the duplicate values before running the query.</li>
</ul>
<p>None of these options are ideal.</p>
<p>The best option if you are using JDBC4 and a server that supports <code>x = ANY(y)</code>, is to use <code>PreparedStatement.setArray</code> as described in <a href=""https://stackoverflow.com/questions/178479/preparedstatement-in-clause-alternatives/10240302#10240302"">Boris's anwser</a>.</p>
<p>There doesn't seem to be any way to make <code>setArray</code> work with IN-lists, though.</p>
<hr />
<p>Sometimes SQL statements are loaded at runtime (e.g., from a properties file) but require a variable number of parameters. In such cases, first define the query:</p>
<pre class=""lang-none prettyprint-override""><code>query=SELECT * FROM table t WHERE t.column IN (?)
</code></pre>
<p>Next, load the query. Then determine the number of parameters prior to running it. Once the parameter count is known, run:</p>
<pre class=""lang-java prettyprint-override""><code>sql = any( sql, count );
</code></pre>
<p>For example:</p>
<pre class=""lang-java prettyprint-override""><code>/**
 * Converts a SQL statement containing exactly one IN clause to an IN clause
 * using multiple comma-delimited parameters.
 *
 * @param sql The SQL statement string with one IN clause.
 * @param params The number of parameters the SQL statement requires.
 * @return The SQL statement with (?) replaced with multiple parameter
 * placeholders.
 */
public static String any(String sql, final int params) {
    // Create a comma-delimited list based on the number of parameters.
    final StringBuilder sb = new StringBuilder(
        String.join(&quot;, &quot;, Collections.nCopies(possibleValue.size(), &quot;?&quot;)));

    // For more than 1 parameter, replace the single parameter with
    // multiple parameter placeholders.
    if (sb.length() &gt; 1) {
        sql = sql.replace(&quot;(?)&quot;, &quot;(&quot; + sb + &quot;)&quot;);
    }

    // Return the modified comma-delimited list of parameters.
    return sql;
}
</code></pre>
<p>For certain databases where passing an array via the JDBC 4 specification is unsupported, this method can facilitate transforming the slow <code>= ?</code> into the faster <code>IN (?)</code> clause condition, which can then be expanded by calling the <code>any</code> method.</p>
"
60775,"<p>The reason it's hard is security.  Classloaders are meant to be immutable; you shouldn't be able to willy-nilly add classes to it at runtime.  I'm actually very surprised that works with the system classloader.  Here's how you do it making your own child classloader:</p>

<pre><code>URLClassLoader child = new URLClassLoader(
        new URL[] {myJar.toURI().toURL()},
        this.getClass().getClassLoader()
);
Class classToLoad = Class.forName(""com.MyClass"", true, child);
Method method = classToLoad.getDeclaredMethod(""myMethod"");
Object instance = classToLoad.newInstance();
Object result = method.invoke(instance);
</code></pre>

<p>Painful, but there it is.</p>
"
40006381,"<pre><code>Error Message:
    java.lang.StringIndexOutOfBoundsException: length=28; regionStart=1;
    regionLength=499 at java.lang.String.substring(String.java:1931) at     
    com.example.my.app.MainActivity$2.onResponse(MainActivity.java:50) at     
    com.example.my.app.MainActivity$2.onResponse(MainActivity.java:46) at     
    com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:60) at     
    com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:30) at     
    com.android.volley.ExecutorDelivery$ResponseDeliveryRunnable.run(ExecutorDelivery.java:99) at android.os.Handler.handleCallback(Handler.java:751) at     
    android.os.Handler.dispatchMessage(Handler.java:95) at     
    android.os.Looper.loop(Looper.java:154) at     
    android.app.ActivityThread.main(ActivityThread.java:6077) at     
    java.lang.reflect.Method.invoke(Native Method) at     
    com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:865) at     
    com.android.internal.os.ZygoteInit.main(ZygoteInit.java:755) 
</code></pre>

<p><strong>Error Description</strong></p>

<pre><code>There is an IndexOutOfBound exception occurred in your MainActivity class 
Inside second inner class's OnResponse function as shown MainActivity$2onResponse
on line 46 which basically occurred during substring operation in String.java line 1931 
which was invoked from StringRequest.deliverResponse at line 60,
which was invoked from StringRequest.deliverResponse at line 30,
which was invoked from ExecutorDelivery.java at line 99,
which intially started from ZygoteInit$MethodAndArgsCaller's run function 
and reached up-to main thread of ActivityThread.main=&gt;looper=&gt;handler
</code></pre>

<p><strong>Actual Reason</strong></p>

<p>Your code trying to create a substring with </p>

<pre><code>starting index = 0
ending index = 500
</code></pre>

<p>though your actual response string length is = 28, so String length is not long enough to create a substring of 500 characters.</p>

<p><strong>Solutions :</strong></p>

<ol>
<li><p>Validate length using ternary operator <code>?:</code> </p>

<pre><code>mTextView.setText(""Response is: ""+ 
   ((response.length()&gt;499) ? response.substring(0,500) : ""length is too short""));
</code></pre>

<p>Note : Ternary operator (<code>?:</code>) is a short expression of <code>if else</code> but it is <a href=""https://stackoverflow.com/questions/12554547/can-javas-ternary-conditional-operator-be-used-to-call-methods-instead-of"">not a statement</a> mean it cannot occur as an atomic statement as this is <strong><code>INVALID</code></strong> because there is no assignment </p>

<pre><code>((someString.length()&gt;499) ? someString.substring(0,500):""Invalid length"");
</code></pre></li>
<li><p><code>if-else</code> enhances the visibility </p>

<pre><code>String msg=""Invalid Response"";
if(response.length()&gt;499){
    msg=response.substring(0,500);
}
mTextView.setText(""Response is: ""+msg);

//or     mTextView.setText(""Response is: ""+response);
</code></pre></li>
</ol>

<h2>What is IndexOutOfBoundsException?</h2>

<blockquote>
  <p><code>IndexOutOfBoundsException</code> is a subclass of <code>RuntimeException</code> mean
  it is an unchecked exception which is thrown to indicate that an index
  of some sort (such as to an array, to a string, or to a vector) is out
  of range.e.g using List.</p>
</blockquote>

<p>as shown in the <a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/IndexOutOfBoundsException.html"" rel=""noreferrer"">Documentation</a></p>

<blockquote>
<pre><code>List&lt;String&gt; ls=new ArrayList&lt;&gt;();
      ls.add(""a"");
      ls.add(""b"");
      ls.get(3); // will throw IndexOutOfBoundsException , list length is 2
</code></pre>
</blockquote>

<p><strong>Prevention</strong> :</p>

<pre><code>String str = """";
int index =3; 
if(index &lt; ls.size())    // check, list size must be greater than index
    str = ls.get(index);
else
    // print invalid index or other stuff
</code></pre>

<h2>Class Constructor usage with index or string message</h2>

<pre><code>public IndexOutOfBoundsException() {
    super();
}

public IndexOutOfBoundsException(String s) {
    super(s);
}
</code></pre>

<h2>Which are other variations/sub-classes of IndexOutOfBoundsException?</h2>

<ul>
<li><p><a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/ArrayIndexOutOfBoundsException.html"" rel=""noreferrer""><strong>ArrayIndexOutOfBoundsException</strong></a> : This indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array for e.g </p>

<blockquote>
<pre><code>int arr = {1,2,3}
int error = arr[-1]; // no negative index allowed
int error2 = arr[4]; // arr length is 3 as index range is 0-2
</code></pre>
</blockquote></li>
</ul>

<p><strong>Prevention</strong> :</p>

<pre><code>int num = """";
int index=4;
if(index &lt; arr.length)     // check, array length must be greater than index
    num = arr[index];
else
    // print invalid index or other stuff
</code></pre>

<ul>
<li><p><a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/StringIndexOutOfBoundsException.html"" rel=""noreferrer""><strong>StringIndexOutOfBoundsException</strong></a> : This is thrown by String methods to indicate that an index is either negative or greater than the size of the string. For some methods such as the charAt method, this exception also is thrown when the index is equal to the size of the string.</p>

<blockquote>
<pre><code>String str = ""foobar"";       // length = 6
char error = str.charAt(7);  // index input should be less than or equal to length-1
char error = str.charAt(-1); // cannot use negative indexes
</code></pre>
</blockquote></li>
</ul>

<p><strong>Prevention</strong> :</p>

<pre><code>String name = ""FooBar"";
int index = 7;
char holder = '';
if(index &lt; name.length())     // check, String length must be greater than index
    holder = name.charAt(index) ;
else
    // print invalid index or other stuff
</code></pre>

<p><strong>Note:</strong> <code>length()</code> is a function of <code>String</code> class and <code>length</code> is a associative field of an <code>array</code>.</p>

<h2>Why these exception occur?</h2>  

<ul>
<li>Usage of Negative index with <code>arrays</code> or <code>charAt</code> , <code>substring</code> functions</li>
<li>BeginIndex is less than <code>0</code> or endIndex is greater than the length of input string to create <code>substring</code>  or beginIndex is larger than the endIndex</li>
<li>When <code>endIndex - beginIndex</code> result is less than <code>0</code></li>
<li>When input string/array is empty</li>
</ul>

<p><strong>INFO :</strong> It is job of JVM to create the object of appropriate exception and pass it to the place of , where it occurred using <code>throw</code> keyword like or you can also do it manually using <code>throw</code> keyword too.</p>

<pre><code>if (s == null) {
    throw new IndexOutOfBoundsException(""null"");
}
</code></pre>

<h1>How can I fix this ?</h1>

<ol>
<li>Analyzing StackTrace</li>
<li>Validating input string against nullity , length or valid indexes </li>
<li>Using Debugging or Logs</li>
<li>Using Generic Exception catch block</li>
</ol>

<h3>1.) Analyzing StackTrace</h3>

<p>As shown at the beginning of this post , stacktrace provides the necessary information in the initial messages about where it happen , why it happen so you can simply trace that code and apply the required solution .</p>

<p>for e.g the reason  <code>StringIndexOutOfBoundsException</code> and then look for your <code>package name indicating your class file</code> then  go to that line and keeping the reason in mind , simply apply the solution </p>

<p>It's a head start if you study about the exception and its cause as well in documentation.</p>

<h3>2.) Validating input string against nullity , length or valid indexes</h3>

<p>In case of uncertainty when you don't know about the actual input like response is coming from server (or maybe it's an error or nothing) or user then it's always better to cover all the unexpected cases <strong>though believe me few users always like to push the limits of testing</strong> so use <code>input!=null &amp;&amp; input.length()&gt;0</code> or for indexes, you can use the ternary operator or <code>if-else</code> boundary check conditions  </p>

<h3>3.) Using Debugging or Logs</h3>

<p>You can test the running environment of your project in debug mode by adding break-points in your project and system will stop there to wait for your next action and meanwhile you can look into the values of variables and other details.</p>

<p>Logs are just like check-points so when your control cross this point they generate details , basically they are informative messages given by wither system or user can also put logging messages using either Logs or Println messages </p>

<h3>4.) Using Generic Exception catch block</h3>

<p><code>Try-catch</code> blocks are always useful to handle <code>RuntimeExceptions</code> so you can use multiple <code>catch</code> block along to handle your possible issues and to give appropriate details </p>

<pre><code>try {
     mTextView.setText(""Response is: ""+ response.substring(0,500));
} catch (IndexOutOfBoundsException e) {
    e.printStackTrace();
    System.out,println(""Invalid indexes or empty string"");
}
  catch (NullPointerException e) { // mTextView or response can be null 
    e.printStackTrace();
    System.out,println(""Something went wrong ,missed initialization"");
}
catch (Exception e) {  
    e.printStackTrace();
    System.out,println(""Something unexpected happened , move on or can see stacktrace "");
}
</code></pre>

<p><strong>Further References</strong> </p>

<p><a href=""https://stackoverflow.com/questions/218384/what-is-a-nullpointerexception-and-how-do-i-fix-it"">What is a NullPointerException, and how do I fix it?</a></p>
"
10786112,"<p><a href=""https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/URLEncoder.html"" rel=""noreferrer""><code>URLEncoder</code></a> is the way to go. You only need to keep in mind to encode <em>only</em> the individual query string parameter name and/or value, not the entire URL, for sure not the query string parameter separator character <code>&amp;</code> nor the parameter name-value separator character <code>=</code>.</p>
<pre><code>String q = &quot;random word Â£500 bank $&quot;;
String url = &quot;https://example.com?q=&quot; + URLEncoder.encode(q, StandardCharsets.UTF_8);
</code></pre>
<p>When you're still not on Java 10 or newer, then use <code>StandardCharsets.UTF_8.toString()</code> as charset argument, or when you're still not on Java 7 or newer, then use <code>&quot;UTF-8&quot;</code>.</p>
<hr />
<p>Note that spaces in query parameters are represented by <code>+</code>, not <code>%20</code>, which is legitimately valid. The <code>%20</code> is usually to be used to represent spaces in URI itself (the part before the URI-query string separator character <code>?</code>), not in query string (the part after <code>?</code>).</p>
<p>Also note that there are three <code>encode()</code> methods. One without <code>Charset</code> as second argument and another with <code>String</code> as second argument which throws a checked exception. The one without <code>Charset</code> argument is deprecated. Never use it and always specify the <code>Charset</code> argument. The <a href=""https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/URLEncoder.html"" rel=""noreferrer"">javadoc</a> even explicitly recommends to use the UTF-8 encoding, as mandated by <a href=""https://www.rfc-editor.org/rfc/rfc3986"" rel=""noreferrer"">RFC3986</a> and <a href=""http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars"" rel=""noreferrer"">W3C</a>.</p>
<blockquote>
<p>All other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string &quot;%xy&quot;, where xy is the two-digit hexadecimal representation of the byte. <strong>The recommended encoding scheme to use is UTF-8</strong>. However, for compatibility reasons, if an encoding is not specified, then the default encoding of the platform is used.</p>
</blockquote>
<h3>See also:</h3>
<ul>
<li><a href=""https://www.talisman.org/%7Eerlkonig/misc/lunatech%5Ewhat-every-webdev-must-know-about-url-encoding/"" rel=""noreferrer"">What every web developer must know about URL encoding</a></li>
</ul>
"
7026563,"<p>Static variables represent global state. That's hard to reason about and hard to test: if I create a new instance of an object, I can reason about its new state within tests. If I use code which is using static variables, it could be in any state - and anything could be modifying it.</p>

<p>I could go on for quite a while, but the bigger concept to think about is that the tighter the scope of something, the easier it is to reason about. We're good at thinking about small things, but it's hard to reason about the state of a million line system if there's no modularity. This applies to all sorts of things, by the way - not just static variables.</p>
"
1299889,"<p>Java doesn't support true <a href=""http://en.wikipedia.org/wiki/Closure_(computer_science)"" rel=""noreferrer"">closures</a>, even though using an anonymous class like you are using here (<code>new TimerTask() { ... }</code>) looks like a kind of closure.</p>

<p><strong>edit</strong> - <em>See the comments below - the following is not a correct explanation, as KeeperOfTheSoul points out.</em></p>

<p>This is why it doesn't work:</p>

<p>The variables <code>lastPrice</code> and price are local variables in the main() method. The object that you create with the anonymous class might last until after the <code>main()</code> method returns.</p>

<p>When the <code>main()</code> method returns, local variables (such as <code>lastPrice</code> and <code>price</code>) will be cleaned up from the stack, so they won't exist anymore after <code>main()</code> returns.</p>

<p>But the anonymous class object references these variables. Things would go horribly wrong if the anonymous class object tries to access the variables after they have been cleaned up.</p>

<p>By making <code>lastPrice</code> and <code>price</code> <code>final</code>, they are not really variables anymore, but constants. The compiler can then just replace the use of <code>lastPrice</code> and <code>price</code> in the anonymous class with the values of the constants (at compile time, of course), and you won't have the problem with accessing non-existent variables anymore.</p>

<p>Other programming languages that do support closures do it by treating those variables specially - by making sure they don't get destroyed when the method ends, so that the closure can still access the variables.</p>

<p>@Ankur: You could do this:</p>

<pre><code>public static void main(String args[]) {
    int period = 2000;
    int delay = 2000;

    Timer timer = new Timer();

    timer.scheduleAtFixedRate(new TimerTask() {
        // Variables as member variables instead of local variables in main()
        private double lastPrice = 0;
        private Price priceObject = new Price();
        private double price = 0;

        public void run() {
            price = priceObject.getNextPrice(lastPrice);
            System.out.println();
            lastPrice = price;
        }
    }, delay, period);      
}
</code></pre>
"
798556,"<p>Yes, it is a shorthand form of</p>
<pre><code>int count;
if (isHere)
    count = getHereCount(index);
else
    count = getAwayCount(index);
</code></pre>
<p>It's called the <strong>conditional operator</strong>. Many people (erroneously) call it <em>the ternary operator</em>, because it's the only ternary (three-argument) operator in Java, C, C++, and probably many other languages. But theoretically there <em>could</em> be another ternary operator, whereas there can only be one <em>conditional operator</em>.</p>
<p>The official name is given in the <a href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.25"" rel=""noreferrer"">Java Language Specification</a>:</p>
<blockquote>
<h3>Â§15.25 Conditional Operator ? :</h3>
<p>The conditional operator <code>? :</code> uses the boolean value of one expression to decide which of two other expressions should be evaluated.</p>
</blockquote>
<p>Note that both branches must lead to methods with return values:</p>
<blockquote>
<p><strong>It is a compile-time error for either the second or the third operand expression to be an invocation of a void method.</strong></p>
<p><sup><em>In fact, by the grammar of expression statements (<a href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.8"" rel=""noreferrer"">Â§14.8</a>), it is not permitted for a conditional expression to appear in any context where an invocation of a void method could appear.</em></sup></p>
</blockquote>
<p>So, if <code>doSomething()</code> and <code>doSomethingElse()</code> are void methods, you cannot compress this:</p>
<pre><code>if (someBool)
    doSomething();
else
    doSomethingElse();
</code></pre>
<p>into this:</p>
<pre><code>someBool ? doSomething() : doSomethingElse();
</code></pre>
<p>Simple words:</p>
<pre><code>booleanCondition ? executeThisPartIfBooleanConditionIsTrue : executeThisPartIfBooleanConditionIsFalse 
</code></pre>
"
41156,"<h2>Algorithm</h2>
<p>To generate a random string, concatenate characters drawn randomly from the set of acceptable symbols until the string reaches the desired length.</p>
<h2>Implementation</h2>
<p>Here's some fairly simple and very flexible code for generating random identifiers. <em>Read the information that follows</em> for important application notes.</p>
<pre><code>public class RandomString {

    /**
     * Generate a random string.
     */
    public String nextString() {
        for (int idx = 0; idx &lt; buf.length; ++idx)
            buf[idx] = symbols[random.nextInt(symbols.length)];
        return new String(buf);
    }

    public static final String upper = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;

    public static final String lower = upper.toLowerCase(Locale.ROOT);

    public static final String digits = &quot;0123456789&quot;;

    public static final String alphanum = upper + lower + digits;

    private final Random random;

    private final char[] symbols;

    private final char[] buf;

    public RandomString(int length, Random random, String symbols) {
        if (length &lt; 1) throw new IllegalArgumentException();
        if (symbols.length() &lt; 2) throw new IllegalArgumentException();
        this.random = Objects.requireNonNull(random);
        this.symbols = symbols.toCharArray();
        this.buf = new char[length];
    }

    /**
     * Create an alphanumeric string generator.
     */
    public RandomString(int length, Random random) {
        this(length, random, alphanum);
    }

    /**
     * Create an alphanumeric strings from a secure generator.
     */
    public RandomString(int length) {
        this(length, new SecureRandom());
    }

    /**
     * Create session identifiers.
     */
    public RandomString() {
        this(21);
    }

}
</code></pre>
<h2>Usage examples</h2>
<p>Create an insecure generator for 8-character identifiers:</p>
<pre><code>RandomString gen = new RandomString(8, ThreadLocalRandom.current());
</code></pre>
<p>Create a secure generator for session identifiers:</p>
<pre><code>RandomString session = new RandomString();
</code></pre>
<p>Create a generator with easy-to-read codes for printing. The strings are longer than full alphanumeric strings to compensate for using fewer symbols:</p>
<pre><code>String easy = RandomString.digits + &quot;ACEFGHJKLMNPQRUVWXYabcdefhijkprstuvwx&quot;;
RandomString tickets = new RandomString(23, new SecureRandom(), easy);
</code></pre>
<h2>Use as session identifiers</h2>
<p>Generating session identifiers that are likely to be unique is not good enough, or you could just use a simple counter. Attackers hijack sessions when predictable identifiers are used.</p>
<p>There is tension between length and security. Shorter identifiers are easier to guess, because there are fewer possibilities. But longer identifiers consume more storage and bandwidth. A larger set of symbols helps, but might cause encoding problems if identifiers are included in URLs or re-entered by hand.</p>
<p>The underlying source of randomness, or entropy, for session identifiers should come from a random number generator designed for cryptography. However, initializing these generators can sometimes be computationally expensive or slow, so effort should be made to re-use them when possible.</p>
<h2>Use as object identifiers</h2>
<p>Not every application requires security. Random assignment can be an efficient way for multiple entities to generate identifiers in a shared space without any coordination or partitioning. Coordination can be slow, especially in a clustered or distributed environment, and splitting up a space causes problems when entities end up with shares that are too small or too big.</p>
<p>Identifiers generated without taking measures to make them unpredictable should be protected by other means if an attacker might be able to view and manipulate them, as happens in most web applications. There should be a separate authorization system that protects objects whose identifier can be guessed by an attacker without access permission.</p>
<p>Care must be also be taken to use identifiers that are long enough to make collisions unlikely given the anticipated total number of identifiers. This is referred to as &quot;the birthday paradox.&quot; <a href=""https://en.wikipedia.org/wiki/Birthday_problem#Square_approximation"" rel=""noreferrer"">The probability of a collision,</a> <em>p</em>, is approximately n<sup>2</sup>/(2q<sup>x</sup>), where <em>n</em> is the number of identifiers actually generated, <em>q</em> is the number of distinct symbols in the alphabet, and <em>x</em> is the length of the identifiers. This should be a very small number, like 2<sup>â50</sup> or less.</p>
<p>Working this out shows that the chance of collision among 500k 15-character identifiers is about 2<sup>â52</sup>, which is probably less likely than undetected errors from cosmic rays, etc.</p>
<h2>Comparison with UUIDs</h2>
<p>According to their specification, <a href=""https://www.rfc-editor.org/rfc/rfc4122#section-6"" rel=""noreferrer"">UUIDs</a> are not designed to be unpredictable, and <em>should not</em> be used as session identifiers.</p>
<p>UUIDs in their standard format take a lot of space: 36 characters for only 122 bits of entropy. (Not all bits of a &quot;random&quot; UUID are selected randomly.) A randomly chosen alphanumeric string packs more entropy in just 21 characters.</p>
<p>UUIDs are not flexible; they have a standardized structure and layout. This is their chief virtue as well as their main weakness. When collaborating with an outside party, the standardization offered by UUIDs may be helpful. For purely internal use, they can be inefficient.</p>
"
1457879,"<p>The difference from the Java API Specifications is as follows.</p>

<p>For <a href=""http://java.sun.com/javase/6/docs/api/java/lang/ClassNotFoundException.html"" rel=""noreferrer""><code>ClassNotFoundException</code></a>:</p>

<blockquote>
  <p>Thrown when an application tries to
  load in a class through its string
  name using:</p>
  
  <ul>
  <li>The <code>forName</code> method in class <code>Class</code>.</li>
  <li>The <code>findSystemClass</code> method in class <code>ClassLoader</code>.</li>
  <li>The <code>loadClass</code> method in class <code>ClassLoader</code>. </li>
  </ul>
  
  <p>but no definition for the class with
  the specified name could be found.</p>
</blockquote>

<p>For <a href=""http://java.sun.com/javase/6/docs/api/java/lang/NoClassDefFoundError.html"" rel=""noreferrer""><code>NoClassDefFoundError</code></a>:</p>

<blockquote>
  <p>Thrown if the Java Virtual Machine or
  a <code>ClassLoader</code> instance tries to load
  in the definition of a class (as part
  of a normal method call or as part of
  creating a new instance using the new
  expression) and no definition of the
  class could be found.</p>
  
  <p>The searched-for class definition
  existed when the currently executing
  class was compiled, but the definition
  can no longer be found.</p>
</blockquote>

<p>So, it appears that the <code>NoClassDefFoundError</code> occurs when the source was successfully compiled, but at runtime, the required <code>class</code> files were not found. This may be something that can happen in the distribution or production of JAR files, where not all the required <code>class</code> files were included.</p>

<p>As for <code>ClassNotFoundException</code>, it appears that it may stem from trying to make reflective calls to classes at runtime, but the classes the program is trying to call is does not exist.</p>

<p>The difference between the two is that one is an <code>Error</code> and the other is an <code>Exception</code>. With <code>NoClassDefFoundError</code> is an <code>Error</code> and it arises from the Java Virtual Machine having problems finding a class it expected to find. A program that was expected to work at compile-time can't run because of <code>class</code> files not being found, or is not the same as was produced or encountered at compile-time. This is a pretty critical error, as the program cannot be initiated by the JVM.</p>

<p>On the other hand, the <code>ClassNotFoundException</code> is an <code>Exception</code>, so it is somewhat expected, and is something that is recoverable. Using reflection is can be error-prone (as there is some expectations that things may not go as expected. There is no compile-time check to see that all the required classes exist, so any problems with finding the desired classes will appear at runtime.</p>
"
1688182,"<blockquote>
<p><em>I looked at Google's Gson as a potential JSON plugin. Can anyone offer some form of guidance as to how I can generate Java from this JSON string?</em></p>
</blockquote>
<p><a href=""http://code.google.com/p/google-gson/"" rel=""noreferrer"">Google Gson</a> supports generics and nested beans. The <code>[]</code> in JSON represents an array and should map to a Java collection such as <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/List.html"" rel=""noreferrer""><code>List</code></a> or just a plain Java array. The <code>{}</code> in JSON represents an object and should map to a Java <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/Map.html"" rel=""noreferrer""><code>Map</code></a> or just some JavaBean class.</p>
<p>You have a JSON object with several properties of which the <code>groups</code> property represents an array of nested objects of the very same type. This can be parsed with Gson the following way:</p>
<pre><code>package com.stackoverflow.q1688099;

import java.util.List;
import com.google.gson.Gson;

public class Test {

    public static void main(String... args) throws Exception {
        String json = 
            &quot;{&quot;
                + &quot;'title': 'Computing and Information systems',&quot;
                + &quot;'id' : 1,&quot;
                + &quot;'children' : 'true',&quot;
                + &quot;'groups' : [{&quot;
                    + &quot;'title' : 'Level one CIS',&quot;
                    + &quot;'id' : 2,&quot;
                    + &quot;'children' : 'true',&quot;
                    + &quot;'groups' : [{&quot;
                        + &quot;'title' : 'Intro To Computing and Internet',&quot;
                        + &quot;'id' : 3,&quot;
                        + &quot;'children': 'false',&quot;
                        + &quot;'groups':[]&quot;
                    + &quot;}]&quot; 
                + &quot;}]&quot;
            + &quot;}&quot;;

        // Now do the magic.
        Data data = new Gson().fromJson(json, Data.class);

        // Show it.
        System.out.println(data);
    }

}

class Data {
    private String title;
    private Long id;
    private Boolean children;
    private List&lt;Data&gt; groups;

    public String getTitle() { return title; }
    public Long getId() { return id; }
    public Boolean getChildren() { return children; }
    public List&lt;Data&gt; getGroups() { return groups; }

    public void setTitle(String title) { this.title = title; }
    public void setId(Long id) { this.id = id; }
    public void setChildren(Boolean children) { this.children = children; }
    public void setGroups(List&lt;Data&gt; groups) { this.groups = groups; }
    
    public String toString() {
        return String.format(&quot;title:%s,id:%d,children:%s,groups:%s&quot;, title, id, children, groups);
    }
}
</code></pre>
<p>Fairly simple, isn't it? Just have a suitable JavaBean and call <a href=""http://google-gson.googlecode.com/svn/tags/1.3/docs/javadocs/com/google/gson/Gson.html#fromJson%28java.lang.String,%20java.lang.Class%29"" rel=""noreferrer""><code>Gson#fromJson()</code></a>.</p>
<h3>See also:</h3>
<ul>
<li><a href=""http://json.org/"" rel=""noreferrer"">Json.org</a> - Introduction to JSON</li>
<li><a href=""https://github.com/google/gson/blob/master/UserGuide.md"" rel=""noreferrer"">Gson User Guide</a> - Introduction to Gson</li>
</ul>
"
17974068,"<p>After you compile your code, you end up with <code>.class</code> files for each class in your program. These binary files are the bytecode that Java interprets to execute your program. The <code>NoClassDefFoundError</code> indicates that the classloader (in this case <code>java.net.URLClassLoader</code>), which is responsible for dynamically loading classes, cannot find the <code>.class</code> file for the class that you're trying to use.</p>
<p>Your code wouldn't compile if the required classes weren't present (unless classes are loaded with reflection), so usually this exception means that your classpath doesn't include the required classes. Remember that the classloader (specifically <code>java.net.URLClassLoader</code>) will look for classes in package a.b.c in folder a/b/c/ in each entry in your classpath. <code>NoClassDefFoundError</code> can also indicate that you're missing a transitive dependency of a .jar file that you've compiled against and you're trying to use.</p>
<p>For example, if you had a class <code>com.example.Foo</code>, after compiling you would have a class file <code>Foo.class</code>. Say for example your working directory is <code>.../project/</code>. That class file must be placed in <code>.../project/com/example</code>, and you would set your classpath to <code>.../project/</code>.</p>
<p>Side note: I would recommend taking advantage of the amazing tooling that exists for Java and JVM languages. Modern IDEs like Eclipse and IntelliJ IDEA and build management tools like Maven or Gradle will help you not have to worry about classpaths (as much) and focus on the code! That said, <a href=""http://en.wikipedia.org/wiki/Classpath_%28Java%29"" rel=""noreferrer"">this link</a> explains how to set the classpath when you execute on the command line.</p>
"
992413,"<p>Share the <code>password</code> (a <code>char[]</code>) and <code>salt</code> (a <code>byte[]</code>â8 bytes selected by a <code>SecureRandom</code> makes a good saltâwhich doesn't need to be kept secret) with the recipient out-of-band. Then to derive a good key from this information:</p>
<pre><code>/* Derive the key, given password and salt. */
SecretKeyFactory factory = SecretKeyFactory.getInstance(&quot;PBKDF2WithHmacSHA256&quot;);
KeySpec spec = new PBEKeySpec(password, salt, 65536, 256);
SecretKey tmp = factory.generateSecret(spec);
SecretKey secret = new SecretKeySpec(tmp.getEncoded(), &quot;AES&quot;);
</code></pre>
<p>The magic numbers (which could be defined as constants somewhere) 65536 and 256 are the key derivation iteration count and the key size, respectively.</p>
<p>The key derivation function is iterated to require significant computational effort, and that prevents attackers from quickly trying many different passwords. The iteration count can be changed depending on the computing resources available.</p>
<p>The key size can be reduced to 128 bits, which is still considered &quot;strong&quot; encryption, but it doesn't give much of a safety margin if attacks are discovered that weaken AES.</p>
<p>Used with a proper block-chaining mode, the same derived key can be used to encrypt many messages. In <a href=""https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_(CBC)"" rel=""noreferrer"">Cipher Block Chaining (CBC)</a>, a random initialization vector (IV) is generated for each message, yielding different cipher text even if the plain text is identical. CBC may not be the most secure mode available to you (see AEAD below); there are many other modes with different security properties, but they all use a similar random input. In any case, the outputs of each encryption operation are the cipher text <em>and</em> the initialization vector:</p>
<pre><code>/* Encrypt the message. */
Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);
cipher.init(Cipher.ENCRYPT_MODE, secret);
AlgorithmParameters params = cipher.getParameters();
byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();
byte[] ciphertext = cipher.doFinal(&quot;Hello, World!&quot;.getBytes(StandardCharsets.UTF_8));
</code></pre>
<p>Store the <code>ciphertext</code> and the <code>iv</code>. On decryption, the <code>SecretKey</code> is regenerated in exactly the same way, using using the password with the same salt and iteration parameters. Initialize the cipher with this key <em>and</em> the initialization vector stored with the message:</p>
<pre><code>/* Decrypt the message, given derived key and initialization vector. */
Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);
cipher.init(Cipher.DECRYPT_MODE, secret, new IvParameterSpec(iv));
String plaintext = new String(cipher.doFinal(ciphertext), StandardCharsets.UTF_8);
System.out.println(plaintext);
</code></pre>
<hr />
<p>Java 7 included API <a href=""https://docs.oracle.com/javase/7/docs/api/javax/crypto/Cipher.html"" rel=""noreferrer"">support for AEAD cipher modes</a>, and the &quot;SunJCE&quot; provider included with OpenJDK and Oracle distributions implements these beginning with Java 8. One of these modes is strongly recommended in place of CBC; it will protect the integrity of the data as well as their privacy.</p>
<hr />
<p>A <code>java.security.InvalidKeyException</code> with the message &quot;Illegal key size or default parameters&quot; means that the cryptography strength <em>is</em> limited; the unlimited strength jurisdiction policy files are not in the correct location. In a JDK, they should be placed under <code>${jdk}/jre/lib/security</code></p>
<p>Based on the problem description, it sounds like the policy files are not correctly installed. Systems can easily have multiple Java runtimes; double-check to make sure that the correct location is being used.</p>
"
355177,"<p>By an ""anonymous class"", I take it you mean <a href=""http://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html"" rel=""noreferrer"">anonymous inner class</a>.</p>

<p>An anonymous inner class can come useful when making an instance of an object with certain ""extras"" such as overriding methods, without having to actually subclass a class.</p>

<p>I tend to use it as a shortcut for attaching an event listener:</p>

<pre><code>button.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        // do something
    }
});
</code></pre>

<p>Using this method makes coding a little bit quicker, as I don't need to make an extra class that implements <code>ActionListener</code> -- I can just instantiate an anonymous inner class without actually making a separate class.</p>

<p>I only use this technique for ""quick and dirty"" tasks where making an entire class feels unnecessary. Having multiple anonymous inner classes that do exactly the same thing should be refactored to an actual class, be it an inner class or a separate class.</p>
"
1757107,"<p>Try:</p>
<pre><code>public class Main { 
    public static void main(String[] args) {
        String line = &quot;foo,bar,c;qual=\&quot;baz,blurb\&quot;,d;junk=\&quot;quux,syzygy\&quot;&quot;;
        String[] tokens = line.split(&quot;,(?=(?:[^\&quot;]*\&quot;[^\&quot;]*\&quot;)*[^\&quot;]*$)&quot;, -1);
        for(String t : tokens) {
            System.out.println(&quot;&gt; &quot;+t);
        }
    }
}
</code></pre>
<p>Output:</p>
<pre><code>&gt; foo
&gt; bar
&gt; c;qual=&quot;baz,blurb&quot;
&gt; d;junk=&quot;quux,syzygy&quot;
</code></pre>
<p>In other words: <em>split on the comma only if that comma has zero, or an even number of quotes ahead of it</em>.</p>
<p>Or, a bit friendlier for the eyes:</p>
<pre><code>public class Main { 
    public static void main(String[] args) {
        String line = &quot;foo,bar,c;qual=\&quot;baz,blurb\&quot;,d;junk=\&quot;quux,syzygy\&quot;&quot;;
        
        String otherThanQuote = &quot; [^\&quot;] &quot;;
        String quotedString = String.format(&quot; \&quot; %s* \&quot; &quot;, otherThanQuote);
        String regex = String.format(&quot;(?x) &quot;+ // enable comments, ignore white spaces
                &quot;,                         &quot;+ // match a comma
                &quot;(?=                       &quot;+ // start positive look ahead
                &quot;  (?:                     &quot;+ //   start non-capturing group 1
                &quot;    %s*                   &quot;+ //     match 'otherThanQuote' zero or more times
                &quot;    %s                    &quot;+ //     match 'quotedString'
                &quot;  )*                      &quot;+ //   end group 1 and repeat it zero or more times
                &quot;  %s*                     &quot;+ //   match 'otherThanQuote'
                &quot;  $                       &quot;+ // match the end of the string
                &quot;)                         &quot;, // stop positive look ahead
                otherThanQuote, quotedString, otherThanQuote);

        String[] tokens = line.split(regex, -1);
        for(String t : tokens) {
            System.out.println(&quot;&gt; &quot;+t);
        }
    }
}
</code></pre>
<p>which produces the same as the first example.</p>
<h2>EDIT</h2>
<p>As mentioned by @MikeFHay in the comments:</p>
<blockquote>
<p>I prefer using <a href=""https://guava.dev/releases/23.0/api/docs/com/google/common/base/Splitter.html"" rel=""noreferrer"">Guava's Splitter</a>, as it has saner defaults (see discussion above about empty matches being trimmed by <code>String#split()</code>, so I did:</p>
<pre><code>Splitter.on(Pattern.compile(&quot;,(?=(?:[^\&quot;]*\&quot;[^\&quot;]*\&quot;)*[^\&quot;]*$)&quot;))
</code></pre>
</blockquote>
"
2605051,"<p>You can use the <a href=""https://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngine.html"" rel=""noreferrer""><code>ScriptEngine</code></a> class and evaluate it as a Javascript string.</p>

<pre><code>ScriptEngineManager manager = new ScriptEngineManager();
ScriptEngine engine = manager.getEngineByName(""js"");
Object result = engine.eval(""4*5"");
</code></pre>

<p>There may be a better way, but this one works.</p>
"
520339,"<p>Due to the dynamic nature of class loaders, this is not possible. Class loaders are not required to tell the VM which classes it can provide, instead they are just handed requests for classes, and have to return a class or throw an exception.</p>

<p>However, if you write your own class loaders, or examine the classpaths and it's jars, it's possible to find this information. This will be via filesystem operations though, and not reflection. There might even be libraries that can help you do this.</p>

<p>If there are classes that get generated, or delivered remotely, you will not be able to discover those classes.</p>

<p>The normal method is instead to somewhere register the classes you need access to in a file, or reference them in a different class. Or just use convention when it comes to naming.</p>

<p>Addendum: <a href=""https://github.com/ronmamo/reflections"" rel=""noreferrer"">The Reflections Library</a> will allow you to look up classes in the current classpath. It can be used to get all classes in a package:</p>

<pre><code> Reflections reflections = new Reflections(""my.project.prefix"");

 Set&lt;Class&lt;? extends Object&gt;&gt; allClasses = 
     reflections.getSubTypesOf(Object.class);
</code></pre>
"
12569609,"<p>With <a href=""http://commons.apache.org/lang/"" rel=""noreferrer"">Apache Commons Lang</a> 3.5 and above: <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/math/NumberUtils.html#isCreatable-java.lang.String-"" rel=""noreferrer""><code>NumberUtils.isCreatable</code></a> or <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/StringUtils.html#isNumeric-java.lang.CharSequence-"" rel=""noreferrer""><code>StringUtils.isNumeric</code></a>.</p>

<p>With <a href=""http://commons.apache.org/lang/"" rel=""noreferrer"">Apache Commons Lang</a> 3.4 and below: <a href=""https://commons.apache.org/proper/commons-lang/javadocs/api-3.4/org/apache/commons/lang3/math/NumberUtils.html#isNumber(java.lang.String)"" rel=""noreferrer""><code>NumberUtils.isNumber</code></a> or <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/StringUtils.html#isNumeric-java.lang.CharSequence-"" rel=""noreferrer""><code>StringUtils.isNumeric</code></a>.</p>

<p>You can also use <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/StringUtils.html#isNumericSpace-java.lang.CharSequence-"" rel=""noreferrer""><code>StringUtils.isNumericSpace</code></a> which returns <code>true</code> for empty strings  and ignores internal spaces in the string. Another way is to use <a href=""https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/math/NumberUtils.html#isParsable-java.lang.String-"" rel=""noreferrer""><code>NumberUtils.isParsable</code></a> which basically checks the number is parsable according to Java. (The linked javadocs contain detailed examples for each method.)</p>
"
3301720,"<p>Assuming no <code>SecurityManager</code> is preventing you from doing this, you can use <code>setAccessible</code> to get around <code>private</code> and resetting the modifier to get rid of <code>final</code>, and actually modify a <code>private static final</code> field.</p>
<p>Here's an example:</p>
<pre><code>import java.lang.reflect.*;

public class EverythingIsTrue {
   static void setFinalStatic(Field field, Object newValue) throws Exception {
      field.setAccessible(true);

      Field modifiersField = Field.class.getDeclaredField(&quot;modifiers&quot;);
      modifiersField.setAccessible(true);
      modifiersField.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);

      field.set(null, newValue);
   }
   public static void main(String args[]) throws Exception {      
      setFinalStatic(Boolean.class.getField(&quot;FALSE&quot;), true);

      System.out.format(&quot;Everything is %s&quot;, false); // &quot;Everything is true&quot;
   }
}
</code></pre>
<p>Assuming no <code>SecurityException</code> is thrown, the above code prints <code>&quot;Everything is true&quot;</code>.</p>
<p>What's actually done here is as follows:</p>
<ul>
<li>The primitive <code>boolean</code> values <code>true</code> and <code>false</code> in <code>main</code> are autoboxed to reference type <code>Boolean</code> &quot;constants&quot; <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code></li>
<li>Reflection is used to change the <a href=""http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/java/lang/Boolean.html#FALSE"" rel=""noreferrer""><code>public static final Boolean.FALSE</code></a> to refer to the <code>Boolean</code> referred to by <code>Boolean.TRUE</code></li>
<li>As a result, subsequently whenever a <code>false</code> is autoboxed to <code>Boolean.FALSE</code>, it refers to the same <code>Boolean</code> as the one refered to by <code>Boolean.TRUE</code></li>
<li>Everything that was <code>&quot;false&quot;</code> now is <code>&quot;true&quot;</code></li>
</ul>
<h3>Related questions</h3>
<ul>
<li><a href=""https://stackoverflow.com/questions/2474017/using-reflection-to-change-static-final-file-separatorchar-for-unit-testing/2474242#2474242"">Using reflection to change <code>static final File.separatorChar</code> for unit testing</a></li>
<li><a href=""https://stackoverflow.com/questions/2481862/how-to-limit-setaccessible-to-only-legitimate-uses"">How to limit setAccessible to only âlegitimateâ uses?</a>
<ul>
<li>Has examples of messing with <code>Integer</code>'s cache, mutating a <code>String</code>, etc</li>
</ul>
</li>
</ul>
<hr />
<h3>Caveats</h3>
<p>Extreme care should be taken whenever you do something like this. It may not work because a <code>SecurityManager</code> may be present, but even if it doesn't, depending on usage pattern, it may or may not work.</p>
<blockquote>
<p><a href=""http://java.sun.com/docs/books/jls/third_edition/html/memory.html#17.5.3"" rel=""noreferrer"">JLS 17.5.3 Subsequent Modification of Final Fields</a></p>
<p>In some cases, such as deserialization, the system will need to change the <code>final</code> fields of an object after construction. <code>final</code> fields can be changed via reflection and other implementation dependent means. The only pattern in which this has reasonable semantics is one in which an object is constructed and then the <code>final</code> fields of the object are updated. The object should not be made visible to other threads, nor should the <code>final</code> fields be read, until all updates to the <code>final</code> fields of the object are complete. Freezes of a <code>final</code> field occur both at the end of the constructor in which the <code>final</code> field is set, and immediately after each modification of a <code>final</code> field via reflection or other special mechanism.</p>
<p>Even then, there are a number of complications. If a <code>final</code> field is initialized to a compile-time constant in the field declaration, changes to the <code>final</code> field may not be observed, since uses of that <code>final</code> field are replaced at compile time with the compile-time constant.</p>
<p>Another problem is that the specification allows aggressive optimization of <code>final</code> fields. Within a thread, it is permissible to reorder reads of a <code>final</code> field with those modifications of a final field that do not take place in the constructor.</p>
</blockquote>
<h3>See also</h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.28"" rel=""noreferrer"">JLS 15.28 Constant Expression</a>
<ul>
<li>It's unlikely that this technique works with a primitive <code>private static final boolean</code>, because it's inlineable as a compile-time constant and thus the &quot;new&quot; value may not be observable</li>
</ul>
</li>
</ul>
<hr />
<h3>Appendix: On the bitwise manipulation</h3>
<p>Essentially,</p>
<pre><code>field.getModifiers() &amp; ~Modifier.FINAL
</code></pre>
<p>turns off the bit corresponding to <code>Modifier.FINAL</code> from <code>field.getModifiers()</code>. <code>&amp;</code> is the bitwise-and, and <code>~</code> is the bitwise-complement.</p>
<h3>See also</h3>
<ul>
<li><a href=""http://en.wikipedia.org/wiki/Bitwise_operations"" rel=""noreferrer"">Wikipedia/Bitwise operation</a></li>
</ul>
<hr />
<h3>Remember Constant Expressions</h3>
<p>Still not being able to solve this?, have fallen onto depression like I did for it? Does your code looks like this?</p>
<pre><code>public class A {
    private final String myVar = &quot;Some Value&quot;;
}
</code></pre>
<p>Reading the comments on this answer, specially the one by @Pshemo, it reminded me that <a href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.28"" rel=""noreferrer"">Constant Expressions</a> are handled different so it will be <strong>impossible</strong> to modify it. Hence you will need to change your code to look like this:</p>
<pre><code>public class A {
    private final String myVar;

    private A() {
        myVar = &quot;Some Value&quot;;
    }
}
</code></pre>
<p><em>if you are not the owner of the class... I feel you!</em></p>
<p>For more details about why this behavior <a href=""https://stackoverflow.com/questions/17506329/java-final-field-compile-time-constant-expression"">read this</a>?</p>
"
21116014,"<p>Use <a href=""https://github.com/powermock/powermock/wiki/Mockito"" rel=""noreferrer"">PowerMockito</a> on top of Mockito.</p>

<p>Example code:</p>

<pre><code>@RunWith(PowerMockRunner.class)
@PrepareForTest(DriverManager.class)
public class Mocker {

    @Test
    public void shouldVerifyParameters() throws Exception {

        //given
        PowerMockito.mockStatic(DriverManager.class);
        BDDMockito.given(DriverManager.getConnection(...)).willReturn(...);

        //when
        sut.execute(); // System Under Test (sut)

        //then
        PowerMockito.verifyStatic();
        DriverManager.getConnection(...);

    }
</code></pre>

<p>More information:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/4482315/why-does-mockito-not-mock-static-methods"">Why doesn&#39;t Mockito mock static methods?</a></li>
</ul>
"
1066647,"<p>What you want to do is put the console into ""raw"" mode (line editing bypassed and no enter key required) as opposed to ""cooked"" mode (line editing with enter key required.)  On UNIX systems, the 'stty' command can change modes.</p>

<p>Now, with respect to Java... see <a href=""http://www.darkcoding.net/software/non-blocking-console-io-is-not-possible/"" rel=""noreferrer"">Non blocking console input in Python and Java</a>.  Excerpt:</p>

<blockquote>
  <p>If your program must be console based,
  you have to switch your terminal out
  of line mode into character mode, and
  remember to restore it before your
  program quits. There is no portable
  way to do this across operating
  systems.</p>
</blockquote>

<p>One of the suggestions is to use JNI.  Again, that's not very portable.  Another suggestion at the end of the thread, and in common with the post above, is to look at using <a href=""http://sourceforge.net/projects/javacurses/"" rel=""noreferrer"">jCurses</a>.</p>
"
8801990,"<p><strong>This is working code. It wakes CPU every 10 minutes until the phone turns off.</strong></p>

<p>Add to Manifest.xml:</p>

<pre><code>...
&lt;uses-permission android:name=""android.permission.WAKE_LOCK""&gt;&lt;/uses-permission&gt;
...
&lt;receiver android:process="":remote"" android:name="".Alarm""&gt;&lt;/receiver&gt;
...
</code></pre>

<p>Code in your class:</p>

<pre><code>package yourPackage;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.PowerManager;
import android.widget.Toast;

public class Alarm extends BroadcastReceiver 
{    
    @Override
    public void onReceive(Context context, Intent intent) 
    {   
        PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
        PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, """");
        wl.acquire();

        // Put here YOUR code.
        Toast.makeText(context, ""Alarm !!!!!!!!!!"", Toast.LENGTH_LONG).show(); // For example

        wl.release();
    }

    public void setAlarm(Context context)
    {
        AlarmManager am =( AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
        Intent i = new Intent(context, Alarm.class);
        PendingIntent pi = PendingIntent.getBroadcast(context, 0, i, 0);
        am.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 1000 * 60 * 10, pi); // Millisec * Second * Minute
    }

    public void cancelAlarm(Context context)
    {
        Intent intent = new Intent(context, Alarm.class);
        PendingIntent sender = PendingIntent.getBroadcast(context, 0, intent, 0);
        AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
        alarmManager.cancel(sender);
    }
}
</code></pre>

<p><strong>Set Alarm from Service:</strong></p>

<pre><code>package yourPackage;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;

public class YourService extends Service
{
    Alarm alarm = new Alarm();
    public void onCreate()
    {
        super.onCreate();       
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) 
    {
        alarm.setAlarm(this);
        return START_STICKY;
    }

   @Override        
   public void onStart(Intent intent, int startId)
    {
        alarm.setAlarm(this);
    }

    @Override
    public IBinder onBind(Intent intent) 
    {
        return null;
    }
}
</code></pre>

<p><strong>If you want to set alarm repeating at phone boot time:</strong></p>

<p>Add permission and the service to Manifest.xml: </p>

<pre><code>&lt;uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""&gt;&lt;/uses-permission&gt;
...
&lt;receiver android:name="".AutoStart""&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=""android.intent.action.BOOT_COMPLETED""&gt;&lt;/action&gt;
    &lt;/intent-filter&gt;
&lt;/receiver&gt;
...
&lt;service
        android:name="".YourService""
        android:enabled=""true""
        android:process="":your_service"" &gt;
&lt;/service&gt;
</code></pre>

<p>And create a new class:</p>

<pre><code>package yourPackage;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

public class AutoStart extends BroadcastReceiver
{   
    Alarm alarm = new Alarm();
    @Override
    public void onReceive(Context context, Intent intent)
    {   
        if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED))
        {
            alarm.setAlarm(context);
        }
    }
}
</code></pre>
"
3542297,"<p>A bit decent web application consists of a mix of design patterns. I'll mention only the most important ones.</p>
<hr />
<h2><a href=""http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"" rel=""noreferrer"">Model View Controller pattern</a></h2>
<p>The core (architectural) design pattern you'd like to use is the <a href=""http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"" rel=""noreferrer"">Model-View-Controller pattern</a>. The <em>Controller</em> is to be represented by a Servlet which (in)directly creates/uses a specific <em>Model</em> and <em>View</em> based on the request. The <em>Model</em> is to be represented by Javabean classes. This is often further dividable in <em>Business Model</em> which contains the actions (behaviour) and <em>Data Model</em> which contains the data (information). The <em>View</em> is to be represented by JSP files which have direct access to the (<em>Data</em>) <em>Model</em> by EL (Expression Language).</p>
<p>Then, there are variations based on how actions and events are handled. The popular ones are:</p>
<ul>
<li><p><strong>Request (action) based MVC</strong>: this is the simplest to implement. The (<em>Business</em>) <em>Model</em> works directly with <code>HttpServletRequest</code> and <code>HttpServletResponse</code> objects. You have to gather, convert and validate the request parameters (mostly) yourself. The <em>View</em> can be represented by plain vanilla HTML/CSS/JS and it does not maintain state across requests. This is how among others <a href=""https://stackoverflow.com/tags/spring-mvc/info"">Spring MVC</a>, <a href=""https://stackoverflow.com/tags/struts/info"">Struts</a> and <a href=""https://stackoverflow.com/tags/stripes/info"">Stripes</a> works.</p>
</li>
<li><p><strong>Component based MVC</strong>: this is harder to implement. But you end up with a simpler model and view wherein all the &quot;raw&quot; Servlet API is abstracted completely away. You shouldn't have the need to gather, convert and validate the request parameters yourself. The <em>Controller</em> does this task and sets the gathered, converted and validated request parameters in the <em>Model</em>. All you need to do is to define action methods which works directly with the model properties. The <em>View</em> is represented by &quot;components&quot; in flavor of JSP taglibs or XML elements which in turn generates HTML/CSS/JS. The state of the <em>View</em> for the subsequent requests is maintained in the session. This is particularly helpful for server-side conversion, validation and value change events. This is how among others <a href=""https://stackoverflow.com/tags/jsf/info"">JSF</a>, <a href=""https://stackoverflow.com/tags/wicket/info"">Wicket</a> and <a href=""https://stackoverflow.com/tags/playframework/info"">Play!</a> works.</p>
</li>
</ul>
<p>As a side note, hobbying around with a homegrown MVC framework is a very nice learning exercise, and I do recommend it as long as you keep it for personal/private purposes. But once you go professional, then it's strongly recommended to pick an existing framework rather than reinventing your own. Learning an existing and well-developed framework takes in long term less time than developing and maintaining a robust framework yourself.</p>
<p>In the below detailed explanation I'll restrict myself to request based MVC since that's easier to implement.</p>
<hr />
<h2><a href=""http://en.wikipedia.org/wiki/Front_Controller_pattern"" rel=""noreferrer"">Front Controller pattern</a> (<a href=""http://en.wikipedia.org/wiki/Mediator_pattern"" rel=""noreferrer"">Mediator pattern</a>)</h2>
<p>First, the <em>Controller</em> part should implement the <a href=""http://en.wikipedia.org/wiki/Front_Controller_pattern"" rel=""noreferrer"">Front Controller pattern</a> (which is a specialized kind of <a href=""http://en.wikipedia.org/wiki/Mediator_pattern"" rel=""noreferrer"">Mediator pattern</a>). It should consist of only a single servlet which provides a centralized entry point of all requests. It should create the <em>Model</em> based on information available by the request, such as the pathinfo or servletpath, the method and/or specific parameters. The <em>Business Model</em> is called <code>Action</code> in the below <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>HttpServlet</code></a> example.</p>
<pre><code>protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    try {
        Action action = ActionFactory.getAction(request);
        String view = action.execute(request, response);

        if (view.equals(request.getPathInfo().substring(1)) {
            request.getRequestDispatcher(&quot;/WEB-INF/&quot; + view + &quot;.jsp&quot;).forward(request, response);
        }
        else {
            response.sendRedirect(view); // We'd like to fire redirect in case of a view change as result of the action (PRG pattern).
        }
    }
    catch (Exception e) {
        throw new ServletException(&quot;Executing action failed.&quot;, e);
    }
}
</code></pre>
<p>Executing the action should return some identifier to locate the view. Simplest would be to use it as filename of the JSP. Map this servlet on a specific <code>url-pattern</code> in <code>web.xml</code>, e.g. <code>/pages/*</code>, <code>*.do</code> or even just <code>*.html</code>.</p>
<p>In case of prefix-patterns as for example <code>/pages/*</code> you could then invoke URL's like <a href=""http://example.com/pages/register"" rel=""noreferrer"">http://example.com/pages/register</a>, <a href=""http://example.com/pages/login"" rel=""noreferrer"">http://example.com/pages/login</a>, etc and provide <code>/WEB-INF/register.jsp</code>, <code>/WEB-INF/login.jsp</code> with the appropriate GET and POST actions. The parts <code>register</code>, <code>login</code>, etc are then available by <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPathInfo--"" rel=""noreferrer""><code>request.getPathInfo()</code></a> as in above example.</p>
<p>When you're using suffix-patterns like <code>*.do</code>, <code>*.html</code>, etc, then you could then invoke URL's like <a href=""http://example.com/register.do"" rel=""noreferrer"">http://example.com/register.do</a>, <a href=""http://example.com/login.do"" rel=""noreferrer"">http://example.com/login.do</a>, etc and you should change the code examples in this answer (also the <code>ActionFactory</code>) to extract the <code>register</code> and <code>login</code> parts by <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getServletPath--"" rel=""noreferrer""><code>request.getServletPath()</code></a> instead.</p>
<hr />
<h2><a href=""http://en.wikipedia.org/wiki/Strategy_pattern"" rel=""noreferrer"">Strategy pattern</a></h2>
<p>The <code>Action</code> should follow the <a href=""http://en.wikipedia.org/wiki/Strategy_pattern"" rel=""noreferrer"">Strategy pattern</a>. It needs to be defined as an abstract/interface type which should do the work based on the <em>passed-in</em> arguments of the abstract method (this is the difference with the <a href=""http://en.wikipedia.org/wiki/Command_pattern"" rel=""noreferrer"">Command pattern</a>, wherein the abstract/interface type should do the work based on the arguments which are been passed-in during the <em>creation</em> of the implementation).</p>
<pre><code>public interface Action {
    public String execute(HttpServletRequest request, HttpServletResponse response) throws Exception;
}
</code></pre>
<p>You may want to make the <code>Exception</code> more specific with a custom exception like <code>ActionException</code>. It's just a basic kickoff example, the rest is all up to you.</p>
<p>Here's an example of a <code>LoginAction</code> which (as its name says) logs in the user. The <code>User</code> itself is in turn a <em>Data Model</em>. The <em>View</em> is aware of the presence of the <code>User</code>.</p>
<pre><code>public class LoginAction implements Action {

    public String execute(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String username = request.getParameter(&quot;username&quot;);
        String password = request.getParameter(&quot;password&quot;);
        User user = userDAO.find(username, password);

        if (user != null) {
            request.getSession().setAttribute(&quot;user&quot;, user); // Login user.
            return &quot;home&quot;; // Redirect to home page.
        }
        else {
            request.setAttribute(&quot;error&quot;, &quot;Unknown username/password. Please retry.&quot;); // Store error message in request scope.
            return &quot;login&quot;; // Go back to redisplay login form with error.
        }
    }

}
</code></pre>
<hr />
<h2><a href=""http://en.wikipedia.org/wiki/Abstract_factory_pattern"" rel=""noreferrer"">Factory method pattern</a></h2>
<p>The <code>ActionFactory</code> should follow the <a href=""http://en.wikipedia.org/wiki/Factory_method"" rel=""noreferrer"">Factory method pattern</a>. Basically, it should provide a creational method which returns a concrete implementation of an abstract/interface type. In this case, it should return an implementation of the <code>Action</code> interface based on the information provided by the request. For example, the <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getMethod--"" rel=""noreferrer"">method</a> and <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPathInfo--"" rel=""noreferrer"">pathinfo</a> (the pathinfo is the part after the context and servlet path in the request URL, excluding the query string).</p>
<pre><code>public static Action getAction(HttpServletRequest request) {
    return actions.get(request.getMethod() + request.getPathInfo());
}
</code></pre>
<p>The <code>actions</code> in turn should be some static/applicationwide <code>Map&lt;String, Action&gt;</code> which holds all known actions. It's up to you how to fill this map. Hardcoding:</p>
<pre><code>actions.put(&quot;POST/register&quot;, new RegisterAction());
actions.put(&quot;POST/login&quot;, new LoginAction());
actions.put(&quot;GET/logout&quot;, new LogoutAction());
// ...
</code></pre>
<p>Or configurable based on a properties/XML configuration file in the classpath: (pseudo)</p>
<pre><code>for (Entry entry : configuration) {
    actions.put(entry.getKey(), Class.forName(entry.getValue()).newInstance());
}
</code></pre>
<p>Or dynamically based on a scan in the classpath for classes implementing a certain interface and/or annotation: (pseudo)</p>
<pre><code>for (ClassFile classFile : classpath) {
    if (classFile.isInstanceOf(Action.class)) {
       actions.put(classFile.getAnnotation(&quot;mapping&quot;), classFile.newInstance());
    }
}
</code></pre>
<p>Keep in mind to create a &quot;do nothing&quot; <code>Action</code> for the case there's no mapping. Let it for example return directly the <code>request.getPathInfo().substring(1)</code> then.</p>
<hr />
<h3>Other patterns</h3>
<p>Those were the important patterns so far.</p>
<p>To get a step further, you could use the <a href=""http://en.wikipedia.org/wiki/Facade_pattern"" rel=""noreferrer"">Facade pattern</a> to create a <code>Context</code> class which in turn wraps the request and response objects and offers several convenience methods delegating to the request and response objects and pass that as argument into the <code>Action#execute()</code> method instead. This adds an extra abstract layer to hide the raw Servlet API away. You should then basically end up with <strong>zero</strong> <code>import javax.servlet.*</code> declarations in every <code>Action</code> implementation. In JSF terms, this is what the <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/context/FacesContext.html"" rel=""noreferrer""><code>FacesContext</code></a> and <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/context/ExternalContext.html"" rel=""noreferrer""><code>ExternalContext</code></a> classes are doing. You can find a concrete example in <a href=""https://stackoverflow.com/questions/4764285/retrieving-web-session-from-a-pojo-outside-the-web-container/4764894#4764894"">this answer</a>.</p>
<p>Then there's the <a href=""http://en.wikipedia.org/wiki/State_pattern"" rel=""noreferrer"">State pattern</a> for the case that you'd like to add an extra abstraction layer to split the tasks of gathering the request parameters, converting them, validating them, updating the model values and execute the actions. In JSF terms, this is what the <a href=""http://download.oracle.com/javaee/7/api/javax/faces/lifecycle/Lifecycle.html"" rel=""noreferrer""><code>LifeCycle</code></a> is doing.</p>
<p>Then there's the <a href=""http://en.wikipedia.org/wiki/Composite_pattern"" rel=""noreferrer"">Composite pattern</a> for the case that you'd like to create a component based view which can be attached with the model and whose behaviour depends on the state of the request based lifecycle. In JSF terms, this is what the <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/component/UIComponent.html"" rel=""noreferrer""><code>UIComponent</code></a> represent.</p>
<p>This way you can evolve bit by bit towards a component based framework.</p>
<hr />
<h3>See also:</h3>
<ul>
<li><a href=""https://stackoverflow.com/questions/1673841"">Examples of GoF Design Patterns in Java&#39;s core libraries</a></li>
<li><a href=""https://stackoverflow.com/questions/4801891"">Difference between Request MVC and Component MVC</a></li>
<li><a href=""https://stackoverflow.com/questions/5003142"">Show JDBC ResultSet in HTML in JSP page using MVC and DAO pattern</a></li>
<li><a href=""https://stackoverflow.com/questions/5104094"">What components are MVC in JSF MVC framework?</a></li>
<li><a href=""https://stackoverflow.com/questions/30639785"">JSF Controller, Service and DAO</a></li>
</ul>
"
2811101,"<p>You need something along the lines of this:</p>

<pre><code>DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
DocumentBuilder builder = factory.newDocumentBuilder();
Document doc = builder.parse(&lt;uri_as_string&gt;);
XPathFactory xPathfactory = XPathFactory.newInstance();
XPath xpath = xPathfactory.newXPath();
XPathExpression expr = xpath.compile(&lt;xpath_expression&gt;);
</code></pre>

<p>Then you call <code>expr.evaluate()</code> passing in the document defined in that code and the return type you are expecting, and cast the result to the object type of the result.</p>

<p>If you need help with a specific XPath expressions, you should probably ask it as separate questions (unless that was your question in the first place here - I understood your question to be how to use the API in Java).</p>

<p>Edit: (Response to comment): This XPath expression will get you the text of the first URL element under PowerBuilder:</p>

<pre><code>/howto/topic[@name='PowerBuilder']/url/text()
</code></pre>

<p>This will get you the second:</p>

<pre><code>/howto/topic[@name='PowerBuilder']/url[2]/text()
</code></pre>

<p>You get that with this code:</p>

<pre><code>expr.evaluate(doc, XPathConstants.STRING);
</code></pre>

<p>If you don't know how many URLs are in a given node, then you should rather do something like this:</p>

<pre><code>XPathExpression expr = xpath.compile(""/howto/topic[@name='PowerBuilder']/url"");
NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
</code></pre>

<p>And then loop over the NodeList.</p>
"
1566026,"<p>You can increase to <code>2GB</code> on a <code>32</code> bit system. If you're on a 64 bit system you can go higher. No need to worry if you've chosen incorrectly, if you ask for 5g on a 32 bit system java will complain about an invalid value and quit.</p>
<p>As others have posted, use the cmd-line flags - e.g.</p>
<pre><code>java -Xmx6g myprogram
</code></pre>
<p>You can get a full list (or a nearly full list, anyway) by typing java -X.</p>
"
362006,"<p>Unfortunately, the <code>file.encoding</code> property has to be specified as the JVM starts up; by the time your main method is entered, the character encoding used by <code>String.getBytes()</code> and the default constructors of <code>InputStreamReader</code> and <code>OutputStreamWriter</code> has been permanently cached.</p>

<p>As <a href=""https://stackoverflow.com/a/623036/3474"">Edward Grech points out,</a> in a special case like this, the environment variable <code>JAVA_TOOL_OPTIONS</code> <em>can</em> be used to specify this property, but it's normally done like this:</p>

<pre><code>java -Dfile.encoding=UTF-8 â¦ com.x.Main
</code></pre>

<p><code>Charset.defaultCharset()</code> will reflect changes to the <code>file.encoding</code> property, but most of the code in the core Java libraries that need to determine the default character encoding do not use this mechanism.</p>

<p>When you are encoding or decoding, you can query the <code>file.encoding</code> property or <code>Charset.defaultCharset()</code> to find the current default encoding, and use the appropriate method or constructor overload to specify it.</p>
"
322875,"<p>As others have mentioned, you'll probably want to use the <a href=""https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html"" rel=""noreferrer""><code>BigDecimal</code></a> class, if you want to have an exact representation of 11.4.</p>

<p>Now, a little explanation into why this is happening:</p>

<p>The <code>float</code> and <code>double</code> primitive types in Java are <a href=""http://en.wikipedia.org/wiki/Floating_point"" rel=""noreferrer"">floating point</a> numbers, where the number is stored as a binary representation of a fraction and a exponent.</p>

<p>More specifically, a double-precision floating point value such as the <code>double</code> type is a 64-bit value, where:</p>

<ul>
<li>1 bit denotes the sign (positive or negative).</li>
<li>11 bits for the exponent.</li>
<li>52 bits for the significant digits (the fractional part as a binary).</li>
</ul>

<p>These parts are combined to produce a <code>double</code> representation of a value.</p>

<p>(Source: <a href=""http://en.wikipedia.org/wiki/Double_precision"" rel=""noreferrer"">Wikipedia: Double precision</a>)</p>

<p>For a detailed description of how floating point values are handled in Java, see the <a href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.3"" rel=""noreferrer"">Section 4.2.3: Floating-Point Types, Formats, and Values</a> of the Java Language Specification.</p>

<p>The <code>byte</code>, <code>char</code>, <code>int</code>, <code>long</code> types are <a href=""http://en.wikipedia.org/wiki/Fixed-point_arithmetic"" rel=""noreferrer"">fixed-point</a> numbers, which are exact representions of numbers. Unlike fixed point numbers, floating point numbers will some times (safe to assume ""most of the time"") not be able to return an exact representation of a number. This is the reason why you end up with <code>11.399999999999</code> as the result of <code>5.6 + 5.8</code>.</p>

<p>When requiring a value that is exact, such as 1.5 or 150.1005, you'll want to use one of the fixed-point types, which will be able to represent the number exactly.</p>

<p>As has been mentioned several times already, Java has a <a href=""https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html"" rel=""noreferrer""><code>BigDecimal</code></a> class which will handle very large numbers and very small numbers. </p>

<p>From the Java API Reference for the <code>BigDecimal</code> class:</p>

<blockquote>
  <p>Immutable,
  arbitrary-precision signed decimal
  numbers. A BigDecimal consists of an
  arbitrary precision integer unscaled
  value and a 32-bit integer scale. If
  zero or positive, the scale is the
  number of digits to the right of the
  decimal point. If negative, the
  unscaled value of the number is
  multiplied by ten to the power of the
  negation of the scale. The value of
  the number represented by the
  BigDecimal is therefore (unscaledValue
  Ã 10^-scale).</p>
</blockquote>

<p>There has been many questions on Stack Overflow relating to the matter of floating point numbers and its precision. Here is a list of related questions that may be of interest:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/177506/why-do-i-see-a-double-variable-initialized-to-some-value-like-214-as-2139999961"">Why do I see a double variable initialized to some value like 21.4 as 21.399999618530273?</a></li>
<li><a href=""https://stackoverflow.com/questions/240876/print-really-big-numbers"">How to print really big numbers in C++</a></li>
<li><a href=""https://stackoverflow.com/questions/56947/how-is-floating-point-stored-when-does-it-matter"">How is floating point stored? When does it matter?</a></li>
<li><a href=""https://stackoverflow.com/questions/61872/use-float-or-decimal-for-accounting-application-dollar-amount"">Use Float or Decimal for Accounting Application Dollar Amount?</a></li>
</ul>

<p>If you really want to get down to the nitty gritty details of floating point numbers, take a look at <a href=""http://docs.sun.com/source/806-3568/ncg_goldberg.html"" rel=""noreferrer"">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>.</p>
"
3572233,"<p>As per the <a href=""http://download-llnw.oracle.com/javase/6/docs/api/java/util/Scanner.html"" rel=""noreferrer"">javadoc</a> for Scanner:</p>

<blockquote>
  <p>When a scanner throws an
  InputMismatchException, the scanner
  will not pass the token that caused
  the exception, so that it may be
  retrieved or skipped via some other
  method.</p>
</blockquote>

<p>That means that if the next token is not an <code>int</code>, it throws the <code>InputMismatchException</code>, but the token stays there. So on the next iteration of the loop, <code>reader.nextInt()</code> reads the same token again and throws the exception again. What you need is to use it up. Add a <code>reader.next()</code> inside your <code>catch</code> to consume the token, which is invalid and needs to be discarded.</p>

<pre><code>...
} catch (InputMismatchException e) {
    System.out.println(""Invalid value!"");
    reader.next(); // this consumes the invalid token
} 
</code></pre>
"
3329629,"<p>You may use <code>@JsonIgnore</code> to break the cycle (<a href=""https://github.com/FasterXML/jackson-annotations#annotations-for-ignoring-properties"" rel=""noreferrer"">reference</a>).</p>
<p>You need to import <code>org.codehaus.jackson.annotate.JsonIgnore</code> (legacy versions) or <code>com.fasterxml.jackson.annotation.JsonIgnore</code> (current versions).</p>
"
22458766,"<p>I always prefer to read input using <code>nextLine()</code> and then parse the string.</p>

<p>Using <code>next()</code> will only return what comes before the delimiter (defaults to whitespace). <code>nextLine()</code> automatically moves the scanner down after returning the current line.</p>

<p>A useful tool for parsing data from <code>nextLine()</code> would be <code>str.split(""\\s+"")</code>.</p>

<pre><code>String data = scanner.nextLine();
String[] pieces = data.split(""\\s+"");
// Parse the pieces
</code></pre>

<p>For more information regarding the Scanner class or String class refer to the following links.</p>

<p>Scanner: <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html"" rel=""noreferrer"">http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html</a></p>

<p>String: <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html"" rel=""noreferrer"">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html</a></p>
"
49065337,"<h1><code>String::repeat</code></h1>
<pre><code>&quot;. &quot;.repeat(7)  // Seven period-with-space pairs: . . . . . . . 
</code></pre>
<p><a href=""https://bugs.openjdk.java.net/browse/JDK-8197594"" rel=""noreferrer"">New in Java 11</a> is the method <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#repeat(int)"" rel=""noreferrer""><code>String::repeat</code></a> that does exactly what you asked for:</p>
<pre><code>String str = &quot;abc&quot;;
String repeated = str.repeat(3);
repeated.equals(&quot;abcabcabc&quot;);
</code></pre>
<p>Its <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#repeat(int)"" rel=""noreferrer"">Javadoc</a> says:</p>
<pre><code>/**
 * Returns a string whose value is the concatenation of this
 * string repeated {@code count} times.
 * &lt;p&gt;
 * If this string is empty or count is zero then the empty
 * string is returned.
 *
 * @param count number of times to repeat
 *
 * @return A string composed of this string repeated
 * {@code count} times or the empty string if this
 * string is empty or count is zero
 *
 * @throws IllegalArgumentException if the {@code count} is
 * negative.
 *
 * @since 11
 */ 
</code></pre>
"
1915197,"<p>If it is an auto generated key, then you can use <a href=""http://docs.oracle.com/javase/7/docs/api/java/sql/Statement.html#getGeneratedKeys%28%29"" rel=""noreferrer""><code>Statement#getGeneratedKeys()</code></a> for this. You need to call it on the same <code>Statement</code> as the one being used for the <code>INSERT</code>. You first <strong>need</strong> to create the statement using <a href=""http://docs.oracle.com/javase/7/docs/api/java/sql/Statement.html#RETURN_GENERATED_KEYS"" rel=""noreferrer""><code>Statement.RETURN_GENERATED_KEYS</code></a> to notify the JDBC driver to return the keys. </p>

<p>Here's a basic example:</p>

<pre><code>public void create(User user) throws SQLException {
    try (
        Connection connection = dataSource.getConnection();
        PreparedStatement statement = connection.prepareStatement(SQL_INSERT,
                                      Statement.RETURN_GENERATED_KEYS);
    ) {
        statement.setString(1, user.getName());
        statement.setString(2, user.getPassword());
        statement.setString(3, user.getEmail());
        // ...

        int affectedRows = statement.executeUpdate();

        if (affectedRows == 0) {
            throw new SQLException(""Creating user failed, no rows affected."");
        }

        try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
            if (generatedKeys.next()) {
                user.setId(generatedKeys.getLong(1));
            }
            else {
                throw new SQLException(""Creating user failed, no ID obtained."");
            }
        }
    }
}
</code></pre>

<p>Note that you're dependent on the JDBC driver as to whether it works. Currently, most of the last versions will work, but if I am correct, Oracle JDBC driver is still somewhat troublesome with this. MySQL and DB2 already supported it for ages. PostgreSQL started to support it not long ago. I can't comment about MSSQL as I've never used it.</p>

<p>For Oracle, you can invoke a <code>CallableStatement</code> with a <code>RETURNING</code> clause or a <code>SELECT CURRVAL(sequencename)</code> (or whatever DB-specific syntax to do so) directly after the <code>INSERT</code> in the same transaction to obtain the last generated key. See also <a href=""https://stackoverflow.com/questions/3552260/plsql-jdbc-how-to-get-last-row-id/3552353#3552353"">this answer</a>.</p>
"
3615757,"<p>From the <a href=""http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#toString%28%29"" rel=""nofollow noreferrer""><code>Object.toString</code></a> docs:</p>

<blockquote>
  <p>Returns a string representation of the
  object. In general, the <code>toString</code>
  method returns a string that
  ""textually represents"" this object.
  The result should be a concise but
  informative representation that is
  easy for a person to read. It is
  recommended that all subclasses
  override this method. </p>
  
  <p>The <code>toString</code> method for class <code>Object</code>
  returns a string consisting of the
  name of the class of which the object
  is an instance, the at-sign character
  `@', and the unsigned hexadecimal
  representation of the hash code of the
  object. In other words, this method
  returns a string equal to the value
  of:</p>
</blockquote>

<pre><code>getClass().getName() + '@' + Integer.toHexString(hashCode())
</code></pre>

<p>Example:</p>

<pre><code>String[] mystr ={""a"",""b"",""c""};
System.out.println(""mystr.toString: "" + mystr.toString());

output:- mystr.toString: [Ljava.lang.String;@13aaa14a
</code></pre>
"
671052,"<p>See this <a href=""http://docs.oracle.com/javase/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html"" rel=""noreferrer"">thread by Sun on why they deprecated <code>Thread.stop()</code></a>.  It goes into detail about why this was a bad method and what should be done to safely stop threads in general.  </p>

<p>The way they recommend is to use a shared variable as a flag which asks the background thread to stop.  This variable can then be set by a different object requesting the thread terminate.  </p>
"
1464366,"<p>With the directory on the classpath, from a class loaded by the same classloader, you should be able to use either of:</p>

<pre><code>// From ClassLoader, all paths are ""absolute"" already - there's no context
// from which they could be relative. Therefore you don't need a leading slash.
InputStream in = this.getClass().getClassLoader()
                                .getResourceAsStream(""SomeTextFile.txt"");
// From Class, the path is relative to the package of the class unless
// you include a leading slash, so if you don't want to use the current
// package, include a slash like this:
InputStream in = this.getClass().getResourceAsStream(""/SomeTextFile.txt"");
</code></pre>

<p>If those aren't working, that suggests something else is wrong.</p>

<p>So for example, take this code:</p>

<pre><code>package dummy;

import java.io.*;

public class Test
{
    public static void main(String[] args)
    {
        InputStream stream = Test.class.getResourceAsStream(""/SomeTextFile.txt"");
        System.out.println(stream != null);
        stream = Test.class.getClassLoader().getResourceAsStream(""SomeTextFile.txt"");
        System.out.println(stream != null);
    }
}
</code></pre>

<p>And this directory structure:</p>

<pre><code>code
    dummy
          Test.class
txt
    SomeTextFile.txt
</code></pre>

<p>And then (using the Unix path separator as I'm on a Linux box):</p>

<pre><code>java -classpath code:txt dummy.Test
</code></pre>

<p>Results:</p>

<pre><code>true
true
</code></pre>
"
49221353,"<blockquote>
<p>I didn't find how I can get the file from the Uri.</p>
</blockquote>
<p>There is no file. <code>ACTION_OPEN_DOCUMENT</code> and <code>ACTION_GET_CONTENT</code> do not open a file. They open a document. That document <em>might</em> be a file. It might not.
That <code>Uri</code> might point to:</p>
<ul>
<li>A local file on external storage</li>
<li>A local file on internal storage for the other app</li>
<li>A local file on removable storage</li>
<li>A local file that is encrypted and needs to be decrypted on the fly</li>
<li>A stream of bytes held in a <code>BLOB</code> column in a database</li>
<li>A piece of content that needs to be downloaded by the other app first</li>
<li>...and so on</li>
</ul>
<blockquote>
<p>How can I get the real path of the file ?</p>
</blockquote>
<p>You don't.</p>
<p>If you wish to only accept files, integrate <a href=""https://android-arsenal.com/tag/35"" rel=""nofollow noreferrer"">a file chooser library</a> instead of using <code>ACTION_OPEN_DOCUMENT</code> or
<code>ACTION_GET_CONTENT</code>. Just bear in mind that filesystem access to external storage is limited on Android 10+.</p>
<p>If you use <code>ACTION_GET_CONTENT</code>, and the scheme of the <code>Uri</code> that you get is <code>file</code>, then <code>getPath()</code> will be a filesystem path.</p>
<p>Otherwise, you need to understand that <em>you have no idea where the document is coming from</em>, and stop thinking in terms of &quot;real path of the file&quot;. Use <code>ContentResolver</code> and <code>openInputStream()</code> to make a copy of the content to some file that you control, then work with that file.</p>
"
