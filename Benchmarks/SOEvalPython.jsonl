{"task_id": "23435270", "prompt": "import re\ndef extract_number_from_string(string)->list:\n    '''\n    Extracts all numbers from a string and returns them as a list.\n    \n    Example:\n    extract_number_from_string('abc123def456ghi') -> [123, 456]\n    extract_number_from_string('abc123def456ghi789') -> [123, 456, 789]\n    '''"}
{"task_id": "2371436", "prompt": "def eval_mathematical_expression(expression: str) -> int:\n    '''\n    Evaluate a mathematical expression.\n\n    Example:\n        eval_mathematical_expression('1 + 2 * 3') -> 7\n    '''"}
{"task_id": "613183", "prompt": "def sort_dictionary_by_value(d: dict) -> list:\n    '''\n    Return a list of tuples sorted by the value in descending order.\n    \n    Example:\n    sort_dictionary_by_value({'a': 1, 'b': 2, 'c': 3}) -> [('c', 3), ('b', 2), ('a', 1)]\n    '''"}
{"task_id": "20449427", "prompt": "def read_int(prompt: str) -> int:\n    '''\n    Return an integer read from the user input.\n\n    Example:\n    read_int('Enter an integer: ') -> 1\n    read_int('Enter your age: ') -> 21\n    '''"}
{"task_id": "31726643", "prompt": "import matplotlib.pyplot as plt\n\ndef subplot(x:list, y:list, nrows:int, ncols:int):\n    '''\n    Create a subplot with nrows rows and ncols columns and plot the data in x and y\n    '''"}
{"task_id": "209840", "prompt": "def make_dictionary(key:list, value:list) -> dict:\n    '''\n    Make a dictionary from two lists.\n    \n    Example:\n    make_dictionary(['a', 'b'], [1, 2]) -> {'a': 1, 'b': 2}\n    make_dictionary(['a', 'b'], [1]) -> {'a': 1}\n    '''"}
{"task_id": "606191", "prompt": "def convert_byte_to_string(byte):\n    '''\n    Convert byte to string\n    \n    Example:\n    convert_byte_to_string(b'Hello') -> 'Hello'\n    convert_byte_to_string(b'World') -> 'World'\n    '''"}
{"task_id": "952914", "prompt": "def make_flat_list(list_of_lists: list) -> list:\n    '''\n    Return a list containing all the items in the list of lists passed in.\n    The order of the items in the returned list should be the same as the\n    order of the lists in the list of lists.\n    The order of the items in each list should be the same as the order of\n    the items in the original list of lists.\n    The returned list should not contain any nested lists.\n\n    Example:\n    make_flat_list([[1, 2], [3, 4], [5, 6]])\n    -> [1, 2, 3, 4, 5, 6]\n\n    make_flat_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''"}
{"task_id": "19913659", "prompt": "import pandas as pd\n\ndef create_column(df: pd.DataFrame, criteria_column: str, criteria: str, new_column_name: str)-> pd.DataFrame:\n    '''\n    Create a new boolean column with new_column_name in the DataFrame, df, based on the criteria applied to the criteria_column.\n    \n    Example:\n        create_column({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', 2, 'c') -> {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [False, True, False]}, \n    '''"}
{"task_id": "12453580", "prompt": "def concatenate_list_of_strings(list_of_strings:list, separator:str) -> str:\n    '''\n    Concatenate a list of strings with a separator.\n    \n    Example:\n    concatenate_list_of_strings(['a', 'b', 'c'], '-') -> 'a-b-c'\n    concatenate_list_of_strings(['a', 'b', 'c'], '') -> 'abc'\n    '''"}
{"task_id": "466345", "prompt": "from datetime import datetime\n\ndef convert_string_to_datetime(date_string: str) -> datetime:\n    '''\n    Convert a string to a datetime object.\n\n    Example:\n    convert_string_to_datetime('2018-01-01 00:00:00') -> datetime.datetime(2018, 1, 1, 0, 0)\n    '''"}
{"task_id": "39922986", "prompt": "import pandas as pd\n\ndef get_sum_by_group(df: pd.DataFrame, groups:list, sum_col:str) -> pd.DataFrame:\n    \"\"\"\n    Return a dataframe with the sum of the sum_col grouped by the groups.\n\n    Example:\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 11}, {a: 2, c: 15}\n    get_sum_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6}, {a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    \"\"\""}
{"task_id": "1912434", "prompt": "import xml.etree.ElementTree as ET\n\ndef get_attr_values_by_tag(xml: str, tag: str, attr: str) -> list:\n    '''\n    Get a list of attribute values for a given tag in an XML string.\n\n    Example:\n    get_attr_values_by_tag('<a><b x=\"1\"/><b x=\"2\"/><b x=\"3\"/></a>', 'b', 'x') -> ['1', '2', '3']\n    '''"}
{"task_id": "28654047", "prompt": "import pandas as pd\n\ndef convert_rows_to_columns(df: pd.DataFrame) -> pd.DataFrame:\n    '''\n    Convert rows to columns of a dataframe.\n\n    Example:\n    convert_rows_to_columns(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})) -> pd.DataFrame({'0': [1, 2, 3], '1': [4, 5, 6]})\n    '''"}
{"task_id": "38987", "prompt": "def merge_dictionary(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    \n    Example:\n    merge_dictionary({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) -> {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'd': 4}) -> {'a': 3, 'b': 2, 'd': 4}\n    merge_dictionary({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) -> {'a': 3, 'b': 4}\n    '''"}
{"task_id": "16476924", "prompt": "import pandas as pd\n\ndef iterate_row(df: pd.DataFrame):\n    '''\n    Iterate over rows of a DataFrame and print the row index and the row content.\n    '''"}
{"task_id": "47152691", "prompt": "import pandas as pd\n\ndef pivot_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Pivot the dataframe so that the column names are the values of the column 'name'\n    and the values are the values of the column 'value'.\n\n    Example:\n    pivot_dataframe(pd.DataFrame({'id': [1, 2, 3], 'name': ['a', 'b', 'c'], 'value': [1, 2, 3]}))\n    -> pd.DataFrame({'a': [1, np.nan, np.nan], 'b': [np.nan, 2, np.nan], 'c': [np.nan, np.nan, 3]})\n    \"\"\""}
{"task_id": "1207406", "prompt": "def remove_items_from_list(list1: list, list2: list) -> list:\n    '''\n    Remove all items from list1 that are in list2.\n\n    Example:\n    remove_items_from_list([1, 2, 3], [2, 3, 4])\n    -> [1]\n\n    remove_items_from_list([1, 2, 3], [4, 5, 6])\n    -> [1, 2, 3]\n    '''"}
{"task_id": "29640685", "prompt": "import pygame\npygame.init()\nwindow = pygame.display.set_mode((250, 250))\nrect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)\n\n#Define the sprite class\nclass Sprite:\n    def __init__(self, x, y, name):\n        self.image = pygame.image.load(name)\n        self.rect = self.image.get_rect(topleft = (x, y))\n\n    def render(self):\n        window.blit(self.image, self.rect)\n\n# Define the bullet class to create bullets          \nclass Bullet:\n    def __init__(self, x, y):\n        self.bullet = pygame.image.load(\"user_bullet.BMP\")\n        self.rect = self.bullet.get_rect(topleft = (x + 23, y))\n\n    def render(self):\n        window.blit(self.bullet, self.rect)\n\n\ndef detect_collision(sprite, bullet):\n    '''\n    Return True if the sprite and bullet collide and False otherwise.\n    '''"}
{"task_id": "72899", "prompt": "def sort_list_of_dicts(lst: list, key: str) -> list:\n    '''\n    Sort a list of dictionaries by a key.\n    \n    Example:\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'a') -> [{'a': 1}, {'a': 2}]\n    sort_list_of_dicts([{'a': 2}, {'a': 1}], 'b') -> [{'a': 2}, {'a': 1}]\n    '''"}
{"task_id": "22219004", "prompt": "import pandas as pd\n\ndef create_list_by_grouping(df: pd.DataFrame, group_by: str, column: str) -> list:\n    '''\n    Create a list of lists by grouping a column of a DataFrame.\n\n    Example:\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'a', 'b') -> [[1, 2], [3]]\n    create_list_by_grouping(pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 3]}), 'b', 'a') -> [[1], [1], [2]]\n    '''"}
{"task_id": "743806", "prompt": "def split_string(string: list, separator: str) -> list:\n    '''\n    Split a string into a list of strings.\n    \n    Example:\n    split_string('a-b-c', '-') -> ['a', 'b', 'c']\n    split_string('abc', '') -> ['a', 'b', 'c']\n    '''"}
{"task_id": "1894269", "prompt": "def str_to_list(list_string: str) -> list:\n    '''\n    Convert a string representation of a list to a list.\n\n    Example:\n        list_string_to_list('[1, 2, 3]') -> [1, 2, 3]\n    '''"}
{"task_id": "988228", "prompt": "import json\ndef convert_string_to_dictionary(string: str) -> dict:\n    '''\n    Convert string to dictionary\n    \n    Example:\n    convert_string_to_dictionary('{\"a\": 1, \"b\": 2}') -> {'a': 1, 'b': 2}\n    convert_string_to_dictionary('{\"a\": 2, \"b\": 3}') -> {'a': 2, 'b': 3}\n    '''"}
{"task_id": "176918", "prompt": "def find_index(lst: list, value: int) -> int:\n    '''\n    Return the index of the first occurrence of the value in the list.\n    If the value is not in the list, returns -1.\n\n    Example:\n    find_index([1, 2, 3, 4, 5], 3) -> 2\n    find_index([1, 2, 3, 4, 5], 6) -> -1\n    '''"}
{"task_id": "76022812", "prompt": "import csv\n\ndef csv_to_dict(csv_file: str) -> dict:\n    \"\"\"\n    Convert a csv file to a dictionary.\n\n    Example:\n        >>> csv_to_dict(\"test.csv\")\n        {'1': ['title1', 'body1', 'link1', 'True', 'accepted_answer_id1'], '2': ['title2', 'body2', 'link2', 'False', 'accepted_answer_id2']}\n    \"\"\""}
{"task_id": "19960077", "prompt": "import pandas as pd\n\ndef filter_data(df: pd.DataFrame, column: str, value: list) -> pd.DataFrame:\n    '''\n    Filter a dataframe by a list of values for a given column.\n\n    Example:\n    filter_data({'a': [1, 2, 3], 'b': [4, 5, 6]}, 'a', [1, 3]) -> {'a': [1, 3], 'b': [4, 6]}\n    '''"}
{"task_id": "12680754", "prompt": "import pandas as pd\n\ndef split_columns(df, col, sep):\n    '''\n    Split a column into multiple rows by a separator.\n\n    Example:\n    split_columns(pd.DataFrame({'a': ['a,b,c']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c']})\n    split_columns(pd.DataFrame({'a': ['a,b,c', 'd,e,f']}), 'a', ',') -> pd.DataFrame({'a': ['a', 'b', 'c', 'd', 'e', 'f']})\n    '''"}
{"task_id": "23294658", "prompt": "def is_valid_voter():\n    '''\n    Take user input for age of a voter until a valid age is entered.\n    Check if the voter is eligible to vote if the age is greater than or equals to 18.\n    \n    Example:\n    is_valid_voter() -> 'You are eligible to vote'\n    is_valid_voter() -> 'You are not eligible to vote'\n    '''"}
{"task_id": "20250771", "prompt": "import pandas as pd\n\ndef remap_column_value(df: pd.DataFrame, column: str, mapping: dict) -> pd.DataFrame:\n    '''\n    Remap values in a column of a DataFrame to new values.\n\n    Example:\n    remap_column_value(pd.DataFrame({'a': [1, 2, 3]}), 'a', {1: 2, 2: 3, 3: 4}) -> pd.DataFrame({'a': [2, 3, 4]})\n    '''"}
{"task_id": "4020539", "prompt": "def process_escape_sequence(string: str) -> str:\n    '''\n    Process escape sequences in a string.\n    \n    Example:\n    process_escape_sequence('a\\\\nb') -> 'a\n    b'\n    process_escape_sequence('a\\\\tb') -> 'a       b'\n    '''"}
{"task_id": "4760215", "prompt": "import subprocess\n\ndef run_command(command):\n    '''\n    Run a command and returns the output\n\n    Example:\n    run_command('echo \"Hello World\"') -> 'Hello World'\n    '''"}
{"task_id": "6473679", "prompt": "def transpose_list_of_lists(list_of_lists):\n    '''\n    Transpose a list of lists.\n    \n    Example:\n    transpose_list_of_lists([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]\n    transpose_list_of_lists([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]\n    '''"}
{"task_id": "434287", "prompt": "def create_chunks(data: list, chunk_size: int)-> list:\n    '''\n    Create chunks of the given size from the given list.\n    \n    Example:\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    create_chunks([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    '''"}
{"task_id": "104420", "prompt": "def permutations(lst: list) -> list:\n    '''\n    Return a list of all permutations of the given list.\n\n    Example:\n    permutations([1, 2, 3]) -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    '''"}
{"task_id": "533905", "prompt": "import itertools\ndef cartesian_product_of_lists(lists):\n    '''\n    Return the cartesian product of the given list of lists.\n\n    Example:\n    cartesian_product_of_lists([[1, 2], [3, 4]]) -> [(1, 3), (1, 4), (2, 3), (2, 4)]\n    cartesian_product_of_lists([[1, 2], [3, 4], [5, 6]]) -> [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]\n    '''"}
{"task_id": "9961563", "prompt": "import pygame\n\n\ndef sprite_move():\n    '''\n    Create a sprite and move it around the screen when the user presses the arrow keys.\n    '''"}
{"task_id": "1663807", "prompt": "def parallel_iteration(list1: list, list2: list) -> int:\n    '''\n    Iterate list1 and list2 in parallel and return the sum of the products of the elements in list1 and list2.\n    \n    Example:\n    parallel_iteration([1, 2, 3], [4, 5, 6]) -> 32\n\n    parallel_iteration([1, 2, 3], [4, 5]) -> 14\n    '''"}
{"task_id": "15705630", "prompt": "import pandas as pd\n\ndef get_max_by_group(df: pd.DataFrame, groups:list, max_col:str) -> pd.DataFrame:\n    '''\n    Return a dataframe with the max of the max_col grouped by the groups.\n\n    Example:\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a'], 'c') -> {a: 1, c: 6}, {a: 2, c: 8}\n    get_max_by_group(pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 3, 4], 'c': [5, 6, 7, 8]}), ['a','b'], 'c') -> {a: 1, b: 1, c: 5}, {a: 1, b: 2, c: 6},{a: 2, b: 3, c: 7}, {a: 2, b: 4, c: 8}\n    '''"}
{"task_id": "17071871", "prompt": "import pandas as pd\n\ndef select_values(df: pd.DataFrame, column_name: str, criteria: int) -> pd.DataFrame:\n    '''\n    Return a DataFrame containing only the rows of df where the value in the\n    column_name column is equal to criteria.\n\n    Example:\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 2) ->\n    pd.DataFrame({'a': [2], 'b': [5]})\n\n    select_values(pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}), 'a', 4) ->\n    pd.DataFrame({'a': [], 'b': []})\n    '''"}
{"task_id": "2612802", "prompt": "def deep_copy_list(list_to_copy: list) -> list:\n    '''\n    Return a deep copy of the list passed in. For instance:\n    a = [1, 2, 3]\n    b = deep_copy_list(a)\n    c = id(a) != id(b) # c is true\n\n    Example:\n    deep_copy_list([1, 2, 3])\n    -> [1, 2, 3]\n    '''"}
{"task_id": "76022408", "prompt": "import csv\nimport pandas as pd\n\ndef html_to_csv(html_str: str, csv_file: str) -> str:\n    \"\"\"\n    Convert a html string to a csv string.\n    \"\"\""}
