{"task_id": "6367676d1a6d9265ec018229", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Trim the elements of the given String array, calling <code>String.trim()</code> on each of them.\n\t * @param array the original String array\n\t * @return the resulting array (of the same size) with trimmed elements\n\t */\n\t\n\tpublic static String[] trimArrayElements(String[] array){\n\t\t"}
{"task_id": "6367670b1a6d9265ec017a00", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n\t * @param array1 the first array, may be <code>null</code>\n\t * @param array2 the second array, may be <code>null</code>\n\t * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n\t */\n\t\n\tpublic static boolean isSameLength(final byte[] array1,final byte[] array2){\n\t\t"}
{"task_id": "636766a91a6d9265ec0175c2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Frame{\n\t/** \n\t * Pops an abstract type from the output frame stack and returns its value.\n\t * @return the abstract type that has been popped from the output frame stack.\n\t */\n\t\n\tprivate int pop(){\n\t\t"}
{"task_id": "636767081a6d9265ec017989", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  a <code>Boolean</code> array, may be <code>null</code>\n\t * @return a <code>boolean</code> array, <code>null</code> if null array input\n\t * @throws NullPointerException if array content is <code>null</code>\n\t */\n\t\n\tpublic static boolean[] toPrimitive(final Boolean[] array){\n\t\t"}
{"task_id": "6367672d1a6d9265ec017c73", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LoggerRateLimiter{\n\t/** \n\t * Returns true if the message should be printed in the given timestamp, otherwise returns false. If this method returns false, the message will not be printed. The timestamp is in seconds granularity. \n\t */\n\t\n\tpublic boolean shouldPrintMessage(int timestamp,String message){\n\t\t"}
{"task_id": "636766f81a6d9265ec01775c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ObjectUtils{\n\t/** \n\t * <p>Gets the <code>toString</code> of an <code>Object</code> returning an empty string (\"\") if <code>null</code> input.</p> <pre> ObjectUtils.toString(null)         = \"\" ObjectUtils.toString(\"\")           = \"\" ObjectUtils.toString(\"bat\")        = \"bat\" ObjectUtils.toString(Boolean.TRUE) = \"true\" </pre>\n\t * @see StringUtils#defaultString(String)\n\t * @see String#valueOf(Object)\n\t * @param obj  the Object to <code>toString</code>, may be null\n\t * @return the passed in Object's toString, or nullStr if <code>null</code> input\n\t * @since 2.0\n\t */\n\t\n\tpublic static String toString(Object obj){\n\t\t"}
{"task_id": "6367667f1a6d9265ec017457", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UriComponent{\n\t/** \n\t * Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.\n\t * @return the index to the next unchecked character in the string to decode\n\t */\n\t\n\tprivate static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n\t\t"}
{"task_id": "636766aa1a6d9265ec0175ce", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MethodWriter{\n\t/** \n\t * Starts the visit of a new stack map frame, stored in  {@link #currentFrame}.\n\t * @param offset   the bytecode offset of the instruction to which the frame corresponds.\n\t * @param numLocal the number of local variables in the frame.\n\t * @param numStack the number of stack elements in the frame.\n\t * @return the index of the next element to be written in this frame.\n\t */\n\t\n\tint visitFrameStart(final int offset,final int numLocal,final int numStack){\n\t\t"}
{"task_id": "636767191a6d9265ec017c0f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteVector{\n\t/** \n\t * Enlarges this byte vector so that it can receive 'size' more bytes.\n\t * @param size number of additional bytes that this byte vector should be able to receive.\n\t */\n\t\n\tprivate void enlarge(final int size){\n\t\t"}
{"task_id": "636767821a6d9265ec0183a0", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompositeRollingAppender{\n\t/** \n\t * Delete's the specified file if it exists \n\t */\n\t\n\tprotected static void deleteFile(String fileName){\n\t\t"}
{"task_id": "636767691a6d9265ec0181aa", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Objects{\n\t/** \n\t * Return a hash code based on the contents of the specified array. If <code>array</code> is <code>null</code>, this method returns 0.\n\t * @param array the long array to obtain a hashcode\n\t * @return the long array's hashcode, which could be 0 if the array is null.\n\t */\n\t\n\tpublic static int nullSafeHashCode(long[] array){\n\t\t"}
{"task_id": "636767441a6d9265ec017cc1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AVLTree{\n\t/** \n\t * Performs a right node rotation.\n\t * @param node a node to rotate\n\t * @return a new parent of the {@code node}\n\t */\n\t\n\tprivate TreeNode<T> rotateRight(TreeNode<T> node){\n\t\t"}
{"task_id": "6367667f1a6d9265ec01745c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntrospectionUtils{\n\t/** \n\t * Add all the jar files in a dir to the classpath, represented as a Vector of URLs.\n\t */\n\t\n\t@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n\t\t"}
{"task_id": "6367677e1a6d9265ec01830f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PatternLayout{\n\t/** \n\t * Produces a formatted string as specified by the conversion pattern.\n\t */\n\t\n\tpublic String format(LoggingEvent event){\n\t\t"}
{"task_id": "636767031a6d9265ec0178dd", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ServletRequestContext{\n\t/** \n\t * Retrieve the content length of the request.\n\t * @return The content length of the request.\n\t * @since 1.3\n\t */\n\t\n\tpublic long contentLength(){\n\t\t"}
{"task_id": "636766f11a6d9265ec017658", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilenameUtils{\n\t/** \n\t * Returns the index of the last directory separator character. <p> This method will handle a file in either Unix or Windows format. The position of the last forward or backslash is returned. <p> The output will be the same irrespective of the machine that the code is running on.\n\t * @param filename  the filename to find the last path separator in, null returns -1\n\t * @return the index of the last separator character, or -1 if thereis no such character\n\t */\n\t\n\tpublic static int indexOfLastSeparator(String filename){\n\t\t"}
{"task_id": "636767121a6d9265ec017b0a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileUpload{\n\t/** \n\t * Skips bytes until the end of the current line.\n\t * @param headerPart The headers, which are being parsed.\n\t * @param end Index of the last byte, which has yet been processed.\n\t * @return Index of the \\r\\n sequence, which indicates end of line.\n\t */\n\t\n\tprivate int parseEndOfLine(String headerPart,int end){\n\t\t"}
{"task_id": "636766f61a6d9265ec017701", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUdfSource{\n\t/** \n\t * Finds the last index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(String)}. \n\t */\n\t\n\tpublic static int lastIndexOf(String str,String searchStr){\n\t\t"}
{"task_id": "6367670b1a6d9265ec0179fe", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ThresholdingOutputStream{\n\t/** \n\t * Writes <code>b.length</code> bytes from the specified byte array to this output stream.\n\t * @param b The array of bytes to be written.\n\t * @exception IOException if an error occurs.\n\t */\n\t\n\t@Override public void write(byte b[]) throws IOException {\n\t\t"}
{"task_id": "636767df1a6d9265ec01873c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PointOfTime{\n\t/** \n\t * @return the row id\n\t */\n\t\n\tpublic String id(String entityId){\n\t\t"}
{"task_id": "636766f91a6d9265ec01777f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BooleanUtils{\n\t/** \n\t * <p>Converts a Boolean to a boolean handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>\n\t * @param bool  the boolean to convert\n\t * @return <code>true</code> or <code>false</code>, <code>null</code> returns <code>false</code>\n\t */\n\t\n\tpublic static boolean toBoolean(Boolean bool){\n\t\t"}
{"task_id": "6367675f1a6d9265ec0180d3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsomorphicGraphMapping{\n\t/** \n\t * Computes an identity automorphism (i.e. a self-mapping of a graph in which each vertex also maps to itself).\n\t * @param graph the input graph\n\t * @param < V > the graph vertex type\n\t * @param < E > the graph edge type\n\t * @return a mapping from graph to graph\n\t */\n\t\n\tpublic static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n\t\t"}
{"task_id": "636766fe1a6d9265ec017833", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileUtils{\n\t/** \n\t * Schedules a file to be deleted when JVM exits. If file is directory delete it and all sub-directories.\n\t * @param file  file or directory to delete, must not be {@code null}\n\t * @throws NullPointerException if the file is {@code null}\n\t * @throws IOException in case deletion is unsuccessful\n\t */\n\t\n\tpublic static void forceDeleteOnExit(File file) throws IOException {\n\t\t"}
{"task_id": "636767791a6d9265ec018257", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LogBrokerMonitor{\n\t/** \n\t * Add a log record message to be displayed in the LogTable. This method is thread-safe as it posts requests to the SwingThread rather than processing directly.\n\t */\n\t\n\tpublic void addMessage(final LogRecord lr){\n\t\t"}
{"task_id": "636767641a6d9265ec01817d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompleteBipartiteGraphGenerator{\n\t/** \n\t * Construct a complete bipartite graph\n\t */\n\t\n\t@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n\t\t"}
{"task_id": "636766ff1a6d9265ec017851", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultipartStream{\n\t/** \n\t * Searches for a byte of specified value in the <code>buffer</code>, starting at the specified <code>position</code>.\n\t * @param value The value to find.\n\t * @param pos   The starting position for searching.\n\t * @return The position of byte found, counting from beginning of the<code>buffer</code>, or <code>-1</code> if not found.\n\t */\n\t\n\tprotected int findByte(byte value,int pos){\n\t\t"}
{"task_id": "636767a41a6d9265ec018582", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProtobufIOUtil{\n\t/** \n\t * Serializes the  {@code message}, prefixed with its length, into an  {@link OutputStream}.\n\t * @return the size of the message\n\t */\n\t\n\tpublic static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n\t\t"}
{"task_id": "636767001a6d9265ec01787e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReflectionToStringBuilder{\n\t/** \n\t * <p> Gets the String built by this builder. </p>\n\t * @return the built string\n\t */\n\t\n\tpublic String toString(){\n\t\t"}
{"task_id": "636767781a6d9265ec01823d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TempFileAppender{\n\t/** \n\t * This method does actual writing\n\t */\n\t\n\tprotected void subAppend(LoggingEvent event){\n\t\t"}
{"task_id": "636766ef1a6d9265ec01761a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SymbolTable{\n\t/** \n\t * Adds a type in the type table of this symbol table. Does nothing if the type table already contains a similar type.\n\t * @param value an internal class name.\n\t * @return the index of a new or already existing type Symbol with the given value.\n\t */\n\t\n\tint addType(final String value){\n\t\t"}
{"task_id": "636766821a6d9265ec0174b6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TypeResolver{\n\t/** \n\t * Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved.\n\t */\n\t\n\tpublic static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n\t\t"}
{"task_id": "636767e11a6d9265ec018781", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MergableBufferedData{\n\t/** \n\t * Accept the data into the cache and merge with the existing value. This method is not thread safe, should avoid concurrency calling.\n\t * @param data to be added potentially.\n\t */\n\t\n\t@Override public void accept(final METRICS data){\n\t\t"}
{"task_id": "636767531a6d9265ec017efb", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LexBreadthFirstIterator$BucketList{\n\t/** \n\t * Inserts this bucket in the data structure before the  {@code bucket}.\n\t * @param bucket the bucket, that will be the next to this bucket.\n\t */\n\t\n\tvoid insertBefore(Bucket bucket){\n\t\t"}
{"task_id": "636766f11a6d9265ec017641", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReaderInputStream{\n\t/** \n\t * @see InputStream#available() \n\t */\n\t\n\t@Override public int available() throws IOException {\n\t\t"}
{"task_id": "636767de1a6d9265ec018706", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IndexStructures{\n\t/** \n\t * Returns mappings with fields that not exist in the input mappings. The input mappings should be history mapping from current index. Do not return _source config to avoid current index update conflict.\n\t */\n\t\n\tpublic Mappings diffStructure(String tableName,Mappings mappings){\n\t\t"}
{"task_id": "636767dd1a6d9265ec0186e5", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultipleChannelsConsumer{\n\t/** \n\t * Add a new target channels.\n\t */\n\t\n\tpublic void addNewTarget(Channels channels,IConsumer consumer){\n\t\t"}
{"task_id": "636767871a6d9265ec01846d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MRUFileManager{\n\t/** \n\t * Creates the directory where the MRU file list will be written. The \"lf5\" directory is created in the Documents and Settings directory on Windows 2000 machines and where ever the user.home variable points on all other platforms.\n\t */\n\t\n\tpublic static void createConfigurationDirectory(){\n\t\t"}
{"task_id": "636766f81a6d9265ec01775b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClassReader{\n\t/** \n\t * Reads a signed long value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n\t * @param offset the start offset of the value to be read in this {@link ClassReader}.\n\t * @return the read value.\n\t */\n\t\n\tpublic long readLong(final int offset){\n\t\t"}
{"task_id": "636767a51a6d9265ec01859d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteString{\n\t/** \n\t * Returns true if the contents of the internal array and the provided array match.\n\t */\n\t\n\tpublic boolean equals(final byte[] data,int offset,final int len){\n\t\t"}
{"task_id": "6367670b1a6d9265ec0179ff", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n\t * @param array  the array to check for <code>null</code> or empty\n\t * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n\t * @since 2.5\n\t */\n\t\n\tpublic static Byte[] nullToEmpty(final Byte[] array){\n\t\t"}
{"task_id": "6367677f1a6d9265ec018347", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TelnetAppender{\n\t/** \n\t * sends a message to each of the clients in telnet-friendly output. \n\t */\n\t\n\tpublic synchronized void send(final String message){\n\t\t"}
{"task_id": "6367670a1a6d9265ec0179e8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n\t * @param array  the array to check for <code>null</code> or empty\n\t * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n\t * @since 2.5\n\t */\n\t\n\tpublic static Boolean[] nullToEmpty(final Boolean[] array){\n\t\t"}
{"task_id": "6367677f1a6d9265ec01834b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BoundedFIFO{\n\t/** \n\t * Place a  {@link LoggingEvent} in the buffer. If the buffer is fullthen the event is <b>silently dropped</b>. It is the caller's responsability to make sure that the buffer has free space.  \n\t */\n\t\n\tpublic void put(LoggingEvent o){\n\t\t"}
{"task_id": "636767df1a6d9265ec018744", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EBPFProfilingAnalyzer{\n\t/** \n\t * Split time ranges to insure the start time and end time is small then  {@link #FETCH_DATA_DURATION}\n\t */\n\t\n\tprotected List<TimeRange> buildTimeRanges(long start,long end){\n\t\t"}
{"task_id": "636767031a6d9265ec0178e6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  a <code>Byte</code> array, may be <code>null</code>\n\t * @return a <code>byte</code> array, <code>null</code> if null array input\n\t * @throws NullPointerException if array content is <code>null</code>\n\t */\n\t\n\tpublic static byte[] toPrimitive(final Byte[] array){\n\t\t"}
{"task_id": "636767dc1a6d9265ec0186be", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TimeSeriesUtils{\n\t/** \n\t * Follow the dayStep to re-format the time bucket literal long value. Such as, in dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123\n\t */\n\t\n\tstatic long compressTimeBucket(long timeBucket,int dayStep){\n\t\t"}
{"task_id": "636767a41a6d9265ec01856c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSerializer{\n\t/** \n\t * Computes the size of the utf8 string beginning at the specified  {@code index} with the specified {@code length}.\n\t */\n\t\n\tpublic static int computeUTF8Size(final CharSequence str,final int index,final int len){\n\t\t"}
{"task_id": "636766f01a6d9265ec017639", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TypeUtil{\n\t/** \n\t * Array to List. <p> Works like  {@link Arrays#asList(Object)}, but handles null arrays.\n\t * @return a list backed by the array.\n\t */\n\t\n\tpublic static <T>List<T> asList(T[] a){\n\t\t"}
{"task_id": "6367672d1a6d9265ec017c74", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RandomizedSet{\n\t/** \n\t * Removes a value from the set. Returns true if the set contained the specified element. \n\t */\n\t\n\tpublic boolean remove(int val){\n\t\t"}
{"task_id": "6367676b1a6d9265ec0181df", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Returns  {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n\t * @param str the String to check\n\t * @param prefix the prefix to look for\n\t * @return {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n\t * @see java.lang.String#startsWith\n\t */\n\t\n\tpublic static boolean startsWithIgnoreCase(String str,String prefix){\n\t\t"}
{"task_id": "6367674b1a6d9265ec017dc0", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PathGrowingWeightedMatching{\n\t/** \n\t * Compute all vertices that have positive degree by iterating over the edges on purpose. This keeps the complexity to $O(m)$ where $m$ is the number of edges.\n\t * @return set of vertices with positive degree\n\t */\n\t\n\tprivate Set<V> initVisibleVertices(){\n\t\t"}
{"task_id": "636767001a6d9265ec017873", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUtils{\n\t/** \n\t * <p>Reverses a String as per  {@link StringBuilder#reverse()}.</p> <p>A <code>null</code> String returns <code>null</code>.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse(\"\")    = \"\" StringUtils.reverse(\"bat\") = \"tab\" </pre>\n\t * @param str  the String to reverse, may be null\n\t * @return the reversed String, <code>null</code> if null String input\n\t */\n\t\n\tpublic static String reverse(final String str){\n\t\t"}
{"task_id": "636766ff1a6d9265ec01783b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUdfSource{\n\t/** \n\t * Gets a substring from the specified String avoiding exceptions. \n\t */\n\t\n\tpublic static String sub(String str,int start,int end){\n\t\t"}
{"task_id": "6367671a1a6d9265ec017c15", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteVector{\n\t/** \n\t * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n\t * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n\t * @param byteOffset index of the first byte of byteArrayValue that must be copied.\n\t * @param byteLength number of bytes of byteArrayValue that must be copied.\n\t * @return this byte vector.\n\t */\n\t\n\tpublic ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\t\t"}
{"task_id": "636766821a6d9265ec0174d2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AtmosphereRequestImpl{\n\t/** \n\t * Wrap an  {@link HttpServletRequest}.\n\t * @param request {@link HttpServletRequest}\n\t * @return an {@link AtmosphereRequest}\n\t */\n\t\n\tpublic static AtmosphereRequest wrap(HttpServletRequest request){\n\t\t"}
{"task_id": "636767ab1a6d9265ec01867b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSerializer{\n\t/** \n\t * Writes the utf8-encoded bytes from the string into the  {@link LinkedBuffer}.\n\t */\n\t\n\tpublic static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n\t\t"}
{"task_id": "6367675c1a6d9265ec01805b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BlossomVTreeEdge{\n\t/** \n\t * Removes this edge from both doubly linked lists of tree edges.\n\t */\n\t\n\tpublic void removeFromTreeEdgeList(){\n\t\t"}
{"task_id": "636767791a6d9265ec01826d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OptionConverter{\n\t/** \n\t * Find the value corresponding to <code>key</code> in <code>props</code>. Then perform variable substitution on the found value.\n\t */\n\t\n\tpublic static String findAndSubst(String key,Properties props){\n\t\t"}
{"task_id": "636767001a6d9265ec01787f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ToStringStyle{\n\t/** \n\t * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>\n\t * @param buffer  the <code>StringBuffer</code> to populate\n\t * @param fieldName  the field name, typically not used as already appended\n\t * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n\t */\n\t\n\tprotected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n\t\t"}
{"task_id": "636766fe1a6d9265ec017834", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WebUdfSource{\n\t/** \n\t * Session ID. \n\t */\n\t\n\tpublic static String sessionId(){\n\t\t"}
{"task_id": "636766ff1a6d9265ec01784b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumberUtils{\n\t/** \n\t * <p>Checks whether the <code>String</code> contains only digit characters.</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>\n\t * @param str  the <code>String</code> to check\n\t * @return <code>true</code> if str contains only unicode numeric\n\t */\n\t\n\tpublic static boolean isDigits(String str){\n\t\t"}
{"task_id": "636766fc1a6d9265ec0177da", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParsedSql{\n\t/** \n\t * Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator. \n\t */\n\t\n\tprivate static boolean isParameterSeparator(final char c){\n\t\t"}
{"task_id": "6367670c1a6d9265ec017a35", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUtils{\n\t/** \n\t * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n\t * @see String#endsWith(String)\n\t * @param str  the String to check, may be null\n\t * @param suffix the suffix to find, may be null\n\t * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n\t * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n\t */\n\t\n\tprivate static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n\t\t"}
{"task_id": "6367667f1a6d9265ec01745d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UriComponent{\n\t/** \n\t * Decode the path component of a URI as path segments.\n\t * @param u the URI. If the path component is an absolute path componentthen the leading '/' is ignored and is not considered a delimiator of a path segment.\n\t * @param decode true if the path segments of the path componentshould be in decoded form.\n\t * @return the list of path segments.\n\t */\n\t\n\tpublic static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n\t\t"}
{"task_id": "636766f11a6d9265ec017651", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n\t * @param array  the array to check for <code>null</code> or empty\n\t * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n\t * @since 2.5\n\t */\n\t\n\tpublic static Character[] nullToEmpty(final Character[] array){\n\t\t"}
{"task_id": "636767821a6d9265ec0183ab", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LogRecord{\n\t/** \n\t * @return true if getThrown().toString() is a non-empty string.\n\t */\n\t\n\tpublic boolean hasThrown(){\n\t\t"}
{"task_id": "636767831a6d9265ec0183c9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NDC{\n\t/** \n\t * Looks at the last diagnostic context at the top of this NDC without removing it. <p>The returned value is the value that was pushed last. If no context is available, then the empty string \"\" is returned.\n\t * @return String The innermost diagnostic context.\n\t */\n\t\n\tpublic static String peek(){\n\t\t"}
{"task_id": "636767de1a6d9265ec01871c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DataTable{\n\t/** \n\t * Accumulate the value with existing value in the same given key.\n\t */\n\t\n\tpublic void valueAccumulation(String key,Long value){\n\t\t"}
{"task_id": "636766811a6d9265ec017496", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass InputStreamIterator{\n\t/** \n\t * Return the next  {@link java.io.File} object or {@code null} if no more files areavailable.\n\t */\n\t\n\tpublic InputStream next() throws IOException {\n\t\t"}
{"task_id": "6367677e1a6d9265ec01832e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Hierarchy{\n\t/** \n\t * Check if the named logger exists in the hierarchy. If so return its reference, otherwise returns <code>null</code>.\n\t * @param name The name of the logger to search for.\n\t */\n\t\n\tpublic Logger exists(String name){\n\t\t"}
{"task_id": "6367670a1a6d9265ec0179e7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ConverterBean{\n\t/** \n\t * Look up and return any registered  {@link Converter} for the specifieddestination class; if there is no registered Converter, return <code>null</code>.\n\t * @param clazz Class for which to return a registered Converter\n\t * @return The registered {@link Converter} or <code>null</code> if not found\n\t */\n\t\n\tpublic Converter lookup(final Class<?> clazz){\n\t\t"}
{"task_id": "636767a41a6d9265ec018572", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CodedInput{\n\t/** \n\t * Read a raw Varint from the stream.\n\t */\n\t\n\tpublic long readRawVarint64() throws IOException {\n\t\t"}
{"task_id": "636767021a6d9265ec0178bb", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n\t * @param array  the array to check for <code>null</code> or empty\n\t * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n\t * @since 2.5\n\t */\n\t\n\tpublic static Double[] nullToEmpty(final Double[] array){\n\t\t"}
{"task_id": "636767021a6d9265ec0178b2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Frame{\n\t/** \n\t * Pops as many abstract types from the output frame stack as described by the given descriptor.\n\t * @param descriptor a type or method descriptor (in which case its argument types are popped).\n\t */\n\t\n\tprivate void pop(final String descriptor){\n\t\t"}
{"task_id": "636766f91a6d9265ec01776e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Base64OutputStream{\n\t/** \n\t * Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream.\n\t * @param b   the data.\n\t * @param off the start offset in the data.\n\t * @param len the number of bytes to write.\n\t */\n\t\n\t@Override public void write(final byte b[],final int off,final int len) throws IOException {\n\t\t"}
{"task_id": "636767551a6d9265ec017f3f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtil{\n\t/** \n\t * Swaps the two elements at the specified indices in the given array.\n\t * @param < V > the type of elements in the array\n\t * @param arr the array\n\t * @param i the index of the first element\n\t * @param j the index of the second element\n\t */\n\t\n\tpublic static final <V>void swap(V[] arr,int i,int j){\n\t\t"}
{"task_id": "636766ae1a6d9265ec0175dc", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PaginationHelper{\n\t/** \n\t * Check if the actual response is a Partial Content (HTTP 206 code)\n\t * @return is partial content or not\n\t */\n\t\n\tpublic Boolean isPartialContentResponse(){\n\t\t"}
{"task_id": "636766f01a6d9265ec01762e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n\t * @param array  the array to test\n\t * @return <code>true</code> if the array is empty or <code>null</code>\n\t * @since 2.1\n\t */\n\t\n\tpublic static boolean isEmpty(final double[] array){\n\t\t"}
{"task_id": "6367667e1a6d9265ec01743a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WebSocket{\n\t/** \n\t * The last time, in milliseconds, a write operation occurred.\n\t * @return this\n\t */\n\t\n\tpublic long lastWriteTimeStampInMilliseconds(){\n\t\t"}
{"task_id": "636767601a6d9265ec0180fd", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FastLookupDirectedSpecifics{\n\t/** \n\t * Add an edge to the index.\n\t * @param sourceVertex the source vertex\n\t * @param targetVertex the target vertex\n\t * @param e the edge\n\t */\n\t\n\tprotected void addToIndex(V sourceVertex,V targetVertex,E e){\n\t\t"}
{"task_id": "636766821a6d9265ec0174c9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClassFileIterator{\n\t/** \n\t * Returns the class path of the current JVM instance as an array of  {@link File} objects.\n\t */\n\t\n\tprivate static File[] classPath(){\n\t\t"}
{"task_id": "636767041a6d9265ec0178f8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BooleanConverter{\n\t/** \n\t * This method creates a copy of the provided array, and ensures that all the strings in the newly created array contain only lower-case letters. <p> Using this method to copy string arrays means that changes to the src array do not modify the dst array.\n\t */\n\t\n\tprivate static String[] copyStrings(final String[] src){\n\t\t"}
{"task_id": "636767521a6d9265ec017ecc", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Boxes{\n\t/** \n\t * Split a box along the x axis into two equal boxes.\n\t * @param box the box to split\n\t * @return a pair with the two resulting boxes\n\t */\n\t\n\tpublic static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n\t\t"}
{"task_id": "636766a91a6d9265ec0175c1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteVector{\n\t/** \n\t * Enlarges this byte vector so that it can receive 'size' more bytes.\n\t * @param size number of additional bytes that this byte vector should be able to receive.\n\t */\n\t\n\tprivate void enlarge(final int size){\n\t\t"}
{"task_id": "636767781a6d9265ec018238", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AppenderAttachableImpl{\n\t/** \n\t * Returns <code>true</code> if the specified appender is in the list of attached appenders, <code>false</code> otherwise.\n\t * @since 1.2 \n\t */\n\t\n\tpublic boolean isAttached(Appender appender){\n\t\t"}
{"task_id": "6367674a1a6d9265ec017dab", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ToleranceDoubleComparator{\n\t/** \n\t * Compares two floating point values. Returns 0 if they are equal, -1 if  {@literal o1 < o2}, 1 otherwise\n\t * @param o1 the first value\n\t * @param o2 the second value\n\t * @return 0 if they are equal, -1 if {@literal o1 < o2}, 1 otherwise\n\t */\n\t\n\t@Override public int compare(Double o1,Double o2){\n\t\t"}
{"task_id": "6367672d1a6d9265ec017c78", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RandomizedSet{\n\t/** \n\t * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n\t */\n\t\n\tpublic boolean insert(int val){\n\t\t"}
{"task_id": "636767dc1a6d9265ec0186c6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IndexStructures{\n\t/** \n\t * Returns ture when the input fields have already been stored in the properties.\n\t */\n\t\n\tprivate boolean containsAllFields(Fields fields){\n\t\t"}
{"task_id": "636766821a6d9265ec0174bf", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntrospectionUtils{\n\t/** \n\t * Reverse of Introspector.decapitalize\n\t */\n\t\n\tpublic static String capitalize(String name){\n\t\t"}
{"task_id": "636767aa1a6d9265ec01865a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LinkedBuffer{\n\t/** \n\t * Writes the contents of the  {@link LinkedBuffer} into the {@link DataOutput}.\n\t * @return the total content size of the buffer.\n\t */\n\t\n\tpublic static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n\t\t"}
{"task_id": "636766f21a6d9265ec017677", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BooleanUtils{\n\t/** \n\t * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>, handling <code>null</code> by returning <code>true</code>.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>\n\t * @param bool  the boolean to check, null returns <code>true</code>\n\t * @return <code>true</code> if the input is null or false\n\t * @since 2.3\n\t */\n\t\n\tpublic static boolean isNotTrue(Boolean bool){\n\t\t"}
{"task_id": "6367674f1a6d9265ec017e74", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FixedSizeIntegerQueue{\n\t/** \n\t * Returns a textual representation of the queue.\n\t * @return a textual representation of the queue.\n\t */\n\t\n\tpublic String toString(){\n\t\t"}
{"task_id": "6367675c1a6d9265ec018058", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SupplierUtil{\n\t/** \n\t * Create a string supplier which returns unique strings. The returns strings are simply integers starting from start.\n\t * @param start where to start the sequence\n\t * @return a string supplier\n\t */\n\t\n\t@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n\t\t"}
{"task_id": "6367677b1a6d9265ec0182bd", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EnhancedPatternLayout{\n\t/** \n\t * Formats a logging event to a writer.\n\t * @param event logging event to be formatted.\n\t */\n\t\n\tpublic String format(final LoggingEvent event){\n\t\t"}
{"task_id": "636766ff1a6d9265ec017842", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  a <code>Double</code> array, may be <code>null</code>\n\t * @return a <code>double</code> array, <code>null</code> if null array input\n\t * @throws NullPointerException if array content is <code>null</code>\n\t */\n\t\n\tpublic static double[] toPrimitive(final Double[] array){\n\t\t"}
{"task_id": "636766fa1a6d9265ec0177a9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Frame{\n\t/** \n\t * Adds an abstract type to the list of types on which a constructor is invoked in the basic block.\n\t * @param abstractType an abstract type on a which a constructor is invoked.\n\t */\n\t\n\tprivate void addInitializedType(final int abstractType){\n\t\t"}
{"task_id": "6367670a1a6d9265ec0179dc", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MethodWriter{\n\t/** \n\t * Puts some abstract types of  {@link #currentFrame} in {@link #stackMapTableEntries} , using theJVMS verification_type_info format used in StackMapTable attributes.\n\t * @param start index of the first type in {@link #currentFrame} to write.\n\t * @param end index of last type in {@link #currentFrame} to write (exclusive).\n\t */\n\t\n\tprivate void putAbstractTypes(final int start,final int end){\n\t\t"}
{"task_id": "636766801a6d9265ec017482", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClassFileBuffer{\n\t/** \n\t * Clear and fill the buffer of this  {@code ClassFileBuffer} with thesupplied byte stream. The read pointer is reset to the start of the byte array.\n\t */\n\t\n\tpublic void readFrom(final InputStream in) throws IOException {\n\t\t"}
{"task_id": "6367670a1a6d9265ec0179d8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WriterOutputStream{\n\t/** \n\t * @see OutputStream#write(byte[]) \n\t */\n\t\n\t@Override public void write(final byte[] b) throws IOException {\n\t\t"}
{"task_id": "636766a81a6d9265ec01757b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass JSONArray{\n\t/** \n\t * Serialize to JSON  {@link String}\n\t * @param features features to be enabled in serialization\n\t * @return JSON {@link String}\n\t */\n\t\n\t@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n\t\t"}
{"task_id": "636767021a6d9265ec0178bf", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CharacterConverter{\n\t/** \n\t * <p>Convert the input object into a java.lang.Character.</p>\n\t * @param type Data type to which this value should be converted.\n\t * @param value The input value to be converted.\n\t * @return The converted value.\n\t * @throws Exception if conversion cannot be performed successfully\n\t * @since 1.8.0\n\t */\n\t\n\t@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n\t\t"}
{"task_id": "6367670b1a6d9265ec017a0f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUdfSource{\n\t/** \n\t * Case in-sensitive Checks if the String contains any character in the given set of string. \n\t */\n\t\n\tpublic static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n\t\t"}
{"task_id": "636766a81a6d9265ec01758e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFinder{\n\t/** \n\t * Returns a prime number which is <code>&gt;= desiredCapacity</code> and very close to <code>desiredCapacity</code> (within 11% if <code>desiredCapacity &gt;= 1000</code>).\n\t * @param desiredCapacity the capacity desired by the user.\n\t * @return the capacity which should be used for a hashtable.\n\t */\n\t\n\tpublic static int nextPrime(int desiredCapacity){\n\t\t"}
{"task_id": "6367670a1a6d9265ec0179cf", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CharUtils{\n\t/** \n\t * <p>Converts the Character to a char handling <code>null</code>.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>\n\t * @param ch  the character to convert\n\t * @param defaultValue  the value to use if the  Character is null\n\t * @return the char value of the Character or the default if null\n\t */\n\t\n\tpublic static char toChar(final Character ch,final char defaultValue){\n\t\t"}
{"task_id": "6367676b1a6d9265ec0181e2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Collections{\n\t/** \n\t * Return the first element in '<code>candidates</code>' that is contained in '<code>source</code>'. If no element in '<code>candidates</code>' is present in '<code>source</code>' returns <code>null</code>. Iteration order is {@link Collection} implementation specific.\n\t * @param source the source Collection\n\t * @param candidates the candidates to search for\n\t * @return the first present object, or <code>null</code> if not found\n\t */\n\t\n\tpublic static Object findFirstMatch(Collection source,Collection candidates){\n\t\t"}
{"task_id": "6367676b1a6d9265ec0181ee", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Trim trailing whitespace from the given String.\n\t * @param str the String to check\n\t * @return the trimmed String\n\t * @see java.lang.Character#isWhitespace\n\t */\n\t\n\tpublic static String trimTrailingWhitespace(String str){\n\t\t"}
{"task_id": "636767dc1a6d9265ec0186cb", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ExporterConfig{\n\t/** \n\t * initialize config, such as check dist path\n\t */\n\t\n\tpublic void init(){\n\t\t"}
{"task_id": "636767a31a6d9265ec018552", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CodedInput{\n\t/** \n\t * Read a  {@code string} field value from the stream.\n\t */\n\t\n\t@Override public String readString() throws IOException {\n\t\t"}
{"task_id": "636767a61a6d9265ec0185b7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextFormat{\n\t/** \n\t * Interpret a character as a digit (in any base up to 36) and return the numeric value. This is like {@code Character.digit()} but we don't accept non-ASCII digits.\n\t */\n\t\n\tprivate static int digitValue(final char c){\n\t\t"}
{"task_id": "636767e01a6d9265ec018755", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FeishuHookCallback{\n\t/** \n\t * build content,if it has ats someone set the ats\n\t */\n\t\n\tprivate Map<String,Object> buildContent(JsonObject jsonObject){\n\t\t"}
{"task_id": "6367667f1a6d9265ec017458", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AtmosphereFramework{\n\t/** \n\t * Remove an  {@link AtmosphereHandler}.\n\t * @param mapping the mapping used when invoking {@link #addAtmosphereHandler(String,AtmosphereHandler)};\n\t * @return true if removed\n\t */\n\t\n\tpublic AtmosphereFramework removeAtmosphereHandler(String mapping){\n\t\t"}
{"task_id": "636767a21a6d9265ec018517", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WriteSession{\n\t/** \n\t * Returns a single byte array containg all the contents written to the buffer(s).\n\t */\n\t\n\tpublic final byte[] toByteArray(){\n\t\t"}
{"task_id": "6367667d1a6d9265ec017401", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringEscapeUtils{\n\t/** \n\t * <p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>\n\t * @param str the <code>String</code> to unescape, may be null\n\t * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n\t */\n\t\n\tpublic static String unescapeJava(String str) throws Exception {\n\t\t"}
{"task_id": "636766f01a6d9265ec01763e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MimeUtility{\n\t/** \n\t * Translate a MIME standard character set name into the Java equivalent.\n\t * @param charset The MIME standard name.\n\t * @return The Java equivalent for this name.\n\t */\n\t\n\tprivate static String javaCharset(String charset){\n\t\t"}
{"task_id": "6367676a1a6d9265ec0181bf", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Turn the given Object into a String with single quotes if it is a String; keeping the Object as-is else.\n\t * @param obj the input Object (e.g. \"myString\")\n\t * @return the quoted String (e.g. \"'myString'\"),or the input object as-is if not a String\n\t */\n\t\n\tpublic static Object quoteIfString(Object obj){\n\t\t"}
{"task_id": "636767501a6d9265ec017e86", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoublyLinkedList{\n\t/** \n\t * {@inheritDoc}\n\t */\n\t\n\t@Override public ListNode<E> previousNode(){\n\t\t"}
{"task_id": "636766f21a6d9265ec017667", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClassReader{\n\t/** \n\t * Reads a signed short value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n\t * @param offset the start offset of the value to be read in this {@link ClassReader}.\n\t * @return the read value.\n\t */\n\t\n\tpublic short readShort(final int offset){\n\t\t"}
{"task_id": "636767031a6d9265ec0178ef", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n\t * @param array The array to copy, must not be <code>null</code>.\n\t * @param newArrayComponentType If <code>array</code> is <code>null</code>, create asize 1 array of this type.\n\t * @return A new copy of the array of size 1 greater than the input.\n\t */\n\t\n\tprivate static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n\t\t"}
{"task_id": "636767431a6d9265ec017c8d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TransitiveClosure{\n\t/** \n\t * Computes floor($\\log_2 (n)$) $+ 1$\n\t */\n\t\n\tprivate int computeBinaryLog(int n){\n\t\t"}
{"task_id": "636767611a6d9265ec018116", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PadbergRaoOddMinimumCutset{\n\t/** \n\t * Efficient way to compute the intersection between two sets\n\t * @param set1 set $1$\n\t * @param set2 set $2$\n\t * @return intersection of set $1$ and $2$\n\t */\n\t\n\tprivate Set<V> intersection(Set<V> set1,Set<V> set2){\n\t\t"}
{"task_id": "636766f71a6d9265ec017730", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReflectionToStringBuilder{\n\t/** \n\t * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element is <code>null</code>.\n\t * @param collection The collection to convert\n\t * @return A new array of Strings.\n\t */\n\t\n\tstatic String[] toNoNullStringArray(Collection<?> collection){\n\t\t"}
{"task_id": "636767081a6d9265ec0179a2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumberUtils{\n\t/** \n\t * <p>Utility method for  {@link #createNumber(String)}.</p> <p>Returns <code>true</code> if s is <code>null</code>.</p>\n\t * @param s the String to check\n\t * @return if it is all zeros or <code>null</code>\n\t */\n\t\n\tprivate static boolean isAllZeros(String s){\n\t\t"}
{"task_id": "636766821a6d9265ec0174b3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DefaultBroadcaster{\n\t/** \n\t * Invoke the  {@link BroadcastFilter}\n\t * @param msg\n\t * @return\n\t */\n\t\n\tprotected Object filter(Object msg){\n\t\t"}
{"task_id": "636767e01a6d9265ec018764", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EBPFProcessServiceHandler{\n\t/** \n\t * Convert process properties to source data\n\t */\n\t\n\tprivate JsonObject convertProperties(List<KeyStringValuePair> properties){\n\t\t"}
{"task_id": "6367677e1a6d9265ec018314", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CategoryNodeEditor{\n\t/** \n\t * Removes any inactive nodes from the Category tree.\n\t */\n\t\n\tprotected int removeUnusedNodes(){\n\t\t"}
{"task_id": "636766ff1a6d9265ec017853", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClassReader{\n\t/** \n\t * Returns the label corresponding to the given bytecode offset. The default implementation of this method creates a label for the given offset if it has not been already created.\n\t * @param bytecodeOffset a bytecode offset in a method.\n\t * @param labels the already created labels, indexed by their offset. If a label already existsfor bytecodeOffset this method must not create a new one. Otherwise it must store the new label in this array.\n\t * @return a non null Label, which must be equal to labels[bytecodeOffset].\n\t */\n\t\n\tprotected Label readLabel(final int bytecodeOffset,final Label[] labels){\n\t\t"}
{"task_id": "6367677d1a6d9265ec0182fd", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OptionConverter{\n\t/** \n\t * If <code>value</code> is \"true\", then <code>true</code> is returned. If <code>value</code> is \"false\", then <code>true</code> is returned. Otherwise, <code>default</code> is returned. <p>Case of value is unimportant.  \n\t */\n\t\n\tpublic static boolean toBoolean(String value,boolean dEfault){\n\t\t"}
{"task_id": "6367676a1a6d9265ec0181cd", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Trim leading whitespace from the given String.\n\t * @param str the String to check\n\t * @return the trimmed String\n\t * @see java.lang.Character#isWhitespace\n\t */\n\t\n\tpublic static String trimLeadingWhitespace(String str){\n\t\t"}
{"task_id": "636766fe1a6d9265ec01782a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClassReader{\n\t/** \n\t * Reads a CONSTANT_Utf8 constant pool entry in  {@link #classFileBuffer}.\n\t * @param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pooltable.\n\t * @param charBuffer the buffer to be used to read the string. This buffer must be sufficientlylarge. It is not automatically resized.\n\t * @return the String corresponding to the specified CONSTANT_Utf8 entry.\n\t */\n\t\n\tfinal String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n\t\t"}
{"task_id": "636766851a6d9265ec01751b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass QueryStringDecoder{\n\t/** \n\t * Helper to decode half of a hexadecimal number from a string.\n\t * @param c The ASCII character of the hexadecimal number to decode.Must be in the range  {@code [0-9a-fA-F]}.\n\t * @return The hexadecimal value represented in the ASCII charactergiven, or  {@link Character#MAX_VALUE} if the character is invalid.\n\t */\n\t\n\tprivate static char decodeHexNibble(final char c){\n\t\t"}
{"task_id": "636766f21a6d9265ec01767d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUtils{\n\t/** \n\t * Object to String ,when null object then null else return toString(); \n\t */\n\t\n\tpublic static String toString(Object object){\n\t\t"}
{"task_id": "636767581a6d9265ec017fc4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MathUtil{\n\t/** \n\t * Calculate the factorial of $n$.\n\t * @param n the input number\n\t * @return the factorial\n\t */\n\t\n\tpublic static long factorial(int n){\n\t\t"}
{"task_id": "636767511a6d9265ec017eb6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BoyerMyrvoldPlanarityInspector{\n\t/** \n\t * Either finds and returns a circulator to the node on the boundary of the component, which satisfies the  {@code predicate} or returns a circulator to the {@code stop} node.\n\t * @param predicate the condition the desired node should satisfy\n\t * @param start the node to start the search from\n\t * @param stop the node to end the search with\n\t * @param dir the direction to start the traversal in\n\t * @return a circulator to the node satisfying the {@code predicate} or to the {@code stop} node\n\t */\n\t\n\tprivate OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n\t\t"}
{"task_id": "636767841a6d9265ec0183e8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CyclicBuffer{\n\t/** \n\t * Add an <code>event</code> as the last event in the buffer.\n\t */\n\t\n\tpublic void add(LoggingEvent event){\n\t\t"}
{"task_id": "636767a41a6d9265ec01857e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UnsignedNumberUtil{\n\t/** \n\t * Compares the two specified  {@code long} values. The sign of the value returned is the same as that of{@code ((Long) a).compareTo(b)}. <p> <b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the equivalent {@link Long#compare} method instead.\n\t * @param a the first  {@code long} to compare\n\t * @param b the second  {@code long} to compare\n\t * @return a negative value if {@code a} is less than {@code b}; a positive value if  {@code a} is greater than{@code b}; or zero if they are equal\n\t */\n\t\n\tprivate static int compareSigned(long a,long b){\n\t\t"}
{"task_id": "636767691a6d9265ec0181ae", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Copy the given Enumeration into a String array. The Enumeration must contain String elements only.\n\t * @param enumeration the Enumeration to copy\n\t * @return the String array (<code>null</code> if the passed-inEnumeration was <code>null</code>)\n\t */\n\t\n\tpublic static String[] toStringArray(Enumeration<String> enumeration){\n\t\t"}
{"task_id": "636766a91a6d9265ec0175ae", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteVector{\n\t/** \n\t * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n\t * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n\t * @param byteOffset     index of the first byte of byteArrayValue that must be copied.\n\t * @param byteLength     number of bytes of byteArrayValue that must be copied.\n\t * @return this byte vector.\n\t */\n\t\n\tpublic ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\t\t"}
{"task_id": "636766f11a6d9265ec01764f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BeanMap{\n\t/** \n\t * Returns the values for the BeanMap.\n\t * @return values for the BeanMap. The returned collection is not modifiable.\n\t */\n\t\n\tpublic Collection<Object> values(){\n\t\t"}
{"task_id": "636766f81a6d9265ec017758", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Type{\n\t/** \n\t * Returns a hash code value for this type.\n\t * @return a hash code value for this type.\n\t */\n\t\n\t@Override public int hashCode(){\n\t\t"}
{"task_id": "6367676c1a6d9265ec01820b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Delete any character in a given String.\n\t * @param inString the original String\n\t * @param charsToDelete a set of characters to delete.E.g. \"az\\n\" will delete 'a's, 'z's and new lines.\n\t * @return the resulting String\n\t */\n\t\n\tpublic static String deleteAny(String inString,String charsToDelete){\n\t\t"}
{"task_id": "636766861a6d9265ec01755a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UriPattern{\n\t/** \n\t * Match a URI against the pattern.\n\t * @param uri the uri to match against the template.\n\t * @return the match result, otherwise null if no match occurs.\n\t */\n\t\n\tpublic final MatchResult match(CharSequence uri){\n\t\t"}
{"task_id": "636766f91a6d9265ec01777d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TypeUtil{\n\t/** \n\t * @param b An ASCII encoded character 0-9 a-f A-F\n\t * @return The byte value of the character 0-16.\n\t */\n\t\n\tpublic static byte convertHexDigit(byte b){\n\t\t"}
{"task_id": "636766801a6d9265ec017477", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass InputStreamIterator{\n\t/** \n\t * Add the specified files in reverse order.\n\t */\n\t\n\tprivate void addReverse(final InputStream[] files){\n\t\t"}
{"task_id": "636767de1a6d9265ec01871e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StorageModels$ShardingKeyChecker{\n\t/** \n\t * @param modelName model name of the entity\n\t * @throws IllegalStateException if sharding key indices are not continuous\n\t */\n\t\n\tprivate void check(String modelName) throws IllegalStateException {\n\t\t"}
{"task_id": "636766f81a6d9265ec01774b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultipartStream{\n\t/** \n\t * Reads a byte from the <code>buffer</code>, and refills it as necessary.\n\t * @return The next byte from the input stream.\n\t * @throws IOException if there is no more data available.\n\t */\n\t\n\tpublic byte readByte() throws IOException {\n\t\t"}
{"task_id": "636766851a6d9265ec017515", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AtmosphereResourceLifecycleInterceptor{\n\t/** \n\t * Automatically suspend the  {@link AtmosphereResource} based on {@link AtmosphereResource.TRANSPORT} value.\n\t * @param r a {@link AtmosphereResource}\n\t * @return {@link Action#CONTINUE}\n\t */\n\t\n\t@Override public Action inspect(AtmosphereResource r){\n\t\t"}
{"task_id": "636767611a6d9265ec018106", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StoerWagnerMinimumCut{\n\t/** \n\t * Compute the sum of the weights entering a vertex\n\t * @param v the vertex\n\t * @return the sum of the weights entering a vertex\n\t */\n\t\n\tpublic double vertexWeight(Set<V> v){\n\t\t"}
{"task_id": "636767841a6d9265ec0183f2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MyTableModel{\n\t/** \n\t * @see Comparator \n\t */\n\t\n\tpublic int compare(Object aObj1,Object aObj2){\n\t\t"}
{"task_id": "636767861a6d9265ec01844c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AppenderAttachableImpl{\n\t/** \n\t * Remove the appender with the name passed as parameter form the list of appenders.  \n\t */\n\t\n\tpublic void removeAppender(String name){\n\t\t"}
{"task_id": "636767781a6d9265ec018242", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AppenderAttachableImpl{\n\t/** \n\t * Call the <code>doAppend</code> method on all attached appenders.  \n\t */\n\t\n\tpublic int appendLoopOnAppenders(LoggingEvent event){\n\t\t"}
{"task_id": "6367670c1a6d9265ec017a2a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of object Integers to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  a <code>Integer</code> array, may be <code>null</code>\n\t * @return an <code>int</code> array, <code>null</code> if null array input\n\t * @throws NullPointerException if array content is <code>null</code>\n\t */\n\t\n\tpublic static int[] toPrimitive(final Integer[] array){\n\t\t"}
{"task_id": "636767041a6d9265ec017911", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ToStringStyle{\n\t/** \n\t * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>\n\t * @param value The object to register.\n\t */\n\t\n\tstatic void register(Object value){\n\t\t"}
{"task_id": "636767511a6d9265ec017eb0", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CSRBooleanMatrix{\n\t/** \n\t * Get the number of non-zero entries of a row.\n\t * @param row the row\n\t * @return the number of non-zero entries of a row\n\t */\n\t\n\tpublic int nonZeros(int row){\n\t\t"}
{"task_id": "6367676c1a6d9265ec018223", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Collections{\n\t/** \n\t * Check whether the given Collection contains the given element instance. <p>Enforces the given instance to be present, rather than returning <code>true</code> for an equal element as well.\n\t * @param collection the Collection to check\n\t * @param element the element to look for\n\t * @return <code>true</code> if found, <code>false</code> else\n\t */\n\t\n\tpublic static boolean containsInstance(Collection collection,Object element){\n\t\t"}
{"task_id": "636766fa1a6d9265ec01779d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CharUtils{\n\t/** \n\t * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>\n\t * @param ch  the character to check\n\t * @return true if less than 32 or equals 127\n\t */\n\t\n\tpublic static boolean isAsciiControl(final char ch){\n\t\t"}
{"task_id": "6367670b1a6d9265ec0179f2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WeakFastHashMap{\n\t/** \n\t * Return <code>true</code> if this map contains a mapping for the specified key.\n\t * @param key  the key to be searched for\n\t * @return true if the map contains the key\n\t */\n\t\n\t@Override public boolean containsKey(final Object key){\n\t\t"}
{"task_id": "636766fa1a6d9265ec017796", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  a <code>boolean</code> array\n\t * @return a <code>Boolean</code> array, <code>null</code> if null array input\n\t */\n\t\n\tpublic static Boolean[] toObject(final boolean[] array){\n\t\t"}
{"task_id": "636767aa1a6d9265ec01864a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteString{\n\t/** \n\t * Copies bytes to a  {@code byte[]}.\n\t */\n\t\n\tpublic byte[] toByteArray(){\n\t\t"}
{"task_id": "636767561a6d9265ec017f7c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HamiltonianCycleAlgorithmBase{\n\t/** \n\t * Transform from a Set representation to a graph path.\n\t * @param tour a set containing the edges of the tour\n\t * @param graph the graph\n\t * @return a graph path\n\t */\n\t\n\tprotected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n\t\t"}
{"task_id": "6367670a1a6d9265ec0179f1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  a <code>short</code> array\n\t * @return a <code>Short</code> array, <code>null</code> if null array input\n\t */\n\t\n\tpublic static Short[] toObject(final short[] array){\n\t\t"}
{"task_id": "636766fe1a6d9265ec017823", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SymbolTable{\n\t/** \n\t * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.\n\t * @param name a field or method name.\n\t * @param descriptor a field or method descriptor.\n\t * @return a new or already existing Symbol with the given value.\n\t */\n\t\n\tint addConstantNameAndType(final String name,final String descriptor){\n\t\t"}
{"task_id": "636767461a6d9265ec017d17", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DOTEventDrivenImporter{\n\t/** \n\t * Unescape a string DOT identifier.\n\t * @param input the input\n\t * @return the unescaped output\n\t */\n\t\n\tprivate String unescapeId(String input){\n\t\t"}
{"task_id": "6367676c1a6d9265ec018204", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Concatenate the given String arrays into one, with overlapping array elements included twice. <p>The order of elements in the original arrays is preserved.\n\t * @param array1 the first array (can be <code>null</code>)\n\t * @param array2 the second array (can be <code>null</code>)\n\t * @return the new array (<code>null</code> if both given arrays were <code>null</code>)\n\t */\n\t\n\tpublic static String[] concatenateStringArrays(String[] array1,String[] array2){\n\t\t"}
{"task_id": "636767641a6d9265ec018190", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WeakChordalityInspector{\n\t/** \n\t * Moves all vertices from the bucket with label  {@code minLabel} to the bucket with label 0.Clears the bucket with label  {@code minLabel}. Updates the labeling accordingly.\n\t * @param bucketsByLabel the buckets vertices are stored in\n\t * @param labels the labels of the vertices\n\t * @param minLabel the minimum value of the non-empty bucket\n\t */\n\t\n\tprivate void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n\t\t"}
{"task_id": "6367676a1a6d9265ec0181d4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Append the given String to the given String array, returning a new array consisting of the input array contents plus the given String.\n\t * @param array the array to append to (can be <code>null</code>)\n\t * @param str the String to append\n\t * @return the new array (never <code>null</code>)\n\t */\n\t\n\tpublic static String[] addStringToArray(String[] array,String str){\n\t\t"}
{"task_id": "6367676b1a6d9265ec0181dd", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Returns the number of occurrences the substring  {@code sub} appears in string {@code str}.\n\t * @param str string to search in. Return 0 if this is null.\n\t * @param sub string to search for. Return 0 if this is null.\n\t * @return the number of occurrences the substring {@code sub} appears in string {@code str}.\n\t */\n\t\n\tpublic static int countOccurrencesOf(String str,String sub){\n\t\t"}
{"task_id": "636766811a6d9265ec017499", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AtmosphereFramework{\n\t/** \n\t * <p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor} implementation class.</p>\n\t * @param interceptorList the interceptors\n\t * @param c               the interceptor class\n\t * @return {@code false} if an instance of the class already exists in the list, {@code true} otherwise\n\t */\n\t\n\tprivate boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n\t\t"}
{"task_id": "636766fe1a6d9265ec017821", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ToStringStyle{\n\t/** \n\t * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>\n\t * @param buffer  the <code>StringBuffer</code> to populate\n\t * @param fieldName  the field name, typically not used as already appended\n\t * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n\t */\n\t\n\tprotected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n\t\t"}
{"task_id": "636767561a6d9265ec017f63", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LexBreadthFirstIterator{\n\t/** \n\t * Checks whether there exist unvisited vertices.\n\t * @return true if there exist unvisited vertices.\n\t */\n\t\n\t@Override public boolean hasNext(){\n\t\t"}
{"task_id": "636766a81a6d9265ec017586", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Frame{\n\t/** \n\t * Pops the given number of abstract types from the output frame stack.\n\t * @param elements the number of abstract types that must be popped.\n\t */\n\t\n\tprivate void pop(final int elements){\n\t\t"}
{"task_id": "636767e11a6d9265ec018795", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BucketedValues{\n\t/** \n\t * @return true if the bucket is same.\n\t */\n\t\n\tpublic boolean isCompatible(DataTable dataset){\n\t\t"}
{"task_id": "636767791a6d9265ec018263", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EnhancedThrowableRenderer{\n\t/** \n\t * Find class given class name.\n\t * @param className class name, may not be null.\n\t * @return class, will not be null.\n\t * @throws ClassNotFoundException thrown if class can not be found.\n\t */\n\t\n\tprivate Class findClass(final String className) throws ClassNotFoundException {\n\t\t"}
{"task_id": "636767611a6d9265ec018112", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycleDetector$ProbeIterator{\n\t/** \n\t * {@inheritDoc}\n\t */\n\t\n\t@Override protected V provideNextVertex(){\n\t\t"}
{"task_id": "636767131a6d9265ec017b23", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Label{\n\t/** \n\t * Adds a source line number corresponding to this label.\n\t * @param lineNumber a source line number (which should be strictly positive).\n\t */\n\t\n\tfinal void addLineNumber(final int lineNumber){\n\t\t"}
{"task_id": "6367675a1a6d9265ec018010", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LexBreadthFirstIterator{\n\t/** \n\t * Removes this bucket from the data structure.\n\t */\n\t\n\tvoid removeSelf(){\n\t\t"}
{"task_id": "636767dd1a6d9265ec0186f3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SQLDatabaseExtension$MultiColumnsIndex{\n\t/** \n\t * Keep the same name replacement as  {@link ColumnName#overrideName(String,String)}\n\t * @param oldName to be replaced.\n\t * @param newName to use in the storage level.\n\t */\n\t\n\tpublic void overrideName(String oldName,String newName){\n\t\t"}
{"task_id": "636767631a6d9265ec018171", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoublyLinkedList{\n\t/** \n\t * Remove the non null  {@code node} from the list. \n\t */\n\t\n\tprivate boolean unlink(ListNodeImpl<E> node){\n\t\t"}
{"task_id": "636767de1a6d9265ec018726", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProfiledBasicInfo{\n\t/** \n\t * build current profiles segment snapshot search sequence ranges\n\t */\n\t\n\tpublic List<SequenceRange> buildSequenceRanges(){\n\t\t"}
{"task_id": "6367667c1a6d9265ec0173f7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AtmosphereRequestImpl{\n\t/** \n\t * True is the body is a byte array\n\t * @return True is the body is a byte array\n\t */\n\t\n\tpublic boolean hasBytes(){\n\t\t"}
{"task_id": "6367676c1a6d9265ec018220", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Strip the filename extension from the given path, e.g. \"mypath/myfile.txt\" -&gt; \"mypath/myfile\".\n\t * @param path the file path (may be <code>null</code>)\n\t * @return the path with stripped filename extension,or <code>null</code> if none\n\t */\n\t\n\tpublic static String stripFilenameExtension(String path){\n\t\t"}
{"task_id": "636766fe1a6d9265ec017838", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of object Characters to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  a <code>Character</code> array, may be <code>null</code>\n\t * @return a <code>char</code> array, <code>null</code> if null array input\n\t * @throws NullPointerException if array content is <code>null</code>\n\t */\n\t\n\tpublic static char[] toPrimitive(final Character[] array){\n\t\t"}
{"task_id": "636766fa1a6d9265ec01779c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParameterParser{\n\t/** \n\t * Parses out a token until any of the given terminators is encountered.\n\t * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n\t * @return the token\n\t */\n\t\n\tprivate String parseToken(final char[] terminators){\n\t\t"}
{"task_id": "636767691a6d9265ec0181a7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Trim all occurrences of the supplied leading character from the given String.\n\t * @param str the String to check\n\t * @param leadingCharacter the leading character to be trimmed\n\t * @return the trimmed String\n\t */\n\t\n\tpublic static String trimLeadingCharacter(String str,char leadingCharacter){\n\t\t"}
{"task_id": "636767041a6d9265ec01790f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of primitive ints to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  an <code>int</code> array\n\t * @return an <code>Integer</code> array, <code>null</code> if null array input\n\t */\n\t\n\tpublic static Integer[] toObject(final int[] array){\n\t\t"}
{"task_id": "636766fa1a6d9265ec0177a4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  a <code>double</code> array\n\t * @return a <code>Double</code> array, <code>null</code> if null array input\n\t */\n\t\n\tpublic static Double[] toObject(final double[] array){\n\t\t"}
{"task_id": "636767461a6d9265ec017d0e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Distributor{\n\t/** \n\t * Computes a suffix sum of the  {@code bounds}. Returns computed suffix sum and the sum of all elements in the  {@code bounds list}.\n\t * @param bounds list of integers.\n\t * @return computed pair of suffix sum list and a sum of all elements.\n\t */\n\t\n\tprivate Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n\t\t"}
{"task_id": "636767491a6d9265ec017d90", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtil{\n\t/** \n\t * Reverses the order of the elements in the specified range within the given array.\n\t * @param < V > the type of elements in the array\n\t * @param arr the array\n\t * @param from the index of the first element (inclusive) inside the range to reverse\n\t * @param to the index of the last element (inclusive) inside the range to reverse\n\t */\n\t\n\tpublic static final <V>void reverse(V[] arr,int from,int to){\n\t\t"}
{"task_id": "6367674a1a6d9265ec017da9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoublyLinkedList{\n\t/** \n\t * Atomically moves all  {@link ListNode ListNodes} from {@code list} to this list as if eachnode was removed with  {@link #removeListNode(ListNodeImpl)} from {@code list} andsubsequently added to this list by  {@link #addListNode(ListNodeImpl)}.\n\t */\n\t\n\tprivate void moveAllListNodes(DoublyLinkedList<E> list){\n\t\t"}
{"task_id": "636767151a6d9265ec017b6b", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUtils{\n\t/** \n\t * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n\t * @see String#startsWith(String)\n\t * @param str  the String to check, may be null\n\t * @param prefix the prefix to find, may be null\n\t * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n\t * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n\t */\n\t\n\tprivate static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n\t\t"}
{"task_id": "636766fe1a6d9265ec01781c", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CharUtils{\n\t/** \n\t * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>\n\t * @param ch  the character to convert\n\t * @return a Character of the specified character\n\t */\n\t\n\tpublic static Character toCharacterObject(final char ch){\n\t\t"}
{"task_id": "636766fb1a6d9265ec0177c1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CharUtils{\n\t/** \n\t * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>\n\t * @param ch  the character to check\n\t * @return true if between 65 and 90 inclusive\n\t */\n\t\n\tpublic static boolean isAsciiAlphaUpper(final char ch){\n\t\t"}
{"task_id": "636767781a6d9265ec018250", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringMatchFilter{\n\t/** \n\t * Returns  {@link Filter#NEUTRAL} is there is no string match.\n\t */\n\t\n\tpublic int decide(LoggingEvent event){\n\t\t"}
{"task_id": "636766861a6d9265ec017553", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UriTemplate{\n\t/** \n\t * Ascertain if a template variable is a member of this template.\n\t * @param name name The template variable.\n\t * @return true if the template variable is a member of the template, otherwisefalse.\n\t */\n\t\n\tpublic final boolean isTemplateVariablePresent(String name){\n\t\t"}
{"task_id": "636767071a6d9265ec017962", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BeanMap{\n\t/** \n\t * Puts all of the writable properties from the given BeanMap into this BeanMap. Read-only and Write-only properties will be ignored.\n\t * @param map  the BeanMap whose properties to put\n\t */\n\t\n\tpublic void putAllWriteable(BeanMap map){\n\t\t"}
{"task_id": "6367670a1a6d9265ec0179d9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUtils{\n\t/** \n\t * Gets a String's length or <code>0</code> if the String is <code>null</code>.\n\t * @param str a String or <code>null</code>\n\t * @return String length or <code>0</code> if the String is <code>null</code>.\n\t * @since 2.4\n\t */\n\t\n\tpublic static int length(final String str){\n\t\t"}
{"task_id": "636767ab1a6d9265ec018676", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextFormat{\n\t/** \n\t * Is this a hex digit?\n\t */\n\t\n\tprivate static boolean isHex(final char c){\n\t\t"}
{"task_id": "636766f81a6d9265ec017748", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CommonCodeUtils{\n\t/** \n\t * Decoding a string to a string follow the Base64 regular. \n\t */\n\t\n\tpublic static String base64Decode(final String s){\n\t\t"}
{"task_id": "636766f11a6d9265ec017663", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n\t * @param array1 the first array, may be <code>null</code>\n\t * @param array2 the second array, may be <code>null</code>\n\t * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n\t */\n\t\n\tpublic static boolean isSameLength(final double[] array1,final double[] array2){\n\t\t"}
{"task_id": "6367667d1a6d9265ec0173ff", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Meteor{\n\t/** \n\t * Retrieve an instance of  {@link Meteor} based on the {@link HttpServletRequest}.\n\t * @param r {@link HttpServletRequest}\n\t * @return a {@link Meteor} or null if not found\n\t */\n\t\n\tpublic static Meteor lookup(HttpServletRequest r){\n\t\t"}
{"task_id": "636767691a6d9265ec0181a6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Split a String at the first occurrence of the delimiter. Does not include the delimiter in the result.\n\t * @param toSplit the string to split\n\t * @param delimiter to split the string up with\n\t * @return a two element array with index 0 being before the delimiter, andindex 1 being after the delimiter (neither element includes the delimiter); or <code>null</code> if the delimiter wasn't found in the given input String\n\t */\n\t\n\tpublic static String[] split(String toSplit,String delimiter){\n\t\t"}
{"task_id": "636767601a6d9265ec0180e2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WeakChordalityInspector{\n\t/** \n\t * Computes the global separator list of the  {@code graph}. More precisely, for every edge $e$ in the $G = (V, E)$ computes list of minimal separators $S_e$ in the neighborhood of $e$ and then concatenates these lists. Note: the result may contain duplicates\n\t * @return the list of minimal separators of every edge $e$ in the inspected graph\n\t */\n\t\n\tprivate List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n\t\t"}
{"task_id": "636766f31a6d9265ec01768f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ArrayUtils{\n\t/** \n\t * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n\t * @param array  the array to clone, may be <code>null</code>\n\t * @return the cloned array, <code>null</code> if <code>null</code> input\n\t */\n\t\n\tpublic static char[] clone(final char[] array){\n\t\t"}
{"task_id": "636766831a6d9265ec0174eb", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileIterator{\n\t/** \n\t * Add the specified files in reverse order.\n\t */\n\t\n\tprivate void addReverse(final File[] files){\n\t\t"}
{"task_id": "636767841a6d9265ec0183ff", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LF5SwingUtils{\n\t/** \n\t * Selects a the specified row in the specified JTable and scrolls the specified JScrollpane to the newly selected row. More importantly, the call to repaint() delayed long enough to have the table properly paint the newly selected row which may be offscre\n\t * @param table should belong to the specified JScrollPane\n\t */\n\t\n\tpublic static void selectRow(int row,JTable table,JScrollPane pane){\n\t\t"}
{"task_id": "636766a81a6d9265ec017596", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteVector{\n\t/** \n\t * Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n\t * @param intValue an int.\n\t * @return this byte vector.\n\t */\n\t\n\tpublic ByteVector putInt(final int intValue){\n\t\t"}
{"task_id": "636766fd1a6d9265ec017814", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultipartStream{\n\t/** \n\t * Compares <code>count</code> first bytes in the arrays <code>a</code> and <code>b</code>.\n\t * @param a     The first array to compare.\n\t * @param b     The second array to compare.\n\t * @param count How many bytes should be compared.\n\t * @return <code>true</code> if <code>count</code> first bytes in arrays<code>a</code> and <code>b</code> are equal.\n\t */\n\t\n\tpublic static boolean arrayequals(byte[] a,byte[] b,int count){\n\t\t"}
{"task_id": "636767861a6d9265ec018440", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NameAbbreviator$DropElementAbbreviator{\n\t/** \n\t * Abbreviate name.\n\t * @param buf buffer to append abbreviation.\n\t * @param nameStart start of name to abbreviate.\n\t */\n\t\n\tpublic void abbreviate(final int nameStart,final StringBuffer buf){\n\t\t"}
{"task_id": "6367667d1a6d9265ec01741d", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TypeResolver{\n\t/** \n\t * Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved.\n\t */\n\t\n\tpublic static Type resolveBound(TypeVariable<?> typeVariable){\n\t\t"}
{"task_id": "6367675f1a6d9265ec0180cf", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CliqueMinimalSeparatorDecomposition{\n\t/** \n\t * Check whether the subgraph of <code>graph</code> induced by the given <code>vertices</code> is complete, i.e. a clique.\n\t * @param graph the graph.\n\t * @param vertices the vertices to induce the subgraph from.\n\t * @return true if the induced subgraph is a clique.\n\t */\n\t\n\tprivate static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n\t\t"}
{"task_id": "636767431a6d9265ec017c88", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Distributor{\n\t/** \n\t * Finds a maximum lower bound for every key.\n\t * @param keys list of keys.\n\t * @return the computed key lower bounds.\n\t */\n\t\n\tprivate List<Integer> computeLowerBounds(List<K> keys){\n\t\t"}
{"task_id": "636766a91a6d9265ec0175c4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Frame{\n\t/** \n\t * Pops as many abstract types from the output frame stack as described by the given descriptor.\n\t * @param descriptor a type or method descriptor (in which case its argument types are popped).\n\t */\n\t\n\tprivate void pop(final String descriptor){\n\t\t"}
{"task_id": "636766fb1a6d9265ec0177c3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CharUtils{\n\t/** \n\t * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\\n') = true CharUtils.isAscii('&copy;') = false </pre>\n\t * @param ch  the character to check\n\t * @return true if less than 128\n\t */\n\t\n\tpublic static boolean isAscii(final char ch){\n\t\t"}
{"task_id": "636767581a6d9265ec017fb4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Distributor{\n\t/** \n\t * Finds a minimum lower bound for every key.\n\t * @param keys a list of keys.\n\t * @return the computed key upper bound.\n\t */\n\t\n\tprivate List<Integer> computeUpperBounds(List<K> keys){\n\t\t"}
{"task_id": "636766801a6d9265ec017487", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UriComponent{\n\t/** \n\t * Encodes a string with template parameters names present, specifically the characters '{' and '}' will be percent-encoded.\n\t * @param s the string with zero or more template parameters names\n\t * @return the string with encoded template parameters names.\n\t */\n\t\n\tpublic static String encodeTemplateNames(String s){\n\t\t"}
{"task_id": "636767531a6d9265ec017ef1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Points{\n\t/** \n\t * Compare two points for equality using tolerance 1e-9.\n\t * @param p1 the first point\n\t * @param p2 the second point\n\t * @return whether the two points are equal or not\n\t */\n\t\n\tpublic static boolean equals(Point2D p1,Point2D p2){\n\t\t"}
{"task_id": "6367667c1a6d9265ec0173fb", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AtmosphereResourceImpl{\n\t/** \n\t * Add a  {@link AtmosphereResourceEventListener}.\n\t * @param e an instance of AtmosphereResourceEventListener\n\t */\n\t\n\t@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n\t\t"}
{"task_id": "636767691a6d9265ec0181ac", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Apply the given relative path to the given path, assuming standard Java folder separation (i.e. \"/\" separators).\n\t * @param path the path to start from (usually a full file path)\n\t * @param relativePath the relative path to apply(relative to the full file path above)\n\t * @return the full file path that results from applying the relative path\n\t */\n\t\n\tpublic static String applyRelativePath(String path,String relativePath){\n\t\t"}
{"task_id": "636767021a6d9265ec0178bc", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringUdfSource{\n\t/** \n\t * Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}. \n\t */\n\t\n\tpublic static int indexOf(String str,String searchStr){\n\t\t"}
{"task_id": "636766fc1a6d9265ec0177ef", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReflectionToStringBuilder{\n\t/** \n\t * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException}if an array element is <code>null</code>.\n\t * @param array The array to check\n\t * @return The given array or a new array without null.\n\t */\n\t\n\tstatic String[] toNoNullStringArray(Object[] array){\n\t\t"}
{"task_id": "636767061a6d9265ec01794a", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilenameUtils{\n\t/** \n\t * Returns the index of the last extension separator character, which is a dot. <p> This method also checks that there is no directory separator after the last dot. To do this it uses  {@link #indexOfLastSeparator(String)} which willhandle a file in either Unix or Windows format. <p> The output will be the same irrespective of the machine that the code is running on.\n\t * @param filename  the filename to find the last path separator in, null returns -1\n\t * @return the index of the last separator character, or -1 if thereis no such character\n\t */\n\t\n\tpublic static int indexOfExtension(String filename){\n\t\t"}
{"task_id": "636767dd1a6d9265ec0186de", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Metrics{\n\t/** \n\t * @param timestamp        of current time\n\t * @param expiredThreshold represents the duration between last update time and the time point removing from cache.\n\t * @return true means this metrics should be removed from cache.\n\t */\n\t\n\tpublic boolean isExpired(long timestamp,long expiredThreshold){\n\t\t"}
{"task_id": "6367675d1a6d9265ec018082", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BoyerMyrvoldPlanarityInspector$OuterFaceCirculator{\n\t/** \n\t * Returns an edge connecting previously returned node with node, which will be returned next. If either of the mentioned nodes is virtual, the edge will be incident to its real counterpart.\n\t * @return an edge from the current node to the next node\n\t */\n\t\n\tEdge edgeToNext(){\n\t\t"}
{"task_id": "6367676b1a6d9265ec0181e9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strings{\n\t/** \n\t * Returns  {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n\t * @param str the original string (or StringBuilder)\n\t * @param index the index in the original string to start matching against\n\t * @param substring the substring to match at the given index\n\t * @return {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n\t */\n\t\n\tpublic static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n\t\t"}
{"task_id": "636767781a6d9265ec01823e", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TelnetAppender{\n\t/** \n\t * Handles a log event.  For this appender, that means writing the message to each connected client.  \n\t */\n\t\n\tprotected void append(LoggingEvent event){\n\t\t"}
{"task_id": "6367670b1a6d9265ec017a05", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CharUtils{\n\t/** \n\t * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = \" \" CharUtils.toString('A')  = \"A\" </pre>\n\t * @param ch  the character to convert\n\t * @return a String containing the one specified character\n\t */\n\t\n\tpublic static String toString(final char ch){\n\t\t"}
{"task_id": "636767a31a6d9265ec01854f", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CodedInput{\n\t/** \n\t * Check if this field have been packed into a length-delimited field. If so, update internal state to reflect that packed fields are being read.\n\t * @throws IOException\n\t */\n\t\n\tprivate void checkIfPackedField() throws IOException {\n\t\t"}
{"task_id": "636767a81a6d9265ec0185fc", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteBufferInput{\n\t/** \n\t * Attempt to read a field tag, returning zero if we have reached EOF. Protocol message parsers use this to read tags, since a protocol message may legally end wherever a tag occurs, and zero is not a valid tag number.\n\t */\n\t\n\tpublic int readTag() throws IOException {\n\t\t"}
{"task_id": "636766a81a6d9265ec017595", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByteVector{\n\t/** \n\t * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n\t * @param byteValue1 a byte.\n\t * @param byteValue2 another byte.\n\t * @return this byte vector.\n\t */\n\t\n\tfinal ByteVector put11(final int byteValue1,final int byteValue2){\n\t\t"}
{"task_id": "636766ae1a6d9265ec0175d8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PaginationHelper{\n\t/** \n\t * Build the 'Content-Range' HTTP Header value.\n\t * @return 'Content-Range' value\n\t */\n\t\n\tprivate String buildContentRange(){\n\t\t"}
{"task_id": "636767e11a6d9265ec018790", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProfileSnapshotDumper{\n\t/** \n\t * load thread snapshots in appointing time range\n\t */\n\t\n\tpublic static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n\t\t"}
